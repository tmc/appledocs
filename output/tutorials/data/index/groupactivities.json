{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "title": "Activity definition",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/defining-your-apps-shareplay-activities",
            "title": "Defining your app’s SharePlay activities",
            "type": "article"
          },
          {
            "external": true,
            "path": "/documentation/avfoundation/supporting-coordinated-media-playback",
            "title": "Supporting Coordinated Media Playback",
            "type": "sampleCode"
          },
          {
            "title": "Interface presentation",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/promoting-shareplay-activities-from-your-apps-ui",
            "title": "Presenting SharePlay activities from your app’s UI",
            "type": "article"
          },
          {
            "title": "Session management",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/joining-and-managing-a-shared-activity",
            "title": "Joining and managing a shared activity",
            "type": "article"
          },
          {
            "title": "Spatial activities",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/adding-spatial-persona-support-to-an-activity",
            "title": "Adding spatial Persona support to an activity",
            "type": "article"
          },
          {
            "title": "Custom spatial templates",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/building-a-guessing-game-for-visionos",
            "title": "Building a guessing game for visionOS",
            "type": "sampleCode"
          },
          {
            "title": "File and data transfer",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/synchronizing-data-during-a-shareplay-activity",
            "title": "Synchronizing data during a SharePlay activity",
            "type": "article"
          },
          {
            "title": "System status",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/groupactivities",
        "title": "Group Activities",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/bundleresources/entitlements/com.apple.developer.group-session",
            "title": "com.apple.developer.group-session",
            "type": "typealias"
          },
          {
            "title": "Activity definition",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/defining-your-apps-shareplay-activities",
            "title": "Defining your app’s SharePlay activities",
            "type": "article"
          },
          {
            "external": true,
            "path": "/documentation/avfoundation/supporting-coordinated-media-playback",
            "title": "Supporting Coordinated Media Playback",
            "type": "sampleCode"
          },
          {
            "title": "Interface presentation",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/promoting-shareplay-activities-from-your-apps-ui",
            "title": "Presenting SharePlay activities from your app’s UI",
            "type": "article"
          },
          {
            "title": "Session management",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/joining-and-managing-a-shared-activity",
            "title": "Joining and managing a shared activity",
            "type": "article"
          },
          {
            "title": "Spatial activities",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/adding-spatial-persona-support-to-an-activity",
            "title": "Adding spatial Persona support to an activity",
            "type": "article"
          },
          {
            "title": "Custom spatial templates",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/building-a-guessing-game-for-visionos",
            "title": "Building a guessing game for visionOS",
            "type": "sampleCode"
          },
          {
            "title": "File and data transfer",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/synchronizing-data-during-a-shareplay-activity",
            "title": "Synchronizing data during a SharePlay activity",
            "type": "article"
          },
          {
            "title": "System status",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/groupactivities",
        "title": "Group Activities",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/bundleresources/entitlements/com.apple.developer.group-session",
            "title": "com.apple.developer.group-session",
            "type": "typealias"
          },
          {
            "title": "Activity definition",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/defining-your-apps-shareplay-activities",
            "title": "Defining your app’s SharePlay activities",
            "type": "article"
          },
          {
            "external": true,
            "path": "/documentation/avfoundation/supporting-coordinated-media-playback",
            "title": "Supporting Coordinated Media Playback",
            "type": "sampleCode"
          },
          {
            "children": [
              {
                "title": "Specifying the activity details",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivity/activityidentifier",
                "title": "static var activityIdentifier: String",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupactivity/metadata",
                "title": "var metadata: GroupActivityMetadata",
                "type": "property"
              },
              {
                "title": "Starting an activity immediately",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivity/prepareforactivation()",
                "title": "func prepareForActivation() async -> GroupActivityActivationResult",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the activation results",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivityactivationresult/activationpreferred",
                    "title": "case activationPreferred",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivityactivationresult/activationdisabled",
                    "title": "case activationDisabled",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivityactivationresult/cancelled",
                    "title": "case cancelled",
                    "type": "case"
                  },
                  {
                    "title": "Comparing reliability options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivityactivationresult/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivityactivationresult/==(_:_:)",
                    "title": "static func == (GroupActivityActivationResult, GroupActivityActivationResult) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivityactivationresult/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivityactivationresult/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupactivityactivationresult/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupactivityactivationresult/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/groupactivityactivationresult",
                "title": "GroupActivityActivationResult",
                "type": "enum"
              },
              {
                "path": "/documentation/groupactivities/groupactivity/activate()",
                "title": "func activate() async throws -> Bool",
                "type": "method"
              },
              {
                "title": "Receiving an activity-related session",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivity/sessions()",
                "title": "static func sessions() -> Self.Sessions",
                "type": "method"
              },
              {
                "path": "/documentation/groupactivities/groupactivity/sessions",
                "title": "GroupActivity.Sessions",
                "type": "typealias"
              },
              {
                "title": "Transferring data types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivity/transferrepresentation",
                "title": "static var transferRepresentation: some TransferRepresentation",
                "type": "property"
              }
            ],
            "path": "/documentation/groupactivities/groupactivity",
            "title": "GroupActivity",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating group activity metadata",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Presenting the activity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/title",
                "title": "var title: String?",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/subtitle",
                "title": "var subtitle: String?",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/previewimage",
                "title": "var previewImage: CGImage?",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/fallbackurl",
                "title": "var fallbackURL: URL?",
                "type": "property"
              },
              {
                "title": "Indicating the activity’s type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/type",
                "title": "var type: GroupActivityMetadata.ActivityType",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting the Activity Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/generic",
                    "title": "static let generic: GroupActivityMetadata.ActivityType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/listentogether",
                    "title": "static let listenTogether: GroupActivityMetadata.ActivityType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/watchtogether",
                    "title": "static let watchTogether: GroupActivityMetadata.ActivityType",
                    "type": "property"
                  },
                  {
                    "title": "Comparing Activity Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/==(_:_:)",
                    "title": "static func == (GroupActivityMetadata.ActivityType, GroupActivityMetadata.ActivityType) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/createtogether",
                    "title": "static let createTogether: GroupActivityMetadata.ActivityType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/exploretogether",
                    "title": "static let exploreTogether: GroupActivityMetadata.ActivityType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/learntogether",
                    "title": "static let learnTogether: GroupActivityMetadata.ActivityType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/readtogether",
                    "title": "static let readTogether: GroupActivityMetadata.ActivityType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/shoptogether",
                    "title": "static let shopTogether: GroupActivityMetadata.ActivityType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/workouttogether",
                    "title": "static let workoutTogether: GroupActivityMetadata.ActivityType",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupactivitymetadata/activitytype/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/groupactivitymetadata/activitytype",
                "title": "GroupActivityMetadata.ActivityType",
                "type": "struct"
              },
              {
                "title": "Assigning an app-specific scene",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/sceneassociationbehavior",
                "title": "var sceneAssociationBehavior: SceneAssociationBehavior",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting the scene-association options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/sceneassociationbehavior/default",
                    "title": "static let `default`: SceneAssociationBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/sceneassociationbehavior/content(_:)",
                    "title": "static func content(String) -> SceneAssociationBehavior",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/sceneassociationbehavior/none",
                    "title": "static let none: SceneAssociationBehavior",
                    "type": "property"
                  },
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/sceneassociationbehavior/==(_:_:)",
                    "title": "static func == (SceneAssociationBehavior, SceneAssociationBehavior) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/sceneassociationbehavior/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/sceneassociationbehavior/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/sceneassociationbehavior",
                "title": "SceneAssociationBehavior",
                "type": "struct"
              },
              {
                "title": "Specifying media-related behavior",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/supportscontinuationontv",
                "title": "var supportsContinuationOnTV: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/preferredbroadcastoptions",
                "title": "var preferredBroadcastOptions: BroadcastOptions",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting the broadcast options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/broadcastoptions/mirroredvideo",
                    "title": "static let mirroredVideo: BroadcastOptions",
                    "type": "property"
                  },
                  {
                    "title": "Creating options from a raw value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/broadcastoptions/init(rawvalue:)",
                    "title": "init(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/groupactivities/broadcastoptions/rawvalue-swift.property",
                    "title": "let rawValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/broadcastoptions/arrayliteralelement",
                    "title": "BroadcastOptions.ArrayLiteralElement",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/groupactivities/broadcastoptions/element",
                    "title": "BroadcastOptions.Element",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/groupactivities/broadcastoptions/rawvalue-swift.typealias",
                    "title": "BroadcastOptions.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/broadcastoptions/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/groupactivities/broadcastoptions/optionset-implementations",
                    "title": "OptionSet Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/broadcastoptions/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/groupactivities/broadcastoptions/setalgebra-implementations",
                    "title": "SetAlgebra Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/broadcastoptions",
                "title": "BroadcastOptions",
                "type": "struct"
              },
              {
                "title": "Comparing metadata objects",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/==(_:_:)",
                "title": "static func == (GroupActivityMetadata, GroupActivityMetadata) -> Bool",
                "type": "op"
              },
              {
                "title": "Encoding the metadata",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/lifetimepolicy-swift.struct/==(_:_:)",
                    "title": "static func == (GroupActivityMetadata.LifetimePolicy, GroupActivityMetadata.LifetimePolicy) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/lifetimepolicy-swift.struct/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/lifetimepolicy-swift.struct/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/lifetimepolicy-swift.struct/automatic",
                    "title": "static let automatic: GroupActivityMetadata.LifetimePolicy",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/lifetimepolicy-swift.struct/endswheninitiatorleaves",
                    "title": "static let endsWhenInitiatorLeaves: GroupActivityMetadata.LifetimePolicy",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupactivitymetadata/lifetimepolicy-swift.struct/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupactivitymetadata/lifetimepolicy-swift.struct/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/groupactivitymetadata/lifetimepolicy-swift.struct",
                "title": "GroupActivityMetadata.LifetimePolicy",
                "type": "struct"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.property",
                "title": "var experience: GroupActivityMetadata.Experience?",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/lifetimepolicy-swift.property",
                "title": "var lifetimePolicy: GroupActivityMetadata.LifetimePolicy",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/localizedsubtitle",
                "title": "var localizedSubtitle: String?",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupactivitymetadata/localizedtitle",
                "title": "var localizedTitle: String?",
                "type": "property"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum/listentogether",
                    "title": "case listenTogether",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum/watchtogether",
                    "title": "case watchTogether",
                    "type": "case"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum/init(rawvalue:)",
                    "title": "init?(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum/rawvalue-swift.property",
                    "title": "var rawValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum/rawvalue-swift.typealias",
                    "title": "GroupActivityMetadata.Experience.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/groupactivitymetadata/experience-swift.enum",
                "title": "GroupActivityMetadata.Experience",
                "type": "enum"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/groupactivities/groupactivitymetadata/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/groupactivities/groupactivitymetadata/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitymetadata/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/groupactivities/groupactivitymetadata/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/groupactivities/groupactivitymetadata",
            "title": "GroupActivityMetadata",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting the activation results",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivityactivationresult/activationpreferred",
                "title": "case activationPreferred",
                "type": "case"
              },
              {
                "path": "/documentation/groupactivities/groupactivityactivationresult/activationdisabled",
                "title": "case activationDisabled",
                "type": "case"
              },
              {
                "path": "/documentation/groupactivities/groupactivityactivationresult/cancelled",
                "title": "case cancelled",
                "type": "case"
              },
              {
                "title": "Comparing reliability options",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivityactivationresult/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/groupactivities/groupactivityactivationresult/==(_:_:)",
                "title": "static func == (GroupActivityActivationResult, GroupActivityActivationResult) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivityactivationresult/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivityactivationresult/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivityactivationresult/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/groupactivities/groupactivityactivationresult/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/groupactivities/groupactivityactivationresult",
            "title": "GroupActivityActivationResult",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitytransferrepresentation/init(exporting:)",
                "title": "init<ActivityType>(exporting: (Item) async throws -> ActivityType)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitytransferrepresentation/body-swift.property",
                "title": "var body: some TransferRepresentation",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitytransferrepresentation/body-swift.typealias",
                "title": "GroupActivityTransferRepresentation.Body",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitytransferrepresentation/exportingcondition(_:)",
                    "title": "func exportingCondition((Self.Item) -> Bool) -> _ConditionalTransferRepresentation<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitytransferrepresentation/suggestedfilename(_:)-1290n",
                    "title": "func suggestedFileName((Self.Item) -> String?) -> some TransferRepresentation<Self.Item>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitytransferrepresentation/suggestedfilename(_:)-7r3h",
                    "title": "func suggestedFileName(String) -> some TransferRepresentation<Self.Item>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitytransferrepresentation/visibility(_:)",
                    "title": "func visibility(TransferRepresentationVisibility) -> some TransferRepresentation<Self.Item>\n",
                    "type": "method"
                  }
                ],
                "path": "/documentation/groupactivities/groupactivitytransferrepresentation/transferrepresentation-implementations",
                "title": "TransferRepresentation Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/groupactivities/groupactivitytransferrepresentation",
            "title": "GroupActivityTransferRepresentation",
            "type": "struct"
          },
          {
            "title": "Interface presentation",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/promoting-shareplay-activities-from-your-apps-ui",
            "title": "Presenting SharePlay activities from your app’s UI",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Creating the group activity sharing controller",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitysharingcontroller-4gtfk/init(_:)",
                "title": "init<ActivityType>(ActivityType) throws",
                "type": "init"
              },
              {
                "path": "/documentation/groupactivities/groupactivitysharingcontroller-4gtfk/init(preparationhandler:)",
                "title": "init<ActivityType>(preparationHandler: () async throws -> ActivityType)",
                "type": "init"
              },
              {
                "title": "Getting the result",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitysharingcontroller-4gtfk/result",
                "title": "var result: GroupActivitySharingResult",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitysharingresult-1gln2/==(_:_:)",
                    "title": "static func == (GroupActivitySharingResult, GroupActivitySharingResult) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitysharingresult-1gln2/cancelled",
                    "title": "case cancelled",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitysharingresult-1gln2/success",
                    "title": "case success",
                    "type": "case"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitysharingresult-1gln2/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitysharingresult-1gln2/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupactivitysharingresult-1gln2/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupactivitysharingresult-1gln2/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/groupactivitysharingresult-1gln2",
                "title": "GroupActivitySharingResult",
                "type": "enum"
              },
              {
                "title": "Responding to view-related events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitysharingcontroller-4gtfk/viewdidload()",
                "title": "func viewDidLoad()",
                "type": "method"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitysharingcontroller-4gtfk/loadview()",
                "title": "func loadView()",
                "type": "method"
              },
              {
                "path": "/documentation/groupactivities/groupactivitysharingcontroller-4gtfk/viewwillappear()",
                "title": "func viewWillAppear()",
                "type": "method"
              }
            ],
            "path": "/documentation/groupactivities/groupactivitysharingcontroller-4gtfk",
            "title": "GroupActivitySharingController",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating the group activity sharing controller",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitysharingcontroller-ybcy/init(_:)",
                "title": "init<ActivityType>(ActivityType) throws",
                "type": "init"
              },
              {
                "path": "/documentation/groupactivities/groupactivitysharingcontroller-ybcy/init(preparationhandler:)",
                "title": "init<ActivityType>(preparationHandler: () async throws -> ActivityType)",
                "type": "init"
              },
              {
                "title": "Getting the result",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitysharingcontroller-ybcy/result",
                "title": "var result: GroupActivitySharingResult",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting the result",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitysharingresult-2ijfu/success",
                    "title": "case success",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitysharingresult-2ijfu/cancelled",
                    "title": "case cancelled",
                    "type": "case"
                  },
                  {
                    "title": "Comparing results",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitysharingresult-2ijfu/==(_:_:)",
                    "title": "static func == (GroupActivitySharingResult, GroupActivitySharingResult) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Getting the hash value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitysharingresult-2ijfu/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupactivitysharingresult-2ijfu/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupactivitysharingresult-2ijfu/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupactivitysharingresult-2ijfu/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/groupactivitysharingresult-2ijfu",
                "title": "GroupActivitySharingResult",
                "type": "enum"
              },
              {
                "title": "Responding to view-related events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitysharingcontroller-ybcy/viewdidload()",
                "title": "func viewDidLoad()",
                "type": "method"
              },
              {
                "path": "/documentation/groupactivities/groupactivitysharingcontroller-ybcy/viewwillappear(_:)",
                "title": "func viewWillAppear(Bool)",
                "type": "method"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupactivitysharingcontroller-ybcy/modalpresentationstyle",
                "title": "var modalPresentationStyle: UIModalPresentationStyle",
                "type": "property"
              }
            ],
            "path": "/documentation/groupactivities/groupactivitysharingcontroller-ybcy",
            "title": "GroupActivitySharingController",
            "type": "class"
          },
          {
            "title": "Session management",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/joining-and-managing-a-shared-activity",
            "title": "Joining and managing a shared activity",
            "type": "article"
          },
          {
            "path": "/documentation/groupactivities/drawing_content_in_a_group_session",
            "title": "Drawing content in a group session",
            "type": "sampleCode"
          },
          {
            "children": [
              {
                "title": "Getting the current session",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating an iterator",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/makeasynciterator()",
                    "title": "func makeAsyncIterator() -> GroupSession<ActivityType>.Sessions.Iterator",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/iterator/next()",
                        "title": "func next() async -> GroupSession<ActivityType>?",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/iterator/element",
                        "title": "GroupSession.Sessions.Iterator.Element",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/groupactivities/groupsession/sessions/iterator/next()-22m19",
                            "title": "func next() async throws(Self.Failure) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/groupactivities/groupsession/sessions/iterator/next(isolation:)",
                            "title": "func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/groupactivities/groupsession/sessions/iterator/asynciteratorprotocol-implementations",
                        "title": "AsyncIteratorProtocol Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupsession/sessions/iterator",
                    "title": "GroupSession.Sessions.Iterator",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/element",
                    "title": "GroupSession.Sessions.Element",
                    "type": "typealias"
                  },
                  {
                    "title": "Finding elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/contains(where:)",
                    "title": "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/first(where:)",
                    "title": "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "title": "Selecting elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/prefix(_:)",
                    "title": "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type": "method"
                  },
                  {
                    "title": "Excluding elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/drop(while:)",
                    "title": "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/filter(_:)",
                    "title": "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type": "method"
                  },
                  {
                    "title": "Transforming a sequence",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/sessions/asynciterator",
                    "title": "GroupSession.Sessions.AsyncIterator",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/compactmap(_:)-8cij7",
                        "title": "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/compactmap(_:)-8vv5m",
                        "title": "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/contains(where:)",
                        "title": "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/drop(while:)",
                        "title": "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/filter(_:)",
                        "title": "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/first(where:)",
                        "title": "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/flatmap(_:)-3t8hg",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/flatmap(_:)-6zwvi",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/flatmap(_:)-9jozy",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/flatmap(_:)-9xtqz",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/map(_:)-6miof",
                        "title": "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/map(_:)-7zazs",
                        "title": "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/prefix(_:)",
                        "title": "func prefix(Int) -> AsyncPrefixSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/sessions/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupsession/sessions/asyncsequence-implementations",
                    "title": "AsyncSequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/groupsession/sessions",
                "title": "GroupSession.Sessions",
                "type": "struct"
              },
              {
                "title": "Joining and leaving the session",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsession/join()",
                "title": "func join()",
                "type": "method"
              },
              {
                "path": "/documentation/groupactivities/groupsession/leave()",
                "title": "func leave()",
                "type": "method"
              },
              {
                "path": "/documentation/groupactivities/groupsession/end()",
                "title": "func end()",
                "type": "method"
              },
              {
                "title": "Accessing the shared activity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsession/activity",
                "title": "var activity: ActivityType",
                "type": "property"
              },
              {
                "title": "Getting the session details",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsession/state-swift.property",
                "title": "var state: GroupSession<ActivityType>.State",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Session states",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/state-swift.enum/waiting",
                    "title": "case waiting",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/state-swift.enum/joined",
                    "title": "case joined",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/state-swift.enum/invalidated(reason:)",
                    "title": "case invalidated(reason: any Error)",
                    "type": "case"
                  },
                  {
                    "title": "Comparing states",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/state-swift.enum/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/state-swift.enum/==(_:_:)",
                    "title": "static func == (GroupSession<ActivityType>.State, GroupSession<ActivityType>.State) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/state-swift.enum/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsession/state-swift.enum/==(_:_:)",
                        "title": "static func == (GroupSession<ActivityType>.State, GroupSession<ActivityType>.State) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupsession/state-swift.enum/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/groupsession/state-swift.enum",
                "title": "GroupSession.State",
                "type": "enum"
              },
              {
                "path": "/documentation/groupactivities/groupsession/id",
                "title": "let id: UUID",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupsession/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "title": "Getting the participants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsession/localparticipant",
                "title": "var localParticipant: Participant",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupsession/activeparticipants",
                "title": "var activeParticipants: Set<Participant>",
                "type": "property"
              },
              {
                "title": "Getting the scene-association identifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsession/scenesessionidentifier",
                "title": "var sceneSessionIdentifier: String?",
                "type": "property"
              },
              {
                "title": "Getting the participant’s attention",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsession/requestforegroundpresentation()",
                "title": "func requestForegroundPresentation()",
                "type": "method"
              },
              {
                "title": "Notifying participants of playback changes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsession/shownotice(_:)",
                "title": "func showNotice(GroupSessionEvent)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a group session event",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionevent/init(originator:action:url:)",
                    "title": "init(originator: Participant, action: GroupSessionEvent.Action, url: URL?)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the event details",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionevent/originator",
                    "title": "let originator: Participant",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionevent/url",
                    "title": "let url: URL?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionevent/action-swift.property",
                    "title": "let action: GroupSessionEvent.Action",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting playback-related actions",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct/play",
                        "title": "static let play: GroupSessionEvent.Action",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct/pause",
                        "title": "static let pause: GroupSessionEvent.Action",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct/seek",
                        "title": "static let seek: GroupSessionEvent.Action",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct/skip(item:)",
                        "title": "static func skip(item: String) -> GroupSessionEvent.Action",
                        "type": "method"
                      },
                      {
                        "title": "Getting change-related actions",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct/updatedqueue(_:)",
                        "title": "static func updatedQueue(GroupSessionEvent.Action.QueueChange) -> GroupSessionEvent.Action",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct/updatedqueue",
                        "title": "static let updatedQueue: GroupSessionEvent.Action",
                        "type": "property"
                      },
                      {
                        "children": [
                          {
                            "title": "Specifying the type of change",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct/queuechange/added(_:)",
                            "title": "static func added(GroupSessionEvent.Action.QueueChange.Item) -> GroupSessionEvent.Action.QueueChange",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct/queuechange/setupnext(_:)",
                            "title": "static func setUpNext(GroupSessionEvent.Action.QueueChange.Item) -> GroupSessionEvent.Action.QueueChange",
                            "type": "method"
                          },
                          {
                            "title": "Getting the changed item",
                            "type": "groupMarker"
                          },
                          {
                            "children": [
                              {
                                "title": "Creating the item",
                                "type": "groupMarker"
                              },
                              {
                                "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct/queuechange/item/song(_:)",
                                "title": "static func song(String) -> GroupSessionEvent.Action.QueueChange.Item",
                                "type": "method"
                              },
                              {
                                "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct/queuechange/item/container(_:)",
                                "title": "static func container(String) -> GroupSessionEvent.Action.QueueChange.Item",
                                "type": "method"
                              }
                            ],
                            "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct/queuechange/item",
                            "title": "GroupSessionEvent.Action.QueueChange.Item",
                            "type": "struct"
                          }
                        ],
                        "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct/queuechange",
                        "title": "GroupSessionEvent.Action.QueueChange",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupsessionevent/action-swift.struct",
                    "title": "GroupSessionEvent.Action",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/groupactivities/groupsessionevent",
                "title": "GroupSessionEvent",
                "type": "struct"
              },
              {
                "title": "Publishing changes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsession/objectwillchange",
                "title": "var objectWillChange: ObservableObjectPublisher",
                "type": "property"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Getting the event details",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/event/originator",
                    "title": "let originator: Participant",
                    "type": "property"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/groupactivities/groupsession/event/init(originator:localizeddescription:)",
                    "title": "init(originator: Participant, localizedDescription: String)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/groupactivities/groupsession/event/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/groupactivities/groupsession/event",
                "title": "GroupSession.Event",
                "type": "struct"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsession/$activeparticipants",
                "title": "var $activeParticipants: Published<Set<Participant>>.Publisher",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupsession/$activity",
                "title": "var $activity: Published<ActivityType>.Publisher",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupsession/$state",
                "title": "var $state: Published<GroupSession<ActivityType>.State>.Publisher",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupsession/islocallyinitiated",
                "title": "let isLocallyInitiated: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/groupsession/systemcoordinator",
                "title": "var systemCoordinator: SystemCoordinator?",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/groupactivities/groupsession/postevent(_:)",
                "title": "func postEvent(GroupSession<ActivityType>.Event)",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsession/objectwillchangepublisher",
                "title": "GroupSession.ObjectWillChangePublisher",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/groupactivities/groupsession/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsession/objectwillchange",
                    "title": "var objectWillChange: ObservableObjectPublisher",
                    "type": "property"
                  }
                ],
                "path": "/documentation/groupactivities/groupsession/observableobject-implementations",
                "title": "ObservableObject Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/groupactivities/groupsession",
            "title": "GroupSession",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/custommessageidentifiable/messageidentifier",
                "title": "static var messageIdentifier: String",
                "type": "property"
              }
            ],
            "path": "/documentation/groupactivities/custommessageidentifiable",
            "title": "CustomMessageIdentifiable",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Getting the unique identifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/participant/id-swift.property",
                "title": "let id: UUID",
                "type": "property"
              },
              {
                "title": "Comparing participants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/participant/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/groupactivities/participant/==(_:_:)",
                "title": "static func == (Participant, Participant) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/participant/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/participant/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/participant/id-swift.typealias",
                "title": "Participant.ID",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/participant/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/groupactivities/participant/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/participant/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/groupactivities/participant/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/groupactivities/participant",
            "title": "Participant",
            "type": "struct"
          },
          {
            "title": "Spatial activities",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/adding-spatial-persona-support-to-an-activity",
            "title": "Adding spatial Persona support to an activity",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Configuring the system coordinator",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/systemcoordinator/configuration-swift.property",
                "title": "var configuration: SystemCoordinator.Configuration",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating a configuration structure",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/configuration-swift.struct/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Specifying spatial position preferences",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/configuration-swift.struct/spatialtemplatepreference",
                    "title": "var spatialTemplatePreference: SpatialTemplatePreference",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the spatial position preferences",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/spatialtemplatepreference/none",
                        "title": "static let none: SpatialTemplatePreference",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/groupactivities/spatialtemplatepreference/sidebyside",
                        "title": "static let sideBySide: SpatialTemplatePreference",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/groupactivities/spatialtemplatepreference/conversational",
                        "title": "static let conversational: SpatialTemplatePreference",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/groupactivities/spatialtemplatepreference/custom(_:)",
                        "title": "static func custom(any SpatialTemplate) -> SpatialTemplatePreference",
                        "type": "method"
                      },
                      {
                        "title": "Specifying the distance between content and participants",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/spatialtemplatepreference/contentextent(_:)",
                        "title": "func contentExtent(CGFloat) -> SpatialTemplatePreference",
                        "type": "method"
                      },
                      {
                        "title": "Getting the template description",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/spatialtemplatepreference/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/spatialtemplatepreference/surround",
                        "title": "static let surround: SpatialTemplatePreference",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/groupactivities/spatialtemplatepreference",
                    "title": "SpatialTemplatePreference",
                    "type": "struct"
                  },
                  {
                    "title": "Supporting activities in immersive spaces",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/configuration-swift.struct/supportsgroupimmersivespace",
                    "title": "var supportsGroupImmersiveSpace: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/groupactivities/systemcoordinator/configuration-swift.struct",
                "title": "SystemCoordinator.Configuration",
                "type": "struct"
              },
              {
                "title": "Getting the participant state",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/systemcoordinator/localparticipantstate",
                "title": "var localParticipantState: SystemCoordinator.ParticipantState",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/systemcoordinator/localparticipantstates",
                "title": "var localParticipantStates: SystemCoordinator.ParticipantStates",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating an iterator",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstates/makeasynciterator()",
                    "title": "func makeAsyncIterator() -> SystemCoordinator.ParticipantStates.Iterator",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/iterator/next()",
                        "title": "func next() async -> SystemCoordinator.ParticipantStates.Element?",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/iterator/element",
                        "title": "SystemCoordinator.ParticipantStates.Iterator.Element",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/groupactivities/systemcoordinator/participantstates/iterator/next()-dyvb",
                            "title": "func next() async throws(Self.Failure) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/groupactivities/systemcoordinator/participantstates/iterator/next(isolation:)",
                            "title": "func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/iterator/asynciteratorprotocol-implementations",
                        "title": "AsyncIteratorProtocol Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/groupactivities/systemcoordinator/participantstates/iterator",
                    "title": "SystemCoordinator.ParticipantStates.Iterator",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstates/element",
                    "title": "SystemCoordinator.ParticipantStates.Element",
                    "type": "typealias"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstates/asynciterator",
                    "title": "SystemCoordinator.ParticipantStates.AsyncIterator",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/compactmap(_:)-18u0v",
                        "title": "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/compactmap(_:)-82n76",
                        "title": "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/contains(_:)",
                        "title": "func contains(Self.Element) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/contains(where:)",
                        "title": "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/drop(while:)",
                        "title": "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/filter(_:)",
                        "title": "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/first(where:)",
                        "title": "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/flatmap(_:)-2k5km",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/flatmap(_:)-37ewg",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/flatmap(_:)-3kdyn",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/flatmap(_:)-81p0l",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/map(_:)-3woce",
                        "title": "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/map(_:)-92o3h",
                        "title": "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/prefix(_:)",
                        "title": "func prefix(Int) -> AsyncPrefixSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstates/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/groupactivities/systemcoordinator/participantstates/asyncsequence-implementations",
                    "title": "AsyncSequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/systemcoordinator/participantstates",
                "title": "SystemCoordinator.ParticipantStates",
                "type": "struct"
              },
              {
                "title": "Getting the current immersion level",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyle",
                "title": "var groupImmersionStyle: SystemCoordinator.GroupImmersionStyles",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Classes",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/iterator/next()",
                        "title": "func next() async -> SystemCoordinator.GroupImmersionStyles.Element?",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/iterator/element",
                        "title": "SystemCoordinator.GroupImmersionStyles.Iterator.Element",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/iterator/next(isolation:)",
                            "title": "func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/iterator/asynciteratorprotocol-implementations",
                        "title": "AsyncIteratorProtocol Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/iterator",
                    "title": "SystemCoordinator.GroupImmersionStyles.Iterator",
                    "type": "class"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/makeasynciterator()",
                    "title": "func makeAsyncIterator() -> SystemCoordinator.GroupImmersionStyles.Iterator",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/asynciterator",
                    "title": "SystemCoordinator.GroupImmersionStyles.AsyncIterator",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/element",
                    "title": "SystemCoordinator.GroupImmersionStyles.Element",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/compactmap(_:)-7ztnv",
                        "title": "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/compactmap(_:)-9ys9f",
                        "title": "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/contains(where:)",
                        "title": "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/drop(while:)",
                        "title": "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/filter(_:)",
                        "title": "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/first(where:)",
                        "title": "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/flatmap(_:)-2b1ff",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/flatmap(_:)-4oyzy",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/flatmap(_:)-7l6sg",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/flatmap(_:)-84c30",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/map(_:)-2raq0",
                        "title": "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/map(_:)-6ntoh",
                        "title": "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/prefix(_:)",
                        "title": "func prefix(Int) -> AsyncPrefixSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles/asyncsequence-implementations",
                    "title": "AsyncSequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/systemcoordinator/groupimmersionstyles",
                "title": "SystemCoordinator.GroupImmersionStyles",
                "type": "struct"
              },
              {
                "title": "Assigning the local participant role",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/systemcoordinator/assignrole(_:)",
                "title": "func assignRole(some SpatialTemplateRole)",
                "type": "method"
              },
              {
                "path": "/documentation/groupactivities/systemcoordinator/resignrole()",
                "title": "func resignRole()",
                "type": "method"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Getting the participant details",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/isspatial",
                    "title": "let isSpatial: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/==(_:_:)",
                        "title": "static func == (SystemCoordinator.ParticipantState.Seat, SystemCoordinator.ParticipantState.Seat) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/pose",
                        "title": "let pose: Pose3D",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/role",
                        "title": "let role: (any SpatialTemplateRole)?",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct",
                    "title": "SystemCoordinator.ParticipantState.Seat",
                    "type": "struct"
                  },
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/==(_:_:)",
                    "title": "static func == (SystemCoordinator.ParticipantState, SystemCoordinator.ParticipantState) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/role",
                    "title": "let role: (any SpatialTemplateRole)?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.property",
                    "title": "let seat: SystemCoordinator.ParticipantState.Seat?",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstate/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/systemcoordinator/participantstate",
                "title": "SystemCoordinator.ParticipantState",
                "type": "struct"
              }
            ],
            "path": "/documentation/groupactivities/systemcoordinator",
            "title": "SystemCoordinator",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Getting the participant details",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/systemcoordinator/participantstate/isspatial",
                "title": "let isSpatial: Bool",
                "type": "property"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/==(_:_:)",
                    "title": "static func == (SystemCoordinator.ParticipantState.Seat, SystemCoordinator.ParticipantState.Seat) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/pose",
                    "title": "let pose: Pose3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/role",
                    "title": "let role: (any SpatialTemplateRole)?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.struct",
                "title": "SystemCoordinator.ParticipantState.Seat",
                "type": "struct"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/systemcoordinator/participantstate/==(_:_:)",
                "title": "static func == (SystemCoordinator.ParticipantState, SystemCoordinator.ParticipantState) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/systemcoordinator/participantstate/role",
                "title": "let role: (any SpatialTemplateRole)?",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/systemcoordinator/participantstate/seat-swift.property",
                "title": "let seat: SystemCoordinator.ParticipantState.Seat?",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/systemcoordinator/participantstate/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/groupactivities/systemcoordinator/participantstate/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/groupactivities/systemcoordinator/participantstate",
            "title": "SystemCoordinator.ParticipantState",
            "type": "struct"
          },
          {
            "title": "Custom spatial templates",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/building-a-guessing-game-for-visionos",
            "title": "Building a guessing game for visionOS",
            "type": "sampleCode"
          },
          {
            "children": [
              {
                "title": "Configuring the spatial template",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplate/configuration",
                "title": "var configuration: SpatialTemplateConfiguration",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateconfiguration/==(_:_:)",
                    "title": "static func == (SpatialTemplateConfiguration, SpatialTemplateConfiguration) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateconfiguration/init(defaultinitiatorrole:)",
                    "title": "init(defaultInitiatorRole: (any SpatialTemplateRole)?)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateconfiguration/defaultinitiatorrole",
                    "title": "let defaultInitiatorRole: (any SpatialTemplateRole)?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateconfiguration/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateconfiguration/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/spatialtemplateconfiguration/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/spatialtemplateconfiguration/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/spatialtemplateconfiguration",
                "title": "SpatialTemplateConfiguration",
                "type": "struct"
              },
              {
                "title": "Placing the template seats",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplate/elements",
                "title": "var elements: [any SpatialTemplateElement]",
                "type": "property"
              }
            ],
            "path": "/documentation/groupactivities/spatialtemplate",
            "title": "SpatialTemplate",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Getting the element details",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateseatelement/position",
                "title": "let position: SpatialTemplateElementPosition",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateseatelement/direction",
                "title": "let direction: SpatialTemplateElementDirection",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateseatelement/role",
                "title": "let role: (any SpatialTemplateRole)?",
                "type": "property"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateseatelement/==(_:_:)",
                "title": "static func == (SpatialTemplateSeatElement, SpatialTemplateSeatElement) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateseatelement/init(position:direction:role:)",
                "title": "init(position: SpatialTemplateElementPosition, direction: SpatialTemplateElementDirection, role: (any SpatialTemplateRole)?)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateseatelement/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateseatelement/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateseatelement/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/groupactivities/spatialtemplateseatelement/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateseatelement/seat(position:direction:role:)",
                    "title": "static func seat(position: SpatialTemplateElementPosition, direction: SpatialTemplateElementDirection, role: (any SpatialTemplateRole)?) -> Self",
                    "type": "method"
                  }
                ],
                "path": "/documentation/groupactivities/spatialtemplateseatelement/spatialtemplateelement-implementations",
                "title": "SpatialTemplateElement Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/groupactivities/spatialtemplateseatelement",
            "title": "SpatialTemplateSeatElement",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a seat position",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelement/seat(position:direction:role:)",
                "title": "static func seat(position: SpatialTemplateElementPosition, direction: SpatialTemplateElementDirection, role: (any SpatialTemplateRole)?) -> Self",
                "type": "method"
              },
              {
                "title": "Getting the element details",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelement/position",
                "title": "var position: SpatialTemplateElementPosition",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelement/direction",
                "title": "var direction: SpatialTemplateElementDirection",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelement/role",
                "title": "var role: (any SpatialTemplateRole)?",
                "type": "property"
              }
            ],
            "path": "/documentation/groupactivities/spatialtemplateelement",
            "title": "SpatialTemplateElement",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Getting the app’s position",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementposition/app",
                "title": "static var app: SpatialTemplateElementPosition",
                "type": "property"
              },
              {
                "title": "Modifying a position",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementposition/offsetby(x:z:)",
                "title": "func offsetBy(x: Double, z: Double) -> SpatialTemplateElementPosition",
                "type": "method"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementposition/==(_:_:)",
                "title": "static func == (SpatialTemplateElementPosition, SpatialTemplateElementPosition) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementposition/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementposition/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateelementposition/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/groupactivities/spatialtemplateelementposition/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/groupactivities/spatialtemplateelementposition",
            "title": "SpatialTemplateElementPosition",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Looking at a specific location",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementdirection/lookingat(_:)-70j0i",
                "title": "static func lookingAt(any SpatialTemplateElement) -> SpatialTemplateElementDirection",
                "type": "method"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementdirection/lookingat(_:)-1d7ak",
                "title": "static func lookingAt(SpatialTemplateElementPosition) -> SpatialTemplateElementDirection",
                "type": "method"
              },
              {
                "title": "Looking along an axis",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementdirection/alignedwith(appaxis:)",
                "title": "static func alignedWith(appAxis: SpatialTemplateElementAxis) -> SpatialTemplateElementDirection",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateelementaxis/==(_:_:)",
                    "title": "static func == (SpatialTemplateElementAxis, SpatialTemplateElementAxis) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateelementaxis/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateelementaxis/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateelementaxis/x",
                    "title": "static let x: SpatialTemplateElementAxis",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateelementaxis/z",
                    "title": "static let z: SpatialTemplateElementAxis",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/spatialtemplateelementaxis/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/spatialtemplateelementaxis/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/spatialtemplateelementaxis",
                "title": "SpatialTemplateElementAxis",
                "type": "struct"
              },
              {
                "title": "Rotating the element",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementdirection/rotatedby(_:)",
                "title": "func rotatedBy(Angle2D) -> SpatialTemplateElementDirection",
                "type": "method"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementdirection/+(_:_:)",
                "title": "static func + (SpatialTemplateElementDirection, Angle2D) -> SpatialTemplateElementDirection",
                "type": "op"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementdirection/==(_:_:)",
                "title": "static func == (SpatialTemplateElementDirection, SpatialTemplateElementDirection) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementdirection/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplateelementdirection/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/spatialtemplateelementdirection/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/groupactivities/spatialtemplateelementdirection/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/groupactivities/spatialtemplateelementdirection",
            "title": "SpatialTemplateElementDirection",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting the role identifier",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplaterole/roleidentifier",
                "title": "var roleIdentifier: String",
                "type": "property"
              }
            ],
            "path": "/documentation/groupactivities/spatialtemplaterole",
            "title": "SpatialTemplateRole",
            "type": "protocol"
          },
          {
            "title": "File and data transfer",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/groupactivities/synchronizing-data-during-a-shareplay-activity",
            "title": "Synchronizing data during a SharePlay activity",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Creating a group session messenger",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsessionmessenger/init(session:)",
                "title": "init<Activity>(session: GroupSession<Activity>)",
                "type": "init"
              },
              {
                "title": "Sending data to the group",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsessionmessenger/send(_:to:)-4o52m",
                "title": "func send(Data, to: Participants) async throws",
                "type": "method"
              },
              {
                "path": "/documentation/groupactivities/groupsessionmessenger/send(_:to:)-2a4ku",
                "title": "func send<Message>(Message, to: Participants) async throws",
                "type": "method"
              },
              {
                "path": "/documentation/groupactivities/groupsessionmessenger/send(_:to:completion:)-zufl",
                "title": "func send(Data, to: Participants, completion: ((any Error)?) -> Void)",
                "type": "method"
              },
              {
                "path": "/documentation/groupactivities/groupsessionmessenger/send(_:to:completion:)-9e0sn",
                "title": "func send<Message>(Message, to: Participants, completion: ((any Error)?) -> Void)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the set of participants",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/participants/all",
                    "title": "case all",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/groupactivities/participants/only(_:)-swift.enum.case",
                    "title": "case only(Set<Participant>)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/groupactivities/participants/only(_:)-swift.type.method",
                    "title": "static func only(Participant) -> Participants",
                    "type": "method"
                  }
                ],
                "path": "/documentation/groupactivities/participants",
                "title": "Participants",
                "type": "enum"
              },
              {
                "title": "Receiving data from other participants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsessionmessenger/messages(of:)-626qo",
                "title": "func messages(of: Data.Type) -> GroupSessionMessenger.Messages<Data>",
                "type": "method"
              },
              {
                "path": "/documentation/groupactivities/groupsessionmessenger/messages(of:)-jvoz",
                "title": "func messages<Message>(of: Message.Type) -> GroupSessionMessenger.Messages<Message>",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating an iterator",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/makeasynciterator()",
                    "title": "func makeAsyncIterator() -> GroupSessionMessenger.Messages<Message>.Iterator",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/iterator/next()",
                        "title": "func next() async -> GroupSessionMessenger.Messages<Message>.Element?",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/iterator/element",
                        "title": "GroupSessionMessenger.Messages.Iterator.Element",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/groupactivities/groupsessionmessenger/messages/iterator/next()-8kuna",
                            "title": "func next() async throws(Self.Failure) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/groupactivities/groupsessionmessenger/messages/iterator/next(isolation:)",
                            "title": "func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/iterator/asynciteratorprotocol-implementations",
                        "title": "AsyncIteratorProtocol Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/iterator",
                    "title": "GroupSessionMessenger.Messages.Iterator",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/element",
                    "title": "GroupSessionMessenger.Messages.Element",
                    "type": "typealias"
                  },
                  {
                    "title": "Finding elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/contains(where:)",
                    "title": "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/first(where:)",
                    "title": "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "title": "Selecting elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/prefix(_:)",
                    "title": "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type": "method"
                  },
                  {
                    "title": "Excluding elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/drop(while:)",
                    "title": "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/filter(_:)",
                    "title": "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type": "method"
                  },
                  {
                    "title": "Transforming a sequence",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/asynciterator",
                    "title": "GroupSessionMessenger.Messages.AsyncIterator",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/compactmap(_:)-689fe",
                        "title": "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/compactmap(_:)-7a8q4",
                        "title": "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/contains(where:)",
                        "title": "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/drop(while:)",
                        "title": "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/filter(_:)",
                        "title": "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/first(where:)",
                        "title": "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/flatmap(_:)-5bs6h",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/flatmap(_:)-7jbg3",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/flatmap(_:)-7n4xi",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/flatmap(_:)-8dwke",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/map(_:)-3wx19",
                        "title": "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/map(_:)-ocge",
                        "title": "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/prefix(_:)",
                        "title": "func prefix(Int) -> AsyncPrefixSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/messages/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupsessionmessenger/messages/asyncsequence-implementations",
                    "title": "AsyncSequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/groupsessionmessenger/messages",
                "title": "GroupSessionMessenger.Messages",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the initiating participant",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/messagecontext/source",
                    "title": "var source: Participant",
                    "type": "property"
                  }
                ],
                "path": "/documentation/groupactivities/groupsessionmessenger/messagecontext",
                "title": "GroupSessionMessenger.MessageContext",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsessionmessenger/init(session:deliverymode:)",
                "title": "init<Activity>(session: GroupSession<Activity>, deliveryMode: GroupSessionMessenger.DeliveryMode)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsessionmessenger/deliverymode-swift.property",
                "title": "let deliveryMode: GroupSessionMessenger.DeliveryMode",
                "type": "property"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Getting the delivery mode options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/deliverymode-swift.enum/reliable",
                    "title": "case reliable",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/deliverymode-swift.enum/unreliable",
                    "title": "case unreliable",
                    "type": "case"
                  },
                  {
                    "title": "Comparing the delivery mode options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/deliverymode-swift.enum/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/deliverymode-swift.enum/==(_:_:)",
                    "title": "static func == (GroupSessionMessenger.DeliveryMode, GroupSessionMessenger.DeliveryMode) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/deliverymode-swift.enum/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionmessenger/deliverymode-swift.enum/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionmessenger/deliverymode-swift.enum/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupsessionmessenger/deliverymode-swift.enum/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/groupsessionmessenger/deliverymode-swift.enum",
                "title": "GroupSessionMessenger.DeliveryMode",
                "type": "enum"
              }
            ],
            "path": "/documentation/groupactivities/groupsessionmessenger",
            "title": "GroupSessionMessenger",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Creating an attachment manager",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsessionjournal/init(session:)",
                "title": "convenience init<Activity>(session: GroupSession<Activity>)",
                "type": "init"
              },
              {
                "title": "Uploading content to the session",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsessionjournal/add(_:)",
                "title": "func add<ItemType>(ItemType) async throws -> GroupSessionJournal.Attachment",
                "type": "method"
              },
              {
                "path": "/documentation/groupactivities/groupsessionjournal/add(_:metadata:)",
                "title": "func add<ItemType, MetadataType>(ItemType, metadata: MetadataType) async throws -> GroupSessionJournal.Attachment",
                "type": "method"
              },
              {
                "title": "Downloading content from the session",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.property",
                "title": "var attachments: GroupSessionJournal.Attachments",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating an iterator",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/makeasynciterator()",
                    "title": "func makeAsyncIterator() -> GroupSessionJournal.Attachments.Iterator",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/iterator/next()",
                        "title": "func next() async -> GroupSessionJournal.Attachments.Element?",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/iterator/element",
                        "title": "GroupSessionJournal.Attachments.Iterator.Element",
                        "type": "typealias"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/iterator/next()-2jjf7",
                            "title": "func next() async throws(Self.Failure) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/iterator/next(isolation:)",
                            "title": "func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/iterator/asynciteratorprotocol-implementations",
                        "title": "AsyncIteratorProtocol Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/iterator",
                    "title": "GroupSessionJournal.Attachments.Iterator",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/element",
                    "title": "GroupSessionJournal.Attachments.Element",
                    "type": "typealias"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/asynciterator",
                    "title": "GroupSessionJournal.Attachments.AsyncIterator",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/compactmap(_:)-12hpc",
                        "title": "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/compactmap(_:)-91ttc",
                        "title": "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/contains(where:)",
                        "title": "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/drop(while:)",
                        "title": "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/filter(_:)",
                        "title": "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/first(where:)",
                        "title": "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/flatmap(_:)-15hti",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/flatmap(_:)-4qmoe",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/flatmap(_:)-7h15o",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/flatmap(_:)-8xy6r",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/map(_:)-3m7k5",
                        "title": "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/map(_:)-5ibmj",
                        "title": "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/prefix(_:)",
                        "title": "func prefix(Int) -> AsyncPrefixSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct/asyncsequence-implementations",
                    "title": "AsyncSequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/groupactivities/groupsessionjournal/attachments-swift.struct",
                "title": "GroupSessionJournal.Attachments",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Downloading the attachment data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionjournal/attachment/load(_:)",
                    "title": "func load<AttachmentType>(AttachmentType.Type) async throws -> AttachmentType",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionjournal/attachment/loadmetadata(of:)",
                    "title": "func loadMetadata<MetadataType>(of: MetadataType.Type) async throws -> MetadataType",
                    "type": "method"
                  },
                  {
                    "title": "Identifying the attachment",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionjournal/attachment/id-swift.property",
                    "title": "var id: UUID",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupsessionjournal/attachment/id-swift.typealias",
                    "title": "GroupSessionJournal.Attachment.ID",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/groupactivities/groupsessionjournal/attachment",
                "title": "GroupSessionJournal.Attachment",
                "type": "struct"
              },
              {
                "title": "Removing content from the session",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupsessionjournal/remove(attachment:)",
                "title": "func remove(attachment: GroupSessionJournal.Attachment) async throws",
                "type": "method"
              }
            ],
            "path": "/documentation/groupactivities/groupsessionjournal",
            "title": "GroupSessionJournal",
            "type": "class"
          },
          {
            "title": "System status",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a group state observer",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupstateobserver/init()",
                "title": "convenience init()",
                "type": "init"
              },
              {
                "title": "Determining the eligibility for shared activities",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupstateobserver/iseligibleforgroupsession",
                "title": "var isEligibleForGroupSession: Bool",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupstateobserver/$iseligibleforgroupsession",
                "title": "var $isEligibleForGroupSession: Published<Bool>.Publisher",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/groupstateobserver/objectwillchangepublisher",
                "title": "GroupStateObserver.ObjectWillChangePublisher",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/groupactivities/groupstateobserver/objectwillchange",
                    "title": "var objectWillChange: ObservableObjectPublisher",
                    "type": "property"
                  }
                ],
                "path": "/documentation/groupactivities/groupstateobserver/observableobject-implementations",
                "title": "ObservableObject Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/groupactivities/groupstateobserver",
            "title": "GroupStateObserver",
            "type": "class"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting the spatial position preferences",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplatepreference/none",
                "title": "static let none: SpatialTemplatePreference",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplatepreference/sidebyside",
                "title": "static let sideBySide: SpatialTemplatePreference",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplatepreference/conversational",
                "title": "static let conversational: SpatialTemplatePreference",
                "type": "property"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplatepreference/custom(_:)",
                "title": "static func custom(any SpatialTemplate) -> SpatialTemplatePreference",
                "type": "method"
              },
              {
                "title": "Specifying the distance between content and participants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplatepreference/contentextent(_:)",
                "title": "func contentExtent(CGFloat) -> SpatialTemplatePreference",
                "type": "method"
              },
              {
                "title": "Getting the template description",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplatepreference/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/groupactivities/spatialtemplatepreference/surround",
                "title": "static let surround: SpatialTemplatePreference",
                "type": "property"
              }
            ],
            "path": "/documentation/groupactivities/spatialtemplatepreference",
            "title": "SpatialTemplatePreference",
            "type": "struct"
          }
        ],
        "path": "/documentation/groupactivities",
        "title": "Group Activities",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
