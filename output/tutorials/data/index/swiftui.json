{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/tutorials/swiftui",
            "title": "Introducing SwiftUI",
            "type": "overview"
          },
          {
            "external": true,
            "path": "/tutorials/swiftui-concepts",
            "title": "Learning SwiftUI",
            "type": "overview"
          },
          {
            "external": true,
            "path": "/tutorials/sample-apps",
            "title": "Exploring SwiftUI Sample Apps",
            "type": "overview"
          },
          {
            "external": true,
            "path": "/documentation/updates/swiftui",
            "title": "SwiftUI updates",
            "type": "article"
          },
          {
            "title": "App structure",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating an app",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/visionos/destination-video",
                "title": "Destination Video",
                "type": "sampleCode"
              },
              {
                "external": true,
                "path": "/documentation/visionos/world",
                "title": "Hello World",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/backyard-birds-sample",
                "title": "Backyard Birds: Building an app with SwiftData and widgets",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/migrating-to-the-swiftui-life-cycle",
                "title": "Migrating to the SwiftUI life cycle",
                "type": "article"
              },
              {
                "title": "Targeting iOS and iPadOS",
                "type": "groupMarker"
              },
              {
                "title": "Targeting macOS",
                "type": "groupMarker"
              },
              {
                "title": "Targeting watchOS",
                "type": "groupMarker"
              },
              {
                "title": "Targeting tvOS",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/creating-a-tvos-media-catalog-app-in-swiftui",
                "title": "Creating a tvOS media catalog app in SwiftUI",
                "type": "sampleCode"
              }
            ],
            "path": "/documentation/swiftui/app-organization",
            "title": "App organization",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating scenes",
                "type": "groupMarker"
              },
              {
                "title": "Monitoring scene life cycle",
                "type": "groupMarker"
              },
              {
                "title": "Managing a settings window",
                "type": "groupMarker"
              },
              {
                "title": "Creating a menu bar extra",
                "type": "groupMarker"
              },
              {
                "title": "Creating watch notifications",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/scenes",
            "title": "Scenes",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/customizing-window-styles-and-state-restoration-behavior-in-macos",
                "title": "Customizing window styles and state-restoration behavior in macOS",
                "type": "sampleCode"
              },
              {
                "title": "Creating windows",
                "type": "groupMarker"
              },
              {
                "title": "Styling the associated toolbar",
                "type": "groupMarker"
              },
              {
                "title": "Opening windows",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/visionos/presenting-windows-and-spaces",
                "title": "Presenting windows and spaces",
                "type": "article"
              },
              {
                "title": "Closing windows",
                "type": "groupMarker"
              },
              {
                "title": "Sizing a window",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/visionos/positioning-and-sizing-windows",
                "title": "Positioning and sizing windows",
                "type": "article"
              },
              {
                "title": "Positioning a window",
                "type": "groupMarker"
              },
              {
                "title": "Configuring window visibility",
                "type": "groupMarker"
              },
              {
                "title": "Managing window behavior",
                "type": "groupMarker"
              },
              {
                "title": "Interacting with volumes",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated Types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/windows",
            "title": "Windows",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating an immersive space",
                "type": "groupMarker"
              },
              {
                "title": "Opening an immersive space",
                "type": "groupMarker"
              },
              {
                "title": "Closing the immersive space",
                "type": "groupMarker"
              },
              {
                "title": "Hiding upper limbs during immersion",
                "type": "groupMarker"
              },
              {
                "title": "Adjusting content brightness",
                "type": "groupMarker"
              },
              {
                "title": "Responding to immersion changes",
                "type": "groupMarker"
              },
              {
                "title": "Adding menu items to an immersive space",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/immersive-spaces",
            "title": "Immersive spaces",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a document",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/building-a-document-based-app-with-swiftui",
                "title": "Building a document-based app with SwiftUI",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/building-a-document-based-app-using-swiftdata",
                "title": "Building a document-based app using SwiftData",
                "type": "sampleCode"
              },
              {
                "title": "Storing document data in a structure instance",
                "type": "groupMarker"
              },
              {
                "title": "Storing document data in a class instance",
                "type": "groupMarker"
              },
              {
                "title": "Accessing document configuration",
                "type": "groupMarker"
              },
              {
                "title": "Reading and writing documents",
                "type": "groupMarker"
              },
              {
                "title": "Opening a document programmatically",
                "type": "groupMarker"
              },
              {
                "title": "Configuring the document launch experience",
                "type": "groupMarker"
              },
              {
                "title": "Renaming a document",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/documents",
            "title": "Documents",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Presenting views in columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/bringing-robust-navigation-structure-to-your-swiftui-app",
                "title": "Bringing robust navigation structure to your SwiftUI app",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/migrating-to-new-navigation-types",
                "title": "Migrating to new navigation types",
                "type": "article"
              },
              {
                "title": "Stacking views in one column",
                "type": "groupMarker"
              },
              {
                "title": "Managing column collapse",
                "type": "groupMarker"
              },
              {
                "title": "Setting titles for navigation content",
                "type": "groupMarker"
              },
              {
                "title": "Configuring the navigation bar",
                "type": "groupMarker"
              },
              {
                "title": "Configuring the sidebar",
                "type": "groupMarker"
              },
              {
                "title": "Presenting views in tabs",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/enhancing-your-app-content-with-tab-navigation",
                "title": "Enhancing your app’s content with tab navigation",
                "type": "sampleCode"
              },
              {
                "title": "Configuring a tab bar",
                "type": "groupMarker"
              },
              {
                "title": "Configuring a tab",
                "type": "groupMarker"
              },
              {
                "title": "Enabling tab customization",
                "type": "groupMarker"
              },
              {
                "title": "Displaying views in multiple panes",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated Types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/navigation",
            "title": "Navigation",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Configuring a dialog",
                "type": "groupMarker"
              },
              {
                "title": "Showing a sheet, cover, or popover",
                "type": "groupMarker"
              },
              {
                "title": "Adapting a presentation size",
                "type": "groupMarker"
              },
              {
                "title": "Configuring a sheet’s height",
                "type": "groupMarker"
              },
              {
                "title": "Styling a sheet and its background",
                "type": "groupMarker"
              },
              {
                "title": "Presenting an alert",
                "type": "groupMarker"
              },
              {
                "title": "Getting confirmation for an action",
                "type": "groupMarker"
              },
              {
                "title": "Showing a confirmation dialog with a message",
                "type": "groupMarker"
              },
              {
                "title": "Configuring a dialog",
                "type": "groupMarker"
              },
              {
                "title": "Exporting to file",
                "type": "groupMarker"
              },
              {
                "title": "Importing from file",
                "type": "groupMarker"
              },
              {
                "title": "Moving a file",
                "type": "groupMarker"
              },
              {
                "title": "Configuring a file dialog",
                "type": "groupMarker"
              },
              {
                "title": "Presenting an inspector",
                "type": "groupMarker"
              },
              {
                "title": "Dismissing a presentation",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated modal presentations",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/modal-presentations",
            "title": "Modal presentations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Populating a toolbar",
                "type": "groupMarker"
              },
              {
                "title": "Populating a customizable toolbar",
                "type": "groupMarker"
              },
              {
                "title": "Removing default items",
                "type": "groupMarker"
              },
              {
                "title": "Setting toolbar visibility",
                "type": "groupMarker"
              },
              {
                "title": "Specifying the role of toolbar content",
                "type": "groupMarker"
              },
              {
                "title": "Styling a toolbar",
                "type": "groupMarker"
              },
              {
                "title": "Configuring the toolbar title display mode",
                "type": "groupMarker"
              },
              {
                "title": "Setting the toolbar title menu",
                "type": "groupMarker"
              },
              {
                "title": "Creating an ornament",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/toolbars",
            "title": "Toolbars",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Searching your app’s data model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/adding-a-search-interface-to-your-app",
                "title": "Adding a search interface to your app",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/performing-a-search-operation",
                "title": "Performing a search operation",
                "type": "article"
              },
              {
                "title": "Making search suggestions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/suggesting-search-terms",
                "title": "Suggesting search terms",
                "type": "article"
              },
              {
                "title": "Limiting search scope",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/scoping-a-search-operation",
                "title": "Scoping a search operation",
                "type": "article"
              },
              {
                "title": "Detecting, activating, and dismissing search",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/managing-search-interface-activation",
                "title": "Managing search interface activation",
                "type": "article"
              },
              {
                "title": "Displaying toolbar content during search",
                "type": "groupMarker"
              },
              {
                "title": "Searching for text in a view with find and replace",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/search",
            "title": "Search",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating widgets",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/widgetkit/creating-a-widget-extension",
                "title": "Creating a widget extension",
                "type": "article"
              },
              {
                "external": true,
                "path": "/documentation/widgetkit/keeping-a-widget-up-to-date",
                "title": "Keeping a widget up to date",
                "type": "article"
              },
              {
                "external": true,
                "path": "/documentation/widgetkit/making-a-configurable-widget",
                "title": "Making a configurable widget",
                "type": "article"
              },
              {
                "title": "Composing control widgets",
                "type": "groupMarker"
              },
              {
                "title": "Labeling a widget",
                "type": "groupMarker"
              },
              {
                "title": "Stying a widget group",
                "type": "groupMarker"
              },
              {
                "title": "Controlling the accented group",
                "type": "groupMarker"
              },
              {
                "title": "Managing placement in the Dynamic Island",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/app-extensions",
            "title": "App extensions",
            "type": "collection"
          },
          {
            "title": "Data and storage",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating and sharing view state",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/managing-user-interface-state",
                "title": "Managing user interface state",
                "type": "article"
              },
              {
                "title": "Creating model data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/managing-model-data-in-your-app",
                "title": "Managing model data in your app",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro",
                "title": "Migrating from the Observable Object protocol to the Observable macro",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/monitoring-model-data-changes-in-your-app",
                "title": "Monitoring data changes in your app",
                "type": "sampleCode"
              },
              {
                "title": "Responding to data changes",
                "type": "groupMarker"
              },
              {
                "title": "Distributing model data throughout your app",
                "type": "groupMarker"
              },
              {
                "title": "Managing dynamic data",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/model-data",
            "title": "Model data",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Accessing environment values",
                "type": "groupMarker"
              },
              {
                "title": "Creating custom environment values",
                "type": "groupMarker"
              },
              {
                "title": "Modifying the environment of a view",
                "type": "groupMarker"
              },
              {
                "title": "Modifying the environment of a scene",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/environment-values",
            "title": "Environment values",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Setting preferences",
                "type": "groupMarker"
              },
              {
                "title": "Creating custom preferences",
                "type": "groupMarker"
              },
              {
                "title": "Setting preferences based on geometry",
                "type": "groupMarker"
              },
              {
                "title": "Responding to changes in preferences",
                "type": "groupMarker"
              },
              {
                "title": "Generating backgrounds and overlays from preferences",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/preferences",
            "title": "Preferences",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Saving state across app launches",
                "type": "groupMarker"
              },
              {
                "title": "Accessing Core Data",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/persistent-storage",
            "title": "Persistent storage",
            "type": "collection"
          },
          {
            "title": "Views",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/declaring-a-custom-view",
                "title": "Declaring a custom view",
                "type": "article"
              },
              {
                "title": "Modifying a view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/configuring-views",
                "title": "Configuring views",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/reducing-view-modifier-maintenance",
                "title": "Reducing view modifier maintenance",
                "type": "article"
              },
              {
                "title": "Responding to view life cycle updates",
                "type": "groupMarker"
              },
              {
                "title": "Managing the view hierarchy",
                "type": "groupMarker"
              },
              {
                "title": "Supporting view types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/view-fundamentals",
            "title": "View fundamentals",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Hiding views",
                "type": "groupMarker"
              },
              {
                "title": "Hiding system elements",
                "type": "groupMarker"
              },
              {
                "title": "Managing view interaction",
                "type": "groupMarker"
              },
              {
                "title": "Providing contextual help",
                "type": "groupMarker"
              },
              {
                "title": "Adding a glass background",
                "type": "groupMarker"
              },
              {
                "title": "Detecting and requesting the light or dark appearance",
                "type": "groupMarker"
              },
              {
                "title": "Getting the color scheme contrast",
                "type": "groupMarker"
              },
              {
                "title": "Configuring passthrough",
                "type": "groupMarker"
              },
              {
                "title": "Redacting private content",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/watchos-apps/designing-your-app-for-the-always-on-state",
                "title": "Designing your app for the Always On state",
                "type": "article"
              }
            ],
            "path": "/documentation/swiftui/view-configuration",
            "title": "View configuration",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Styling buttons",
                "type": "groupMarker"
              },
              {
                "title": "Styling pickers",
                "type": "groupMarker"
              },
              {
                "title": "Styling menus",
                "type": "groupMarker"
              },
              {
                "title": "Styling toggles",
                "type": "groupMarker"
              },
              {
                "title": "Styling indicators",
                "type": "groupMarker"
              },
              {
                "title": "Styling views that display text",
                "type": "groupMarker"
              },
              {
                "title": "Styling collection views",
                "type": "groupMarker"
              },
              {
                "title": "Styling navigation views",
                "type": "groupMarker"
              },
              {
                "title": "Styling groups",
                "type": "groupMarker"
              },
              {
                "title": "Styling windows from a view inside the window",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/view-styles",
            "title": "View styles",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Adding state-based animation to an action",
                "type": "groupMarker"
              },
              {
                "title": "Adding state-based animation to a view",
                "type": "groupMarker"
              },
              {
                "title": "Creating phase-based animation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/controlling-the-timing-and-movements-of-your-animations",
                "title": "Controlling the timing and movements of your animations",
                "type": "sampleCode"
              },
              {
                "title": "Creating keyframe-based animation",
                "type": "groupMarker"
              },
              {
                "title": "Creating custom animations",
                "type": "groupMarker"
              },
              {
                "title": "Making data animatable",
                "type": "groupMarker"
              },
              {
                "title": "Updating a view on a schedule",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/watchos-apps/updating-watchos-apps-with-timelines",
                "title": "Updating watchOS apps with timelines",
                "type": "article"
              },
              {
                "title": "Synchronizing geometries",
                "type": "groupMarker"
              },
              {
                "title": "Defining transitions",
                "type": "groupMarker"
              },
              {
                "title": "Moving an animation to another view",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/animations",
            "title": "Animations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Displaying text",
                "type": "groupMarker"
              },
              {
                "title": "Getting text input",
                "type": "groupMarker"
              },
              {
                "title": "Selecting text",
                "type": "groupMarker"
              },
              {
                "title": "Setting a font",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/applying-custom-fonts-to-text",
                "title": "Applying custom fonts to text",
                "type": "article"
              },
              {
                "title": "Adjusting text size",
                "type": "groupMarker"
              },
              {
                "title": "Controlling text style",
                "type": "groupMarker"
              },
              {
                "title": "Managing text layout",
                "type": "groupMarker"
              },
              {
                "title": "Rendering text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/creating-visual-effects-with-swiftui",
                "title": "Creating visual effects with SwiftUI",
                "type": "sampleCode"
              },
              {
                "title": "Limiting line count for multiline text",
                "type": "groupMarker"
              },
              {
                "title": "Formatting multiline text",
                "type": "groupMarker"
              },
              {
                "title": "Formatting date and time",
                "type": "groupMarker"
              },
              {
                "title": "Managing text entry",
                "type": "groupMarker"
              },
              {
                "title": "Dictating text",
                "type": "groupMarker"
              },
              {
                "title": "Configuring the Writing Tools behavior",
                "type": "groupMarker"
              },
              {
                "title": "Specifying text equivalents",
                "type": "groupMarker"
              },
              {
                "title": "Localizing text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/preparing-views-for-localization",
                "title": "Preparing views for localization",
                "type": "article"
              },
              {
                "title": "Deprecated types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/text-input-and-output",
            "title": "Text input and output",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating an image",
                "type": "groupMarker"
              },
              {
                "title": "Configuring an image",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/fitting-images-into-available-space",
                "title": "Fitting images into available space",
                "type": "article"
              },
              {
                "title": "Loading images asynchronously",
                "type": "groupMarker"
              },
              {
                "title": "Setting a symbol variant",
                "type": "groupMarker"
              },
              {
                "title": "Managing symbol effects",
                "type": "groupMarker"
              },
              {
                "title": "Setting symbol rendering modes",
                "type": "groupMarker"
              },
              {
                "title": "Rendering images from views",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/images",
            "title": "Images",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating buttons",
                "type": "groupMarker"
              },
              {
                "title": "Creating special-purpose buttons",
                "type": "groupMarker"
              },
              {
                "title": "Linking to other content",
                "type": "groupMarker"
              },
              {
                "title": "Getting numeric inputs",
                "type": "groupMarker"
              },
              {
                "title": "Choosing from a set of options",
                "type": "groupMarker"
              },
              {
                "title": "Choosing dates",
                "type": "groupMarker"
              },
              {
                "title": "Choosing a color",
                "type": "groupMarker"
              },
              {
                "title": "Indicating a value",
                "type": "groupMarker"
              },
              {
                "title": "Indicating missing content",
                "type": "groupMarker"
              },
              {
                "title": "Providing haptic feedback",
                "type": "groupMarker"
              },
              {
                "title": "Sizing controls",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/controls-and-indicators",
            "title": "Controls and indicators",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a menu",
                "type": "groupMarker"
              },
              {
                "title": "Creating context menus",
                "type": "groupMarker"
              },
              {
                "title": "Defining commands",
                "type": "groupMarker"
              },
              {
                "title": "Getting built-in command groups",
                "type": "groupMarker"
              },
              {
                "title": "Showing a menu indicator",
                "type": "groupMarker"
              },
              {
                "title": "Configuring menu dismissal",
                "type": "groupMarker"
              },
              {
                "title": "Setting a preferred order",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/menus-and-commands",
            "title": "Menus and commands",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating rectangular shapes",
                "type": "groupMarker"
              },
              {
                "title": "Creating circular shapes",
                "type": "groupMarker"
              },
              {
                "title": "Drawing custom shapes",
                "type": "groupMarker"
              },
              {
                "title": "Defining shape behavior",
                "type": "groupMarker"
              },
              {
                "title": "Transforming a shape",
                "type": "groupMarker"
              },
              {
                "title": "Setting a container shape",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/shapes",
            "title": "Shapes",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Immediate mode drawing",
                "type": "groupMarker"
              },
              {
                "title": "Setting a color",
                "type": "groupMarker"
              },
              {
                "title": "Styling content",
                "type": "groupMarker"
              },
              {
                "title": "Transforming colors",
                "type": "groupMarker"
              },
              {
                "title": "Scaling, rotating, or transforming a view",
                "type": "groupMarker"
              },
              {
                "title": "Masking and clipping",
                "type": "groupMarker"
              },
              {
                "title": "Applying blur and shadows",
                "type": "groupMarker"
              },
              {
                "title": "Applying effects based on geometry",
                "type": "groupMarker"
              },
              {
                "title": "Compositing views",
                "type": "groupMarker"
              },
              {
                "title": "Measuring a view",
                "type": "groupMarker"
              },
              {
                "title": "Responding to a geometry change",
                "type": "groupMarker"
              },
              {
                "title": "Accessing Metal shaders",
                "type": "groupMarker"
              },
              {
                "title": "Accessing geometric constructs",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/drawing-and-graphics",
            "title": "Drawing and graphics",
            "type": "collection"
          },
          {
            "title": "View layout",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Choosing a layout",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/picking-container-views-for-your-content",
                "title": "Picking container views for your content",
                "type": "article"
              },
              {
                "title": "Statically arranging views in one dimension",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/building-layouts-with-stack-views",
                "title": "Building layouts with stack views",
                "type": "article"
              },
              {
                "title": "Dynamically arranging views in one dimension",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/grouping-data-with-lazy-stack-views",
                "title": "Grouping data with lazy stack views",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/creating-performant-scrollable-stacks",
                "title": "Creating performant scrollable stacks",
                "type": "article"
              },
              {
                "title": "Statically arranging views in two dimensions",
                "type": "groupMarker"
              },
              {
                "title": "Dynamically arranging views in two dimensions",
                "type": "groupMarker"
              },
              {
                "title": "Layering views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/adding-a-background-to-your-view",
                "title": "Adding a background to your view",
                "type": "article"
              },
              {
                "title": "Automatically choosing the layout that fits",
                "type": "groupMarker"
              },
              {
                "title": "Separators",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/layout-fundamentals",
            "title": "Layout fundamentals",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Finetuning a layout",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/laying-out-a-simple-view",
                "title": "Laying out a simple view",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/inspecting-view-layout",
                "title": "Inspecting view layout",
                "type": "article"
              },
              {
                "title": "Adding padding around a view",
                "type": "groupMarker"
              },
              {
                "title": "Influencing a view’s size",
                "type": "groupMarker"
              },
              {
                "title": "Adjusting a view’s position",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/making-fine-adjustments-to-a-view-s-position",
                "title": "Making fine adjustments to a view’s position",
                "type": "article"
              },
              {
                "title": "Aligning views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/aligning-views-within-a-stack",
                "title": "Aligning views within a stack",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/aligning-views-across-stacks",
                "title": "Aligning views across stacks",
                "type": "article"
              },
              {
                "title": "Setting margins",
                "type": "groupMarker"
              },
              {
                "title": "Staying in the safe areas",
                "type": "groupMarker"
              },
              {
                "title": "Setting a layout direction",
                "type": "groupMarker"
              },
              {
                "title": "Reacting to interface characteristics",
                "type": "groupMarker"
              },
              {
                "title": "Accessing edges and regions",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/layout-adjustments",
            "title": "Layout adjustments",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a custom layout container",
                "type": "groupMarker"
              },
              {
                "title": "Configuring a custom layout",
                "type": "groupMarker"
              },
              {
                "title": "Associating values with views in a custom layout",
                "type": "groupMarker"
              },
              {
                "title": "Transitioning between layout types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/custom-layout",
            "title": "Custom layout",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a list",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/displaying-data-in-lists",
                "title": "Displaying data in lists",
                "type": "article"
              },
              {
                "title": "Disclosing information progressively",
                "type": "groupMarker"
              },
              {
                "title": "Configuring rows",
                "type": "groupMarker"
              },
              {
                "title": "Configuring separators",
                "type": "groupMarker"
              },
              {
                "title": "Configuring headers",
                "type": "groupMarker"
              },
              {
                "title": "Configuring spacing",
                "type": "groupMarker"
              },
              {
                "title": "Configuring backgrounds",
                "type": "groupMarker"
              },
              {
                "title": "Displaying a badge on a list item",
                "type": "groupMarker"
              },
              {
                "title": "Configuring interaction",
                "type": "groupMarker"
              },
              {
                "title": "Refreshing a list’s content",
                "type": "groupMarker"
              },
              {
                "title": "Editing a list",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/lists",
            "title": "Lists",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a table",
                "type": "groupMarker"
              },
              {
                "title": "Creating columns",
                "type": "groupMarker"
              },
              {
                "title": "Customizing columns",
                "type": "groupMarker"
              },
              {
                "title": "Creating rows",
                "type": "groupMarker"
              },
              {
                "title": "Adding progressive disclosure",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/tables",
            "title": "Tables",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Grouping views into a container",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/creating-custom-container-views",
                "title": "Creating custom container views",
                "type": "sampleCode"
              },
              {
                "title": "Organizing views into sections",
                "type": "groupMarker"
              },
              {
                "title": "Iterating over dynamic data",
                "type": "groupMarker"
              },
              {
                "title": "Accessing a container’s subviews",
                "type": "groupMarker"
              },
              {
                "title": "Grouping views into a box",
                "type": "groupMarker"
              },
              {
                "title": "Grouping inputs",
                "type": "groupMarker"
              },
              {
                "title": "Presenting a group of controls",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/view-groupings",
            "title": "View groupings",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a scroll view",
                "type": "groupMarker"
              },
              {
                "title": "Managing scroll position",
                "type": "groupMarker"
              },
              {
                "title": "Defining scroll targets",
                "type": "groupMarker"
              },
              {
                "title": "Animating scroll transitions",
                "type": "groupMarker"
              },
              {
                "title": "Responding to scroll view changes",
                "type": "groupMarker"
              },
              {
                "title": "Showing scroll indicators",
                "type": "groupMarker"
              },
              {
                "title": "Managing content visibility",
                "type": "groupMarker"
              },
              {
                "title": "Disabling scrolling",
                "type": "groupMarker"
              },
              {
                "title": "Configuring scroll bounce behavior",
                "type": "groupMarker"
              },
              {
                "title": "Interacting with a software keyboard",
                "type": "groupMarker"
              },
              {
                "title": "Managing scrolling for different inputs",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/scroll-views",
            "title": "Scroll views",
            "type": "collection"
          },
          {
            "title": "Event handling",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/adding-interactivity-with-gestures",
                "title": "Adding interactivity with gestures",
                "type": "article"
              },
              {
                "title": "Recognizing tap gestures",
                "type": "groupMarker"
              },
              {
                "title": "Recognizing long press gestures",
                "type": "groupMarker"
              },
              {
                "title": "Recognizing spatial events",
                "type": "groupMarker"
              },
              {
                "title": "Recognizing gestures that change over time",
                "type": "groupMarker"
              },
              {
                "title": "Recognizing Apple Pencil gestures",
                "type": "groupMarker"
              },
              {
                "title": "Combining gestures",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/composing-swiftui-gestures",
                "title": "Composing SwiftUI gestures",
                "type": "article"
              },
              {
                "title": "Defining custom gestures",
                "type": "groupMarker"
              },
              {
                "title": "Managing gesture state",
                "type": "groupMarker"
              },
              {
                "title": "Handling activation events",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated gestures",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/gestures",
            "title": "Gestures",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Responding to keyboard input",
                "type": "groupMarker"
              },
              {
                "title": "Creating keyboard shortcuts",
                "type": "groupMarker"
              },
              {
                "title": "Responding to modifier keys",
                "type": "groupMarker"
              },
              {
                "title": "Responding to hover events",
                "type": "groupMarker"
              },
              {
                "title": "Modifying pointer appearance",
                "type": "groupMarker"
              },
              {
                "title": "Changing view appearance for hover events",
                "type": "groupMarker"
              },
              {
                "title": "Responding to submission events",
                "type": "groupMarker"
              },
              {
                "title": "Labeling a submission event",
                "type": "groupMarker"
              },
              {
                "title": "Responding to commands",
                "type": "groupMarker"
              },
              {
                "title": "Controlling hit testing",
                "type": "groupMarker"
              },
              {
                "title": "Interacting with the Digital Crown",
                "type": "groupMarker"
              },
              {
                "title": "Managing Touch Bar input",
                "type": "groupMarker"
              },
              {
                "title": "Responding to capture events",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/input-events",
            "title": "Input events",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Copying transferable items",
                "type": "groupMarker"
              },
              {
                "title": "Copying items using item providers",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/clipboard",
            "title": "Clipboard",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/adopting-drag-and-drop-using-swiftui",
                "title": "Adopting drag and drop using SwiftUI",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/making-a-view-into-a-drag-source",
                "title": "Making a view into a drag source",
                "type": "article"
              },
              {
                "title": "Moving transferable items",
                "type": "groupMarker"
              },
              {
                "title": "Moving items using item providers",
                "type": "groupMarker"
              },
              {
                "title": "Configuring spring loading",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/drag-and-drop",
            "title": "Drag and drop",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/focus-cookbook-sample",
                "title": "Focus Cookbook: Supporting and enhancing focus-driven interactions in your SwiftUI app",
                "type": "sampleCode"
              },
              {
                "title": "Indicating that a view can receive focus",
                "type": "groupMarker"
              },
              {
                "title": "Managing focus state",
                "type": "groupMarker"
              },
              {
                "title": "Exposing value types to focused views",
                "type": "groupMarker"
              },
              {
                "title": "Exposing reference types to focused views",
                "type": "groupMarker"
              },
              {
                "title": "Setting focus scope",
                "type": "groupMarker"
              },
              {
                "title": "Controlling default focus",
                "type": "groupMarker"
              },
              {
                "title": "Resetting focus",
                "type": "groupMarker"
              },
              {
                "title": "Configuring effects",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/focus",
            "title": "Focus",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Sending and receiving user activities",
                "type": "groupMarker"
              },
              {
                "title": "Sending and receiving URLs",
                "type": "groupMarker"
              },
              {
                "title": "Handling external events",
                "type": "groupMarker"
              },
              {
                "title": "Handling background tasks",
                "type": "groupMarker"
              },
              {
                "title": "Importing and exporting transferable items",
                "type": "groupMarker"
              },
              {
                "title": "Importing and exporting using item providers",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/system-events",
            "title": "System events",
            "type": "collection"
          },
          {
            "title": "Accessibility",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "title": "Creating accessible elements",
                "type": "groupMarker"
              },
              {
                "title": "Identifying elements",
                "type": "groupMarker"
              },
              {
                "title": "Hiding elements",
                "type": "groupMarker"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/accessibility-fundamentals",
            "title": "Accessibility fundamentals",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Managing color",
                "type": "groupMarker"
              },
              {
                "title": "Enlarging content",
                "type": "groupMarker"
              },
              {
                "title": "Improving legibility",
                "type": "groupMarker"
              },
              {
                "title": "Minimizing motion",
                "type": "groupMarker"
              },
              {
                "title": "Using assistive access",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/accessible-appearance",
            "title": "Accessible appearance",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Adding actions to views",
                "type": "groupMarker"
              },
              {
                "title": "Offering Quick Actions to people",
                "type": "groupMarker"
              },
              {
                "title": "Making gestures accessible",
                "type": "groupMarker"
              },
              {
                "title": "Controlling focus",
                "type": "groupMarker"
              },
              {
                "title": "Managing interactivity",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/accessible-controls",
            "title": "Accessible controls",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Applying labels",
                "type": "groupMarker"
              },
              {
                "title": "Describing values",
                "type": "groupMarker"
              },
              {
                "title": "Describing content",
                "type": "groupMarker"
              },
              {
                "title": "Describing charts",
                "type": "groupMarker"
              },
              {
                "title": "Adding custom descriptions",
                "type": "groupMarker"
              },
              {
                "title": "Assigning traits to content",
                "type": "groupMarker"
              },
              {
                "title": "Offering hints",
                "type": "groupMarker"
              },
              {
                "title": "Configuring VoiceOver",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/accessible-descriptions",
            "title": "Accessible descriptions",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Working with rotors",
                "type": "groupMarker"
              },
              {
                "title": "Creating rotors",
                "type": "groupMarker"
              },
              {
                "title": "Replacing system rotors",
                "type": "groupMarker"
              },
              {
                "title": "Configuring rotors",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/accessible-navigation",
            "title": "Accessible navigation",
            "type": "collection"
          },
          {
            "title": "Framework integration",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Displaying SwiftUI views in AppKit",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/unifying-your-app-s-animations",
                "title": "Unifying your app’s animations",
                "type": "article"
              },
              {
                "title": "Adding AppKit views to SwiftUI view hierarchies",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/appkit-integration",
            "title": "AppKit integration",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Displaying SwiftUI views in UIKit",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/uikit/using-swiftui-with-uikit",
                "title": "Using SwiftUI with UIKit",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/unifying-your-app-s-animations",
                "title": "Unifying your app’s animations",
                "type": "article"
              },
              {
                "title": "Adding UIKit views to SwiftUI view hierarchies",
                "type": "groupMarker"
              },
              {
                "title": "Integrate gesture recognizer into SwiftUI view hierarchies",
                "type": "groupMarker"
              },
              {
                "title": "Sharing configuration information",
                "type": "groupMarker"
              },
              {
                "title": "Hosting an ornament in UIKit",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/uikit-integration",
            "title": "UIKit integration",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Displaying SwiftUI views in WatchKit",
                "type": "groupMarker"
              },
              {
                "title": "Adding WatchKit views to SwiftUI view hierarchies",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/watchkit-integration",
            "title": "WatchKit integration",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Accessing Apple Pay and Wallet",
                "type": "groupMarker"
              },
              {
                "title": "Authorizing and authenticating",
                "type": "groupMarker"
              },
              {
                "title": "Configuring Family Sharing",
                "type": "groupMarker"
              },
              {
                "title": "Reporting on device activity",
                "type": "groupMarker"
              },
              {
                "title": "Working with managed devices",
                "type": "groupMarker"
              },
              {
                "title": "Creating graphics",
                "type": "groupMarker"
              },
              {
                "title": "Getting location information",
                "type": "groupMarker"
              },
              {
                "title": "Displaying media",
                "type": "groupMarker"
              },
              {
                "title": "Selecting photos",
                "type": "groupMarker"
              },
              {
                "title": "Previewing content",
                "type": "groupMarker"
              },
              {
                "title": "Interacting with networked devices",
                "type": "groupMarker"
              },
              {
                "title": "Configuring a Live Activity",
                "type": "groupMarker"
              },
              {
                "title": "Interacting with the App Store and Apple Music",
                "type": "groupMarker"
              },
              {
                "title": "Accessing health data",
                "type": "groupMarker"
              },
              {
                "title": "Providing tips",
                "type": "groupMarker"
              },
              {
                "title": "Showing a translation",
                "type": "groupMarker"
              },
              {
                "title": "Presenting journaling suggestions",
                "type": "groupMarker"
              },
              {
                "title": "Managing contact access",
                "type": "groupMarker"
              },
              {
                "title": "Handling game controller events",
                "type": "groupMarker"
              },
              {
                "title": "Creating a tabletop game",
                "type": "groupMarker"
              },
              {
                "title": "Configuring camera controls",
                "type": "groupMarker"
              },
              {
                "title": "Interacting with transactions",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/technology-specific-views",
            "title": "Technology-specific views",
            "type": "collection"
          },
          {
            "title": "Tool support",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/xcode/previewing-your-apps-interface-in-xcode",
                "title": "Previewing your app’s interface in Xcode",
                "type": "article"
              },
              {
                "title": "Creating a preview",
                "type": "groupMarker"
              },
              {
                "title": "Creating a preview in the context of a scene",
                "type": "groupMarker"
              },
              {
                "title": "Defining a preview",
                "type": "groupMarker"
              },
              {
                "title": "Customizing a preview",
                "type": "groupMarker"
              },
              {
                "title": "Setting a context",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/previews-in-xcode",
            "title": "Previews in Xcode",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating library items",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/xcode-library-customization",
            "title": "Xcode library customization",
            "type": "collection"
          },
          {
            "title": "Protocols",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/swiftui",
        "title": "SwiftUI",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/tutorials/swiftui",
            "title": "Introducing SwiftUI",
            "type": "overview"
          },
          {
            "external": true,
            "path": "/tutorials/swiftui-concepts",
            "title": "Learning SwiftUI",
            "type": "overview"
          },
          {
            "external": true,
            "path": "/tutorials/sample-apps",
            "title": "Exploring SwiftUI Sample Apps",
            "type": "overview"
          },
          {
            "external": true,
            "path": "/documentation/updates/swiftui",
            "title": "SwiftUI updates",
            "type": "article"
          },
          {
            "title": "App structure",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating an app",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/visionos/destination-video",
                "title": "Destination Video",
                "type": "sampleCode"
              },
              {
                "external": true,
                "path": "/documentation/visionos/world",
                "title": "Hello World",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/backyard-birds-sample",
                "title": "Backyard Birds: Building an app with SwiftData and widgets",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/migrating-to-the-swiftui-life-cycle",
                "title": "Migrating to the SwiftUI life cycle",
                "type": "article"
              },
              {
                "title": "Targeting iOS and iPadOS",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/bundleresources/information-property-list/uilaunchscreen",
                "title": "UILaunchScreen",
                "type": "dictionary"
              },
              {
                "external": true,
                "path": "/documentation/bundleresources/information-property-list/uilaunchscreens",
                "title": "UILaunchScreens",
                "type": "dictionary"
              },
              {
                "title": "Targeting macOS",
                "type": "groupMarker"
              },
              {
                "title": "Targeting watchOS",
                "type": "groupMarker"
              },
              {
                "title": "Targeting tvOS",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/creating-a-tvos-media-catalog-app-in-swiftui",
                "title": "Creating a tvOS media catalog app in SwiftUI",
                "type": "sampleCode"
              }
            ],
            "path": "/documentation/swiftui/app-organization",
            "title": "App organization",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating scenes",
                "type": "groupMarker"
              },
              {
                "title": "Monitoring scene life cycle",
                "type": "groupMarker"
              },
              {
                "title": "Managing a settings window",
                "type": "groupMarker"
              },
              {
                "title": "Creating a menu bar extra",
                "type": "groupMarker"
              },
              {
                "title": "Creating watch notifications",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/scenes",
            "title": "Scenes",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/customizing-window-styles-and-state-restoration-behavior-in-macos",
                "title": "Customizing window styles and state-restoration behavior in macOS",
                "type": "sampleCode"
              },
              {
                "title": "Creating windows",
                "type": "groupMarker"
              },
              {
                "title": "Styling the associated toolbar",
                "type": "groupMarker"
              },
              {
                "title": "Opening windows",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/visionos/presenting-windows-and-spaces",
                "title": "Presenting windows and spaces",
                "type": "article"
              },
              {
                "title": "Closing windows",
                "type": "groupMarker"
              },
              {
                "title": "Sizing a window",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/visionos/positioning-and-sizing-windows",
                "title": "Positioning and sizing windows",
                "type": "article"
              },
              {
                "title": "Positioning a window",
                "type": "groupMarker"
              },
              {
                "title": "Configuring window visibility",
                "type": "groupMarker"
              },
              {
                "title": "Managing window behavior",
                "type": "groupMarker"
              },
              {
                "title": "Interacting with volumes",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated Types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/windows",
            "title": "Windows",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating an immersive space",
                "type": "groupMarker"
              },
              {
                "title": "Opening an immersive space",
                "type": "groupMarker"
              },
              {
                "title": "Closing the immersive space",
                "type": "groupMarker"
              },
              {
                "title": "Hiding upper limbs during immersion",
                "type": "groupMarker"
              },
              {
                "title": "Adjusting content brightness",
                "type": "groupMarker"
              },
              {
                "title": "Responding to immersion changes",
                "type": "groupMarker"
              },
              {
                "title": "Adding menu items to an immersive space",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/immersive-spaces",
            "title": "Immersive spaces",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a document",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/building-a-document-based-app-with-swiftui",
                "title": "Building a document-based app with SwiftUI",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/building-a-document-based-app-using-swiftdata",
                "title": "Building a document-based app using SwiftData",
                "type": "sampleCode"
              },
              {
                "title": "Storing document data in a structure instance",
                "type": "groupMarker"
              },
              {
                "title": "Storing document data in a class instance",
                "type": "groupMarker"
              },
              {
                "title": "Accessing document configuration",
                "type": "groupMarker"
              },
              {
                "title": "Reading and writing documents",
                "type": "groupMarker"
              },
              {
                "title": "Opening a document programmatically",
                "type": "groupMarker"
              },
              {
                "title": "Configuring the document launch experience",
                "type": "groupMarker"
              },
              {
                "title": "Renaming a document",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/documents",
            "title": "Documents",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Presenting views in columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/bringing-robust-navigation-structure-to-your-swiftui-app",
                "title": "Bringing robust navigation structure to your SwiftUI app",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/migrating-to-new-navigation-types",
                "title": "Migrating to new navigation types",
                "type": "article"
              },
              {
                "title": "Stacking views in one column",
                "type": "groupMarker"
              },
              {
                "title": "Managing column collapse",
                "type": "groupMarker"
              },
              {
                "title": "Setting titles for navigation content",
                "type": "groupMarker"
              },
              {
                "title": "Configuring the navigation bar",
                "type": "groupMarker"
              },
              {
                "title": "Configuring the sidebar",
                "type": "groupMarker"
              },
              {
                "title": "Presenting views in tabs",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/enhancing-your-app-content-with-tab-navigation",
                "title": "Enhancing your app’s content with tab navigation",
                "type": "sampleCode"
              },
              {
                "title": "Configuring a tab bar",
                "type": "groupMarker"
              },
              {
                "title": "Configuring a tab",
                "type": "groupMarker"
              },
              {
                "title": "Enabling tab customization",
                "type": "groupMarker"
              },
              {
                "title": "Displaying views in multiple panes",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated Types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/navigation",
            "title": "Navigation",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Configuring a dialog",
                "type": "groupMarker"
              },
              {
                "title": "Showing a sheet, cover, or popover",
                "type": "groupMarker"
              },
              {
                "title": "Adapting a presentation size",
                "type": "groupMarker"
              },
              {
                "title": "Configuring a sheet’s height",
                "type": "groupMarker"
              },
              {
                "title": "Styling a sheet and its background",
                "type": "groupMarker"
              },
              {
                "title": "Presenting an alert",
                "type": "groupMarker"
              },
              {
                "title": "Getting confirmation for an action",
                "type": "groupMarker"
              },
              {
                "title": "Showing a confirmation dialog with a message",
                "type": "groupMarker"
              },
              {
                "title": "Configuring a dialog",
                "type": "groupMarker"
              },
              {
                "title": "Exporting to file",
                "type": "groupMarker"
              },
              {
                "title": "Importing from file",
                "type": "groupMarker"
              },
              {
                "title": "Moving a file",
                "type": "groupMarker"
              },
              {
                "title": "Configuring a file dialog",
                "type": "groupMarker"
              },
              {
                "title": "Presenting an inspector",
                "type": "groupMarker"
              },
              {
                "title": "Dismissing a presentation",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated modal presentations",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/modal-presentations",
            "title": "Modal presentations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Populating a toolbar",
                "type": "groupMarker"
              },
              {
                "title": "Populating a customizable toolbar",
                "type": "groupMarker"
              },
              {
                "title": "Removing default items",
                "type": "groupMarker"
              },
              {
                "title": "Setting toolbar visibility",
                "type": "groupMarker"
              },
              {
                "title": "Specifying the role of toolbar content",
                "type": "groupMarker"
              },
              {
                "title": "Styling a toolbar",
                "type": "groupMarker"
              },
              {
                "title": "Configuring the toolbar title display mode",
                "type": "groupMarker"
              },
              {
                "title": "Setting the toolbar title menu",
                "type": "groupMarker"
              },
              {
                "title": "Creating an ornament",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/toolbars",
            "title": "Toolbars",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Searching your app’s data model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/adding-a-search-interface-to-your-app",
                "title": "Adding a search interface to your app",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/performing-a-search-operation",
                "title": "Performing a search operation",
                "type": "article"
              },
              {
                "title": "Making search suggestions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/suggesting-search-terms",
                "title": "Suggesting search terms",
                "type": "article"
              },
              {
                "title": "Limiting search scope",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/scoping-a-search-operation",
                "title": "Scoping a search operation",
                "type": "article"
              },
              {
                "title": "Detecting, activating, and dismissing search",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/managing-search-interface-activation",
                "title": "Managing search interface activation",
                "type": "article"
              },
              {
                "title": "Displaying toolbar content during search",
                "type": "groupMarker"
              },
              {
                "title": "Searching for text in a view with find and replace",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/search",
            "title": "Search",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating widgets",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/widgetkit/creating-a-widget-extension",
                "title": "Creating a widget extension",
                "type": "article"
              },
              {
                "external": true,
                "path": "/documentation/widgetkit/keeping-a-widget-up-to-date",
                "title": "Keeping a widget up to date",
                "type": "article"
              },
              {
                "external": true,
                "path": "/documentation/widgetkit/making-a-configurable-widget",
                "title": "Making a configurable widget",
                "type": "article"
              },
              {
                "title": "Composing control widgets",
                "type": "groupMarker"
              },
              {
                "title": "Labeling a widget",
                "type": "groupMarker"
              },
              {
                "title": "Stying a widget group",
                "type": "groupMarker"
              },
              {
                "title": "Controlling the accented group",
                "type": "groupMarker"
              },
              {
                "title": "Managing placement in the Dynamic Island",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/app-extensions",
            "title": "App extensions",
            "type": "collection"
          },
          {
            "title": "Data and storage",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating and sharing view state",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/managing-user-interface-state",
                "title": "Managing user interface state",
                "type": "article"
              },
              {
                "title": "Creating model data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/managing-model-data-in-your-app",
                "title": "Managing model data in your app",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro",
                "title": "Migrating from the Observable Object protocol to the Observable macro",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/monitoring-model-data-changes-in-your-app",
                "title": "Monitoring data changes in your app",
                "type": "sampleCode"
              },
              {
                "title": "Responding to data changes",
                "type": "groupMarker"
              },
              {
                "title": "Distributing model data throughout your app",
                "type": "groupMarker"
              },
              {
                "title": "Managing dynamic data",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/model-data",
            "title": "Model data",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Accessing environment values",
                "type": "groupMarker"
              },
              {
                "title": "Creating custom environment values",
                "type": "groupMarker"
              },
              {
                "title": "Modifying the environment of a view",
                "type": "groupMarker"
              },
              {
                "title": "Modifying the environment of a scene",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/environment-values",
            "title": "Environment values",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Setting preferences",
                "type": "groupMarker"
              },
              {
                "title": "Creating custom preferences",
                "type": "groupMarker"
              },
              {
                "title": "Setting preferences based on geometry",
                "type": "groupMarker"
              },
              {
                "title": "Responding to changes in preferences",
                "type": "groupMarker"
              },
              {
                "title": "Generating backgrounds and overlays from preferences",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/preferences",
            "title": "Preferences",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Saving state across app launches",
                "type": "groupMarker"
              },
              {
                "title": "Accessing Core Data",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/persistent-storage",
            "title": "Persistent storage",
            "type": "collection"
          },
          {
            "title": "Views",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/declaring-a-custom-view",
                "title": "Declaring a custom view",
                "type": "article"
              },
              {
                "title": "Modifying a view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/configuring-views",
                "title": "Configuring views",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/reducing-view-modifier-maintenance",
                "title": "Reducing view modifier maintenance",
                "type": "article"
              },
              {
                "title": "Responding to view life cycle updates",
                "type": "groupMarker"
              },
              {
                "title": "Managing the view hierarchy",
                "type": "groupMarker"
              },
              {
                "title": "Supporting view types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/view-fundamentals",
            "title": "View fundamentals",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Hiding views",
                "type": "groupMarker"
              },
              {
                "title": "Hiding system elements",
                "type": "groupMarker"
              },
              {
                "title": "Managing view interaction",
                "type": "groupMarker"
              },
              {
                "title": "Providing contextual help",
                "type": "groupMarker"
              },
              {
                "title": "Adding a glass background",
                "type": "groupMarker"
              },
              {
                "title": "Detecting and requesting the light or dark appearance",
                "type": "groupMarker"
              },
              {
                "title": "Getting the color scheme contrast",
                "type": "groupMarker"
              },
              {
                "title": "Configuring passthrough",
                "type": "groupMarker"
              },
              {
                "title": "Redacting private content",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/watchos-apps/designing-your-app-for-the-always-on-state",
                "title": "Designing your app for the Always On state",
                "type": "article"
              }
            ],
            "path": "/documentation/swiftui/view-configuration",
            "title": "View configuration",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Styling buttons",
                "type": "groupMarker"
              },
              {
                "title": "Styling pickers",
                "type": "groupMarker"
              },
              {
                "title": "Styling menus",
                "type": "groupMarker"
              },
              {
                "title": "Styling toggles",
                "type": "groupMarker"
              },
              {
                "title": "Styling indicators",
                "type": "groupMarker"
              },
              {
                "title": "Styling views that display text",
                "type": "groupMarker"
              },
              {
                "title": "Styling collection views",
                "type": "groupMarker"
              },
              {
                "title": "Styling navigation views",
                "type": "groupMarker"
              },
              {
                "title": "Styling groups",
                "type": "groupMarker"
              },
              {
                "title": "Styling windows from a view inside the window",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/view-styles",
            "title": "View styles",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Adding state-based animation to an action",
                "type": "groupMarker"
              },
              {
                "title": "Adding state-based animation to a view",
                "type": "groupMarker"
              },
              {
                "title": "Creating phase-based animation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/controlling-the-timing-and-movements-of-your-animations",
                "title": "Controlling the timing and movements of your animations",
                "type": "sampleCode"
              },
              {
                "title": "Creating keyframe-based animation",
                "type": "groupMarker"
              },
              {
                "title": "Creating custom animations",
                "type": "groupMarker"
              },
              {
                "title": "Making data animatable",
                "type": "groupMarker"
              },
              {
                "title": "Updating a view on a schedule",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/watchos-apps/updating-watchos-apps-with-timelines",
                "title": "Updating watchOS apps with timelines",
                "type": "article"
              },
              {
                "title": "Synchronizing geometries",
                "type": "groupMarker"
              },
              {
                "title": "Defining transitions",
                "type": "groupMarker"
              },
              {
                "title": "Moving an animation to another view",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/animations",
            "title": "Animations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Displaying text",
                "type": "groupMarker"
              },
              {
                "title": "Getting text input",
                "type": "groupMarker"
              },
              {
                "title": "Selecting text",
                "type": "groupMarker"
              },
              {
                "title": "Setting a font",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/applying-custom-fonts-to-text",
                "title": "Applying custom fonts to text",
                "type": "article"
              },
              {
                "title": "Adjusting text size",
                "type": "groupMarker"
              },
              {
                "title": "Controlling text style",
                "type": "groupMarker"
              },
              {
                "title": "Managing text layout",
                "type": "groupMarker"
              },
              {
                "title": "Rendering text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/creating-visual-effects-with-swiftui",
                "title": "Creating visual effects with SwiftUI",
                "type": "sampleCode"
              },
              {
                "title": "Limiting line count for multiline text",
                "type": "groupMarker"
              },
              {
                "title": "Formatting multiline text",
                "type": "groupMarker"
              },
              {
                "title": "Formatting date and time",
                "type": "groupMarker"
              },
              {
                "title": "Managing text entry",
                "type": "groupMarker"
              },
              {
                "title": "Dictating text",
                "type": "groupMarker"
              },
              {
                "title": "Configuring the Writing Tools behavior",
                "type": "groupMarker"
              },
              {
                "title": "Specifying text equivalents",
                "type": "groupMarker"
              },
              {
                "title": "Localizing text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/preparing-views-for-localization",
                "title": "Preparing views for localization",
                "type": "article"
              },
              {
                "title": "Deprecated types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/text-input-and-output",
            "title": "Text input and output",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating an image",
                "type": "groupMarker"
              },
              {
                "title": "Configuring an image",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/fitting-images-into-available-space",
                "title": "Fitting images into available space",
                "type": "article"
              },
              {
                "title": "Loading images asynchronously",
                "type": "groupMarker"
              },
              {
                "title": "Setting a symbol variant",
                "type": "groupMarker"
              },
              {
                "title": "Managing symbol effects",
                "type": "groupMarker"
              },
              {
                "title": "Setting symbol rendering modes",
                "type": "groupMarker"
              },
              {
                "title": "Rendering images from views",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/images",
            "title": "Images",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating buttons",
                "type": "groupMarker"
              },
              {
                "title": "Creating special-purpose buttons",
                "type": "groupMarker"
              },
              {
                "title": "Linking to other content",
                "type": "groupMarker"
              },
              {
                "title": "Getting numeric inputs",
                "type": "groupMarker"
              },
              {
                "title": "Choosing from a set of options",
                "type": "groupMarker"
              },
              {
                "title": "Choosing dates",
                "type": "groupMarker"
              },
              {
                "title": "Choosing a color",
                "type": "groupMarker"
              },
              {
                "title": "Indicating a value",
                "type": "groupMarker"
              },
              {
                "title": "Indicating missing content",
                "type": "groupMarker"
              },
              {
                "title": "Providing haptic feedback",
                "type": "groupMarker"
              },
              {
                "title": "Sizing controls",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/controls-and-indicators",
            "title": "Controls and indicators",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a menu",
                "type": "groupMarker"
              },
              {
                "title": "Creating context menus",
                "type": "groupMarker"
              },
              {
                "title": "Defining commands",
                "type": "groupMarker"
              },
              {
                "title": "Getting built-in command groups",
                "type": "groupMarker"
              },
              {
                "title": "Showing a menu indicator",
                "type": "groupMarker"
              },
              {
                "title": "Configuring menu dismissal",
                "type": "groupMarker"
              },
              {
                "title": "Setting a preferred order",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/menus-and-commands",
            "title": "Menus and commands",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating rectangular shapes",
                "type": "groupMarker"
              },
              {
                "title": "Creating circular shapes",
                "type": "groupMarker"
              },
              {
                "title": "Drawing custom shapes",
                "type": "groupMarker"
              },
              {
                "title": "Defining shape behavior",
                "type": "groupMarker"
              },
              {
                "title": "Transforming a shape",
                "type": "groupMarker"
              },
              {
                "title": "Setting a container shape",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/shapes",
            "title": "Shapes",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Immediate mode drawing",
                "type": "groupMarker"
              },
              {
                "title": "Setting a color",
                "type": "groupMarker"
              },
              {
                "title": "Styling content",
                "type": "groupMarker"
              },
              {
                "title": "Transforming colors",
                "type": "groupMarker"
              },
              {
                "title": "Scaling, rotating, or transforming a view",
                "type": "groupMarker"
              },
              {
                "title": "Masking and clipping",
                "type": "groupMarker"
              },
              {
                "title": "Applying blur and shadows",
                "type": "groupMarker"
              },
              {
                "title": "Applying effects based on geometry",
                "type": "groupMarker"
              },
              {
                "title": "Compositing views",
                "type": "groupMarker"
              },
              {
                "title": "Measuring a view",
                "type": "groupMarker"
              },
              {
                "title": "Responding to a geometry change",
                "type": "groupMarker"
              },
              {
                "title": "Accessing Metal shaders",
                "type": "groupMarker"
              },
              {
                "title": "Accessing geometric constructs",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/drawing-and-graphics",
            "title": "Drawing and graphics",
            "type": "collection"
          },
          {
            "title": "View layout",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Choosing a layout",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/picking-container-views-for-your-content",
                "title": "Picking container views for your content",
                "type": "article"
              },
              {
                "title": "Statically arranging views in one dimension",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/building-layouts-with-stack-views",
                "title": "Building layouts with stack views",
                "type": "article"
              },
              {
                "title": "Dynamically arranging views in one dimension",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/grouping-data-with-lazy-stack-views",
                "title": "Grouping data with lazy stack views",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/creating-performant-scrollable-stacks",
                "title": "Creating performant scrollable stacks",
                "type": "article"
              },
              {
                "title": "Statically arranging views in two dimensions",
                "type": "groupMarker"
              },
              {
                "title": "Dynamically arranging views in two dimensions",
                "type": "groupMarker"
              },
              {
                "title": "Layering views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/adding-a-background-to-your-view",
                "title": "Adding a background to your view",
                "type": "article"
              },
              {
                "title": "Automatically choosing the layout that fits",
                "type": "groupMarker"
              },
              {
                "title": "Separators",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/layout-fundamentals",
            "title": "Layout fundamentals",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Finetuning a layout",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/laying-out-a-simple-view",
                "title": "Laying out a simple view",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/inspecting-view-layout",
                "title": "Inspecting view layout",
                "type": "article"
              },
              {
                "title": "Adding padding around a view",
                "type": "groupMarker"
              },
              {
                "title": "Influencing a view’s size",
                "type": "groupMarker"
              },
              {
                "title": "Adjusting a view’s position",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/making-fine-adjustments-to-a-view-s-position",
                "title": "Making fine adjustments to a view’s position",
                "type": "article"
              },
              {
                "title": "Aligning views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/aligning-views-within-a-stack",
                "title": "Aligning views within a stack",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/aligning-views-across-stacks",
                "title": "Aligning views across stacks",
                "type": "article"
              },
              {
                "title": "Setting margins",
                "type": "groupMarker"
              },
              {
                "title": "Staying in the safe areas",
                "type": "groupMarker"
              },
              {
                "title": "Setting a layout direction",
                "type": "groupMarker"
              },
              {
                "title": "Reacting to interface characteristics",
                "type": "groupMarker"
              },
              {
                "title": "Accessing edges and regions",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/layout-adjustments",
            "title": "Layout adjustments",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a custom layout container",
                "type": "groupMarker"
              },
              {
                "title": "Configuring a custom layout",
                "type": "groupMarker"
              },
              {
                "title": "Associating values with views in a custom layout",
                "type": "groupMarker"
              },
              {
                "title": "Transitioning between layout types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/custom-layout",
            "title": "Custom layout",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a list",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/displaying-data-in-lists",
                "title": "Displaying data in lists",
                "type": "article"
              },
              {
                "title": "Disclosing information progressively",
                "type": "groupMarker"
              },
              {
                "title": "Configuring rows",
                "type": "groupMarker"
              },
              {
                "title": "Configuring separators",
                "type": "groupMarker"
              },
              {
                "title": "Configuring headers",
                "type": "groupMarker"
              },
              {
                "title": "Configuring spacing",
                "type": "groupMarker"
              },
              {
                "title": "Configuring backgrounds",
                "type": "groupMarker"
              },
              {
                "title": "Displaying a badge on a list item",
                "type": "groupMarker"
              },
              {
                "title": "Configuring interaction",
                "type": "groupMarker"
              },
              {
                "title": "Refreshing a list’s content",
                "type": "groupMarker"
              },
              {
                "title": "Editing a list",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/lists",
            "title": "Lists",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a table",
                "type": "groupMarker"
              },
              {
                "title": "Creating columns",
                "type": "groupMarker"
              },
              {
                "title": "Customizing columns",
                "type": "groupMarker"
              },
              {
                "title": "Creating rows",
                "type": "groupMarker"
              },
              {
                "title": "Adding progressive disclosure",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/tables",
            "title": "Tables",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Grouping views into a container",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/creating-custom-container-views",
                "title": "Creating custom container views",
                "type": "sampleCode"
              },
              {
                "title": "Organizing views into sections",
                "type": "groupMarker"
              },
              {
                "title": "Iterating over dynamic data",
                "type": "groupMarker"
              },
              {
                "title": "Accessing a container’s subviews",
                "type": "groupMarker"
              },
              {
                "title": "Grouping views into a box",
                "type": "groupMarker"
              },
              {
                "title": "Grouping inputs",
                "type": "groupMarker"
              },
              {
                "title": "Presenting a group of controls",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/view-groupings",
            "title": "View groupings",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a scroll view",
                "type": "groupMarker"
              },
              {
                "title": "Managing scroll position",
                "type": "groupMarker"
              },
              {
                "title": "Defining scroll targets",
                "type": "groupMarker"
              },
              {
                "title": "Animating scroll transitions",
                "type": "groupMarker"
              },
              {
                "title": "Responding to scroll view changes",
                "type": "groupMarker"
              },
              {
                "title": "Showing scroll indicators",
                "type": "groupMarker"
              },
              {
                "title": "Managing content visibility",
                "type": "groupMarker"
              },
              {
                "title": "Disabling scrolling",
                "type": "groupMarker"
              },
              {
                "title": "Configuring scroll bounce behavior",
                "type": "groupMarker"
              },
              {
                "title": "Interacting with a software keyboard",
                "type": "groupMarker"
              },
              {
                "title": "Managing scrolling for different inputs",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/scroll-views",
            "title": "Scroll views",
            "type": "collection"
          },
          {
            "title": "Event handling",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/adding-interactivity-with-gestures",
                "title": "Adding interactivity with gestures",
                "type": "article"
              },
              {
                "title": "Recognizing tap gestures",
                "type": "groupMarker"
              },
              {
                "title": "Recognizing long press gestures",
                "type": "groupMarker"
              },
              {
                "title": "Recognizing spatial events",
                "type": "groupMarker"
              },
              {
                "title": "Recognizing gestures that change over time",
                "type": "groupMarker"
              },
              {
                "title": "Recognizing Apple Pencil gestures",
                "type": "groupMarker"
              },
              {
                "title": "Combining gestures",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/composing-swiftui-gestures",
                "title": "Composing SwiftUI gestures",
                "type": "article"
              },
              {
                "title": "Defining custom gestures",
                "type": "groupMarker"
              },
              {
                "title": "Managing gesture state",
                "type": "groupMarker"
              },
              {
                "title": "Handling activation events",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated gestures",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/gestures",
            "title": "Gestures",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Responding to keyboard input",
                "type": "groupMarker"
              },
              {
                "title": "Creating keyboard shortcuts",
                "type": "groupMarker"
              },
              {
                "title": "Responding to modifier keys",
                "type": "groupMarker"
              },
              {
                "title": "Responding to hover events",
                "type": "groupMarker"
              },
              {
                "title": "Modifying pointer appearance",
                "type": "groupMarker"
              },
              {
                "title": "Changing view appearance for hover events",
                "type": "groupMarker"
              },
              {
                "title": "Responding to submission events",
                "type": "groupMarker"
              },
              {
                "title": "Labeling a submission event",
                "type": "groupMarker"
              },
              {
                "title": "Responding to commands",
                "type": "groupMarker"
              },
              {
                "title": "Controlling hit testing",
                "type": "groupMarker"
              },
              {
                "title": "Interacting with the Digital Crown",
                "type": "groupMarker"
              },
              {
                "title": "Managing Touch Bar input",
                "type": "groupMarker"
              },
              {
                "title": "Responding to capture events",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/input-events",
            "title": "Input events",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Copying transferable items",
                "type": "groupMarker"
              },
              {
                "title": "Copying items using item providers",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/clipboard",
            "title": "Clipboard",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/adopting-drag-and-drop-using-swiftui",
                "title": "Adopting drag and drop using SwiftUI",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/making-a-view-into-a-drag-source",
                "title": "Making a view into a drag source",
                "type": "article"
              },
              {
                "title": "Moving transferable items",
                "type": "groupMarker"
              },
              {
                "title": "Moving items using item providers",
                "type": "groupMarker"
              },
              {
                "title": "Configuring spring loading",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/drag-and-drop",
            "title": "Drag and drop",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/focus-cookbook-sample",
                "title": "Focus Cookbook: Supporting and enhancing focus-driven interactions in your SwiftUI app",
                "type": "sampleCode"
              },
              {
                "title": "Indicating that a view can receive focus",
                "type": "groupMarker"
              },
              {
                "title": "Managing focus state",
                "type": "groupMarker"
              },
              {
                "title": "Exposing value types to focused views",
                "type": "groupMarker"
              },
              {
                "title": "Exposing reference types to focused views",
                "type": "groupMarker"
              },
              {
                "title": "Setting focus scope",
                "type": "groupMarker"
              },
              {
                "title": "Controlling default focus",
                "type": "groupMarker"
              },
              {
                "title": "Resetting focus",
                "type": "groupMarker"
              },
              {
                "title": "Configuring effects",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/focus",
            "title": "Focus",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Sending and receiving user activities",
                "type": "groupMarker"
              },
              {
                "title": "Sending and receiving URLs",
                "type": "groupMarker"
              },
              {
                "title": "Handling external events",
                "type": "groupMarker"
              },
              {
                "title": "Handling background tasks",
                "type": "groupMarker"
              },
              {
                "title": "Importing and exporting transferable items",
                "type": "groupMarker"
              },
              {
                "title": "Importing and exporting using item providers",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/system-events",
            "title": "System events",
            "type": "collection"
          },
          {
            "title": "Accessibility",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "title": "Creating accessible elements",
                "type": "groupMarker"
              },
              {
                "title": "Identifying elements",
                "type": "groupMarker"
              },
              {
                "title": "Hiding elements",
                "type": "groupMarker"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/accessibility-fundamentals",
            "title": "Accessibility fundamentals",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Managing color",
                "type": "groupMarker"
              },
              {
                "title": "Enlarging content",
                "type": "groupMarker"
              },
              {
                "title": "Improving legibility",
                "type": "groupMarker"
              },
              {
                "title": "Minimizing motion",
                "type": "groupMarker"
              },
              {
                "title": "Using assistive access",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/accessible-appearance",
            "title": "Accessible appearance",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Adding actions to views",
                "type": "groupMarker"
              },
              {
                "title": "Offering Quick Actions to people",
                "type": "groupMarker"
              },
              {
                "title": "Making gestures accessible",
                "type": "groupMarker"
              },
              {
                "title": "Controlling focus",
                "type": "groupMarker"
              },
              {
                "title": "Managing interactivity",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/accessible-controls",
            "title": "Accessible controls",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Applying labels",
                "type": "groupMarker"
              },
              {
                "title": "Describing values",
                "type": "groupMarker"
              },
              {
                "title": "Describing content",
                "type": "groupMarker"
              },
              {
                "title": "Describing charts",
                "type": "groupMarker"
              },
              {
                "title": "Adding custom descriptions",
                "type": "groupMarker"
              },
              {
                "title": "Assigning traits to content",
                "type": "groupMarker"
              },
              {
                "title": "Offering hints",
                "type": "groupMarker"
              },
              {
                "title": "Configuring VoiceOver",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/accessible-descriptions",
            "title": "Accessible descriptions",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Working with rotors",
                "type": "groupMarker"
              },
              {
                "title": "Creating rotors",
                "type": "groupMarker"
              },
              {
                "title": "Replacing system rotors",
                "type": "groupMarker"
              },
              {
                "title": "Configuring rotors",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/accessible-navigation",
            "title": "Accessible navigation",
            "type": "collection"
          },
          {
            "title": "Framework integration",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Displaying SwiftUI views in AppKit",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/unifying-your-app-s-animations",
                "title": "Unifying your app’s animations",
                "type": "article"
              },
              {
                "title": "Adding AppKit views to SwiftUI view hierarchies",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/appkit-integration",
            "title": "AppKit integration",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Displaying SwiftUI views in UIKit",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/uikit/using-swiftui-with-uikit",
                "title": "Using SwiftUI with UIKit",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/unifying-your-app-s-animations",
                "title": "Unifying your app’s animations",
                "type": "article"
              },
              {
                "title": "Adding UIKit views to SwiftUI view hierarchies",
                "type": "groupMarker"
              },
              {
                "title": "Integrate gesture recognizer into SwiftUI view hierarchies",
                "type": "groupMarker"
              },
              {
                "title": "Sharing configuration information",
                "type": "groupMarker"
              },
              {
                "title": "Hosting an ornament in UIKit",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/uikit-integration",
            "title": "UIKit integration",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Displaying SwiftUI views in WatchKit",
                "type": "groupMarker"
              },
              {
                "title": "Adding WatchKit views to SwiftUI view hierarchies",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/watchkit-integration",
            "title": "WatchKit integration",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Accessing Apple Pay and Wallet",
                "type": "groupMarker"
              },
              {
                "title": "Authorizing and authenticating",
                "type": "groupMarker"
              },
              {
                "title": "Configuring Family Sharing",
                "type": "groupMarker"
              },
              {
                "title": "Reporting on device activity",
                "type": "groupMarker"
              },
              {
                "title": "Working with managed devices",
                "type": "groupMarker"
              },
              {
                "title": "Creating graphics",
                "type": "groupMarker"
              },
              {
                "title": "Getting location information",
                "type": "groupMarker"
              },
              {
                "title": "Displaying media",
                "type": "groupMarker"
              },
              {
                "title": "Selecting photos",
                "type": "groupMarker"
              },
              {
                "title": "Previewing content",
                "type": "groupMarker"
              },
              {
                "title": "Interacting with networked devices",
                "type": "groupMarker"
              },
              {
                "title": "Configuring a Live Activity",
                "type": "groupMarker"
              },
              {
                "title": "Interacting with the App Store and Apple Music",
                "type": "groupMarker"
              },
              {
                "title": "Accessing health data",
                "type": "groupMarker"
              },
              {
                "title": "Providing tips",
                "type": "groupMarker"
              },
              {
                "title": "Showing a translation",
                "type": "groupMarker"
              },
              {
                "title": "Presenting journaling suggestions",
                "type": "groupMarker"
              },
              {
                "title": "Managing contact access",
                "type": "groupMarker"
              },
              {
                "title": "Handling game controller events",
                "type": "groupMarker"
              },
              {
                "title": "Creating a tabletop game",
                "type": "groupMarker"
              },
              {
                "title": "Configuring camera controls",
                "type": "groupMarker"
              },
              {
                "title": "Interacting with transactions",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/technology-specific-views",
            "title": "Technology-specific views",
            "type": "collection"
          },
          {
            "title": "Tool support",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/xcode/previewing-your-apps-interface-in-xcode",
                "title": "Previewing your app’s interface in Xcode",
                "type": "article"
              },
              {
                "title": "Creating a preview",
                "type": "groupMarker"
              },
              {
                "title": "Creating a preview in the context of a scene",
                "type": "groupMarker"
              },
              {
                "title": "Defining a preview",
                "type": "groupMarker"
              },
              {
                "title": "Customizing a preview",
                "type": "groupMarker"
              },
              {
                "title": "Setting a context",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/previews-in-xcode",
            "title": "Previews in Xcode",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating library items",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/swiftui/xcode-library-customization",
            "title": "Xcode library customization",
            "type": "collection"
          },
          {
            "title": "Protocols",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/swiftui",
        "title": "SwiftUI",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/tutorials/swiftui",
            "title": "Introducing SwiftUI",
            "type": "overview"
          },
          {
            "external": true,
            "path": "/tutorials/swiftui-concepts",
            "title": "Learning SwiftUI",
            "type": "overview"
          },
          {
            "external": true,
            "path": "/tutorials/sample-apps",
            "title": "Exploring SwiftUI Sample Apps",
            "type": "overview"
          },
          {
            "external": true,
            "path": "/documentation/updates/swiftui",
            "title": "SwiftUI updates",
            "type": "article"
          },
          {
            "title": "App structure",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating an app",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/visionos/destination-video",
                "title": "Destination Video",
                "type": "sampleCode"
              },
              {
                "external": true,
                "path": "/documentation/visionos/world",
                "title": "Hello World",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/backyard-birds-sample",
                "title": "Backyard Birds: Building an app with SwiftData and widgets",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/food_truck_building_a_swiftui_multiplatform_app",
                "title": "Food Truck: Building a SwiftUI multiplatform app",
                "type": "sampleCode"
              },
              {
                "external": true,
                "path": "/documentation/appclip/fruta_building_a_feature-rich_app_with_swiftui",
                "title": "Fruta: Building a Feature-Rich App with SwiftUI",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/migrating-to-the-swiftui-life-cycle",
                "title": "Migrating to the SwiftUI life cycle",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Implementing an app",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/app/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/app/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Running an app",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/app/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/app/main()",
                    "title": "static func main()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/app",
                "title": "App",
                "type": "protocol"
              },
              {
                "title": "Targeting iOS and iPadOS",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/bundleresources/information-property-list/uilaunchscreen",
                "title": "UILaunchScreen",
                "type": "dictionary"
              },
              {
                "external": true,
                "path": "/documentation/bundleresources/information-property-list/uilaunchscreens",
                "title": "UILaunchScreens",
                "type": "dictionary"
              },
              {
                "children": [
                  {
                    "title": "Creating a delegate adaptor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiapplicationdelegateadaptor/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the delegate adaptor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiapplicationdelegateadaptor/projectedvalue",
                    "title": "var projectedValue: ObservedObject<DelegateType>.Wrapper",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uiapplicationdelegateadaptor/wrappedvalue",
                    "title": "var wrappedValue: DelegateType",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/uiapplicationdelegateadaptor",
                "title": "UIApplicationDelegateAdaptor",
                "type": "struct"
              },
              {
                "title": "Targeting macOS",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a delegate adaptor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsapplicationdelegateadaptor/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the delegate adaptor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsapplicationdelegateadaptor/projectedvalue",
                    "title": "var projectedValue: ObservedObject<DelegateType>.Wrapper",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nsapplicationdelegateadaptor/wrappedvalue",
                    "title": "var wrappedValue: DelegateType",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/nsapplicationdelegateadaptor",
                "title": "NSApplicationDelegateAdaptor",
                "type": "struct"
              },
              {
                "title": "Targeting watchOS",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a delegate adaptor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkapplicationdelegateadaptor/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the delegate adaptor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkapplicationdelegateadaptor/projectedvalue",
                    "title": "var projectedValue: ObservedObject<DelegateType>.Wrapper",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/wkapplicationdelegateadaptor/wrappedvalue",
                    "title": "var wrappedValue: DelegateType",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/wkapplicationdelegateadaptor",
                "title": "WKApplicationDelegateAdaptor",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a delegate adaptor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkextensiondelegateadaptor/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the delegate adaptor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkextensiondelegateadaptor/projectedvalue",
                    "title": "var projectedValue: ObservedObject<DelegateType>.Wrapper",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/wkextensiondelegateadaptor/wrappedvalue",
                    "title": "var wrappedValue: DelegateType",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/wkextensiondelegateadaptor",
                "title": "WKExtensionDelegateAdaptor",
                "type": "struct"
              },
              {
                "title": "Targeting tvOS",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/creating-a-tvos-media-catalog-app-in-swiftui",
                "title": "Creating a tvOS media catalog app in SwiftUI",
                "type": "sampleCode"
              }
            ],
            "path": "/documentation/swiftui/app-organization",
            "title": "App organization",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating scenes",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a scene",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scene/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Watching for changes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/onchange(of:initial:_:)",
                    "title": "func onChange(of:initial:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/handlesexternalevents(matching:)",
                    "title": "func handlesExternalEvents(matching: Set<String>) -> some Scene",
                    "type": "method"
                  },
                  {
                    "title": "Creating background tasks",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/backgroundtask(_:action:)",
                    "title": "func backgroundTask<D, R>(BackgroundTask<D, R>, action: (D) async -> R) -> some Scene",
                    "type": "method"
                  },
                  {
                    "title": "Managing app storage",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/defaultappstorage(_:)",
                    "title": "func defaultAppStorage(UserDefaults) -> some Scene",
                    "type": "method"
                  },
                  {
                    "title": "Setting commands",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/commands(content:)",
                    "title": "func commands<Content>(content: () -> Content) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/commandsremoved()",
                    "title": "func commandsRemoved() -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/commandsreplaced(content:)",
                    "title": "func commandsReplaced<Content>(content: () -> Content) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/keyboardshortcut(_:)",
                    "title": "func keyboardShortcut(KeyboardShortcut?) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/keyboardshortcut(_:modifiers:localization:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some Scene",
                    "type": "method"
                  },
                  {
                    "title": "Sizing and positioning the scene",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/defaultposition(_:)",
                    "title": "func defaultPosition(UnitPoint) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/defaultsize(_:)",
                    "title": "func defaultSize(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/defaultsize(width:height:)",
                    "title": "func defaultSize(width: CGFloat, height: CGFloat) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/defaultsize(width:height:depth:)",
                    "title": "func defaultSize(width: CGFloat, height: CGFloat, depth: CGFloat) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/defaultsize(_:in:)",
                    "title": "func defaultSize(Size3D, in: UnitLength) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/defaultsize(width:height:depth:in:)",
                    "title": "func defaultSize(width: CGFloat, height: CGFloat, depth: CGFloat, in: UnitLength) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/defaultwindowplacement(_:)",
                    "title": "func defaultWindowPlacement((WindowLayoutRoot, WindowPlacementContext) -> WindowPlacement) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/windowresizability(_:)",
                    "title": "func windowResizability(WindowResizability) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/windowidealsize(_:)",
                    "title": "func windowIdealSize(WindowIdealSize) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/windowidealplacement(_:)",
                    "title": "func windowIdealPlacement((WindowLayoutRoot, WindowPlacementContext) -> WindowPlacement) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/windowmanagerrole(_:)",
                    "title": "func windowManagerRole(WindowManagerRole) -> some Scene",
                    "type": "method"
                  },
                  {
                    "title": "Interacting with volumes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/volumeworldalignment(_:)",
                    "title": "func volumeWorldAlignment(WorldAlignmentBehavior) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/defaultworldscaling(_:)",
                    "title": "func defaultWorldScaling(WorldScalingBehavior) -> some Scene",
                    "type": "method"
                  },
                  {
                    "title": "Configuring scene visibility",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/defaultlaunchbehavior(_:)",
                    "title": "func defaultLaunchBehavior(SceneLaunchBehavior) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/restorationbehavior(_:)",
                    "title": "func restorationBehavior(SceneRestorationBehavior) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/persistentsystemoverlays(_:)",
                    "title": "func persistentSystemOverlays(Visibility) -> some Scene",
                    "type": "method"
                  },
                  {
                    "title": "Styling the scene",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/immersionstyle(selection:in:)",
                    "title": "func immersionStyle(selection: Binding<any ImmersionStyle>, in: any ImmersionStyle...) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/upperlimbvisibility(_:)",
                    "title": "func upperLimbVisibility(Visibility) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/windowstyle(_:)",
                    "title": "func windowStyle<S>(S) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/windowlevel(_:)",
                    "title": "func windowLevel(WindowLevel) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/windowtoolbarstyle(_:)",
                    "title": "func windowToolbarStyle<S>(S) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/windowtoolbarlabelstyle(_:)",
                    "title": "func windowToolbarLabelStyle(Binding<ToolbarLabelStyle>) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/windowtoolbarlabelstyle(fixed:)",
                    "title": "func windowToolbarLabelStyle(fixed: ToolbarLabelStyle) -> some Scene",
                    "type": "method"
                  },
                  {
                    "title": "Configuring a data model",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/modelcontext(_:)",
                    "title": "func modelContext(ModelContext) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/modelcontainer(_:)",
                    "title": "func modelContainer(ModelContainer) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/modelcontainer(for:inmemory:isautosaveenabled:isundoenabled:onsetup:)",
                    "title": "func modelContainer(for:inMemory:isAutosaveEnabled:isUndoEnabled:onSetup:)",
                    "type": "method"
                  },
                  {
                    "title": "Managing the environment",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/environment(_:)",
                    "title": "func environment<T>(T?) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/environment(_:_:)",
                    "title": "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/environmentobject(_:)",
                    "title": "func environmentObject<T>(T) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/transformenvironment(_:transform:)",
                    "title": "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some Scene",
                    "type": "method"
                  },
                  {
                    "title": "Interacting with dialogs",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/dialogicon(_:)",
                    "title": "func dialogIcon(Image?) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/dialogseverity(_:)",
                    "title": "func dialogSeverity(DialogSeverity) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/dialogsuppressiontoggle(issuppressed:)",
                    "title": "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/dialogsuppressiontoggle(_:issuppressed:)",
                    "title": "func dialogSuppressionToggle(_:isSuppressed:)",
                    "type": "method"
                  },
                  {
                    "title": "Supporting drag behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/windowbackgrounddragbehavior(_:)",
                    "title": "func windowBackgroundDragBehavior(WindowInteractionBehavior) -> some Scene",
                    "type": "method"
                  },
                  {
                    "title": "Deprecated symbols",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/scene/onchange(of:perform:)",
                    "title": "func onChange<V>(of: V, perform: (V) -> Void) -> some Scene",
                    "type": "method"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scene/documentbrowsercontextmenu(_:)",
                    "title": "func documentBrowserContextMenu(([URL]?) -> some View) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/immersivecontentbrightness(_:)",
                    "title": "func immersiveContentBrightness(ImmersiveContentBrightness) -> some Scene",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scene/menubarextrastyle(_:)",
                    "title": "func menuBarExtraStyle<S>(S) -> some Scene",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/scene",
                "title": "Scene",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Building content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scenebuilder/buildblock(_:)",
                    "title": "static buildBlock(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scenebuilder/buildexpression(_:)",
                    "title": "static func buildExpression<Content>(Content) -> Content",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scenebuilder/buildlimitedavailability(_:)",
                    "title": "static buildLimitedAvailability(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scenebuilder/buildoptional(_:)",
                    "title": "static func buildOptional((any Scene & _LimitedAvailabilitySceneMarker)?) -> some Scene",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/scenebuilder",
                "title": "SceneBuilder",
                "type": "struct"
              },
              {
                "title": "Monitoring scene life cycle",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/scenephase",
                "title": "var scenePhase: ScenePhase",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting scene phases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scenephase/active",
                    "title": "case active",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/scenephase/inactive",
                    "title": "case inactive",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/scenephase/background",
                    "title": "case background",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/scenephase",
                "title": "ScenePhase",
                "type": "enum"
              },
              {
                "title": "Managing a settings window",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a settings scene",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/settings/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/settings",
                "title": "Settings",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a settings link",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/settingslink/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/settingslink/init(label:)",
                    "title": "init(label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/defaultsettingslinklabel",
                    "title": "DefaultSettingsLinkLabel",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/settingslink",
                "title": "SettingsLink",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/opensettingsaction/callasfunction()",
                    "title": "func callAsFunction()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/opensettingsaction",
                "title": "OpenSettingsAction",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/opensettings",
                "title": "var openSettings: OpenSettingsAction",
                "type": "property"
              },
              {
                "title": "Creating a menu bar extra",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a menu bar extra",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/menubarextra/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/menubarextra/init(content:label:)",
                    "title": "init(content: () -> Content, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/menubarextra/init(_:isinserted:content:)",
                    "title": "init(_:isInserted:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/menubarextra/init(isinserted:content:label:)",
                    "title": "init(isInserted: Binding<Bool>, content: () -> Content, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a menu bar extra with an image",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/menubarextra/init(_:image:content:)",
                    "title": "init(_:image:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/menubarextra/init(_:image:isinserted:content:)",
                    "title": "init(_:image:isInserted:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/menubarextra/init(_:systemimage:content:)",
                    "title": "init(_:systemImage:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/menubarextra/init(_:systemimage:isinserted:content:)",
                    "title": "init(_:systemImage:isInserted:content:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/menubarextra",
                "title": "MenuBarExtra",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/scene/menubarextrastyle(_:)",
                "title": "func menuBarExtraStyle<S>(S) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting menu bar extra styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/menubarextrastyle/automatic",
                    "title": "static var automatic: AutomaticMenuBarExtraStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/menubarextrastyle/menu",
                    "title": "static var menu: PullDownMenuBarExtraStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/menubarextrastyle/window",
                    "title": "static var window: WindowMenuBarExtraStyle",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the menu bar extra style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/automaticmenubarextrastyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/automaticmenubarextrastyle",
                    "title": "AutomaticMenuBarExtraStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the menu bar extra style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/pulldownmenubarextrastyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/pulldownmenubarextrastyle",
                    "title": "PullDownMenuBarExtraStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the menu bar extra style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/windowmenubarextrastyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/windowmenubarextrastyle",
                    "title": "WindowMenuBarExtraStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/menubarextrastyle",
                "title": "MenuBarExtraStyle",
                "type": "protocol"
              },
              {
                "title": "Creating watch notifications",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a notification scene",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wknotificationscene/init(controller:category:)",
                    "title": "init(controller: Controller.Type, category: String)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/wknotificationscene",
                "title": "WKNotificationScene",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/scenes",
            "title": "Scenes",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/customizing-window-styles-and-state-restoration-behavior-in-macos",
                "title": "Customizing window styles and state-restoration behavior in macOS",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/bringing_multiple_windows_to_your_swiftui_app",
                "title": "Bringing multiple windows to your SwiftUI app",
                "type": "sampleCode"
              },
              {
                "title": "Creating windows",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a window group",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/windowgroup/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/windowgroup/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Identifying a window group",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/windowgroup/init(id:content:)",
                    "title": "init(id: String, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/windowgroup/init(_:id:content:)",
                    "title": "init(_:id:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a data-driven window group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowgroup/init(for:content:)",
                    "title": "init<D, C>(for: D.Type, content: (Binding<D?>) -> C)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/windowgroup/init(_:for:content:)",
                    "title": "init(_:for:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Providing default data to a window group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowgroup/init(for:content:defaultvalue:)",
                    "title": "init<D, C>(for: D.Type, content: (Binding<D>) -> C, defaultValue: () -> D)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/windowgroup/init(_:for:content:defaultvalue:)",
                    "title": "init(_:for:content:defaultValue:)",
                    "type": "init"
                  },
                  {
                    "title": "Identifying a data-driven window group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowgroup/init(id:for:content:)",
                    "title": "init<D, C>(id: String, for: D.Type, content: (Binding<D?>) -> C)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/windowgroup/init(_:id:for:content:)",
                    "title": "init(_:id:for:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Identifying a window group that has default data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowgroup/init(id:for:content:defaultvalue:)",
                    "title": "init<D, C>(id: String, for: D.Type, content: (Binding<D>) -> C, defaultValue: () -> D)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/windowgroup/init(_:id:for:content:defaultvalue:)",
                    "title": "init(_:id:for:content:defaultValue:)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/presentedwindowcontent",
                    "title": "PresentedWindowContent",
                    "type": "struct"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowgroup/init(_:id:makecontent:)",
                    "title": "init(_:id:makeContent:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/windowgroup/init(_:makecontent:)",
                    "title": "init(_:makeContent:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/windowgroup/init(id:makecontent:)",
                    "title": "init(id: String, makeContent: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/windowgroup/init(makecontent:)",
                    "title": "init(makeContent: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/windowgroup",
                "title": "WindowGroup",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a window",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/window/init(_:id:content:)",
                    "title": "init(_:id:content:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/window",
                "title": "Window",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/utilitywindow/init(_:id:content:)",
                    "title": "init(_:id:content:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/utilitywindow",
                "title": "UtilityWindow",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in window styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowstyle/automatic",
                    "title": "static var automatic: DefaultWindowStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowstyle/hiddentitlebar",
                    "title": "static var hiddenTitleBar: HiddenTitleBarWindowStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowstyle/plain",
                    "title": "static var plain: PlainWindowStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowstyle/titlebar",
                    "title": "static var titleBar: TitleBarWindowStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowstyle/volumetric",
                    "title": "static var volumetric: VolumetricWindowStyle",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultwindowstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaultwindowstyle",
                    "title": "DefaultWindowStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/hiddentitlebarwindowstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/hiddentitlebarwindowstyle",
                    "title": "HiddenTitleBarWindowStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/plainwindowstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/plainwindowstyle",
                    "title": "PlainWindowStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/titlebarwindowstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/titlebarwindowstyle",
                    "title": "TitleBarWindowStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/volumetricwindowstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/volumetricwindowstyle",
                    "title": "VolumetricWindowStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/windowstyle",
                "title": "WindowStyle",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/scene/windowstyle(_:)",
                "title": "func windowStyle<S>(S) -> some Scene",
                "type": "method"
              },
              {
                "title": "Styling the associated toolbar",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/scene/windowtoolbarstyle(_:)",
                "title": "func windowToolbarStyle<S>(S) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/windowtoolbarlabelstyle(_:)",
                "title": "func windowToolbarLabelStyle(Binding<ToolbarLabelStyle>) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/windowtoolbarlabelstyle(fixed:)",
                "title": "func windowToolbarLabelStyle(fixed: ToolbarLabelStyle) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in window toolbar styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarstyle/automatic",
                    "title": "static var automatic: DefaultWindowToolbarStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarstyle/expanded",
                    "title": "static var expanded: ExpandedWindowToolbarStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarstyle/unified",
                    "title": "static var unified: UnifiedWindowToolbarStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarstyle/unified(showstitle:)",
                    "title": "static func unified(showsTitle: Bool) -> UnifiedWindowToolbarStyle",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarstyle/unifiedcompact",
                    "title": "static var unifiedCompact: UnifiedCompactWindowToolbarStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarstyle/unifiedcompact(showstitle:)",
                    "title": "static func unifiedCompact(showsTitle: Bool) -> UnifiedCompactWindowToolbarStyle",
                    "type": "method"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window toolbar style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultwindowtoolbarstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaultwindowtoolbarstyle",
                    "title": "DefaultWindowToolbarStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window toolbar style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/expandedwindowtoolbarstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/expandedwindowtoolbarstyle",
                    "title": "ExpandedWindowToolbarStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window toolbar style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/unifiedwindowtoolbarstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/unifiedwindowtoolbarstyle/init(showstitle:)",
                        "title": "init(showsTitle: Bool)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/unifiedwindowtoolbarstyle",
                    "title": "UnifiedWindowToolbarStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window toolbar style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/unifiedcompactwindowtoolbarstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/unifiedcompactwindowtoolbarstyle/init(showstitle:)",
                        "title": "init(showsTitle: Bool)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/unifiedcompactwindowtoolbarstyle",
                    "title": "UnifiedCompactWindowToolbarStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/windowtoolbarstyle",
                "title": "WindowToolbarStyle",
                "type": "protocol"
              },
              {
                "title": "Opening windows",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/visionos/presenting-windows-and-spaces",
                "title": "Presenting windows and spaces",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/supportsmultiplewindows",
                "title": "var supportsMultipleWindows: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/openwindow",
                "title": "var openWindow: OpenWindowAction",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/openwindowaction/callasfunction(id:)",
                    "title": "func callAsFunction(id: String)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/openwindowaction/callasfunction(id:value:)",
                    "title": "func callAsFunction<D>(id: String, value: D)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/openwindowaction/callasfunction(value:)",
                    "title": "func callAsFunction<D>(value: D)",
                    "type": "method"
                  },
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/openwindowaction/sharingbehavior/requested",
                        "title": "static let requested: OpenWindowAction.SharingBehavior",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/openwindowaction/sharingbehavior/required",
                        "title": "static let required: OpenWindowAction.SharingBehavior",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/openwindowaction/sharingbehavior",
                    "title": "OpenWindowAction.SharingBehavior",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/openwindowaction/callasfunction(id:sharingbehavior:)",
                    "title": "func callAsFunction(id: String, sharingBehavior: OpenWindowAction.SharingBehavior) async throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/openwindowaction/callasfunction(id:value:sharingbehavior:)",
                    "title": "func callAsFunction<D>(id: String, value: D, sharingBehavior: OpenWindowAction.SharingBehavior) async throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/openwindowaction/callasfunction(value:sharingbehavior:)",
                    "title": "func callAsFunction<D>(value: D, sharingBehavior: OpenWindowAction.SharingBehavior) async throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/openwindowaction",
                "title": "OpenWindowAction",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pushwindowaction/callasfunction(id:)",
                    "title": "func callAsFunction(id: String)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/pushwindowaction/callasfunction(id:value:)",
                    "title": "func callAsFunction<D>(id: String, value: D)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/pushwindowaction/callasfunction(value:)",
                    "title": "func callAsFunction<D>(value: D)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/pushwindowaction",
                "title": "PushWindowAction",
                "type": "struct"
              },
              {
                "title": "Closing windows",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/dismisswindow",
                "title": "var dismissWindow: DismissWindowAction",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dismisswindowaction/callasfunction()",
                    "title": "func callAsFunction()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/dismisswindowaction/callasfunction(id:)",
                    "title": "func callAsFunction(id: String)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/dismisswindowaction/callasfunction(id:value:)",
                    "title": "func callAsFunction<D>(id: String, value: D)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/dismisswindowaction/callasfunction(value:)",
                    "title": "func callAsFunction<D>(value: D)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/dismisswindowaction",
                "title": "DismissWindowAction",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/dismiss",
                "title": "var dismiss: DismissAction",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dismissaction/callasfunction()",
                    "title": "func callAsFunction()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/dismissaction",
                "title": "DismissAction",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting behaviors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dismissbehavior/destructive",
                    "title": "static let destructive: DismissBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/dismissbehavior/interactive",
                    "title": "static let interactive: DismissBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/dismissbehavior",
                "title": "DismissBehavior",
                "type": "struct"
              },
              {
                "title": "Sizing a window",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/visionos/positioning-and-sizing-windows",
                "title": "Positioning and sizing windows",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/scene/defaultsize(_:)",
                "title": "func defaultSize(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/defaultsize(width:height:)",
                "title": "func defaultSize(width: CGFloat, height: CGFloat) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/defaultsize(width:height:depth:)",
                "title": "func defaultSize(width: CGFloat, height: CGFloat, depth: CGFloat) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/defaultsize(_:in:)",
                "title": "func defaultSize(Size3D, in: UnitLength) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/defaultsize(width:height:depth:in:)",
                "title": "func defaultSize(width: CGFloat, height: CGFloat, depth: CGFloat, in: UnitLength) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/windowresizability(_:)",
                "title": "func windowResizability(WindowResizability) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the resizability",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowresizability/automatic",
                    "title": "static var automatic: WindowResizability",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowresizability/contentminsize",
                    "title": "static var contentMinSize: WindowResizability",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowresizability/contentsize",
                    "title": "static var contentSize: WindowResizability",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/windowresizability",
                "title": "WindowResizability",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/scene/windowidealsize(_:)",
                "title": "func windowIdealSize(WindowIdealSize) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowidealsize/automatic",
                    "title": "static let automatic: WindowIdealSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowidealsize/fittocontent",
                    "title": "static let fitToContent: WindowIdealSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowidealsize/maximum",
                    "title": "static let maximum: WindowIdealSize",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/windowidealsize",
                "title": "WindowIdealSize",
                "type": "struct"
              },
              {
                "title": "Positioning a window",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/scene/defaultposition(_:)",
                "title": "func defaultPosition(UnitPoint) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowlevel/automatic",
                    "title": "static var automatic: WindowLevel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowlevel/desktop",
                    "title": "static var desktop: WindowLevel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowlevel/floating",
                    "title": "static var floating: WindowLevel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowlevel/normal",
                    "title": "static var normal: WindowLevel",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/windowlevel",
                "title": "WindowLevel",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/scene/windowlevel(_:)",
                "title": "func windowLevel(WindowLevel) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowlayoutroot/sizethatfits(_:)",
                    "title": "func sizeThatFits(ProposedViewSize) -> CGSize",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/windowlayoutroot",
                "title": "WindowLayoutRoot",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/windowplacement/position/utilitypanel",
                        "title": "static var utilityPanel: WindowPlacement.Position",
                        "type": "property"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/windowplacement/position/above(_:)",
                        "title": "static func above(WindowProxy) -> WindowPlacement.Position",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/windowplacement/position/below(_:)",
                        "title": "static func below(WindowProxy) -> WindowPlacement.Position",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/windowplacement/position/leading(_:)",
                        "title": "static func leading(WindowProxy) -> WindowPlacement.Position",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/windowplacement/position/replacing(_:)",
                        "title": "static func replacing(WindowProxy) -> WindowPlacement.Position",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/windowplacement/position/trailing(_:)",
                        "title": "static func trailing(WindowProxy) -> WindowPlacement.Position",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/windowplacement/position",
                    "title": "WindowPlacement.Position",
                    "type": "struct"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowplacement/init(_:)",
                    "title": "init(WindowPlacement.Position?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/windowplacement/init(_:size3d:)",
                    "title": "init(WindowPlacement.Position?, size3D: Size3D?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/windowplacement/init(_:size:)",
                    "title": "init(_:size:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/windowplacement/init(_:width:height:)",
                    "title": "init(UnitPoint, width: CGFloat?, height: CGFloat?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/windowplacement/init(_:width:height:depth:)",
                    "title": "init(WindowPlacement.Position?, width: CGFloat?, height: CGFloat?, depth: CGFloat?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/windowplacement/init(x:y:width:height:)",
                    "title": "init(x: CGFloat?, y: CGFloat?, width: CGFloat?, height: CGFloat?)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/windowplacement",
                "title": "WindowPlacement",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/scene/defaultwindowplacement(_:)",
                "title": "func defaultWindowPlacement((WindowLayoutRoot, WindowPlacementContext) -> WindowPlacement) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/windowidealplacement(_:)",
                "title": "func windowIdealPlacement((WindowLayoutRoot, WindowPlacementContext) -> WindowPlacement) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowplacementcontext/defaultdisplay",
                    "title": "var defaultDisplay: DisplayProxy",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowplacementcontext/windows",
                    "title": "var windows: [WindowProxy]",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/windowplacementcontext",
                "title": "WindowPlacementContext",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowproxy/id",
                    "title": "var id: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowproxy/phase",
                    "title": "var phase: ScenePhase",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/windowproxy",
                "title": "WindowProxy",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/displayproxy/bounds",
                    "title": "let bounds: CGRect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/displayproxy/safeareainsets",
                    "title": "let safeAreaInsets: EdgeInsets",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/displayproxy/visiblerect",
                    "title": "let visibleRect: CGRect",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/displayproxy",
                "title": "DisplayProxy",
                "type": "struct"
              },
              {
                "title": "Configuring window visibility",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a window visibility toggle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowvisibilitytoggle/init(windowid:)",
                    "title": "init(windowID: String)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/defaultwindowvisibilitytogglelabel",
                    "title": "DefaultWindowVisibilityToggleLabel",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/windowvisibilitytoggle",
                "title": "WindowVisibilityToggle",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/scene/defaultlaunchbehavior(_:)",
                "title": "func defaultLaunchBehavior(SceneLaunchBehavior) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/restorationbehavior(_:)",
                "title": "func restorationBehavior(SceneRestorationBehavior) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scenelaunchbehavior/automatic",
                    "title": "static let automatic: SceneLaunchBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scenelaunchbehavior/presented",
                    "title": "static let presented: SceneLaunchBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scenelaunchbehavior/suppressed",
                    "title": "static let suppressed: SceneLaunchBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scenelaunchbehavior",
                "title": "SceneLaunchBehavior",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scenerestorationbehavior/automatic",
                    "title": "static let automatic: SceneRestorationBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scenerestorationbehavior/disabled",
                    "title": "static let disabled: SceneRestorationBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scenerestorationbehavior",
                "title": "SceneRestorationBehavior",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/scene/persistentsystemoverlays(_:)",
                "title": "func persistentSystemOverlays(Visibility) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/windowtoolbarfullscreenvisibility(_:)",
                "title": "func windowToolbarFullScreenVisibility(WindowToolbarFullScreenVisibility) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarfullscreenvisibility/automatic",
                    "title": "static let automatic: WindowToolbarFullScreenVisibility",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarfullscreenvisibility/onhover",
                    "title": "static let onHover: WindowToolbarFullScreenVisibility",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarfullscreenvisibility/visible",
                    "title": "static let visible: WindowToolbarFullScreenVisibility",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/windowtoolbarfullscreenvisibility",
                "title": "WindowToolbarFullScreenVisibility",
                "type": "struct"
              },
              {
                "title": "Managing window behavior",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowmanagerrole/associated",
                    "title": "static let associated: WindowManagerRole",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowmanagerrole/automatic",
                    "title": "static let automatic: WindowManagerRole",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowmanagerrole/principal",
                    "title": "static let principal: WindowManagerRole",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/windowmanagerrole",
                "title": "WindowManagerRole",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/scene/windowmanagerrole(_:)",
                "title": "func windowManagerRole(WindowManagerRole) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowinteractionbehavior/automatic",
                    "title": "static let automatic: WindowInteractionBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowinteractionbehavior/disabled",
                    "title": "static let disabled: WindowInteractionBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowinteractionbehavior/enabled",
                    "title": "static let enabled: WindowInteractionBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/windowinteractionbehavior",
                "title": "WindowInteractionBehavior",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/windowdismissbehavior(_:)",
                "title": "func windowDismissBehavior(WindowInteractionBehavior) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/windowfullscreenbehavior(_:)",
                "title": "func windowFullScreenBehavior(WindowInteractionBehavior) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/windowminimizebehavior(_:)",
                "title": "func windowMinimizeBehavior(WindowInteractionBehavior) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/windowresizebehavior(_:)",
                "title": "func windowResizeBehavior(WindowInteractionBehavior) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/windowbackgrounddragbehavior(_:)",
                "title": "func windowBackgroundDragBehavior(WindowInteractionBehavior) -> some Scene",
                "type": "method"
              },
              {
                "title": "Interacting with volumes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onvolumeviewpointchange(updatestrategy:initial:_:)",
                "title": "func onVolumeViewpointChange(updateStrategy: VolumeViewpointUpdateStrategy, initial: Bool, (Viewpoint3D, Viewpoint3D) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/supportedvolumeviewpoints(_:)",
                "title": "func supportedVolumeViewpoints(SquareAzimuth.Set) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/volumeviewpointupdatestrategy/all",
                    "title": "static let all: VolumeViewpointUpdateStrategy",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/volumeviewpointupdatestrategy/supported",
                    "title": "static let supported: VolumeViewpointUpdateStrategy",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/volumeviewpointupdatestrategy",
                "title": "VolumeViewpointUpdateStrategy",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewpoint3d/squareazimuth",
                    "title": "var squareAzimuth: SquareAzimuth",
                    "type": "property"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewpoint3d/standard",
                    "title": "static let standard: Viewpoint3D",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/viewpoint3d",
                "title": "Viewpoint3D",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/squareazimuth/set/init(_:)",
                        "title": "init(SquareAzimuth)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/squareazimuth/set/contains(_:)",
                        "title": "func contains(SquareAzimuth) -> Bool",
                        "type": "method"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/squareazimuth/set/all",
                        "title": "static let all: SquareAzimuth.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/squareazimuth/set/back",
                        "title": "static let back: SquareAzimuth.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/squareazimuth/set/front",
                        "title": "static let front: SquareAzimuth.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/squareazimuth/set/left",
                        "title": "static let left: SquareAzimuth.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/squareazimuth/set/right",
                        "title": "static let right: SquareAzimuth.Set",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/squareazimuth/set",
                    "title": "SquareAzimuth.Set",
                    "type": "struct"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/squareazimuth/back",
                    "title": "case back",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/squareazimuth/front",
                    "title": "case front",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/squareazimuth/left",
                    "title": "case left",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/squareazimuth/right",
                    "title": "case right",
                    "type": "case"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/squareazimuth/init(closesttoazimuth:)",
                    "title": "init(closestToAzimuth: Angle)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/squareazimuth/orientation",
                    "title": "var orientation: Rotation3D",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/squareazimuth",
                "title": "SquareAzimuth",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/worldalignmentbehavior/adaptive",
                    "title": "static var adaptive: WorldAlignmentBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/worldalignmentbehavior/automatic",
                    "title": "static var automatic: WorldAlignmentBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/worldalignmentbehavior/gravityaligned",
                    "title": "static var gravityAligned: WorldAlignmentBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/worldalignmentbehavior",
                "title": "WorldAlignmentBehavior",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/scene/volumeworldalignment(_:)",
                "title": "func volumeWorldAlignment(WorldAlignmentBehavior) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/worldscalingbehavior/automatic",
                    "title": "static var automatic: WorldScalingBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/worldscalingbehavior/dynamic",
                    "title": "static var dynamic: WorldScalingBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/worldscalingbehavior",
                "title": "WorldScalingBehavior",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/scene/defaultworldscaling(_:)",
                "title": "func defaultWorldScaling(WorldScalingBehavior) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/worldscalingcompensation/scaled",
                    "title": "static let scaled: WorldScalingCompensation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/worldscalingcompensation/unscaled",
                    "title": "static let unscaled: WorldScalingCompensation",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/worldscalingcompensation",
                "title": "WorldScalingCompensation",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/worldtrackinglimitations",
                "title": "var worldTrackingLimitations: Set<WorldTrackingLimitation>",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/worldtrackinglimitation/orientation",
                    "title": "static let orientation: WorldTrackingLimitation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/worldtrackinglimitation/translation",
                    "title": "static let translation: WorldTrackingLimitation",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/worldtrackinglimitation",
                "title": "WorldTrackingLimitation",
                "type": "struct"
              },
              {
                "title": "Deprecated Types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Getting control active states",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/controlactivestate/key",
                    "title": "case key",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/controlactivestate/active",
                    "title": "case active",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/controlactivestate/inactive",
                    "title": "case inactive",
                    "type": "case"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/swiftui/controlactivestate",
                "title": "ControlActiveState",
                "type": "enum"
              }
            ],
            "path": "/documentation/swiftui/windows",
            "title": "Windows",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating an immersive space",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating an immersive space",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/immersivespace/init(content:)",
                    "title": "init(content:)",
                    "type": "init"
                  },
                  {
                    "title": "Identifying an immersive space",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/immersivespace/init(id:content:)",
                    "title": "init(id:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a data-driven immersive space",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/immersivespace/init(for:content:)",
                    "title": "init(for:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/immersivespace/init(id:for:content:)",
                    "title": "init(id:for:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Providing default data to an immersive space",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/immersivespace/init(for:content:defaultvalue:)",
                    "title": "init(for:content:defaultValue:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/immersivespace/init(id:for:content:defaultvalue:)",
                    "title": "init(id:for:content:defaultValue:)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/immersivespaceviewcontent",
                    "title": "ImmersiveSpaceViewContent",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating immersive space content",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/immersivespacecontent/body-swift.property",
                        "title": "var body: Self.Body",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/immersivespacecontent/body-swift.associatedtype",
                        "title": "Body",
                        "type": "associatedtype"
                      }
                    ],
                    "path": "/documentation/swiftui/immersivespacecontent",
                    "title": "ImmersiveSpaceContent",
                    "type": "protocol"
                  }
                ],
                "path": "/documentation/swiftui/immersivespace",
                "title": "ImmersiveSpace",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Building content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/immersivespacecontentbuilder/buildblock(_:)",
                    "title": "static func buildBlock<Content>(Content) -> Content",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/immersivespacecontentbuilder",
                "title": "ImmersiveSpaceContentBuilder",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/scene/immersionstyle(selection:in:)",
                "title": "func immersionStyle(selection: Binding<any ImmersionStyle>, in: any ImmersionStyle...) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/immersionstyle/automatic",
                    "title": "static var automatic: AutomaticImmersionStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/immersionstyle/full",
                    "title": "static var full: FullImmersionStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/immersionstyle/mixed",
                    "title": "static var mixed: MixedImmersionStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/immersionstyle/progressive",
                    "title": "static var progressive: ProgressiveImmersionStyle",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the immersion style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/automaticimmersionstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/automaticimmersionstyle",
                    "title": "AutomaticImmersionStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the immersion style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/fullimmersionstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/fullimmersionstyle",
                    "title": "FullImmersionStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the immersion style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/mixedimmersionstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/mixedimmersionstyle",
                    "title": "MixedImmersionStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the immersion style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/progressiveimmersionstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/progressiveimmersionstyle/init(immersion:initialamount:)",
                        "title": "init(immersion:initialAmount:)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/progressiveimmersionstyle/initialimmersionamount",
                        "title": "let initialImmersionAmount: Double?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/progressiveimmersionstyle/maximumimmersionamount",
                        "title": "let maximumImmersionAmount: Double?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/progressiveimmersionstyle/minimumimmersionamount",
                        "title": "let minimumImmersionAmount: Double?",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/progressiveimmersionstyle",
                    "title": "ProgressiveImmersionStyle",
                    "type": "struct"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/immersionstyle/progressive(_:initialamount:)",
                    "title": "static progressive(_:initialAmount:)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/immersionstyle",
                "title": "ImmersionStyle",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/immersivespacedisplacement",
                "title": "var immersiveSpaceDisplacement: Pose3D",
                "type": "property"
              },
              {
                "title": "Opening an immersive space",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/openimmersivespace",
                "title": "var openImmersiveSpace: OpenImmersiveSpaceAction",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/openimmersivespaceaction/callasfunction(id:)",
                    "title": "func callAsFunction(id: String) async -> OpenImmersiveSpaceAction.Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/openimmersivespaceaction/callasfunction(id:value:)",
                    "title": "func callAsFunction<D>(id: String, value: D) async -> OpenImmersiveSpaceAction.Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/openimmersivespaceaction/callasfunction(value:)",
                    "title": "func callAsFunction<D>(value: D) async -> OpenImmersiveSpaceAction.Result",
                    "type": "method"
                  },
                  {
                    "title": "Getting the result",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the result",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/openimmersivespaceaction/result/opened",
                        "title": "case opened",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/openimmersivespaceaction/result/usercancelled",
                        "title": "case userCancelled",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/openimmersivespaceaction/result/error",
                        "title": "case error",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/openimmersivespaceaction/result",
                    "title": "OpenImmersiveSpaceAction.Result",
                    "type": "enum"
                  }
                ],
                "path": "/documentation/swiftui/openimmersivespaceaction",
                "title": "OpenImmersiveSpaceAction",
                "type": "struct"
              },
              {
                "title": "Closing the immersive space",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/dismissimmersivespace",
                "title": "var dismissImmersiveSpace: DismissImmersiveSpaceAction",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dismissimmersivespaceaction/callasfunction()",
                    "title": "func callAsFunction() async",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/dismissimmersivespaceaction",
                "title": "DismissImmersiveSpaceAction",
                "type": "struct"
              },
              {
                "title": "Hiding upper limbs during immersion",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/scene/upperlimbvisibility(_:)",
                "title": "func upperLimbVisibility(Visibility) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/upperlimbvisibility(_:)",
                "title": "func upperLimbVisibility(Visibility) -> some View",
                "type": "method"
              },
              {
                "title": "Adjusting content brightness",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/scene/immersivecontentbrightness(_:)",
                "title": "func immersiveContentBrightness(ImmersiveContentBrightness) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/immersivecontentbrightness/automatic",
                    "title": "static let automatic: ImmersiveContentBrightness",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/immersivecontentbrightness/bright",
                    "title": "static let bright: ImmersiveContentBrightness",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/immersivecontentbrightness/dark",
                    "title": "static let dark: ImmersiveContentBrightness",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/immersivecontentbrightness/dim",
                    "title": "static let dim: ImmersiveContentBrightness",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/immersivecontentbrightness/custom(_:)",
                    "title": "static func custom(Double) -> ImmersiveContentBrightness",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/immersivecontentbrightness",
                "title": "ImmersiveContentBrightness",
                "type": "struct"
              },
              {
                "title": "Responding to immersion changes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onimmersionchange(initial:_:)",
                "title": "func onImmersionChange(initial: Bool, (ImmersionChangeContext, ImmersionChangeContext) -> Void) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/immersionchangecontext/amount",
                    "title": "let amount: Double?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/immersionchangecontext",
                "title": "ImmersionChangeContext",
                "type": "struct"
              },
              {
                "title": "Adding menu items to an immersive space",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/immersiveenvironmentpicker(content:)",
                "title": "func immersiveEnvironmentPicker<Content>(content: () -> Content) -> some View",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/immersive-spaces",
            "title": "Immersive spaces",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a document",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/building-a-document-based-app-with-swiftui",
                "title": "Building a document-based app with SwiftUI",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/building-a-document-based-app-using-swiftdata",
                "title": "Building a document-based app using SwiftData",
                "type": "sampleCode"
              },
              {
                "children": [
                  {
                    "title": "Creating a document group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/documentgroup/init(newdocument:editor:)",
                    "title": "init(newDocument:editor:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentgroup/init(viewing:viewer:)",
                    "title": "init(viewing:viewer:)",
                    "type": "init"
                  },
                  {
                    "title": "Editing a document backed by a persistent store",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/documentgroup/init(editing:contenttype:editor:preparedocument:)",
                    "title": "init(editing:contentType:editor:prepareDocument:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentgroup/init(editing:migrationplan:editor:preparedocument:)",
                    "title": "init(editing: UTType, migrationPlan: any SchemaMigrationPlan.Type, editor: () -> Content, prepareDocument: (ModelContext) -> Void)",
                    "type": "init"
                  },
                  {
                    "title": "Viewing a document backed by a persistent store",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/documentgroup/init(viewing:contenttype:viewer:)",
                    "title": "init(viewing:contentType:viewer:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentgroup/init(viewing:migrationplan:viewer:)",
                    "title": "init(viewing: UTType, migrationPlan: any SchemaMigrationPlan.Type, viewer: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/documentgroup",
                "title": "DocumentGroup",
                "type": "struct"
              },
              {
                "title": "Storing document data in a structure instance",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Reading a document",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/filedocument/init(configuration:)",
                    "title": "init(configuration: Self.ReadConfiguration) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/filedocument/readablecontenttypes",
                    "title": "static var readableContentTypes: [UTType]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/filedocument/readconfiguration",
                    "title": "FileDocument.ReadConfiguration",
                    "type": "typealias"
                  },
                  {
                    "title": "Writing a document",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/filedocument/filewrapper(configuration:)",
                    "title": "func fileWrapper(configuration: Self.WriteConfiguration) throws -> FileWrapper",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/filedocument/writablecontenttypes",
                    "title": "static var writableContentTypes: [UTType]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/filedocument/writeconfiguration",
                    "title": "FileDocument.WriteConfiguration",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/swiftui/filedocument",
                "title": "FileDocument",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting and setting the document",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/filedocumentconfiguration/document",
                    "title": "var document: Document",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/filedocumentconfiguration/$document",
                    "title": "var $document: Binding<Document>",
                    "type": "property"
                  },
                  {
                    "title": "Getting document properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/filedocumentconfiguration/fileurl",
                    "title": "var fileURL: URL?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/filedocumentconfiguration/iseditable",
                    "title": "var isEditable: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/filedocumentconfiguration",
                "title": "FileDocumentConfiguration",
                "type": "struct"
              },
              {
                "title": "Storing document data in a class instance",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Reading a document",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/referencefiledocument/init(configuration:)",
                    "title": "init(configuration: Self.ReadConfiguration) throws",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/referencefiledocument/readablecontenttypes",
                    "title": "static var readableContentTypes: [UTType]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/referencefiledocument/readconfiguration",
                    "title": "ReferenceFileDocument.ReadConfiguration",
                    "type": "typealias"
                  },
                  {
                    "title": "Getting a snapshot",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/referencefiledocument/snapshot(contenttype:)",
                    "title": "func snapshot(contentType: UTType) throws -> Self.Snapshot",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/referencefiledocument/snapshot",
                    "title": "Snapshot",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Writing a document",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/referencefiledocument/filewrapper(snapshot:configuration:)",
                    "title": "func fileWrapper(snapshot: Self.Snapshot, configuration: Self.WriteConfiguration) throws -> FileWrapper",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/referencefiledocument/writablecontenttypes",
                    "title": "static var writableContentTypes: [UTType]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/referencefiledocument/writeconfiguration",
                    "title": "ReferenceFileDocument.WriteConfiguration",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/swiftui/referencefiledocument",
                "title": "ReferenceFileDocument",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting and setting the document",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/referencefiledocumentconfiguration/document",
                    "title": "var document: Document",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/referencefiledocumentconfiguration/$document",
                    "title": "var $document: ObservedObject<Document>.Wrapper",
                    "type": "property"
                  },
                  {
                    "title": "Getting document properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/referencefiledocumentconfiguration/fileurl",
                    "title": "var fileURL: URL?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/referencefiledocumentconfiguration/iseditable",
                    "title": "var isEditable: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/referencefiledocumentconfiguration",
                "title": "ReferenceFileDocumentConfiguration",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/undomanager",
                "title": "var undoManager: UndoManager?",
                "type": "property"
              },
              {
                "title": "Accessing document configuration",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/documentconfiguration",
                "title": "var documentConfiguration: DocumentConfiguration?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting configuration values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/documentconfiguration/fileurl",
                    "title": "var fileURL: URL?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/documentconfiguration/iseditable",
                    "title": "var isEditable: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/documentconfiguration",
                "title": "DocumentConfiguration",
                "type": "struct"
              },
              {
                "title": "Reading and writing documents",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Reading the content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/filedocumentreadconfiguration/contenttype",
                    "title": "let contentType: UTType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/filedocumentreadconfiguration/file",
                    "title": "let file: FileWrapper",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/filedocumentreadconfiguration",
                "title": "FileDocumentReadConfiguration",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Writing the content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/filedocumentwriteconfiguration/contenttype",
                    "title": "let contentType: UTType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/filedocumentwriteconfiguration/existingfile",
                    "title": "let existingFile: FileWrapper?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/filedocumentwriteconfiguration",
                "title": "FileDocumentWriteConfiguration",
                "type": "struct"
              },
              {
                "title": "Opening a document programmatically",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/newdocument",
                "title": "var newDocument: NewDocumentAction",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/newdocumentaction/callasfunction(_:)",
                    "title": "func callAsFunction(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/newdocumentaction/callasfunction(contenttype:)",
                    "title": "func callAsFunction(contentType: UTType)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/newdocumentaction/callasfunction(contenttype:preparedocument:)",
                    "title": "func callAsFunction(contentType: UTType, prepareDocument: (ModelContext) -> Void)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/newdocumentaction",
                "title": "NewDocumentAction",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/opendocument",
                "title": "var openDocument: OpenDocumentAction",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/opendocumentaction/callasfunction(at:)",
                    "title": "func callAsFunction(at: URL) async throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/opendocumentaction",
                "title": "OpenDocumentAction",
                "type": "struct"
              },
              {
                "title": "Configuring the document launch experience",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/documentgrouplaunchscene/init(_:_:background:)",
                    "title": "init(_:_:background:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentgrouplaunchscene/init(_:_:background:backgroundaccessoryview:)",
                    "title": "init(_:_:background:backgroundAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentgrouplaunchscene/init(_:_:background:backgroundaccessoryview:overlayaccessoryview:)",
                    "title": "init(_:_:background:backgroundAccessoryView:overlayAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentgrouplaunchscene/init(_:_:background:overlayaccessoryview:)",
                    "title": "init(_:_:background:overlayAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentgrouplaunchscene/init(_:backgroundstyle:_:)",
                    "title": "init(_:backgroundStyle:_:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentgrouplaunchscene/init(_:backgroundstyle:_:backgroundaccessoryview:)",
                    "title": "init(_:backgroundStyle:_:backgroundAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentgrouplaunchscene/init(_:backgroundstyle:_:backgroundaccessoryview:overlayaccessoryview:)",
                    "title": "init(_:backgroundStyle:_:backgroundAccessoryView:overlayAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentgrouplaunchscene/init(_:backgroundstyle:_:overlayaccessoryview:)",
                    "title": "init(_:backgroundStyle:_:overlayAccessoryView:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/documentgrouplaunchscene",
                "title": "DocumentGroupLaunchScene",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/init(_:for:_:ondocumentopen:)",
                    "title": "init(_:for:_:onDocumentOpen:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/init(_:for:_:ondocumentopen:background:)",
                    "title": "init(_:for:_:onDocumentOpen:background:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/init(_:for:_:ondocumentopen:background:backgroundaccessoryview:)",
                    "title": "init(_:for:_:onDocumentOpen:background:backgroundAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/init(_:for:_:ondocumentopen:background:backgroundaccessoryview:overlayaccessoryview:)",
                    "title": "init(_:for:_:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/init(_:for:_:ondocumentopen:background:overlayaccessoryview:)",
                    "title": "init(_:for:_:onDocumentOpen:background:overlayAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/init(_:for:_:ondocumentopen:backgroundaccessoryview:)",
                    "title": "init(_:for:_:onDocumentOpen:backgroundAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/init(_:for:_:ondocumentopen:backgroundaccessoryview:overlayaccessoryview:)",
                    "title": "init(_:for:_:onDocumentOpen:backgroundAccessoryView:overlayAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/init(_:for:_:ondocumentopen:overlayaccessoryview:)",
                    "title": "init(_:for:_:onDocumentOpen:overlayAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/init(_:for:backgroundstyle:_:ondocumentopen:)",
                    "title": "init(_:for:backgroundStyle:_:onDocumentOpen:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/init(_:for:backgroundstyle:_:ondocumentopen:backgroundaccessoryview:)",
                    "title": "init(_:for:backgroundStyle:_:onDocumentOpen:backgroundAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/init(_:for:backgroundstyle:_:ondocumentopen:backgroundaccessoryview:overlayaccessoryview:)",
                    "title": "init(_:for:backgroundStyle:_:onDocumentOpen:backgroundAccessoryView:overlayAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/init(_:for:backgroundstyle:_:ondocumentopen:overlayaccessoryview:)",
                    "title": "init(_:for:backgroundStyle:_:onDocumentOpen:overlayAccessoryView:)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchview/body",
                    "title": "var body: some View",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/documentlaunchview",
                "title": "DocumentLaunchView",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchgeometryproxy/frame",
                    "title": "var frame: CGRect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/documentlaunchgeometryproxy/titleviewframe",
                    "title": "var titleViewFrame: CGRect",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/documentlaunchgeometryproxy",
                "title": "DocumentLaunchGeometryProxy",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/defaultdocumentgrouplaunchactions/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/defaultdocumentgrouplaunchactions",
                "title": "DefaultDocumentGroupLaunchActions",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/newdocumentbutton/init(_:contenttype:)",
                    "title": "init(_:contentType:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/newdocumentbutton/init(_:contenttype:preparedocumenturl:)",
                    "title": "init(_:contentType:prepareDocumentURL:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/newdocumentbutton/init(_:for:contenttype:preparedocument:)",
                    "title": "init(_:for:contentType:prepareDocument:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/newdocumentbutton",
                "title": "NewDocumentButton",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Associated Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/documentbasebox/document",
                    "title": "Document",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/documentbasebox/base",
                    "title": "var base: Self.Document?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/documentbasebox",
                "title": "DocumentBaseBox",
                "type": "protocol"
              },
              {
                "title": "Renaming a document",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating an rename button",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/renamebutton/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/renamebutton",
                "title": "RenameButton",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/renameaction(_:)",
                "title": "func renameAction(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/rename",
                "title": "var rename: RenameAction?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/renameaction/callasfunction()",
                    "title": "func callAsFunction()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/renameaction",
                "title": "RenameAction",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/documents",
            "title": "Documents",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Presenting views in columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/bringing-robust-navigation-structure-to-your-swiftui-app",
                "title": "Bringing robust navigation structure to your SwiftUI app",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/migrating-to-new-navigation-types",
                "title": "Migrating to new navigation types",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Creating a navigation split view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitview/init(sidebar:detail:)",
                    "title": "init(sidebar: () -> Sidebar, detail: () -> Detail)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitview/init(sidebar:content:detail:)",
                    "title": "init(sidebar: () -> Sidebar, content: () -> Content, detail: () -> Detail)",
                    "type": "init"
                  },
                  {
                    "title": "Hiding columns in a navigation split view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitview/init(columnvisibility:sidebar:detail:)",
                    "title": "init(columnVisibility: Binding<NavigationSplitViewVisibility>, sidebar: () -> Sidebar, detail: () -> Detail)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitview/init(columnvisibility:sidebar:content:detail:)",
                    "title": "init(columnVisibility: Binding<NavigationSplitViewVisibility>, sidebar: () -> Sidebar, content: () -> Content, detail: () -> Detail)",
                    "type": "init"
                  },
                  {
                    "title": "Specifying a preferred compact column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitview/init(preferredcompactcolumn:sidebar:detail:)",
                    "title": "init(preferredCompactColumn: Binding<NavigationSplitViewColumn>, sidebar: () -> Sidebar, detail: () -> Detail)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitview/init(preferredcompactcolumn:sidebar:content:detail:)",
                    "title": "init(preferredCompactColumn: Binding<NavigationSplitViewColumn>, sidebar: () -> Sidebar, content: () -> Content, detail: () -> Detail)",
                    "type": "init"
                  },
                  {
                    "title": "Specifying a preferred compact column and column visibility",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitview/init(columnvisibility:preferredcompactcolumn:sidebar:detail:)",
                    "title": "init(columnVisibility: Binding<NavigationSplitViewVisibility>, preferredCompactColumn: Binding<NavigationSplitViewColumn>, sidebar: () -> Sidebar, detail: () -> Detail)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitview/init(columnvisibility:preferredcompactcolumn:sidebar:content:detail:)",
                    "title": "init(columnVisibility: Binding<NavigationSplitViewVisibility>, preferredCompactColumn: Binding<NavigationSplitViewColumn>, sidebar: () -> Sidebar, content: () -> Content, detail: () -> Detail)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/navigationsplitview",
                "title": "NavigationSplitView",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/navigationsplitviewstyle(_:)",
                "title": "func navigationSplitViewStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/navigationsplitviewcolumnwidth(_:)",
                "title": "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/navigationsplitviewcolumnwidth(min:ideal:max:)",
                "title": "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting visibilities",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewvisibility/automatic",
                    "title": "static var automatic: NavigationSplitViewVisibility",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewvisibility/all",
                    "title": "static var all: NavigationSplitViewVisibility",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewvisibility/doublecolumn",
                    "title": "static var doubleColumn: NavigationSplitViewVisibility",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewvisibility/detailonly",
                    "title": "static var detailOnly: NavigationSplitViewVisibility",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/navigationsplitviewvisibility",
                "title": "NavigationSplitViewVisibility",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Presenting a destination view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationlink/init(_:destination:)",
                    "title": "init(_:destination:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/navigationlink/init(destination:label:)",
                    "title": "init(destination:label:)",
                    "type": "init"
                  },
                  {
                    "title": "Presenting a value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationlink/init(_:value:)",
                    "title": "init(_:value:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/navigationlink/init(value:label:)",
                    "title": "init(value:label:)",
                    "type": "init"
                  },
                  {
                    "title": "Configuring the link",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationlink/isdetaillink(_:)",
                    "title": "func isDetailLink(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "title": "Deprecated symbols",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating links with view builders",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationlink/init(_:isactive:destination:)",
                        "title": "init(_:isActive:destination:)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationlink/init(isactive:destination:label:)",
                        "title": "init(isActive: Binding<Bool>, destination: () -> Destination, label: () -> Label)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationlink/init(_:tag:selection:destination:)",
                        "title": "init(_:tag:selection:destination:)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationlink/init(tag:selection:destination:label:)",
                        "title": "init<V>(tag: V, selection: Binding<V?>, destination: () -> Destination, label: () -> Label)",
                        "type": "init"
                      },
                      {
                        "title": "Creating links for WatchKit",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationlink/init(destinationname:isactive:label:)",
                        "title": "init(destinationName: String, isActive: Binding<Bool>, label: () -> Label)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationlink/init(destinationname:tag:selection:label:)",
                        "title": "init<V>(destinationName: String, tag: V, selection: Binding<V?>, label: () -> Label)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationlink/init(destinationname:label:)",
                        "title": "init(destinationName: String, label: () -> Label)",
                        "type": "init"
                      },
                      {
                        "title": "Creating links with view arguments",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationlink/init(_:destination:isactive:)",
                        "title": "init(_:destination:isActive:)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationlink/init(destination:isactive:label:)",
                        "title": "init(destination: Destination, isActive: Binding<Bool>, label: () -> Label)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationlink/init(_:destination:tag:selection:)",
                        "title": "init(_:destination:tag:selection:)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationlink/init(destination:tag:selection:label:)",
                        "title": "init<V>(destination: Destination, tag: V, selection: Binding<V?>, label: () -> Label)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/navigationlink-deprecated",
                    "title": "Deprecated symbols",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/swiftui/navigationlink",
                "title": "NavigationLink",
                "type": "struct"
              },
              {
                "title": "Stacking views in one column",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a navigation stack",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationstack/init(root:)",
                    "title": "init(root: () -> Root)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a navigation stack with a path",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationstack/init(path:root:)",
                    "title": "init(path:root:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/navigationstack",
                "title": "NavigationStack",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a navigation path",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationpath/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/navigationpath/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "title": "Managing path contents",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationpath/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/navigationpath/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/navigationpath/append(_:)",
                    "title": "func append(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/navigationpath/removelast(_:)",
                    "title": "func removeLast(Int)",
                    "type": "method"
                  },
                  {
                    "title": "Encoding a path",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationpath/codable",
                    "title": "var codable: NavigationPath.CodableRepresentation?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/navigationpath/codablerepresentation",
                    "title": "NavigationPath.CodableRepresentation",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/navigationpath",
                "title": "NavigationPath",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/navigationdestination(for:destination:)",
                "title": "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/navigationdestination(ispresented:destination:)",
                "title": "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/navigationdestination(item:destination:)",
                "title": "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                "type": "method"
              },
              {
                "title": "Managing column collapse",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Getting a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewcolumn/sidebar",
                    "title": "static var sidebar: NavigationSplitViewColumn",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewcolumn/content",
                    "title": "static var content: NavigationSplitViewColumn",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewcolumn/detail",
                    "title": "static var detail: NavigationSplitViewColumn",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/navigationsplitviewcolumn",
                "title": "NavigationSplitViewColumn",
                "type": "struct"
              },
              {
                "title": "Setting titles for navigation content",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/navigationtitle(_:)",
                "title": "func navigationTitle(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/navigationsubtitle(_:)",
                "title": "func navigationSubtitle(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/navigationdocument(_:)",
                "title": "func navigationDocument(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/navigationdocument(_:preview:)",
                "title": "func navigationDocument(_:preview:)",
                "type": "method"
              },
              {
                "title": "Configuring the navigation bar",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/navigationbarbackbuttonhidden(_:)",
                "title": "func navigationBarBackButtonHidden(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/navigationbartitledisplaymode(_:)",
                "title": "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Setting a title display mode",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting title display modes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/navigationbaritem/titledisplaymode/automatic",
                        "title": "case automatic",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/navigationbaritem/titledisplaymode/inline",
                        "title": "case inline",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/navigationbaritem/titledisplaymode/large",
                        "title": "case large",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/navigationbaritem/titledisplaymode",
                    "title": "NavigationBarItem.TitleDisplayMode",
                    "type": "enum"
                  }
                ],
                "path": "/documentation/swiftui/navigationbaritem",
                "title": "NavigationBarItem",
                "type": "struct"
              },
              {
                "title": "Configuring the sidebar",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/sidebarrowsize",
                "title": "var sidebarRowSize: SidebarRowSize",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting row sizes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sidebarrowsize/small",
                    "title": "case small",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/sidebarrowsize/medium",
                    "title": "case medium",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/sidebarrowsize/large",
                    "title": "case large",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/sidebarrowsize",
                "title": "SidebarRowSize",
                "type": "enum"
              },
              {
                "title": "Presenting views in tabs",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/enhancing-your-app-content-with-tab-navigation",
                "title": "Enhancing your app’s content with tab navigation",
                "type": "sampleCode"
              },
              {
                "children": [
                  {
                    "title": "Creating a tab view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabview/init(content:)",
                    "title": "init(content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tabview/init(selection:content:)",
                    "title": "init(selection:content:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/tabview",
                "title": "TabView",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a tab",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(value:content:)",
                    "title": "init(value:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(role:content:)",
                    "title": "init(role: TabRole?, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(value:role:content:)",
                    "title": "init(value:role:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a tab with label",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(content:label:)",
                    "title": "init(content: () -> Content, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a tab with system symbol",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(_:systemimage:content:)",
                    "title": "init(_:systemImage:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(_:systemimage:value:content:)",
                    "title": "init(_:systemImage:value:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(_:systemimage:role:content:)",
                    "title": "init(_:systemImage:role:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(_:systemimage:value:role:content:)",
                    "title": "init(_:systemImage:value:role:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a tab with image",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(_:image:content:)",
                    "title": "init(_:image:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(_:image:value:content:)",
                    "title": "init(_:image:value:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(_:image:role:content:)",
                    "title": "init(_:image:role:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(_:image:value:role:content:)",
                    "title": "init(_:image:value:role:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/defaulttablabel",
                    "title": "DefaultTabLabel",
                    "type": "struct"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(role:content:label:)",
                    "title": "init(role: TabRole?, content: () -> Content, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(value:content:label:)",
                    "title": "init(value:content:label:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tab/init(value:role:content:label:)",
                    "title": "init(value:role:content:label:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/tab",
                "title": "Tab",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabrole/search",
                    "title": "static var search: TabRole",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/tabrole",
                "title": "TabRole",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a tab section",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabsection/init(content:)",
                    "title": "init(content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tabsection/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tabsection/init(content:header:)",
                    "title": "init(content:header:)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/defaulttablabel",
                    "title": "DefaultTabLabel",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/tabsection",
                "title": "TabSection",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/tabviewstyle(_:)",
                "title": "func tabViewStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "title": "Configuring a tab bar",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/tabviewsidebarheader(content:)",
                "title": "func tabViewSidebarHeader<Content>(content: () -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/tabviewsidebarfooter(content:)",
                "title": "func tabViewSidebarFooter<Content>(content: () -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/tabviewsidebarbottombar(content:)",
                "title": "func tabViewSidebarBottomBar<Content>(content: () -> Content) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/adaptabletabbarplacement/automatic",
                    "title": "static let automatic: AdaptableTabBarPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/adaptabletabbarplacement/sidebar",
                    "title": "static let sidebar: AdaptableTabBarPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/adaptabletabbarplacement/tabbar",
                    "title": "static let tabBar: AdaptableTabBarPlacement",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/adaptabletabbarplacement",
                "title": "AdaptableTabBarPlacement",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/tabbarplacement",
                "title": "var tabBarPlacement: TabBarPlacement?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabbarplacement/bottombar",
                    "title": "static let bottomBar: TabBarPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabbarplacement/ornament",
                    "title": "static let ornament: TabBarPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabbarplacement/pageindicator",
                    "title": "static let pageIndicator: TabBarPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabbarplacement/sidebar",
                    "title": "static let sidebar: TabBarPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabbarplacement/topbar",
                    "title": "static let topBar: TabBarPlacement",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/tabbarplacement",
                "title": "TabBarPlacement",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/istabbarshowingsections",
                "title": "var isTabBarShowingSections: Bool",
                "type": "property"
              },
              {
                "title": "Configuring a tab",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/sectionactions(content:)",
                "title": "func sectionActions<Content>(content: () -> Content) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabplacement/automatic",
                    "title": "static let automatic: TabPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabplacement/pinned",
                    "title": "static let pinned: TabPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabplacement/sidebaronly",
                    "title": "static let sidebarOnly: TabPlacement",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/tabplacement",
                "title": "TabPlacement",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/content",
                    "title": "TabContentBuilder.Content",
                    "type": "struct"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildblock(_:)",
                    "title": "static func buildBlock(some TabContent<TabValue>) -> some TabContent<TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildblock(_:_:)",
                    "title": "static func buildBlock<C0, C1>(C0, C1) -> some TabContent<TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildblock(_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2>(C0, C1, C2) -> some TabContent<TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildblock(_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some TabContent<TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildblock(_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some TabContent<TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildblock(_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some TabContent<TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildblock(_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some TabContent<TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildblock(_:_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some TabContent<TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some TabContent<TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some TabContent<TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildeither(first:)",
                    "title": "static func buildEither<T, F>(first: T) -> _ConditionalContent<T, F>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildeither(second:)",
                    "title": "static func buildEither<T, F>(second: F) -> _ConditionalContent<T, F>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildexpression(_:)",
                    "title": "static func buildExpression(some TabContent<TabValue>) -> some TabContent<TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildif(_:)",
                    "title": "static func buildIf((some TabContent<TabValue>)?) -> (some TabContent<TabValue>)?\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontentbuilder/buildlimitedavailability(_:)",
                    "title": "static func buildLimitedAvailability<T>(T) -> AnyTabContent<T.TabValue>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/tabcontentbuilder",
                "title": "TabContentBuilder",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Associated Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/tabvalue",
                    "title": "TabValue",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/accessibilityhint(_:isenabled:)",
                    "title": "func accessibilityHint(_:isEnabled:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/accessibilityidentifier(_:isenabled:)",
                    "title": "func accessibilityIdentifier(String, isEnabled: Bool) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/accessibilityinputlabels(_:isenabled:)",
                    "title": "func accessibilityInputLabels(_:isEnabled:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/accessibilitylabel(_:isenabled:)",
                    "title": "func accessibilityLabel(_:isEnabled:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/accessibilityvalue(_:isenabled:)",
                    "title": "func accessibilityValue(_:isEnabled:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/badge(_:)",
                    "title": "func badge(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/contextmenu(menuitems:)",
                    "title": "func contextMenu<M>(menuItems: () -> M) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/customizationbehavior(_:for:)",
                    "title": "func customizationBehavior(TabCustomizationBehavior, for: AdaptableTabBarPlacement...) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/customizationid(_:)",
                    "title": "func customizationID(String) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/defaultvisibility(_:for:)",
                    "title": "func defaultVisibility(Visibility, for: AdaptableTabBarPlacement...) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/tabcontent/disabled(_:)",
                    "title": "func disabled(Bool) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/draggable(_:)",
                    "title": "func draggable<T>(@autoclosure () -> T) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/dropdestination(for:action:)",
                    "title": "func dropDestination<T>(for: T.Type, action: ([T]) -> Void) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/hidden(_:)",
                    "title": "func hidden(Bool) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge?, content: () -> Content) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/popover(item:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge?, content: (Item) -> Content) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/sectionactions(content:)",
                    "title": "func sectionActions<Content>(content: () -> Content) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/springloadingbehavior(_:)",
                    "title": "func springLoadingBehavior(SpringLoadingBehavior) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/swipeactions(edge:allowsfullswipe:content:)",
                    "title": "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabcontent/tabplacement(_:)",
                    "title": "func tabPlacement(TabPlacement) -> some TabContent<Self.TabValue>\n",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/tabcontent",
                "title": "TabContent",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anytabcontent/init(_:)",
                    "title": "init<T>(T)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/anytabcontent",
                "title": "AnyTabContent",
                "type": "struct"
              },
              {
                "title": "Enabling tab customization",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/tabviewcustomization(_:)",
                "title": "func tabViewCustomization(Binding<TabViewCustomization>?) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "beta": true,
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "beta": true,
                        "path": "/documentation/swiftui/tabviewcustomization/sectioncustomization/taborder",
                        "title": "var tabOrder: [String]?",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "beta": true,
                        "path": "/documentation/swiftui/tabviewcustomization/sectioncustomization/resettaborder()",
                        "title": "func resetTabOrder()",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/tabviewcustomization/sectioncustomization",
                    "title": "TabViewCustomization.SectionCustomization",
                    "type": "struct"
                  },
                  {
                    "beta": true,
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "beta": true,
                        "path": "/documentation/swiftui/tabviewcustomization/tabcustomization/sidebarvisibility",
                        "title": "var sidebarVisibility: Visibility",
                        "type": "property"
                      },
                      {
                        "beta": true,
                        "path": "/documentation/swiftui/tabviewcustomization/tabcustomization/tabbarvisibility",
                        "title": "var tabBarVisibility: Visibility",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/tabviewcustomization/tabcustomization",
                    "title": "TabViewCustomization.TabCustomization",
                    "type": "struct"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabviewcustomization/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabviewcustomization/resetsectionorder()",
                    "title": "func resetSectionOrder()",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/tabviewcustomization/resetsectionorder(for:)",
                    "title": "func resetSectionOrder(for: String)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabviewcustomization/resetvisibility()",
                    "title": "func resetVisibility()",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/tabviewcustomization/subscript(section:)",
                    "title": "subscript(section _: String) -> TabViewCustomization.SectionCustomization",
                    "type": "subscript"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/tabviewcustomization/subscript(sectionid:)",
                    "title": "subscript(sectionID _: String) -> [String]?",
                    "type": "subscript"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/tabviewcustomization/subscript(sidebarvisibility:)",
                    "title": "subscript(sidebarVisibility _: String) -> Visibility",
                    "type": "subscript"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/tabviewcustomization/subscript(tab:)",
                    "title": "subscript(tab _: String) -> TabViewCustomization.TabCustomization",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/swiftui/tabviewcustomization",
                "title": "TabViewCustomization",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabcustomizationbehavior/automatic",
                    "title": "static var automatic: TabCustomizationBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabcustomizationbehavior/disabled",
                    "title": "static var disabled: TabCustomizationBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabcustomizationbehavior/reorderable",
                    "title": "static var reorderable: TabCustomizationBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/tabcustomizationbehavior",
                "title": "TabCustomizationBehavior",
                "type": "struct"
              },
              {
                "title": "Displaying views in multiple panes",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a horizontal split view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/hsplitview/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/hsplitview",
                "title": "HSplitView",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a vertical split view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/vsplitview/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/vsplitview",
                "title": "VSplitView",
                "type": "struct"
              },
              {
                "title": "Deprecated Types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a navigation view",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/navigationview/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "title": "Styling navigation views",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/view/navigationviewstyle(_:)",
                    "title": "func navigationViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting built-in navigation view styles",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationviewstyle/automatic",
                        "title": "static var automatic: DefaultNavigationViewStyle",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationviewstyle/columns",
                        "title": "static var columns: ColumnNavigationViewStyle",
                        "type": "property"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/navigationviewstyle/stack",
                        "title": "static var stack: StackNavigationViewStyle",
                        "type": "property"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a default navigation view style",
                            "type": "groupMarker"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/swiftui/defaultnavigationviewstyle/init()",
                            "title": "init()",
                            "type": "init"
                          }
                        ],
                        "deprecated": true,
                        "path": "/documentation/swiftui/defaultnavigationviewstyle",
                        "title": "DefaultNavigationViewStyle",
                        "type": "struct"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/columnnavigationviewstyle",
                        "title": "ColumnNavigationViewStyle",
                        "type": "struct"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a stack navigation view style",
                            "type": "groupMarker"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/swiftui/stacknavigationviewstyle/init()",
                            "title": "init()",
                            "type": "init"
                          }
                        ],
                        "deprecated": true,
                        "path": "/documentation/swiftui/stacknavigationviewstyle",
                        "title": "StackNavigationViewStyle",
                        "type": "struct"
                      },
                      {
                        "children": [
                          {
                            "title": "Create a double column view style",
                            "type": "groupMarker"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/swiftui/doublecolumnnavigationviewstyle/init()",
                            "title": "init()",
                            "type": "init"
                          }
                        ],
                        "deprecated": true,
                        "path": "/documentation/swiftui/doublecolumnnavigationviewstyle",
                        "title": "DoubleColumnNavigationViewStyle",
                        "type": "struct"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/swiftui/navigationviewstyle",
                    "title": "NavigationViewStyle",
                    "type": "protocol"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/swiftui/navigationview",
                "title": "NavigationView",
                "type": "struct"
              },
              {
                "deprecated": true,
                "path": "/documentation/swiftui/view/tabitem(_:)",
                "title": "func tabItem<V>(() -> V) -> some View",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/navigation",
            "title": "Navigation",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Configuring a dialog",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Getting severities",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dialogseverity/automatic",
                    "title": "static let automatic: DialogSeverity",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/dialogseverity/standard",
                    "title": "static let standard: DialogSeverity",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/dialogseverity/critical",
                    "title": "static let critical: DialogSeverity",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/dialogseverity",
                "title": "DialogSeverity",
                "type": "struct"
              },
              {
                "title": "Showing a sheet, cover, or popover",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/sheet(ispresented:ondismiss:content:)",
                "title": "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/sheet(item:ondismiss:content:)",
                "title": "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fullscreencover(ispresented:ondismiss:content:)",
                "title": "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fullscreencover(item:ondismiss:content:)",
                "title": "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/popover(item:attachmentanchor:arrowedge:content:)",
                "title": "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge?, content: (Item) -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/popover(ispresented:attachmentanchor:arrowedge:content:)",
                "title": "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge?, content: () -> Content) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting attachment anchors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/popoverattachmentanchor/point(_:)",
                    "title": "case point(UnitPoint)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/popoverattachmentanchor/rect(_:)",
                    "title": "case rect(Anchor<CGRect>.Source)",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/popoverattachmentanchor",
                "title": "PopoverAttachmentAnchor",
                "type": "enum"
              },
              {
                "title": "Adapting a presentation size",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/presentationcompactadaptation(horizontal:vertical:)",
                "title": "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/presentationcompactadaptation(_:)",
                "title": "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting adaptation strategies",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/presentationadaptation/automatic",
                    "title": "static var automatic: PresentationAdaptation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationadaptation/none",
                    "title": "static var none: PresentationAdaptation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationadaptation/fullscreencover",
                    "title": "static var fullScreenCover: PresentationAdaptation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationadaptation/popover",
                    "title": "static var popover: PresentationAdaptation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationadaptation/sheet",
                    "title": "static var sheet: PresentationAdaptation",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/presentationadaptation",
                "title": "PresentationAdaptation",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/presentationsizing(_:)",
                "title": "func presentationSizing(some PresentationSizing) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in presentation size",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/presentationsizing/automatic",
                    "title": "static var automatic: AutomaticPresentationSizing",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationsizing/fitted",
                    "title": "static var fitted: FittedPresentationSizing",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationsizing/form",
                    "title": "static var form: FormPresentationSizing",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationsizing/page",
                    "title": "static var page: PagePresentationSizing",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom presentation size",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/presentationsizing/fitted(horizontal:vertical:)",
                    "title": "func fitted(horizontal: Bool, vertical: Bool) -> some PresentationSizing",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/presentationsizing/proposedsize(for:context:)",
                    "title": "func proposedSize(for: PresentationSizingRoot, context: PresentationSizingContext) -> ProposedViewSize",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/presentationsizing/sticky(horizontal:vertical:)",
                    "title": "func sticky(horizontal: Bool, vertical: Bool) -> some PresentationSizing",
                    "type": "method"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/automaticpresentationsizing",
                    "title": "AutomaticPresentationSizing",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/fittedpresentationsizing",
                    "title": "FittedPresentationSizing",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/formpresentationsizing",
                    "title": "FormPresentationSizing",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/pagepresentationsizing",
                    "title": "PagePresentationSizing",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/presentationsizing",
                "title": "PresentationSizing",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/presentationsizingroot/sizethatfits(_:)",
                    "title": "func sizeThatFits(ProposedViewSize) -> CGSize",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/presentationsizingroot",
                "title": "PresentationSizingRoot",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/presentationsizingcontext",
                "title": "PresentationSizingContext",
                "type": "struct"
              },
              {
                "title": "Configuring a sheet’s height",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/presentationdetents(_:)",
                "title": "func presentationDetents(Set<PresentationDetent>) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/presentationdetents(_:selection:)",
                "title": "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/presentationcontentinteraction(_:)",
                "title": "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/presentationdragindicator(_:)",
                "title": "func presentationDragIndicator(Visibility) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in detents",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/presentationdetent/large",
                    "title": "static let large: PresentationDetent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationdetent/medium",
                    "title": "static let medium: PresentationDetent",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom detents",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/presentationdetent/custom(_:)",
                    "title": "static func custom<D>(D.Type) -> PresentationDetent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/presentationdetent/fraction(_:)",
                    "title": "static func fraction(CGFloat) -> PresentationDetent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/presentationdetent/height(_:)",
                    "title": "static func height(CGFloat) -> PresentationDetent",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the height",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/presentationdetent/context/maxdetentvalue",
                        "title": "var maxDetentValue: CGFloat",
                        "type": "property"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/presentationdetent/context/subscript(dynamicmember:)",
                        "title": "subscript<T>(dynamicMember _: KeyPath<EnvironmentValues, T>) -> T",
                        "type": "subscript"
                      }
                    ],
                    "path": "/documentation/swiftui/presentationdetent/context",
                    "title": "PresentationDetent.Context",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/presentationdetent",
                "title": "PresentationDetent",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the height",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/custompresentationdetent/height(in:)",
                    "title": "static func height(in: Self.Context) -> CGFloat?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/custompresentationdetent/context",
                    "title": "CustomPresentationDetent.Context",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/swiftui/custompresentationdetent",
                "title": "CustomPresentationDetent",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting interaction behaviors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/presentationcontentinteraction/automatic",
                    "title": "static var automatic: PresentationContentInteraction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationcontentinteraction/resizes",
                    "title": "static var resizes: PresentationContentInteraction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationcontentinteraction/scrolls",
                    "title": "static var scrolls: PresentationContentInteraction",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/presentationcontentinteraction",
                "title": "PresentationContentInteraction",
                "type": "struct"
              },
              {
                "title": "Styling a sheet and its background",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/presentationcornerradius(_:)",
                "title": "func presentationCornerRadius(CGFloat?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/presentationbackground(_:)",
                "title": "func presentationBackground<S>(S) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/presentationbackground(alignment:content:)",
                "title": "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/presentationbackgroundinteraction(_:)",
                "title": "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting interaction types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/presentationbackgroundinteraction/automatic",
                    "title": "static var automatic: PresentationBackgroundInteraction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationbackgroundinteraction/disabled",
                    "title": "static var disabled: PresentationBackgroundInteraction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationbackgroundinteraction/enabled",
                    "title": "static var enabled: PresentationBackgroundInteraction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/presentationbackgroundinteraction/enabled(upthrough:)",
                    "title": "static func enabled(upThrough: PresentationDetent) -> PresentationBackgroundInteraction",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/presentationbackgroundinteraction",
                "title": "PresentationBackgroundInteraction",
                "type": "struct"
              },
              {
                "title": "Presenting an alert",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/alertscene/init(_:ispresented:actions:)",
                    "title": "init(_:isPresented:actions:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/alertscene/init(_:ispresented:actions:message:)",
                    "title": "init(_:isPresented:actions:message:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/alertscene/init(_:ispresented:presenting:actions:)",
                    "title": "init(_:isPresented:presenting:actions:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/alertscene/init(_:ispresented:presenting:actions:message:)",
                    "title": "init(_:isPresented:presenting:actions:message:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/alertscene",
                "title": "AlertScene",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/alert(_:ispresented:actions:)",
                "title": "func alert(_:isPresented:actions:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/alert(_:ispresented:presenting:actions:)",
                "title": "func alert(_:isPresented:presenting:actions:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/alert(ispresented:error:actions:)",
                "title": "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/alert(_:ispresented:actions:message:)",
                "title": "func alert(_:isPresented:actions:message:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/alert(_:ispresented:presenting:actions:message:)",
                "title": "func alert(_:isPresented:presenting:actions:message:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/alert(ispresented:error:actions:message:)",
                "title": "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                "type": "method"
              },
              {
                "title": "Getting confirmation for an action",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/confirmationdialog(_:ispresented:titlevisibility:actions:)",
                "title": "func confirmationDialog(_:isPresented:titleVisibility:actions:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)",
                "title": "func confirmationDialog(_:isPresented:titleVisibility:presenting:actions:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/dismissalconfirmationdialog(_:shouldpresent:actions:)",
                "title": "func dismissalConfirmationDialog(_:shouldPresent:actions:)",
                "type": "method"
              },
              {
                "title": "Showing a confirmation dialog with a message",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/confirmationdialog(_:ispresented:titlevisibility:actions:message:)",
                "title": "func confirmationDialog(_:isPresented:titleVisibility:actions:message:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)",
                "title": "func confirmationDialog(_:isPresented:titleVisibility:presenting:actions:message:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/dismissalconfirmationdialog(_:shouldpresent:actions:message:)",
                "title": "func dismissalConfirmationDialog(_:shouldPresent:actions:message:)",
                "type": "method"
              },
              {
                "title": "Configuring a dialog",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/dialogicon(_:)",
                "title": "func dialogIcon(Image?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/dialogicon(_:)",
                "title": "func dialogIcon(Image?) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/dialogseverity(_:)",
                "title": "func dialogSeverity(DialogSeverity) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/dialogseverity(_:)",
                "title": "func dialogSeverity(DialogSeverity) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/dialogsuppressiontoggle(issuppressed:)",
                "title": "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/dialogsuppressiontoggle(issuppressed:)",
                "title": "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/dialogsuppressiontoggle(_:issuppressed:)",
                "title": "func dialogSuppressionToggle(_:isSuppressed:)",
                "type": "method"
              },
              {
                "title": "Exporting to file",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)",
                "title": "func fileExporter(isPresented:document:contentType:defaultFilename:onCompletion:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fileexporter(ispresented:documents:contenttype:oncompletion:)",
                "title": "func fileExporter(isPresented:documents:contentType:onCompletion:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                "title": "func fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)",
                "title": "func fileExporter(isPresented:documents:contentTypes:onCompletion:onCancellation:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                "title": "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                "title": "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fileexporterfilenamelabel(_:)",
                "title": "func fileExporterFilenameLabel(_:)",
                "type": "method"
              },
              {
                "title": "Importing from file",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                "type": "method"
              },
              {
                "title": "Moving a file",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/filemover(ispresented:file:oncompletion:)",
                "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/filemover(ispresented:files:oncompletion:)",
                "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/filemover(ispresented:file:oncompletion:oncancellation:)",
                "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/filemover(ispresented:files:oncompletion:oncancellation:)",
                "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                "type": "method"
              },
              {
                "title": "Configuring a file dialog",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/filedialogbrowseroptions(_:)",
                "title": "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/filedialogconfirmationlabel(_:)",
                "title": "func fileDialogConfirmationLabel(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/filedialogcustomizationid(_:)",
                "title": "func fileDialogCustomizationID(String) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/filedialogdefaultdirectory(_:)",
                "title": "func fileDialogDefaultDirectory(URL?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/filedialogimportsunresolvedaliases(_:)",
                "title": "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/filedialogmessage(_:)",
                "title": "func fileDialogMessage(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/filedialogurlenabled(_:)",
                "title": "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting browser options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/filedialogbrowseroptions/displayfileextensions",
                    "title": "static let displayFileExtensions: FileDialogBrowserOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/filedialogbrowseroptions/enumeratepackages",
                    "title": "static let enumeratePackages: FileDialogBrowserOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/filedialogbrowseroptions/includehiddenfiles",
                    "title": "static let includeHiddenFiles: FileDialogBrowserOptions",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/filedialogbrowseroptions",
                "title": "FileDialogBrowserOptions",
                "type": "struct"
              },
              {
                "title": "Presenting an inspector",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/inspector(ispresented:content:)",
                "title": "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/inspectorcolumnwidth(_:)",
                "title": "func inspectorColumnWidth(CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/inspectorcolumnwidth(min:ideal:max:)",
                "title": "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                "type": "method"
              },
              {
                "title": "Dismissing a presentation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/ispresented",
                "title": "var isPresented: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/dismiss",
                "title": "var dismiss: DismissAction",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dismissaction/callasfunction()",
                    "title": "func callAsFunction()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/dismissaction",
                "title": "DismissAction",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/interactivedismissdisabled(_:)",
                "title": "func interactiveDismissDisabled(Bool) -> some View",
                "type": "method"
              },
              {
                "title": "Deprecated modal presentations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating an alert",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/alert/init(title:message:dismissbutton:)",
                    "title": "init(title: Text, message: Text?, dismissButton: Alert.Button?)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/alert/init(title:message:primarybutton:secondarybutton:)",
                    "title": "init(title: Text, message: Text?, primaryButton: Alert.Button, secondaryButton: Alert.Button)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/alert/sidebysidebuttons(title:message:primarybutton:secondarybutton:)",
                    "title": "static func sideBySideButtons(title: Text, message: Text?, primaryButton: Alert.Button, secondaryButton: Alert.Button) -> Alert",
                    "type": "method"
                  },
                  {
                    "title": "Specifying the button type",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting a button",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/alert/button/default(_:action:)",
                        "title": "static func `default`(Text, action: (() -> Void)?) -> Alert.Button",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/alert/button/cancel(_:)",
                        "title": "static func cancel((() -> Void)?) -> Alert.Button",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/alert/button/cancel(_:action:)",
                        "title": "static func cancel(Text, action: (() -> Void)?) -> Alert.Button",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/alert/button/destructive(_:action:)",
                        "title": "static func destructive(Text, action: (() -> Void)?) -> Alert.Button",
                        "type": "method"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/swiftui/alert/button",
                    "title": "Alert.Button",
                    "type": "struct"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/swiftui/alert",
                "title": "Alert",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating an action sheet",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/actionsheet/init(title:message:buttons:)",
                    "title": "init(title: Text, message: Text?, buttons: [ActionSheet.Button])",
                    "type": "init"
                  },
                  {
                    "title": "Specifying the button type",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/actionsheet/button",
                    "title": "ActionSheet.Button",
                    "type": "typealias"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/swiftui/actionsheet",
                "title": "ActionSheet",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/modal-presentations",
            "title": "Modal presentations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Populating a toolbar",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/toolbar(content:)",
                "title": "func toolbar(content:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a toolbar item",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritem/init(placement:content:)",
                    "title": "init(placement: ToolbarItemPlacement, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritem/init(id:placement:content:)",
                    "title": "init(id: String, placement: ToolbarItemPlacement, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/toolbaritem/init(id:placement:showsbydefault:content:)",
                    "title": "init(id: String, placement: ToolbarItemPlacement, showsByDefault: Bool, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/toolbaritem",
                "title": "ToolbarItem",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a toolbar item group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemgroup/init(placement:content:)",
                    "title": "init(placement: ToolbarItemPlacement, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemgroup/init(placement:content:label:)",
                    "title": "init<C, L>(placement: ToolbarItemPlacement, content: () -> C, label: () -> L)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/labeledtoolbaritemgroupcontent",
                    "title": "LabeledToolbarItemGroupContent",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/toolbaritemgroup",
                "title": "ToolbarItemGroup",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting semantic placement",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/automatic",
                    "title": "static let automatic: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/principal",
                    "title": "static let principal: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/status",
                    "title": "static let status: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "title": "Getting placement for specific actions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/primaryaction",
                    "title": "static let primaryAction: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/secondaryaction",
                    "title": "static let secondaryAction: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/confirmationaction",
                    "title": "static let confirmationAction: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/cancellationaction",
                    "title": "static let cancellationAction: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/destructiveaction",
                    "title": "static let destructiveAction: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/navigation",
                    "title": "static let navigation: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "title": "Getting explicit placement",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/topbarleading",
                    "title": "static var topBarLeading: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/topbartrailing",
                    "title": "static var topBarTrailing: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/bottombar",
                    "title": "static let bottomBar: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/bottomornament",
                    "title": "static let bottomOrnament: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/keyboard",
                    "title": "static let keyboard: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbaritemplacement/accessorybar(id:)",
                    "title": "static func accessoryBar<ID>(id: ID) -> ToolbarItemPlacement",
                    "type": "method"
                  },
                  {
                    "title": "Deprecated symbols",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/toolbaritemplacement/init(id:)",
                    "title": "init<ID>(id: ID)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/toolbaritemplacement/navigationbarleading",
                    "title": "static let navigationBarLeading: ToolbarItemPlacement",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/toolbaritemplacement/navigationbartrailing",
                    "title": "static let navigationBarTrailing: ToolbarItemPlacement",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/toolbaritemplacement",
                "title": "ToolbarItemPlacement",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Implementing toolbar content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontent/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontent/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontent/hidden(_:)",
                    "title": "func hidden(Bool) -> some ToolbarContent",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/toolbarcontent",
                "title": "ToolbarContent",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Building toolbar content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildblock(_:)",
                    "title": "static buildBlock(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:)",
                    "title": "static buildBlock(_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:)",
                    "title": "static buildBlock(_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:_:_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:_:_:_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "title": "Building conditional toolbar content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildif(_:)",
                    "title": "static buildIf(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildeither(first:)",
                    "title": "static buildEither(first:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildeither(second:)",
                    "title": "static buildEither(second:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildexpression(_:)",
                    "title": "static buildExpression(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcontentbuilder/buildlimitedavailability(_:)",
                    "title": "static buildLimitedAvailability(_:)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/toolbarcontentbuilder",
                "title": "ToolbarContentBuilder",
                "type": "struct"
              },
              {
                "title": "Populating a customizable toolbar",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/toolbar(id:content:)",
                "title": "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Using default options",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/customizabletoolbarcontent/defaultcustomization()",
                    "title": "func defaultCustomization() -> some CustomizableToolbarContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/customizabletoolbarcontent/defaultcustomization(_:options:)",
                    "title": "func defaultCustomization(Visibility, options: ToolbarCustomizationOptions) -> some CustomizableToolbarContent",
                    "type": "method"
                  },
                  {
                    "title": "Customizing the behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/customizabletoolbarcontent/customizationbehavior(_:)",
                    "title": "func customizationBehavior(ToolbarCustomizationBehavior) -> some CustomizableToolbarContent",
                    "type": "method"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/customizabletoolbarcontent/hidden(_:)",
                    "title": "func hidden(Bool) -> some CustomizableToolbarContent",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/customizabletoolbarcontent",
                "title": "CustomizableToolbarContent",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting customization behaviors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcustomizationbehavior/default",
                    "title": "static var `default`: ToolbarCustomizationBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcustomizationbehavior/disabled",
                    "title": "static var disabled: ToolbarCustomizationBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcustomizationbehavior/reorderable",
                    "title": "static var reorderable: ToolbarCustomizationBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/toolbarcustomizationbehavior",
                "title": "ToolbarCustomizationBehavior",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting customization options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcustomizationoptions/alwaysavailable",
                    "title": "static var alwaysAvailable: ToolbarCustomizationOptions",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/toolbarcustomizationoptions",
                "title": "ToolbarCustomizationOptions",
                "type": "struct"
              },
              {
                "title": "Removing default items",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/toolbar(removing:)",
                "title": "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the default item types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbardefaultitemkind/sidebartoggle",
                    "title": "static let sidebarToggle: ToolbarDefaultItemKind",
                    "type": "property"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbardefaultitemkind/title",
                    "title": "static let title: ToolbarDefaultItemKind",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/toolbardefaultitemkind",
                "title": "ToolbarDefaultItemKind",
                "type": "struct"
              },
              {
                "title": "Setting toolbar visibility",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/toolbar(_:for:)",
                "title": "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/toolbarvisibility(_:for:)",
                "title": "func toolbarVisibility(Visibility, for: ToolbarPlacement...) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/toolbarbackgroundvisibility(_:for:)",
                "title": "func toolbarBackgroundVisibility(Visibility, for: ToolbarPlacement...) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting placements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarplacement/automatic",
                    "title": "static var automatic: ToolbarPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarplacement/accessorybar(id:)",
                    "title": "static func accessoryBar<ID>(id: ID) -> ToolbarPlacement",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarplacement/bottombar",
                    "title": "static var bottomBar: ToolbarPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarplacement/bottomornament",
                    "title": "static var bottomOrnament: ToolbarPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarplacement/navigationbar",
                    "title": "static var navigationBar: ToolbarPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarplacement/tabbar",
                    "title": "static var tabBar: ToolbarPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarplacement/windowtoolbar",
                    "title": "static var windowToolbar: ToolbarPlacement",
                    "type": "property"
                  },
                  {
                    "title": "Deprecated symbols",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/toolbarplacement/init(id:)",
                    "title": "init<ID>(id: ID)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/toolbarplacement",
                "title": "ToolbarPlacement",
                "type": "struct"
              },
              {
                "title": "Specifying the role of toolbar content",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/toolbarrole(_:)",
                "title": "func toolbarRole(ToolbarRole) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Behavior-specific roles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarrole/browser",
                    "title": "static var browser: ToolbarRole",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarrole/editor",
                    "title": "static var editor: ToolbarRole",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarrole/navigationstack",
                    "title": "static var navigationStack: ToolbarRole",
                    "type": "property"
                  },
                  {
                    "title": "Automatic roles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarrole/automatic",
                    "title": "static var automatic: ToolbarRole",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/toolbarrole",
                "title": "ToolbarRole",
                "type": "struct"
              },
              {
                "title": "Styling a toolbar",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/toolbarbackground(_:for:)",
                "title": "func toolbarBackground(_:for:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/toolbarcolorscheme(_:for:)",
                "title": "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/toolbarforegroundstyle(_:for:)",
                "title": "func toolbarForegroundStyle<S>(S, for: ToolbarPlacement...) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/windowtoolbarstyle(_:)",
                "title": "func windowToolbarStyle<S>(S) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in window toolbar styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarstyle/automatic",
                    "title": "static var automatic: DefaultWindowToolbarStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarstyle/expanded",
                    "title": "static var expanded: ExpandedWindowToolbarStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarstyle/unified",
                    "title": "static var unified: UnifiedWindowToolbarStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarstyle/unified(showstitle:)",
                    "title": "static func unified(showsTitle: Bool) -> UnifiedWindowToolbarStyle",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarstyle/unifiedcompact",
                    "title": "static var unifiedCompact: UnifiedCompactWindowToolbarStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/windowtoolbarstyle/unifiedcompact(showstitle:)",
                    "title": "static func unifiedCompact(showsTitle: Bool) -> UnifiedCompactWindowToolbarStyle",
                    "type": "method"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window toolbar style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultwindowtoolbarstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaultwindowtoolbarstyle",
                    "title": "DefaultWindowToolbarStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window toolbar style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/expandedwindowtoolbarstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/expandedwindowtoolbarstyle",
                    "title": "ExpandedWindowToolbarStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window toolbar style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/unifiedwindowtoolbarstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/unifiedwindowtoolbarstyle/init(showstitle:)",
                        "title": "init(showsTitle: Bool)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/unifiedwindowtoolbarstyle",
                    "title": "UnifiedWindowToolbarStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the window toolbar style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/unifiedcompactwindowtoolbarstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/unifiedcompactwindowtoolbarstyle/init(showstitle:)",
                        "title": "init(showsTitle: Bool)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/unifiedcompactwindowtoolbarstyle",
                    "title": "UnifiedCompactWindowToolbarStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/windowtoolbarstyle",
                "title": "WindowToolbarStyle",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/toolbarlabelstyle",
                "title": "var toolbarLabelStyle: ToolbarLabelStyle?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarlabelstyle/automatic",
                    "title": "static var automatic: ToolbarLabelStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarlabelstyle/icononly",
                    "title": "static var iconOnly: ToolbarLabelStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarlabelstyle/titleandicon",
                    "title": "static var titleAndIcon: ToolbarLabelStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarlabelstyle/titleonly",
                    "title": "static var titleOnly: ToolbarLabelStyle",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/toolbarlabelstyle",
                "title": "ToolbarLabelStyle",
                "type": "struct"
              },
              {
                "title": "Configuring the toolbar title display mode",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/toolbartitledisplaymode(_:)",
                "title": "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting display modes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbartitledisplaymode/automatic",
                    "title": "static var automatic: ToolbarTitleDisplayMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbartitledisplaymode/inline",
                    "title": "static var inline: ToolbarTitleDisplayMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbartitledisplaymode/inlinelarge",
                    "title": "static var inlineLarge: ToolbarTitleDisplayMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/toolbartitledisplaymode/large",
                    "title": "static var large: ToolbarTitleDisplayMode",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/toolbartitledisplaymode",
                "title": "ToolbarTitleDisplayMode",
                "type": "struct"
              },
              {
                "title": "Setting the toolbar title menu",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/toolbartitlemenu(content:)",
                "title": "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a toolbar title menu",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbartitlemenu/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/toolbartitlemenu/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/toolbartitlemenu",
                "title": "ToolbarTitleMenu",
                "type": "struct"
              },
              {
                "title": "Creating an ornament",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/ornament(visibility:attachmentanchor:contentalignment:ornament:)",
                "title": "func ornament<Content>(visibility: Visibility, attachmentAnchor: OrnamentAttachmentAnchor, contentAlignment: Alignment, ornament: () -> Content) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting an anchor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/ornamentattachmentanchor/scene(_:)",
                    "title": "static scene(_:)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/ornamentattachmentanchor",
                "title": "OrnamentAttachmentAnchor",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/toolbars",
            "title": "Toolbars",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Searching your app’s data model",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/adding-a-search-interface-to-your-app",
                "title": "Adding a search interface to your app",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/performing-a-search-operation",
                "title": "Performing a search operation",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/view/searchable(text:placement:prompt:)",
                "title": "func searchable(text:placement:prompt:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/searchable(text:tokens:placement:prompt:token:)",
                "title": "func searchable(text:tokens:placement:prompt:token:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/searchable(text:editabletokens:placement:prompt:token:)",
                "title": "func searchable(text:editableTokens:placement:prompt:token:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting a search field placement",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/searchfieldplacement/automatic",
                    "title": "static let automatic: SearchFieldPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/searchfieldplacement/navigationbardrawer",
                    "title": "static let navigationBarDrawer: SearchFieldPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/searchfieldplacement/navigationbardrawer(displaymode:)",
                    "title": "static func navigationBarDrawer(displayMode: SearchFieldPlacement.NavigationBarDrawerDisplayMode) -> SearchFieldPlacement",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/searchfieldplacement/sidebar",
                    "title": "static let sidebar: SearchFieldPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/searchfieldplacement/toolbar",
                    "title": "static let toolbar: SearchFieldPlacement",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting display modes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/searchfieldplacement/navigationbardrawerdisplaymode/always",
                        "title": "static let always: SearchFieldPlacement.NavigationBarDrawerDisplayMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/searchfieldplacement/navigationbardrawerdisplaymode/automatic",
                        "title": "static let automatic: SearchFieldPlacement.NavigationBarDrawerDisplayMode",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/searchfieldplacement/navigationbardrawerdisplaymode",
                    "title": "SearchFieldPlacement.NavigationBarDrawerDisplayMode",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/searchfieldplacement",
                "title": "SearchFieldPlacement",
                "type": "struct"
              },
              {
                "title": "Making search suggestions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/suggesting-search-terms",
                "title": "Suggesting search terms",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/view/searchsuggestions(_:)",
                "title": "func searchSuggestions<S>(() -> S) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/searchsuggestions(_:for:)",
                "title": "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/searchcompletion(_:)",
                "title": "func searchCompletion(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/searchable(text:tokens:suggestedtokens:placement:prompt:token:)",
                "title": "func searchable(text:tokens:suggestedTokens:placement:prompt:token:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting placements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/searchsuggestionsplacement/automatic",
                    "title": "static var automatic: SearchSuggestionsPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/searchsuggestionsplacement/content",
                    "title": "static var content: SearchSuggestionsPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/searchsuggestionsplacement/menu",
                    "title": "static var menu: SearchSuggestionsPlacement",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting placement sets",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/searchsuggestionsplacement/set/content",
                        "title": "static var content: SearchSuggestionsPlacement.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/searchsuggestionsplacement/set/menu",
                        "title": "static var menu: SearchSuggestionsPlacement.Set",
                        "type": "property"
                      },
                      {
                        "title": "Creating a set",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/searchsuggestionsplacement/set/init(rawvalue:)",
                        "title": "init(rawValue: Int)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/searchsuggestionsplacement/set/rawvalue",
                        "title": "var rawValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/searchsuggestionsplacement/set/element",
                        "title": "SearchSuggestionsPlacement.Set.Element",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/swiftui/searchsuggestionsplacement/set",
                    "title": "SearchSuggestionsPlacement.Set",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/searchsuggestionsplacement",
                "title": "SearchSuggestionsPlacement",
                "type": "struct"
              },
              {
                "title": "Limiting search scope",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/scoping-a-search-operation",
                "title": "Scoping a search operation",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/view/searchscopes(_:scopes:)",
                "title": "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/searchscopes(_:activation:_:)",
                "title": "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting search scope activiation types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/searchscopeactivation/automatic",
                    "title": "static var automatic: SearchScopeActivation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/searchscopeactivation/onsearchpresentation",
                    "title": "static var onSearchPresentation: SearchScopeActivation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/searchscopeactivation/ontextentry",
                    "title": "static var onTextEntry: SearchScopeActivation",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/searchscopeactivation",
                "title": "SearchScopeActivation",
                "type": "struct"
              },
              {
                "title": "Detecting, activating, and dismissing search",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/managing-search-interface-activation",
                "title": "Managing search interface activation",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/issearching",
                "title": "var isSearching: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/dismisssearch",
                "title": "var dismissSearch: DismissSearchAction",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dismisssearchaction/callasfunction()",
                    "title": "func callAsFunction()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/dismisssearchaction",
                "title": "DismissSearchAction",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/searchable(text:ispresented:placement:prompt:)",
                "title": "func searchable(text:isPresented:placement:prompt:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/searchable(text:tokens:ispresented:placement:prompt:token:)",
                "title": "func searchable(text:tokens:isPresented:placement:prompt:token:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/searchable(text:editabletokens:ispresented:placement:prompt:token:)",
                "title": "func searchable(text:editableTokens:isPresented:placement:prompt:token:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)",
                "title": "func searchable(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)",
                "type": "method"
              },
              {
                "title": "Displaying toolbar content during search",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/searchpresentationtoolbarbehavior(_:)",
                "title": "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting toolbar behaviors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/searchpresentationtoolbarbehavior/automatic",
                    "title": "static var automatic: SearchPresentationToolbarBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/searchpresentationtoolbarbehavior/avoidhidingcontent",
                    "title": "static var avoidHidingContent: SearchPresentationToolbarBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/searchpresentationtoolbarbehavior",
                "title": "SearchPresentationToolbarBehavior",
                "type": "struct"
              },
              {
                "title": "Searching for text in a view with find and replace",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/findnavigator(ispresented:)",
                "title": "func findNavigator(isPresented: Binding<Bool>) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/finddisabled(_:)",
                "title": "func findDisabled(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/replacedisabled(_:)",
                "title": "func replaceDisabled(Bool) -> some View",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/search",
            "title": "Search",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating widgets",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/widgetkit/building_widgets_using_widgetkit_and_swiftui",
                "title": "Building Widgets Using WidgetKit and SwiftUI",
                "type": "sampleCode"
              },
              {
                "external": true,
                "path": "/documentation/widgetkit/creating-a-widget-extension",
                "title": "Creating a widget extension",
                "type": "article"
              },
              {
                "external": true,
                "path": "/documentation/widgetkit/keeping-a-widget-up-to-date",
                "title": "Keeping a widget up to date",
                "type": "article"
              },
              {
                "external": true,
                "path": "/documentation/widgetkit/making-a-configurable-widget",
                "title": "Making a configurable widget",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Implementing a widget",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/widget/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/widget/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Running a widget",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/widget/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/widget/main()",
                    "title": "static func main()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/widget",
                "title": "Widget",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Implementing a widget bundle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/widgetbundle/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/widgetbundle/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "children": [
                      {
                        "title": "Bundling widgets",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/widgetbundlebuilder/buildblock()",
                        "title": "static func buildBlock() -> some Widget",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/widgetbundlebuilder/buildblock(_:)",
                        "title": "static buildBlock(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/widgetbundlebuilder/buildexpression(_:)",
                        "title": "static buildExpression(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/widgetbundlebuilder/buildlimitedavailability(_:)",
                        "title": "static buildLimitedAvailability(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/widgetbundlebuilder/buildoptional(_:)",
                        "title": "static func buildOptional((any Widget & _LimitedAvailabilityWidgetMarker)?) -> some Widget",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/widgetbundlebuilder",
                    "title": "WidgetBundleBuilder",
                    "type": "struct"
                  },
                  {
                    "title": "Running a widget bundle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/widgetbundle/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/widgetbundle/main()",
                    "title": "static func main()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/widgetbundle",
                "title": "WidgetBundle",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/limitedavailabilityconfiguration",
                "title": "LimitedAvailabilityConfiguration",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Implementing a widget",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/widgetconfiguration/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/widgetconfiguration/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Setting a name",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/widgetconfiguration/configurationdisplayname(_:)",
                    "title": "func configurationDisplayName(_:)",
                    "type": "method"
                  },
                  {
                    "title": "Setting a description",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/widgetconfiguration/description(_:)",
                    "title": "func description(_:)",
                    "type": "method"
                  },
                  {
                    "title": "Setting the appearance",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/widgetconfiguration/supportedfamilies(_:)",
                    "title": "func supportedFamilies([WidgetFamily]) -> some WidgetConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/widgetconfiguration/contentmarginsdisabled()",
                    "title": "func contentMarginsDisabled() -> some WidgetConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/widgetconfiguration/disfavoredlocations(_:for:)",
                    "title": "func disfavoredLocations([WidgetLocation], for: [WidgetFamily]) -> some WidgetConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/widgetconfiguration/containerbackgroundremovable(_:)",
                    "title": "func containerBackgroundRemovable(Bool) -> some WidgetConfiguration",
                    "type": "method"
                  },
                  {
                    "title": "Managing background tasks",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/widgetconfiguration/backgroundtask(_:action:)",
                    "title": "func backgroundTask<D, R>(BackgroundTask<D, R>, action: (D) async -> R) -> some WidgetConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/widgetconfiguration/onbackgroundurlsessionevents(matching:_:)",
                    "title": "func onBackgroundURLSessionEvents(matching:_:)",
                    "type": "method"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/widgetconfiguration/promptsforuserconfiguration()",
                    "title": "func promptsForUserConfiguration() -> some WidgetConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/widgetconfiguration/supplementalactivityfamilies(_:)",
                    "title": "func supplementalActivityFamilies([ActivityFamily]) -> some WidgetConfiguration",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/widgetconfiguration",
                "title": "WidgetConfiguration",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating a configuration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/emptywidgetconfiguration/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/emptywidgetconfiguration",
                "title": "EmptyWidgetConfiguration",
                "type": "struct"
              },
              {
                "title": "Composing control widgets",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Associated Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidget/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidget/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidget/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidget/main()",
                    "title": "static func main()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/controlwidget",
                "title": "ControlWidget",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Associated Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgetconfiguration/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgetconfiguration/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgetconfiguration/description(_:)",
                    "title": "func description(LocalizedStringResource) -> some ControlWidgetConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgetconfiguration/displayname(_:)",
                    "title": "func displayName(LocalizedStringResource) -> some ControlWidgetConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgetconfiguration/promptsforuserconfiguration()",
                    "title": "func promptsForUserConfiguration() -> some ControlWidgetConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgetconfiguration/pushhandler(_:)",
                    "title": "func pushHandler(any ControlPushHandler.Type) -> some ControlWidgetConfiguration",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/controlwidgetconfiguration",
                "title": "ControlWidgetConfiguration",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/emptycontrolwidgetconfiguration/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/emptycontrolwidgetconfiguration",
                "title": "EmptyControlWidgetConfiguration",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgetconfigurationbuilder/buildblock(_:)",
                    "title": "static func buildBlock<Content>(Content) -> some ControlWidgetConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgetconfigurationbuilder/buildexpression(_:)",
                    "title": "static func buildExpression<Content>(Content) -> Content",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/controlwidgetconfigurationbuilder",
                "title": "ControlWidgetConfigurationBuilder",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Associated Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgettemplate/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgettemplate/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgettemplate/disabled(_:)",
                    "title": "func disabled(Bool) -> some ControlWidgetTemplate",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgettemplate/privacysensitive(_:)",
                    "title": "func privacySensitive(Bool) -> some ControlWidgetTemplate",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgettemplate/tint(_:)",
                    "title": "func tint(Color?) -> some ControlWidgetTemplate",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/controlwidgettemplate",
                "title": "ControlWidgetTemplate",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/emptycontrolwidgettemplate/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/emptycontrolwidgettemplate",
                "title": "EmptyControlWidgetTemplate",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgettemplatebuilder/buildblock(_:)",
                    "title": "static func buildBlock<Content>(Content) -> some ControlWidgetTemplate",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/controlwidgettemplatebuilder/buildexpression(_:)",
                    "title": "static func buildExpression<Content>(Content) -> Content",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/controlwidgettemplatebuilder",
                "title": "ControlWidgetTemplateBuilder",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/controlwidgetactionhint(_:)",
                "title": "func controlWidgetActionHint(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/controlwidgetstatus(_:)",
                "title": "func controlWidgetStatus(_:)",
                "type": "method"
              },
              {
                "title": "Labeling a widget",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/widgetlabel(_:)",
                "title": "func widgetLabel(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/widgetlabel(label:)",
                "title": "func widgetLabel<Label>(label: () -> Label) -> some View",
                "type": "method"
              },
              {
                "title": "Stying a widget group",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessorywidgetgroupstyle(_:)",
                "title": "func accessoryWidgetGroupStyle(AccessoryWidgetGroupStyle) -> some View",
                "type": "method"
              },
              {
                "title": "Controlling the accented group",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/widgetaccentable(_:)",
                "title": "func widgetAccentable(Bool) -> some View",
                "type": "method"
              },
              {
                "title": "Managing placement in the Dynamic Island",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/dynamicisland(verticalplacement:)",
                "title": "func dynamicIsland(verticalPlacement: DynamicIslandExpandedRegionVerticalPlacement) -> some View",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/app-extensions",
            "title": "App extensions",
            "type": "collection"
          },
          {
            "title": "Data and storage",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating and sharing view state",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/managing-user-interface-state",
                "title": "Managing user interface state",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Creating a state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/state/init(wrappedvalue:)",
                    "title": "init(wrappedValue: Value)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/state/init(initialvalue:)",
                    "title": "init(initialValue: Value)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/state/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/state/wrappedvalue",
                    "title": "var wrappedValue: Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/state/projectedvalue",
                    "title": "var projectedValue: Binding<Value>",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/state",
                "title": "State",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a bindable value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/bindable/init(_:)",
                    "title": "init(Value)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/bindable/init(wrappedvalue:)",
                    "title": "init(wrappedValue: Value)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/bindable/init(projectedvalue:)",
                    "title": "init(projectedValue: Bindable<Value>)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/bindable/wrappedvalue",
                    "title": "var wrappedValue: Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/bindable/projectedvalue",
                    "title": "var projectedValue: Bindable<Value>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/bindable/subscript(dynamicmember:)",
                    "title": "subscript<Subject>(dynamicMember _: ReferenceWritableKeyPath<Value, Subject>) -> Binding<Subject>",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/swiftui/bindable",
                "title": "Bindable",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a binding",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/binding/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/binding/init(projectedvalue:)",
                    "title": "init(projectedValue: Binding<Value>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/binding/init(get:set:)",
                    "title": "init(get:set:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/binding/constant(_:)",
                    "title": "static func constant(Value) -> Binding<Value>",
                    "type": "method"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/binding/wrappedvalue",
                    "title": "var wrappedValue: Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/binding/projectedvalue",
                    "title": "var projectedValue: Binding<Value>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/binding/subscript(dynamicmember:)",
                    "title": "subscript<Subject>(dynamicMember _: WritableKeyPath<Value, Subject>) -> Binding<Subject>",
                    "type": "subscript"
                  },
                  {
                    "title": "Managing changes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/binding/id",
                    "title": "var id: Value.ID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/binding/animation(_:)",
                    "title": "func animation(Animation?) -> Binding<Value>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/binding/transaction(_:)",
                    "title": "func transaction(Transaction) -> Binding<Value>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/binding/transaction",
                    "title": "var transaction: Transaction",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/binding/id",
                        "title": "var id: Value.ID",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/binding/identifiable-implementations",
                    "title": "Identifiable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/swiftui/binding",
                "title": "Binding",
                "type": "struct"
              },
              {
                "title": "Creating model data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/managing-model-data-in-your-app",
                "title": "Managing model data in your app",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro",
                "title": "Migrating from the Observable Object protocol to the Observable macro",
                "type": "sampleCode"
              },
              {
                "external": true,
                "path": "/documentation/observation/observable()",
                "title": "macro Observable()",
                "type": "macro"
              },
              {
                "path": "/documentation/swiftui/monitoring-model-data-changes-in-your-app",
                "title": "Monitoring data changes in your app",
                "type": "sampleCode"
              },
              {
                "children": [
                  {
                    "title": "Creating a state object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/stateobject/init(wrappedvalue:)",
                    "title": "init(wrappedValue: @autoclosure () -> ObjectType)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/stateobject/wrappedvalue",
                    "title": "var wrappedValue: ObjectType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/stateobject/projectedvalue",
                    "title": "var projectedValue: ObservedObject<ObjectType>.Wrapper",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/stateobject",
                "title": "StateObject",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating an observed object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/observedobject/init(wrappedvalue:)",
                    "title": "init(wrappedValue: ObjectType)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/observedobject/init(initialvalue:)",
                    "title": "init(initialValue: ObjectType)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/observedobject/wrappedvalue",
                    "title": "var wrappedValue: ObjectType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/observedobject/projectedvalue",
                    "title": "var projectedValue: ObservedObject<ObjectType>.Wrapper",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Subscripts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/observedobject/wrapper/subscript(dynamicmember:)",
                        "title": "subscript<Subject>(dynamicMember _: ReferenceWritableKeyPath<ObjectType, Subject>) -> Binding<Subject>",
                        "type": "subscript"
                      }
                    ],
                    "path": "/documentation/swiftui/observedobject/wrapper",
                    "title": "ObservedObject.Wrapper",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/observedobject",
                "title": "ObservedObject",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/combine/observableobject",
                "title": "ObservableObject",
                "type": "protocol"
              },
              {
                "title": "Responding to data changes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onchange(of:initial:_:)",
                "title": "func onChange(of:initial:_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onreceive(_:perform:)",
                "title": "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                "type": "method"
              },
              {
                "title": "Distributing model data throughout your app",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/environmentobject(_:)",
                "title": "func environmentObject<T>(T) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/environmentobject(_:)",
                "title": "func environmentObject<T>(T) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating an environment object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentobject/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentobject/wrappedvalue",
                    "title": "var wrappedValue: ObjectType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentobject/projectedvalue",
                    "title": "var projectedValue: EnvironmentObject<ObjectType>.Wrapper",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting a binding value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/environmentobject/wrapper/subscript(dynamicmember:)",
                        "title": "subscript<Subject>(dynamicMember _: ReferenceWritableKeyPath<ObjectType, Subject>) -> Binding<Subject>",
                        "type": "subscript"
                      }
                    ],
                    "path": "/documentation/swiftui/environmentobject/wrapper",
                    "title": "EnvironmentObject.Wrapper",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/environmentobject",
                "title": "EnvironmentObject",
                "type": "struct"
              },
              {
                "title": "Managing dynamic data",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Updating the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dynamicproperty/update()",
                    "title": "func update()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/dynamicproperty",
                "title": "DynamicProperty",
                "type": "protocol"
              }
            ],
            "path": "/documentation/swiftui/model-data",
            "title": "Model data",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Accessing environment values",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating an environment instance",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environment/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environment/wrappedvalue",
                    "title": "var wrappedValue: Value",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/environment",
                "title": "Environment",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating and accessing values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/subscript(_:)",
                    "title": "subscript(_:)",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "title": "Accessibility",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilityassistiveaccessenabled",
                    "title": "var accessibilityAssistiveAccessEnabled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilitydimflashinglights",
                    "title": "var accessibilityDimFlashingLights: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilitydifferentiatewithoutcolor",
                    "title": "var accessibilityDifferentiateWithoutColor: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilityenabled",
                    "title": "var accessibilityEnabled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilityinvertcolors",
                    "title": "var accessibilityInvertColors: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilitylargecontentviewerenabled",
                    "title": "var accessibilityLargeContentViewerEnabled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilityplayanimatedimages",
                    "title": "var accessibilityPlayAnimatedImages: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilityprefersheadanchoralternative",
                    "title": "var accessibilityPrefersHeadAnchorAlternative: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilityquickactionsenabled",
                    "title": "var accessibilityQuickActionsEnabled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilityreducemotion",
                    "title": "var accessibilityReduceMotion: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilityreducetransparency",
                    "title": "var accessibilityReduceTransparency: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilityshowbuttonshapes",
                    "title": "var accessibilityShowButtonShapes: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilityswitchcontrolenabled",
                    "title": "var accessibilitySwitchControlEnabled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/accessibilityvoiceoverenabled",
                    "title": "var accessibilityVoiceOverEnabled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/legibilityweight",
                    "title": "var legibilityWeight: LegibilityWeight?",
                    "type": "property"
                  },
                  {
                    "title": "Actions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/dismiss",
                    "title": "var dismiss: DismissAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/dismisssearch",
                    "title": "var dismissSearch: DismissSearchAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/dismisswindow",
                    "title": "var dismissWindow: DismissWindowAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/openimmersivespace",
                    "title": "var openImmersiveSpace: OpenImmersiveSpaceAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/dismissimmersivespace",
                    "title": "var dismissImmersiveSpace: DismissImmersiveSpaceAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/newdocument",
                    "title": "var newDocument: NewDocumentAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/opendocument",
                    "title": "var openDocument: OpenDocumentAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/openurl",
                    "title": "var openURL: OpenURLAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/openwindow",
                    "title": "var openWindow: OpenWindowAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/pushwindow",
                    "title": "var pushWindow: PushWindowAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/purchase",
                    "title": "var purchase: PurchaseAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/refresh",
                    "title": "var refresh: RefreshAction?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/rename",
                    "title": "var rename: RenameAction?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/resetfocus",
                    "title": "var resetFocus: ResetFocusAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/opensettings",
                    "title": "var openSettings: OpenSettingsAction",
                    "type": "property"
                  },
                  {
                    "title": "Authentication",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/authorizationcontroller",
                    "title": "var authorizationController: AuthorizationController",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/webauthenticationsession",
                    "title": "var webAuthenticationSession: WebAuthenticationSession",
                    "type": "property"
                  },
                  {
                    "title": "Controls and input",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/buttonrepeatbehavior",
                    "title": "var buttonRepeatBehavior: ButtonRepeatBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/controlsize",
                    "title": "var controlSize: ControlSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/defaultwheelpickeritemheight",
                    "title": "var defaultWheelPickerItemHeight: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/keyboardshortcut",
                    "title": "var keyboardShortcut: KeyboardShortcut?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/menuindicatorvisibility",
                    "title": "var menuIndicatorVisibility: Visibility",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/menuorder",
                    "title": "var menuOrder: MenuOrder",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/searchsuggestionsplacement",
                    "title": "var searchSuggestionsPlacement: SearchSuggestionsPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/preferredpencildoubletapaction",
                    "title": "var preferredPencilDoubleTapAction: PencilPreferredAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/preferredpencilsqueezeaction",
                    "title": "var preferredPencilSqueezeAction: PencilPreferredAction",
                    "type": "property"
                  },
                  {
                    "title": "Display characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/appearsactive",
                    "title": "var appearsActive: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/colorscheme",
                    "title": "var colorScheme: ColorScheme",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/colorschemecontrast",
                    "title": "var colorSchemeContrast: ColorSchemeContrast",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/displayscale",
                    "title": "var displayScale: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/horizontalsizeclass",
                    "title": "var horizontalSizeClass: UserInterfaceSizeClass?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/imagescale",
                    "title": "var imageScale: Image.Scale",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/pixellength",
                    "title": "var pixelLength: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/sidebarrowsize",
                    "title": "var sidebarRowSize: SidebarRowSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/verticalsizeclass",
                    "title": "var verticalSizeClass: UserInterfaceSizeClass?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/immersivespacedisplacement",
                    "title": "var immersiveSpaceDisplacement: Pose3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/labelsvisibility",
                    "title": "var labelsVisibility: Visibility",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/materialactiveappearance",
                    "title": "var materialActiveAppearance: MaterialActiveAppearance",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/tabbarplacement/bottombar",
                        "title": "static let bottomBar: TabBarPlacement",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/tabbarplacement/ornament",
                        "title": "static let ornament: TabBarPlacement",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/tabbarplacement/pageindicator",
                        "title": "static let pageIndicator: TabBarPlacement",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/tabbarplacement/sidebar",
                        "title": "static let sidebar: TabBarPlacement",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/tabbarplacement/topbar",
                        "title": "static let topBar: TabBarPlacement",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/tabbarplacement",
                    "title": "TabBarPlacement",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/toolbarlabelstyle",
                    "title": "var toolbarLabelStyle: ToolbarLabelStyle?",
                    "type": "property"
                  },
                  {
                    "title": "Global objects",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/calendar",
                    "title": "var calendar: Calendar",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/documentconfiguration",
                    "title": "var documentConfiguration: DocumentConfiguration?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/locale",
                    "title": "var locale: Locale",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/managedobjectcontext",
                    "title": "var managedObjectContext: NSManagedObjectContext",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/modelcontext",
                    "title": "var modelContext: ModelContext",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/timezone",
                    "title": "var timeZone: TimeZone",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/undomanager",
                    "title": "var undoManager: UndoManager?",
                    "type": "property"
                  },
                  {
                    "title": "Scrolling",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/isscrollenabled",
                    "title": "var isScrollEnabled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/horizontalscrollindicatorvisibility",
                    "title": "var horizontalScrollIndicatorVisibility: ScrollIndicatorVisibility",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/verticalscrollindicatorvisibility",
                    "title": "var verticalScrollIndicatorVisibility: ScrollIndicatorVisibility",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/scrolldismisseskeyboardmode",
                    "title": "var scrollDismissesKeyboardMode: ScrollDismissesKeyboardMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/horizontalscrollbouncebehavior",
                    "title": "var horizontalScrollBounceBehavior: ScrollBounceBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/verticalscrollbouncebehavior",
                    "title": "var verticalScrollBounceBehavior: ScrollBounceBehavior",
                    "type": "property"
                  },
                  {
                    "title": "State",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/editmode",
                    "title": "var editMode: Binding<EditMode>?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/isactivityfullscreen",
                    "title": "var isActivityFullscreen: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/isenabled",
                    "title": "var isEnabled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/isfocused",
                    "title": "var isFocused: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/isfocuseffectenabled",
                    "title": "var isFocusEffectEnabled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/ishovereffectenabled",
                    "title": "var isHoverEffectEnabled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/isluminancereduced",
                    "title": "var isLuminanceReduced: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/ispresented",
                    "title": "var isPresented: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/isscenecaptured",
                    "title": "var isSceneCaptured: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/issearching",
                    "title": "var isSearching: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/istabbarshowingsections",
                    "title": "var isTabBarShowingSections: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/scenephase",
                    "title": "var scenePhase: ScenePhase",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/supportsmultiplewindows",
                    "title": "var supportsMultipleWindows: Bool",
                    "type": "property"
                  },
                  {
                    "title": "StoreKit configuration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/displaystorekitmessage",
                    "title": "var displayStoreKitMessage: DisplayMessageAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/requestreview",
                    "title": "var requestReview: RequestReviewAction",
                    "type": "property"
                  },
                  {
                    "title": "Text styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/allowstightening",
                    "title": "var allowsTightening: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/autocorrectiondisabled",
                    "title": "var autocorrectionDisabled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/dynamictypesize",
                    "title": "var dynamicTypeSize: DynamicTypeSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/font",
                    "title": "var font: Font?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/layoutdirection",
                    "title": "var layoutDirection: LayoutDirection",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/linelimit",
                    "title": "var lineLimit: Int?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/linespacing",
                    "title": "var lineSpacing: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/minimumscalefactor",
                    "title": "var minimumScaleFactor: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/multilinetextalignment",
                    "title": "var multilineTextAlignment: TextAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/textcase",
                    "title": "var textCase: Text.Case?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/truncationmode",
                    "title": "var truncationMode: Text.TruncationMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/textselectionaffinity",
                    "title": "var textSelectionAffinity: TextSelectionAffinity",
                    "type": "property"
                  },
                  {
                    "title": "View attributes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/alloweddynamicrange",
                    "title": "var allowedDynamicRange: Image.DynamicRange?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/backgroundmaterial",
                    "title": "var backgroundMaterial: Material?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/backgroundprominence",
                    "title": "var backgroundProminence: BackgroundProminence",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/backgroundstyle",
                    "title": "var backgroundStyle: AnyShapeStyle?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/badgeprominence",
                    "title": "var badgeProminence: BadgeProminence",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/contenttransition",
                    "title": "var contentTransition: ContentTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/contenttransitionaddsdrawinggroup",
                    "title": "var contentTransitionAddsDrawingGroup: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/defaultminlistheaderheight",
                    "title": "var defaultMinListHeaderHeight: CGFloat?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/defaultminlistrowheight",
                    "title": "var defaultMinListRowHeight: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/headerprominence",
                    "title": "var headerProminence: Prominence",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/physicalmetrics",
                    "title": "var physicalMetrics: PhysicalMetricsConverter",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/realitykitscene",
                    "title": "var realityKitScene: Scene?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/realityviewcameracontrols",
                    "title": "var realityViewCameraControls: CameraControls",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/redactionreasons",
                    "title": "var redactionReasons: RedactionReasons",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/springloadingbehavior",
                    "title": "var springLoadingBehavior: SpringLoadingBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/symbolrenderingmode",
                    "title": "var symbolRenderingMode: SymbolRenderingMode?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/symbolvariants",
                    "title": "var symbolVariants: SymbolVariants",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/worldtrackinglimitations",
                    "title": "var worldTrackingLimitations: Set<WorldTrackingLimitation>",
                    "type": "property"
                  },
                  {
                    "title": "Widgets",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/showswidgetcontainerbackground",
                    "title": "var showsWidgetContainerBackground: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/showswidgetlabel",
                    "title": "var showsWidgetLabel: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/widgetfamily",
                    "title": "var widgetFamily: WidgetFamily",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/widgetrenderingmode",
                    "title": "var widgetRenderingMode: WidgetRenderingMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/widgetcontentmargins",
                    "title": "var widgetContentMargins: EdgeInsets",
                    "type": "property"
                  },
                  {
                    "title": "Deprecated environment values",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/environmentvalues/disableautocorrection",
                    "title": "var disableAutocorrection: Bool?",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/environmentvalues/sizecategory",
                    "title": "var sizeCategory: ContentSizeCategory",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/environmentvalues/presentationmode",
                    "title": "var presentationMode: Binding<PresentationMode>",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Checking presentation",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/presentationmode/ispresented",
                        "title": "var isPresented: Bool",
                        "type": "property"
                      },
                      {
                        "title": "Dismissing presentation",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/presentationmode/dismiss()",
                        "title": "func dismiss()",
                        "type": "method"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/swiftui/presentationmode",
                    "title": "PresentationMode",
                    "type": "struct"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/environmentvalues/complicationrenderingmode",
                    "title": "var complicationRenderingMode: ComplicationRenderingMode",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/environmentvalues/controlactivestate",
                    "title": "var controlActiveState: ControlActiveState",
                    "type": "property"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/activityfamily",
                    "title": "var activityFamily: ActivityFamily",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/credentialexportmanager",
                    "title": "var credentialExportManager: ASCredentialExportManager",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/credentialimportmanager",
                    "title": "var credentialImportManager: ASCredentialImportManager",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/devicepickersupports",
                    "title": "var devicePickerSupports: DevicePickerSupportedAction",
                    "type": "property"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/environmentvalues/imageplaygroundallowedgenerationstyles",
                    "title": "var imagePlaygroundAllowedGenerationStyles: [ImagePlaygroundStyle]",
                    "type": "property"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/environmentvalues/imageplaygroundpersonalizationpolicy",
                    "title": "var imagePlaygroundPersonalizationPolicy: ImagePlaygroundPersonalizationPolicy",
                    "type": "property"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/environmentvalues/imageplaygroundselectedgenerationstyle",
                    "title": "var imagePlaygroundSelectedGenerationStyle: ImagePlaygroundStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/isactivityupdatereduced",
                    "title": "var isActivityUpdateReduced: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/isuserauthenticationenabled",
                    "title": "var isUserAuthenticationEnabled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/supportedactivityfamilies",
                    "title": "var supportedActivityFamilies: Set<ActivityFamily>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/supportsimageplayground",
                    "title": "var supportsImagePlayground: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/tabbarplacement",
                    "title": "var tabBarPlacement: TabBarPlacement?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/environmentvalues",
                "title": "EnvironmentValues",
                "type": "struct"
              },
              {
                "title": "Creating custom environment values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/entry()",
                "title": "macro Entry()",
                "type": "macro"
              },
              {
                "children": [
                  {
                    "title": "Getting the default value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentkey/defaultvalue",
                    "title": "static var defaultValue: Self.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/environmentkey/value",
                    "title": "Value",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/environmentkey",
                "title": "EnvironmentKey",
                "type": "protocol"
              },
              {
                "title": "Modifying the environment of a view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/environment(_:)",
                "title": "func environment<T>(T?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/environment(_:_:)",
                "title": "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/transformenvironment(_:transform:)",
                "title": "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                "type": "method"
              },
              {
                "title": "Modifying the environment of a scene",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/scene/environment(_:)",
                "title": "func environment<T>(T?) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/environment(_:_:)",
                "title": "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/transformenvironment(_:transform:)",
                "title": "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some Scene",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/environment-values",
            "title": "Environment values",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Setting preferences",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/preference(key:value:)",
                "title": "func preference<K>(key: K.Type, value: K.Value) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/transformpreference(_:_:)",
                "title": "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                "type": "method"
              },
              {
                "title": "Creating custom preferences",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Getting the default value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/preferencekey/defaultvalue",
                    "title": "static var defaultValue: Self.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/preferencekey/value",
                    "title": "Value",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Combining preferences",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/preferencekey/reduce(value:nextvalue:)",
                    "title": "static func reduce(value: inout Self.Value, nextValue: () -> Self.Value)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/preferencekey",
                "title": "PreferenceKey",
                "type": "protocol"
              },
              {
                "title": "Setting preferences based on geometry",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/anchorpreference(key:value:transform:)",
                "title": "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/transformanchorpreference(key:value:transform:)",
                "title": "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                "type": "method"
              },
              {
                "title": "Responding to changes in preferences",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onpreferencechange(_:perform:)",
                "title": "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                "type": "method"
              },
              {
                "title": "Generating backgrounds and overlays from preferences",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/backgroundpreferencevalue(_:_:)",
                "title": "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/backgroundpreferencevalue(_:alignment:_:)",
                "title": "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/overlaypreferencevalue(_:_:)",
                "title": "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/overlaypreferencevalue(_:alignment:_:)",
                "title": "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/preferences",
            "title": "Preferences",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Saving state across app launches",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/restoring_your_app_s_state_with_swiftui",
                "title": "Restoring Your App’s State with SwiftUI",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/view/defaultappstorage(_:)",
                "title": "func defaultAppStorage(UserDefaults) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Storing a value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)",
                    "title": "init(wrappedValue:_:store:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/appstorage/init(_:store:)",
                    "title": "init(_:store:)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/appstorage/wrappedvalue",
                    "title": "var wrappedValue: Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/appstorage/projectedvalue",
                    "title": "var projectedValue: Binding<Value>",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/appstorage",
                "title": "AppStorage",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Storing a value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scenestorage/init(wrappedvalue:_:)",
                    "title": "init(wrappedValue:_:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/scenestorage/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scenestorage/wrappedvalue",
                    "title": "var wrappedValue: Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scenestorage/projectedvalue",
                    "title": "var projectedValue: Binding<Value>",
                    "type": "property"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scenestorage/init(wrappedvalue:_:store:)",
                    "title": "init(wrappedValue: Value, String, store: UserDefaults?)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/scenestorage",
                "title": "SceneStorage",
                "type": "struct"
              },
              {
                "title": "Accessing Core Data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/loading_and_displaying_a_large_data_feed",
                "title": "Loading and Displaying a Large Data Feed",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/managedobjectcontext",
                "title": "var managedObjectContext: NSManagedObjectContext",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating a fetch request",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/fetchrequest/init(sortdescriptors:predicate:animation:)",
                    "title": "init(sortDescriptors:predicate:animation:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/fetchrequest/init(entity:sortdescriptors:predicate:animation:)",
                    "title": "init(entity: NSEntityDescription, sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a fully configured fetch request",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/fetchrequest/init(fetchrequest:animation:)",
                    "title": "init(fetchRequest: NSFetchRequest<Result>, animation: Animation?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/fetchrequest/init(fetchrequest:transaction:)",
                    "title": "init(fetchRequest: NSFetchRequest<Result>, transaction: Transaction)",
                    "type": "init"
                  },
                  {
                    "title": "Configuring a request dynamically",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Setting a predicate",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/fetchrequest/configuration/nspredicate",
                        "title": "var nsPredicate: NSPredicate?",
                        "type": "property"
                      },
                      {
                        "title": "Setting sort descriptors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/fetchrequest/configuration/sortdescriptors",
                        "title": "var sortDescriptors: [SortDescriptor<Result>]",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/fetchrequest/configuration/nssortdescriptors",
                        "title": "var nsSortDescriptors: [NSSortDescriptor]",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/fetchrequest/configuration",
                    "title": "FetchRequest.Configuration",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/fetchrequest/projectedvalue",
                    "title": "var projectedValue: Binding<FetchRequest<Result>.Configuration>",
                    "type": "property"
                  },
                  {
                    "title": "Getting the fetched results",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/fetchrequest/update()",
                    "title": "func update()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/fetchrequest/wrappedvalue",
                    "title": "var wrappedValue: FetchedResults<Result>",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/fetchrequest/update()",
                        "title": "func update()",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/fetchrequest/dynamicproperty-implementations",
                    "title": "DynamicProperty Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/swiftui/fetchrequest",
                "title": "FetchRequest",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Configuring the associated fetch request",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/fetchedresults/nspredicate",
                    "title": "var nsPredicate: NSPredicate?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/fetchedresults/sortdescriptors",
                    "title": "var sortDescriptors: [SortDescriptor<Result>]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/fetchedresults/nssortdescriptors",
                    "title": "var nsSortDescriptors: [NSSortDescriptor]",
                    "type": "property"
                  },
                  {
                    "title": "Getting indices",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/fetchedresults/startindex",
                    "title": "var startIndex: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/fetchedresults/endindex",
                    "title": "var endIndex: Int",
                    "type": "property"
                  },
                  {
                    "title": "Getting results",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/fetchedresults/subscript(_:)",
                    "title": "subscript(Int) -> Result",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/swiftui/fetchedresults",
                "title": "FetchedResults",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a fetch request",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchrequest/init(sectionidentifier:sortdescriptors:predicate:animation:)",
                    "title": "init(sectionIdentifier:sortDescriptors:predicate:animation:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchrequest/init(entity:sectionidentifier:sortdescriptors:predicate:animation:)",
                    "title": "init(entity: NSEntityDescription, sectionIdentifier: KeyPath<Result, SectionIdentifier>, sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a fully configured fetch request",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchrequest/init(fetchrequest:sectionidentifier:animation:)",
                    "title": "init(fetchRequest: NSFetchRequest<Result>, sectionIdentifier: KeyPath<Result, SectionIdentifier>, animation: Animation?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchrequest/init(fetchrequest:sectionidentifier:transaction:)",
                    "title": "init(fetchRequest: NSFetchRequest<Result>, sectionIdentifier: KeyPath<Result, SectionIdentifier>, transaction: Transaction)",
                    "type": "init"
                  },
                  {
                    "title": "Configuring a request dynamically",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Setting the section identifier",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/sectionedfetchrequest/configuration/sectionidentifier",
                        "title": "var sectionIdentifier: KeyPath<Result, SectionIdentifier>",
                        "type": "property"
                      },
                      {
                        "title": "Setting a predicate",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/sectionedfetchrequest/configuration/nspredicate",
                        "title": "var nsPredicate: NSPredicate?",
                        "type": "property"
                      },
                      {
                        "title": "Setting sort descriptors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/sectionedfetchrequest/configuration/sortdescriptors",
                        "title": "var sortDescriptors: [SortDescriptor<Result>]",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/sectionedfetchrequest/configuration/nssortdescriptors",
                        "title": "var nsSortDescriptors: [NSSortDescriptor]",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/sectionedfetchrequest/configuration",
                    "title": "SectionedFetchRequest.Configuration",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchrequest/projectedvalue",
                    "title": "var projectedValue: Binding<SectionedFetchRequest<SectionIdentifier, Result>.Configuration>",
                    "type": "property"
                  },
                  {
                    "title": "Getting the fetched results",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchrequest/update()",
                    "title": "func update()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchrequest/wrappedvalue",
                    "title": "var wrappedValue: SectionedFetchResults<SectionIdentifier, Result>",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/sectionedfetchrequest/update()",
                        "title": "func update()",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/sectionedfetchrequest/dynamicproperty-implementations",
                    "title": "DynamicProperty Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/swiftui/sectionedfetchrequest",
                "title": "SectionedFetchRequest",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Configuring the associated sectioned fetch request",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchresults/nspredicate",
                    "title": "var nsPredicate: NSPredicate?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchresults/sortdescriptors",
                    "title": "var sortDescriptors: [SortDescriptor<Result>]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchresults/nssortdescriptors",
                    "title": "var nsSortDescriptors: [NSSortDescriptor]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchresults/sectionidentifier",
                    "title": "var sectionIdentifier: KeyPath<Result, SectionIdentifier>",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Identifying the section",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/sectionedfetchresults/section/id",
                        "title": "let id: SectionIdentifier",
                        "type": "property"
                      },
                      {
                        "title": "Getting indices",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/sectionedfetchresults/section/startindex",
                        "title": "var startIndex: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/sectionedfetchresults/section/endindex",
                        "title": "var endIndex: Int",
                        "type": "property"
                      },
                      {
                        "title": "Getting results",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/sectionedfetchresults/section/subscript(_:)",
                        "title": "subscript(Int) -> Result",
                        "type": "subscript"
                      }
                    ],
                    "path": "/documentation/swiftui/sectionedfetchresults/section",
                    "title": "SectionedFetchResults.Section",
                    "type": "struct"
                  },
                  {
                    "title": "Getting indices",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchresults/startindex",
                    "title": "var startIndex: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchresults/endindex",
                    "title": "var endIndex: Int",
                    "type": "property"
                  },
                  {
                    "title": "Getting results",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sectionedfetchresults/subscript(_:)",
                    "title": "subscript(Int) -> SectionedFetchResults<SectionIdentifier, Result>.Section",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/swiftui/sectionedfetchresults",
                "title": "SectionedFetchResults",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/persistent-storage",
            "title": "Persistent storage",
            "type": "collection"
          },
          {
            "title": "Views",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/declaring-a-custom-view",
                "title": "Declaring a custom view",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Implementing a custom view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/view/body-8kl5o",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/view/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "path": "/documentation/swiftui/view/modifier(_:)",
                    "title": "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Essentials",
                        "type": "groupMarker"
                      },
                      {
                        "external": true,
                        "path": "/documentation/xcode/previewing-your-apps-interface-in-xcode",
                        "title": "Previewing your app’s interface in Xcode",
                        "type": "article"
                      },
                      {
                        "title": "Creating a preview",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/preview(_:body:)",
                        "title": "macro Preview(String?, body: () -> any View)",
                        "type": "macro"
                      },
                      {
                        "path": "/documentation/swiftui/preview(_:traits:_:body:)",
                        "title": "macro Preview(String?, traits: PreviewTrait<Preview.ViewTraits>, PreviewTrait<Preview.ViewTraits>..., body: () -> any View)",
                        "type": "macro"
                      },
                      {
                        "path": "/documentation/swiftui/preview(_:traits:body:cameras:)",
                        "title": "macro Preview(String?, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> any View, cameras: () -> [PreviewCamera])",
                        "type": "macro"
                      },
                      {
                        "title": "Creating a preview in the context of a scene",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/preview(_:immersionstyle:traits:body:)",
                        "title": "macro Preview<Style>(String?, immersionStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> any View)",
                        "type": "macro"
                      },
                      {
                        "path": "/documentation/swiftui/preview(_:immersionstyle:traits:body:cameras:)",
                        "title": "macro Preview<Style>(String?, immersionStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> any View, cameras: () -> [PreviewCamera])",
                        "type": "macro"
                      },
                      {
                        "path": "/documentation/swiftui/preview(_:windowstyle:traits:body:)",
                        "title": "macro Preview<Style>(String?, windowStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> any View)",
                        "type": "macro"
                      },
                      {
                        "path": "/documentation/swiftui/preview(_:windowstyle:traits:body:cameras:)",
                        "title": "macro Preview<Style>(String?, windowStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> any View, cameras: () -> [PreviewCamera])",
                        "type": "macro"
                      },
                      {
                        "title": "Defining a preview",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/previewable()",
                        "title": "macro Previewable()",
                        "type": "macro"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a preview",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/previewprovider/previews-swift.type.property",
                            "title": "static var previews: Self.Previews",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/previewprovider/previews-swift.associatedtype",
                            "title": "Previews",
                            "type": "associatedtype"
                          },
                          {
                            "title": "Specifying the platform",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/previewprovider/platform",
                            "title": "static var platform: PreviewPlatform?",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/previewprovider",
                        "title": "PreviewProvider",
                        "type": "protocol"
                      },
                      {
                        "children": [
                          {
                            "title": "Getting an operating system",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/previewplatform/ios",
                            "title": "case iOS",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/swiftui/previewplatform/macos",
                            "title": "case macOS",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/swiftui/previewplatform/tvos",
                            "title": "case tvOS",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/swiftui/previewplatform/watchos",
                            "title": "case watchOS",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/swiftui/previewplatform",
                        "title": "PreviewPlatform",
                        "type": "enum"
                      },
                      {
                        "path": "/documentation/swiftui/view/previewdisplayname(_:)",
                        "title": "func previewDisplayName(String?) -> some View",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Associated Types",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/previewmodifier/body",
                            "title": "Body",
                            "type": "associatedtype"
                          },
                          {
                            "path": "/documentation/swiftui/previewmodifier/context",
                            "title": "Context",
                            "type": "associatedtype"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/previewmodifier/body(content:context:)",
                            "title": "func body(content: Self.Content, context: Self.Context) -> Self.Body",
                            "type": "method"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/previewmodifier/content",
                            "title": "PreviewModifier.Content",
                            "type": "typealias"
                          },
                          {
                            "title": "Type Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/previewmodifier/makesharedcontext()",
                            "title": "static func makeSharedContext() async throws -> Self.Context",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/swiftui/previewmodifier",
                        "title": "PreviewModifier",
                        "type": "protocol"
                      },
                      {
                        "path": "/documentation/swiftui/previewmodifiercontent",
                        "title": "PreviewModifierContent",
                        "type": "struct"
                      },
                      {
                        "title": "Customizing a preview",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/previewdevice(_:)",
                        "title": "func previewDevice(PreviewDevice?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/previewdevice",
                        "title": "PreviewDevice",
                        "type": "struct"
                      },
                      {
                        "path": "/documentation/swiftui/view/previewlayout(_:)",
                        "title": "func previewLayout(PreviewLayout) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/previewinterfaceorientation(_:)",
                        "title": "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Getting an orientation",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/interfaceorientation/portrait",
                            "title": "static let portrait: InterfaceOrientation",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/interfaceorientation/portraitupsidedown",
                            "title": "static let portraitUpsideDown: InterfaceOrientation",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/interfaceorientation/landscapeleft",
                            "title": "static let landscapeLeft: InterfaceOrientation",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/interfaceorientation/landscaperight",
                            "title": "static let landscapeRight: InterfaceOrientation",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/interfaceorientation",
                        "title": "InterfaceOrientation",
                        "type": "struct"
                      },
                      {
                        "title": "Setting a context",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/previewcontext(_:)",
                        "title": "func previewContext<C>(C) -> some View",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Accessing a preview context",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/previewcontext/subscript(_:)",
                            "title": "subscript<Key>(Key.Type) -> Key.Value",
                            "type": "subscript"
                          }
                        ],
                        "path": "/documentation/swiftui/previewcontext",
                        "title": "PreviewContext",
                        "type": "protocol"
                      },
                      {
                        "children": [
                          {
                            "title": "Setting a default",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/previewcontextkey/defaultvalue",
                            "title": "static var defaultValue: Self.Value",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/previewcontextkey/value",
                            "title": "Value",
                            "type": "associatedtype"
                          }
                        ],
                        "path": "/documentation/swiftui/previewcontextkey",
                        "title": "PreviewContextKey",
                        "type": "protocol"
                      }
                    ],
                    "path": "/documentation/swiftui/previews-in-xcode",
                    "title": "Previews in Xcode",
                    "type": "collection"
                  },
                  {
                    "title": "Configuring view elements",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Labels",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitylabel(_:)",
                        "title": "func accessibilityLabel(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitylabel(_:isenabled:)",
                        "title": "func accessibilityLabel(_:isEnabled:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitylabel(content:)",
                        "title": "func accessibilityLabel<V>(content: (PlaceholderContentView<Self>) -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityinputlabels(_:)",
                        "title": "func accessibilityInputLabels(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityinputlabels(_:isenabled:)",
                        "title": "func accessibilityInputLabels(_:isEnabled:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitylabeledpair(role:id:in:)",
                        "title": "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Values",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityvalue(_:)",
                        "title": "func accessibilityValue(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityvalue(_:isenabled:)",
                        "title": "func accessibilityValue(_:isEnabled:)",
                        "type": "method"
                      },
                      {
                        "title": "Hints",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityhint(_:)",
                        "title": "func accessibilityHint(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityhint(_:isenabled:)",
                        "title": "func accessibilityHint(_:isEnabled:)",
                        "type": "method"
                      },
                      {
                        "title": "Actions",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityaction(_:_:)",
                        "title": "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityactions(_:)",
                        "title": "func accessibilityActions<Content>(() -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityaction(named:_:)",
                        "title": "func accessibilityAction(named:_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityaction(action:label:)",
                        "title": "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityaction(intent:label:)",
                        "title": "func accessibilityAction<I, Label>(intent: I, label: () -> Label) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityaction(_:intent:)",
                        "title": "func accessibilityAction<I>(AccessibilityActionKind, intent: I) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityaction(named:intent:)",
                        "title": "func accessibilityAction(named:intent:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityadjustableaction(_:)",
                        "title": "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityscrollaction(_:)",
                        "title": "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "title": "Gestures",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityactivationpoint(_:)",
                        "title": "func accessibilityActivationPoint(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityactivationpoint(_:isenabled:)",
                        "title": "func accessibilityActivationPoint(_:isEnabled:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitydragpoint(_:description:)",
                        "title": "func accessibilityDragPoint(_:description:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitydragpoint(_:description:isenabled:)",
                        "title": "func accessibilityDragPoint(_:description:isEnabled:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitydroppoint(_:description:)",
                        "title": "func accessibilityDropPoint(_:description:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitydroppoint(_:description:isenabled:)",
                        "title": "func accessibilityDropPoint(_:description:isEnabled:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitydirecttouch(_:options:)",
                        "title": "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityzoomaction(_:)",
                        "title": "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "title": "Elements",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityelement(children:)",
                        "title": "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitychildren(children:)",
                        "title": "func accessibilityChildren<V>(children: () -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityhidden(_:)",
                        "title": "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityhidden(_:isenabled:)",
                        "title": "func accessibilityHidden(Bool, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "title": "Custom controls",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityrepresentation(representation:)",
                        "title": "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityrespondstouserinteraction(_:)",
                        "title": "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityrespondstouserinteraction(_:isenabled:)",
                        "title": "func accessibilityRespondsToUserInteraction(Bool, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "title": "Custom content",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitycustomcontent(_:_:importance:)",
                        "title": "func accessibilityCustomContent(_:_:importance:)",
                        "type": "method"
                      },
                      {
                        "title": "Working with rotors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityrotor(_:entries:)",
                        "title": "func accessibilityRotor(_:entries:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityrotor(_:entries:entryid:entrylabel:)",
                        "title": "func accessibilityRotor(_:entries:entryID:entryLabel:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityrotor(_:entries:entrylabel:)",
                        "title": "func accessibilityRotor(_:entries:entryLabel:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityrotor(_:textranges:)",
                        "title": "func accessibilityRotor(_:textRanges:)",
                        "type": "method"
                      },
                      {
                        "title": "Configuring rotors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityrotorentry(id:in:)",
                        "title": "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitylinkedgroup(id:in:)",
                        "title": "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitysortpriority(_:)",
                        "title": "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "title": "Focus",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityfocused(_:)",
                        "title": "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityfocused(_:equals:)",
                        "title": "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Traits",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityaddtraits(_:)",
                        "title": "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityremovetraits(_:)",
                        "title": "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "title": "Identity",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityidentifier(_:)",
                        "title": "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityidentifier(_:isenabled:)",
                        "title": "func accessibilityIdentifier(String, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "title": "Color inversion",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityignoresinvertcolors(_:)",
                        "title": "func accessibilityIgnoresInvertColors(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Content descriptions",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitytextcontenttype(_:)",
                        "title": "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityheading(_:)",
                        "title": "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "title": "VoiceOver",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/speechadjustedpitch(_:)",
                        "title": "func speechAdjustedPitch(Double) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/speechalwaysincludespunctuation(_:)",
                        "title": "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/speechannouncementsqueued(_:)",
                        "title": "func speechAnnouncementsQueued(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/speechspellsoutcharacters(_:)",
                        "title": "func speechSpellsOutCharacters(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Charts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilitychartdescriptor(_:)",
                        "title": "func accessibilityChartDescriptor<R>(R) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Large content",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityshowslargecontentviewer()",
                        "title": "func accessibilityShowsLargeContentViewer() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityshowslargecontentviewer(_:)",
                        "title": "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Quick actions",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityquickaction(style:content:)",
                        "title": "func accessibilityQuickAction<Style, Content>(style: Style, content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/accessibilityquickaction(style:isactive:content:)",
                        "title": "func accessibilityQuickAction<Style, Content>(style: Style, isActive: Binding<Bool>, content: () -> Content) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-accessibility",
                    "title": "Accessibility modifiers",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Colors and patterns",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/backgroundstyle(_:)",
                        "title": "func backgroundStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/foregroundstyle(_:)",
                        "title": "func foregroundStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/foregroundstyle(_:_:)",
                        "title": "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/foregroundstyle(_:_:_:)",
                        "title": "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/alloweddynamicrange(_:)",
                        "title": "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Tint",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/tint(_:)",
                        "title": "func tint(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/listrowseparatortint(_:edges:)",
                        "title": "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/listsectionseparatortint(_:edges:)",
                        "title": "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/listitemtint(_:)",
                        "title": "func listItemTint(_:)",
                        "type": "method"
                      },
                      {
                        "title": "Light and dark appearance",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/preferredcolorscheme(_:)",
                        "title": "func preferredColorScheme(ColorScheme?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/preferredsurroundingseffect(_:)",
                        "title": "func preferredSurroundingsEffect(SurroundingsEffect?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Foreground elements",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/border(_:width:)",
                        "title": "func border<S>(S, width: CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/overlay(alignment:content:)",
                        "title": "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/overlay(_:ignoressafeareaedges:)",
                        "title": "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/overlay(_:in:fillstyle:)",
                        "title": "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Background elements",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/background(alignment:content:)",
                        "title": "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/background(_:ignoressafeareaedges:)",
                        "title": "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/background(ignoressafeareaedges:)",
                        "title": "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/background(_:in:fillstyle:)",
                        "title": "func background(_:in:fillStyle:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/background(in:fillstyle:)",
                        "title": "func background(in:fillStyle:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/alternatingrowbackgrounds(_:)",
                        "title": "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/listrowbackground(_:)",
                        "title": "func listRowBackground<V>(V?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrollcontentbackground(_:)",
                        "title": "func scrollContentBackground(Visibility) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/containerbackground(_:for:)",
                        "title": "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/containerbackground(for:alignment:content:)",
                        "title": "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/glassbackgroundeffect(displaymode:)",
                        "title": "func glassBackgroundEffect(displayMode: GlassBackgroundDisplayMode) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/glassbackgroundeffect(in:displaymode:)",
                        "title": "func glassBackgroundEffect<S>(in: S, displayMode: GlassBackgroundDisplayMode) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Control configuration",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/defaultwheelpickeritemheight(_:)",
                        "title": "func defaultWheelPickerItemHeight(CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/horizontalradiogrouplayout()",
                        "title": "func horizontalRadioGroupLayout() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/controlsize(_:)",
                        "title": "func controlSize(ControlSize) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/buttonbordershape(_:)",
                        "title": "func buttonBorderShape(ButtonBorderShape) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/buttonrepeatbehavior(_:)",
                        "title": "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/headerprominence(_:)",
                        "title": "func headerProminence(Prominence) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrolldisabled(_:)",
                        "title": "func scrollDisabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrollbouncebehavior(_:axes:)",
                        "title": "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrollindicatorsflash(onappear:)",
                        "title": "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrollindicatorsflash(trigger:)",
                        "title": "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/menuorder(_:)",
                        "title": "func menuOrder(MenuOrder) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/menuactiondismissbehavior(_:)",
                        "title": "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/paletteselectioneffect(_:)",
                        "title": "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/typeselectequivalent(_:)",
                        "title": "func typeSelectEquivalent(_:)",
                        "type": "method"
                      },
                      {
                        "title": "Symbol effects",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/symboleffect(_:options:isactive:)",
                        "title": "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/symboleffect(_:options:value:)",
                        "title": "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/symboleffectsremoved(_:)",
                        "title": "func symbolEffectsRemoved(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Privacy and redaction",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/privacysensitive(_:)",
                        "title": "func privacySensitive(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/redacted(reason:)",
                        "title": "func redacted(reason: RedactionReasons) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/unredacted()",
                        "title": "func unredacted() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/invalidatablecontent(_:)",
                        "title": "func invalidatableContent(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Visibility",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/hidden()",
                        "title": "func hidden() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/labelshidden()",
                        "title": "func labelsHidden() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/menuindicator(_:)",
                        "title": "func menuIndicator(Visibility) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/listrowseparator(_:edges:)",
                        "title": "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/listsectionseparator(_:edges:)",
                        "title": "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/persistentsystemoverlays(_:)",
                        "title": "func persistentSystemOverlays(Visibility) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrollindicators(_:axes:)",
                        "title": "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrollclipdisabled(_:)",
                        "title": "func scrollClipDisabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/tablecolumnheaders(_:)",
                        "title": "func tableColumnHeaders(Visibility) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/upperlimbvisibility(_:)",
                        "title": "func upperLimbVisibility(Visibility) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/volumebaseplatevisibility(_:)",
                        "title": "func volumeBaseplateVisibility(Visibility) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Sensory feedback",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/sensoryfeedback(_:trigger:)",
                        "title": "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/sensoryfeedback(trigger:_:)",
                        "title": "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/sensoryfeedback(_:trigger:condition:)",
                        "title": "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Widget configuration",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/widgetaccentable(_:)",
                        "title": "func widgetAccentable(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/widgetcurvescontent(_:)",
                        "title": "func widgetCurvesContent(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/widgetlabel(_:)",
                        "title": "func widgetLabel(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/widgetlabel(label:)",
                        "title": "func widgetLabel<Label>(label: () -> Label) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/dynamicisland(verticalplacement:)",
                        "title": "func dynamicIsland(verticalPlacement: DynamicIslandExpandedRegionVerticalPlacement) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Window behaviors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/windowdismissbehavior(_:)",
                        "title": "func windowDismissBehavior(WindowInteractionBehavior) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/windowfullscreenbehavior(_:)",
                        "title": "func windowFullScreenBehavior(WindowInteractionBehavior) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/windowminimizebehavior(_:)",
                        "title": "func windowMinimizeBehavior(WindowInteractionBehavior) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/windowresizebehavior(_:)",
                        "title": "func windowResizeBehavior(WindowInteractionBehavior) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-appearance",
                    "title": "Appearance modifiers",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Fonts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/font(_:)",
                        "title": "func font(Font?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Dynamic type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/dynamictypesize(_:)",
                        "title": "func dynamicTypeSize(_:)",
                        "type": "method"
                      },
                      {
                        "title": "Text style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/bold(_:)",
                        "title": "func bold(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fontdesign(_:)",
                        "title": "func fontDesign(Font.Design?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fontweight(_:)",
                        "title": "func fontWeight(Font.Weight?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fontwidth(_:)",
                        "title": "func fontWidth(Font.Width?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/italic(_:)",
                        "title": "func italic(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/monospaced(_:)",
                        "title": "func monospaced(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/monospaceddigit()",
                        "title": "func monospacedDigit() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/strikethrough(_:pattern:color:)",
                        "title": "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/textcase(_:)",
                        "title": "func textCase(Text.Case?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/textscale(_:isenabled:)",
                        "title": "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/underline(_:pattern:color:)",
                        "title": "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Text layout",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/allowstightening(_:)",
                        "title": "func allowsTightening(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/baselineoffset(_:)",
                        "title": "func baselineOffset(CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/flipsforrighttoleftlayoutdirection(_:)",
                        "title": "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/kerning(_:)",
                        "title": "func kerning(CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/minimumscalefactor(_:)",
                        "title": "func minimumScaleFactor(CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/tracking(_:)",
                        "title": "func tracking(CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/truncationmode(_:)",
                        "title": "func truncationMode(Text.TruncationMode) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/typesettinglanguage(_:isenabled:)",
                        "title": "func typesettingLanguage(_:isEnabled:)",
                        "type": "method"
                      },
                      {
                        "title": "Multiline text",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/linelimit(_:)",
                        "title": "func lineLimit(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/linelimit(_:reservesspace:)",
                        "title": "func lineLimit(Int, reservesSpace: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/linespacing(_:)",
                        "title": "func lineSpacing(CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/multilinetextalignment(_:)",
                        "title": "func multilineTextAlignment(TextAlignment) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Text selection",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/textselection(_:)",
                        "title": "func textSelection<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Text entry",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/autocorrectiondisabled(_:)",
                        "title": "func autocorrectionDisabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/keyboardtype(_:)",
                        "title": "func keyboardType(UIKeyboardType) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrolldismisseskeyboard(_:)",
                        "title": "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/textinputautocapitalization(_:)",
                        "title": "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/textinputcompletion(_:)",
                        "title": "func textInputCompletion(String) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/textinputsuggestions(_:)",
                        "title": "func textInputSuggestions<S>(() -> S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/textinputsuggestions(_:content:)",
                        "title": "func textInputSuggestions<Data, Content>(Data, content: (Data.Element) -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/textinputsuggestions(_:id:content:)",
                        "title": "func textInputSuggestions<Data, ID, Content>(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/textcontenttype(_:)-4dqqb",
                        "title": "func textContentType(WKTextContentType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/textcontenttype(_:)-6fic1",
                        "title": "func textContentType(NSTextContentType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/textcontenttype(_:)-ufdv",
                        "title": "func textContentType(UITextContentType?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Find and replace",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/findnavigator(ispresented:)",
                        "title": "func findNavigator(isPresented: Binding<Bool>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/finddisabled(_:)",
                        "title": "func findDisabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/replacedisabled(_:)",
                        "title": "func replaceDisabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Symbol appearance",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/symbolrenderingmode(_:)",
                        "title": "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/symbolvariant(_:)",
                        "title": "func symbolVariant(SymbolVariants) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-text-and-symbols",
                    "title": "Text and symbol modifiers",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Navigation titles",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/configure-your-apps-navigation-titles",
                        "title": "Configure your apps navigation titles",
                        "type": "article"
                      },
                      {
                        "path": "/documentation/swiftui/view/navigationtitle(_:)",
                        "title": "func navigationTitle(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/navigationsubtitle(_:)",
                        "title": "func navigationSubtitle(_:)",
                        "type": "method"
                      },
                      {
                        "title": "Navigation title configuration",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/navigationdocument(_:)",
                        "title": "func navigationDocument(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/navigationdocument(_:preview:)",
                        "title": "func navigationDocument(_:preview:)",
                        "type": "method"
                      },
                      {
                        "title": "Navigation bars",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/navigationbarbackbuttonhidden(_:)",
                        "title": "func navigationBarBackButtonHidden(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/navigationbartitledisplaymode(_:)",
                        "title": "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Navigation stacks and columns",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/navigationdestination(for:destination:)",
                        "title": "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/navigationdestination(ispresented:destination:)",
                        "title": "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/navigationdestination(item:destination:)",
                        "title": "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/navigationsplitviewcolumnwidth(_:)",
                        "title": "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/navigationsplitviewcolumnwidth(min:ideal:max:)",
                        "title": "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Tab views",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/tabviewcustomization(_:)",
                        "title": "func tabViewCustomization(Binding<TabViewCustomization>?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/defaultadaptabletabbarplacement(_:)",
                        "title": "func defaultAdaptableTabBarPlacement(AdaptableTabBarPlacement) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/tabviewsidebarheader(content:)",
                        "title": "func tabViewSidebarHeader<Content>(content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/tabviewsidebarfooter(content:)",
                        "title": "func tabViewSidebarFooter<Content>(content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/tabviewsidebarbottombar(content:)",
                        "title": "func tabViewSidebarBottomBar<Content>(content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/sectionactions(content:)",
                        "title": "func sectionActions<Content>(content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Toolbars",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/toolbar(content:)",
                        "title": "func toolbar(content:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/toolbar(id:content:)",
                        "title": "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/toolbar(_:for:)",
                        "title": "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/toolbar(removing:)",
                        "title": "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/toolbarvisibility(_:for:)",
                        "title": "func toolbarVisibility(Visibility, for: ToolbarPlacement...) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/toolbarbackground(_:for:)",
                        "title": "func toolbarBackground(_:for:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/toolbarbackgroundvisibility(_:for:)",
                        "title": "func toolbarBackgroundVisibility(Visibility, for: ToolbarPlacement...) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/toolbarforegroundstyle(_:for:)",
                        "title": "func toolbarForegroundStyle<S>(S, for: ToolbarPlacement...) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/toolbarcolorscheme(_:for:)",
                        "title": "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/toolbarrole(_:)",
                        "title": "func toolbarRole(ToolbarRole) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/toolbartitlemenu(content:)",
                        "title": "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/toolbartitledisplaymode(_:)",
                        "title": "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/ornament(visibility:attachmentanchor:contentalignment:ornament:)",
                        "title": "func ornament<Content>(visibility: Visibility, attachmentAnchor: OrnamentAttachmentAnchor, contentAlignment: Alignment, ornament: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Context menus",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/contextmenu(menuitems:)",
                        "title": "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/contextmenu(menuitems:preview:)",
                        "title": "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/contextmenu(forselectiontype:menu:primaryaction:)",
                        "title": "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Badges",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/badge(_:)",
                        "title": "func badge(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/badgeprominence(_:)",
                        "title": "func badgeProminence(BadgeProminence) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Help text",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/help(_:)",
                        "title": "func help(_:)",
                        "type": "method"
                      },
                      {
                        "title": "Status bar",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/statusbarhidden(_:)",
                        "title": "func statusBarHidden(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Touch Bar",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/touchbar(content:)",
                        "title": "func touchBar<Content>(content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/touchbar(_:)",
                        "title": "func touchBar<Content>(TouchBar<Content>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/touchbaritemprincipal(_:)",
                        "title": "func touchBarItemPrincipal(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/touchbarcustomizationlabel(_:)",
                        "title": "func touchBarCustomizationLabel(Text) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/touchbaritempresence(_:)",
                        "title": "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-auxiliary-views",
                    "title": "Auxiliary view modifiers",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Styles",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartbackground(alignment:content:)",
                        "title": "func chartBackground<V>(alignment: Alignment, content: (ChartProxy) -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartforegroundstylescale(_:)",
                        "title": "func chartForegroundStyleScale<DataValue, S>(KeyValuePairs<DataValue, S>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartforegroundstylescale(domain:range:type:)",
                        "title": "func chartForegroundStyleScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartforegroundstylescale(domain:type:)",
                        "title": "func chartForegroundStyleScale<Domain>(domain: Domain, type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartforegroundstylescale(domain:mapping:)",
                        "title": "func chartForegroundStyleScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartforegroundstylescale(mapping:)",
                        "title": "func chartForegroundStyleScale<DataValue, S>(mapping: (DataValue) -> S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartforegroundstylescale(range:type:)",
                        "title": "func chartForegroundStyleScale<Range>(range: Range, type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartforegroundstylescale(type:)",
                        "title": "func chartForegroundStyleScale(type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartplotstyle(content:)",
                        "title": "func chartPlotStyle<Content>(content: (ChartPlotContent) -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Legends",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartlegend(_:)",
                        "title": "func chartLegend(Visibility) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartlegend(position:alignment:spacing:)",
                        "title": "func chartLegend(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartlegend(position:alignment:spacing:content:)",
                        "title": "func chartLegend<Content>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Overlays",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartoverlay(alignment:content:)",
                        "title": "func chartOverlay<V>(alignment: Alignment, content: (ChartProxy) -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Axes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartxaxis(_:)",
                        "title": "func chartXAxis(Visibility) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartxaxis(content:)",
                        "title": "func chartXAxis<Content>(content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartxaxisstyle(content:)",
                        "title": "func chartXAxisStyle<Content>(content: (ChartAxisContent) -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartyaxis(_:)",
                        "title": "func chartYAxis(Visibility) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartyaxis(content:)",
                        "title": "func chartYAxis<Content>(content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartyaxisstyle(content:)",
                        "title": "func chartYAxisStyle<Content>(content: (ChartAxisContent) -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Axis Labels",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartxaxislabel(_:position:alignment:spacing:)",
                        "title": "func chartXAxisLabel(_:position:alignment:spacing:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartxaxislabel(position:alignment:spacing:content:)",
                        "title": "func chartXAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartyaxislabel(_:position:alignment:spacing:)",
                        "title": "func chartYAxisLabel(_:position:alignment:spacing:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartyaxislabel(position:alignment:spacing:content:)",
                        "title": "func chartYAxisLabel<C>(position: AnnotationPosition, alignment: Alignment?, spacing: CGFloat?, content: () -> C) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Axis scales",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartxscale(domain:range:type:)",
                        "title": "func chartXScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartxscale(domain:type:)",
                        "title": "func chartXScale<Domain>(domain: Domain, type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartxscale(range:type:)",
                        "title": "func chartXScale<Range>(range: Range, type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartxscale(type:)",
                        "title": "func chartXScale(type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartyscale(domain:range:type:)",
                        "title": "func chartYScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartyscale(domain:type:)",
                        "title": "func chartYScale<Domain>(domain: Domain, type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartyscale(range:type:)",
                        "title": "func chartYScale<Range>(range: Range, type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartyscale(type:)",
                        "title": "func chartYScale(type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Symbol scales",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolscale(_:)",
                        "title": "func chartSymbolScale(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolscale(domain:)",
                        "title": "func chartSymbolScale<Domain>(domain: Domain) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolscale(domain:range:)",
                        "title": "func chartSymbolScale(domain:range:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolscale(domain:mapping:)",
                        "title": "func chartSymbolScale<Domain, S>(domain: Domain, mapping: (Domain.Element) -> S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolscale(mapping:)",
                        "title": "func chartSymbolScale<DataValue, S>(mapping: (DataValue) -> S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolscale(range:)",
                        "title": "func chartSymbolScale(range:)",
                        "type": "method"
                      },
                      {
                        "title": "Symbol size scales",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolsizescale(_:)",
                        "title": "func chartSymbolSizeScale<DataValue>(KeyValuePairs<DataValue, CGFloat>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolsizescale(domain:range:type:)",
                        "title": "func chartSymbolSizeScale<Domain, Range>(domain: Domain, range: Range, type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolsizescale(domain:type:)",
                        "title": "func chartSymbolSizeScale<Domain>(domain: Domain, type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolsizescale(domain:mapping:)",
                        "title": "func chartSymbolSizeScale<Domain>(domain: Domain, mapping: (Domain.Element) -> CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolsizescale(mapping:)",
                        "title": "func chartSymbolSizeScale<DataValue>(mapping: (DataValue) -> CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolsizescale(range:type:)",
                        "title": "func chartSymbolSizeScale<Range>(range: Range, type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartsymbolsizescale(type:)",
                        "title": "func chartSymbolSizeScale(type: ScaleType?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Line style scales",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartlinestylescale(_:)",
                        "title": "func chartLineStyleScale<DataValue>(KeyValuePairs<DataValue, StrokeStyle>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartlinestylescale(domain:)",
                        "title": "func chartLineStyleScale<Domain>(domain: Domain) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartlinestylescale(domain:range:)",
                        "title": "func chartLineStyleScale<Domain, Range>(domain: Domain, range: Range) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartlinestylescale(range:)",
                        "title": "func chartLineStyleScale<Range>(range: Range) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartlinestylescale(domain:mapping:)",
                        "title": "func chartLineStyleScale<Domain>(domain: Domain, mapping: (Domain.Element) -> StrokeStyle) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartlinestylescale(mapping:)",
                        "title": "func chartLineStyleScale<DataValue>(mapping: (DataValue) -> StrokeStyle) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Scrolling",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartscrollposition(initialx:)",
                        "title": "func chartScrollPosition(initialX: some Plottable) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartscrollposition(initialy:)",
                        "title": "func chartScrollPosition(initialY: some Plottable) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartscrollposition(x:)",
                        "title": "func chartScrollPosition(x: Binding<some Plottable>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartscrollposition(y:)",
                        "title": "func chartScrollPosition(y: Binding<some Plottable>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartscrolltargetbehavior(_:)",
                        "title": "func chartScrollTargetBehavior(some ChartScrollTargetBehavior) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartscrollableaxes(_:)",
                        "title": "func chartScrollableAxes(Axis.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Selection",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartxselection(range:)",
                        "title": "func chartXSelection<P>(range: Binding<ClosedRange<P>?>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartxselection(value:)",
                        "title": "func chartXSelection<P>(value: Binding<P?>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartyselection(range:)",
                        "title": "func chartYSelection<P>(range: Binding<ClosedRange<P>?>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartyselection(value:)",
                        "title": "func chartYSelection<P>(value: Binding<P?>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartangleselection(value:)",
                        "title": "func chartAngleSelection<P>(value: Binding<P?>) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Visible domain",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartxvisibledomain(length:)",
                        "title": "func chartXVisibleDomain<P>(length: P) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartyvisibledomain(length:)",
                        "title": "func chartYVisibleDomain<P>(length: P) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Interaction",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/chartgesture(_:)",
                        "title": "func chartGesture((ChartProxy) -> some Gesture) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-chart-view",
                    "title": "Chart view modifiers",
                    "type": "collection"
                  },
                  {
                    "title": "Drawing views",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Controls",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/buttonstyle(_:)",
                        "title": "func buttonStyle(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/datepickerstyle(_:)",
                        "title": "func datePickerStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/menustyle(_:)",
                        "title": "func menuStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/pickerstyle(_:)",
                        "title": "func pickerStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/togglestyle(_:)",
                        "title": "func toggleStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Indicators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/gaugestyle(_:)",
                        "title": "func gaugeStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/progressviewstyle(_:)",
                        "title": "func progressViewStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Text",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/labelstyle(_:)",
                        "title": "func labelStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/textfieldstyle(_:)",
                        "title": "func textFieldStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/texteditorstyle(_:)",
                        "title": "func textEditorStyle(some TextEditorStyle) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Collections",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/liststyle(_:)",
                        "title": "func listStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/tablestyle(_:)",
                        "title": "func tableStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/disclosuregroupstyle(_:)",
                        "title": "func disclosureGroupStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Presentation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/navigationsplitviewstyle(_:)",
                        "title": "func navigationSplitViewStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/tabviewstyle(_:)",
                        "title": "func tabViewStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentedwindowstyle(_:)",
                        "title": "func presentedWindowStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentedwindowtoolbarstyle(_:)",
                        "title": "func presentedWindowToolbarStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Groups",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/controlgroupstyle(_:)",
                        "title": "func controlGroupStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/groupboxstyle(_:)",
                        "title": "func groupBoxStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/indexviewstyle(_:)",
                        "title": "func indexViewStyle<S>(S) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-style-modifiers",
                    "title": "Style modifiers",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Size",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/frame(width:height:alignment:)",
                        "title": "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/frame(depth:alignment:)",
                        "title": "func frame(depth: CGFloat?, alignment: DepthAlignment) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                        "title": "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/frame(mindepth:idealdepth:maxdepth:alignment:)",
                        "title": "func frame(minDepth: CGFloat?, idealDepth: CGFloat?, maxDepth: CGFloat?, alignment: DepthAlignment) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/containerrelativeframe(_:alignment:)",
                        "title": "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/containerrelativeframe(_:alignment:_:)",
                        "title": "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/containerrelativeframe(_:count:span:spacing:alignment:)",
                        "title": "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fixedsize()",
                        "title": "func fixedSize() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fixedsize(horizontal:vertical:)",
                        "title": "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/layoutpriority(_:)",
                        "title": "func layoutPriority(Double) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Position",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/position(_:)",
                        "title": "func position(CGPoint) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/position(x:y:)",
                        "title": "func position(x: CGFloat, y: CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/offset(_:)",
                        "title": "func offset(CGSize) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/offset(x:y:)",
                        "title": "func offset(x: CGFloat, y: CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/offset(z:)",
                        "title": "func offset(z: CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/coordinatespace(_:)",
                        "title": "func coordinateSpace(NamedCoordinateSpace) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Alignment",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/alignmentguide(_:computevalue:)",
                        "title": "func alignmentGuide(_:computeValue:)",
                        "type": "method"
                      },
                      {
                        "title": "Padding and spacing",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/padding(_:)",
                        "title": "func padding(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/padding(_:_:)",
                        "title": "func padding(Edge.Set, CGFloat?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/padding3d(_:)",
                        "title": "func padding3D(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/padding3d(_:_:)",
                        "title": "func padding3D(Edge3D.Set, CGFloat?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/listrowinsets(_:)",
                        "title": "func listRowInsets(EdgeInsets?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scenepadding(_:)",
                        "title": "func scenePadding(Edge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scenepadding(_:edges:)",
                        "title": "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/listrowspacing(_:)",
                        "title": "func listRowSpacing(CGFloat?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/listsectionspacing(_:)",
                        "title": "func listSectionSpacing(_:)",
                        "type": "method"
                      },
                      {
                        "title": "Grid configuration",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/gridcellcolumns(_:)",
                        "title": "func gridCellColumns(Int) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/gridcellanchor(_:)",
                        "title": "func gridCellAnchor(UnitPoint) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/gridcellunsizedaxes(_:)",
                        "title": "func gridCellUnsizedAxes(Axis.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/gridcolumnalignment(_:)",
                        "title": "func gridColumnAlignment(HorizontalAlignment) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Safe area and margins",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/ignoressafearea(_:edges:)",
                        "title": "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/safeareainset(edge:alignment:spacing:content:)",
                        "title": "func safeAreaInset(edge:alignment:spacing:content:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/safeareapadding(_:)",
                        "title": "func safeAreaPadding(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/safeareapadding(_:_:)",
                        "title": "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/contentmargins(_:for:)",
                        "title": "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/contentmargins(_:_:for:)",
                        "title": "func contentMargins(_:_:for:)",
                        "type": "method"
                      },
                      {
                        "title": "Layer order",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/zindex(_:)",
                        "title": "func zIndex(Double) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Layout direction",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/layoutdirectionbehavior(_:)",
                        "title": "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Custom layout characteristics",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/layoutvalue(key:value:)",
                        "title": "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-layout",
                    "title": "Layout modifiers",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Masks and clipping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/mask(alignment:_:)",
                        "title": "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/clipped(antialiased:)",
                        "title": "func clipped(antialiased: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/clipshape(_:style:)",
                        "title": "func clipShape<S>(S, style: FillStyle) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/containershape(_:)",
                        "title": "func containerShape<T>(T) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Scale",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/scaledtofill()",
                        "title": "func scaledToFill() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scaledtofit()",
                        "title": "func scaledToFit() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scaleeffect(_:anchor:)",
                        "title": "func scaleEffect(_:anchor:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scaleeffect(x:y:anchor:)",
                        "title": "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scaleeffect(x:y:z:anchor:)",
                        "title": "func scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/imagescale(_:)",
                        "title": "func imageScale(Image.Scale) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/aspectratio(_:contentmode:)",
                        "title": "func aspectRatio(_:contentMode:)",
                        "type": "method"
                      },
                      {
                        "title": "Rotation and transformation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/rotationeffect(_:anchor:)",
                        "title": "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/rotation3deffect(_:anchor:)",
                        "title": "func rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                        "title": "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/rotation3deffect(_:axis:anchor:)",
                        "title": "func rotation3DEffect(_:axis:anchor:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/perspectiverotationeffect(_:axis:anchor:anchorz:perspective:)",
                        "title": "func perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/projectioneffect(_:)",
                        "title": "func projectionEffect(ProjectionTransform) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/transformeffect(_:)",
                        "title": "func transformEffect(CGAffineTransform) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/transform3deffect(_:)",
                        "title": "func transform3DEffect(AffineTransform3D) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Graphical effects",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/blur(radius:opaque:)",
                        "title": "func blur(radius: CGFloat, opaque: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/opacity(_:)",
                        "title": "func opacity(Double) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/brightness(_:)",
                        "title": "func brightness(Double) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/contrast(_:)",
                        "title": "func contrast(Double) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/colorinvert()",
                        "title": "func colorInvert() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/colormultiply(_:)",
                        "title": "func colorMultiply(Color) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/saturation(_:)",
                        "title": "func saturation(Double) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/grayscale(_:)",
                        "title": "func grayscale(Double) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/huerotation(_:)",
                        "title": "func hueRotation(Angle) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/luminancetoalpha()",
                        "title": "func luminanceToAlpha() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/shadow(color:radius:x:y:)",
                        "title": "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/visualeffect(_:)",
                        "title": "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/visualeffect3d(_:)",
                        "title": "func visualEffect3D((EmptyVisualEffect, GeometryProxy3D) -> some VisualEffect) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Shaders",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/coloreffect(_:isenabled:)",
                        "title": "func colorEffect(Shader, isEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/distortioneffect(_:maxsampleoffset:isenabled:)",
                        "title": "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/layereffect(_:maxsampleoffset:isenabled:)",
                        "title": "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Composites",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/blendmode(_:)",
                        "title": "func blendMode(BlendMode) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/compositinggroup()",
                        "title": "func compositingGroup() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/drawinggroup(opaque:colormode:)",
                        "title": "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Animations",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/animation(_:)",
                        "title": "func animation(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/animation(_:value:)",
                        "title": "func animation<V>(Animation?, value: V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/animation(_:body:)",
                        "title": "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                        "title": "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                        "title": "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/phaseanimator(_:content:animation:)",
                        "title": "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/phaseanimator(_:trigger:content:animation:)",
                        "title": "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/contenttransition(_:)",
                        "title": "func contentTransition(ContentTransition) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/transition(_:)",
                        "title": "func transition(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/transaction(_:)",
                        "title": "func transaction((inout Transaction) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/transaction(value:_:)",
                        "title": "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/transaction(_:body:)",
                        "title": "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/contenttransition(_:)",
                        "title": "func contentTransition(ContentTransition) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                        "title": "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/geometrygroup()",
                        "title": "func geometryGroup() -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-graphics-and-rendering",
                    "title": "Graphics and rendering modifiers",
                    "type": "collection"
                  },
                  {
                    "title": "Providing interactivity",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Interactivity",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/disabled(_:)",
                        "title": "func disabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/interactionactivitytrackingtag(_:)",
                        "title": "func interactionActivityTrackingTag(String) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "List controls",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/swipeactions(edge:allowsfullswipe:content:)",
                        "title": "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/refreshable(action:)",
                        "title": "func refreshable(action: () async -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/selectiondisabled(_:)",
                        "title": "func selectionDisabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Scroll controls",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrollposition(_:anchor:)",
                        "title": "func scrollPosition(Binding<ScrollPosition>, anchor: UnitPoint?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrollposition(id:anchor:)",
                        "title": "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/defaultscrollanchor(_:)",
                        "title": "func defaultScrollAnchor(UnitPoint?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/defaultscrollanchor(_:for:)",
                        "title": "func defaultScrollAnchor(UnitPoint?, for: ScrollAnchorRole) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrolltargetbehavior(_:)",
                        "title": "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrolltargetlayout(isenabled:)",
                        "title": "func scrollTargetLayout(isEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrolltransition(_:axis:transition:)",
                        "title": "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                        "title": "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onscrollgeometrychange(for:of:action:)",
                        "title": "func onScrollGeometryChange<T>(for: T.Type, of: (ScrollGeometry) -> T, action: (T, T) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onscrolltargetvisibilitychange(idtype:threshold:_:)",
                        "title": "func onScrollTargetVisibilityChange<ID>(idType: ID.Type, threshold: Double, ([ID]) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onscrollvisibilitychange(threshold:_:)",
                        "title": "func onScrollVisibilityChange(threshold: Double, (Bool) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onscrollphasechange(_:)",
                        "title": "func onScrollPhaseChange(_:)",
                        "type": "method"
                      },
                      {
                        "title": "Geometry",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/ongeometrychange(for:of:action:)",
                        "title": "func onGeometryChange(for:of:action:)",
                        "type": "method"
                      },
                      {
                        "title": "Taps and gestures",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/ontapgesture(count:perform:)",
                        "title": "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/ontapgesture(count:coordinatespace:perform:)",
                        "title": "func onTapGesture(count:coordinateSpace:perform:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                        "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                        "title": "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onlongtouchgesture(minimumduration:perform:ontouchingchanged:)",
                        "title": "func onLongTouchGesture(minimumDuration: Double, perform: () -> Void, onTouchingChanged: ((Bool) -> Void)?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/gesture(_:)",
                        "title": "func gesture(some UIGestureRecognizerRepresentable) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/gesture(_:isenabled:)",
                        "title": "func gesture<T>(T, isEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/gesture(_:name:isenabled:)",
                        "title": "func gesture<T>(T, name: String, isEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/gesture(_:including:)",
                        "title": "func gesture<T>(T, including: GestureMask) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/highprioritygesture(_:including:)",
                        "title": "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/highprioritygesture(_:isenabled:)",
                        "title": "func highPriorityGesture<T>(T, isEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/highprioritygesture(_:name:isenabled:)",
                        "title": "func highPriorityGesture<T>(T, name: String, isEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/simultaneousgesture(_:including:)",
                        "title": "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/simultaneousgesture(_:isenabled:)",
                        "title": "func simultaneousGesture<T>(T, isEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/simultaneousgesture(_:name:isenabled:)",
                        "title": "func simultaneousGesture<T>(T, name: String, isEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/deferssystemgestures(on:)",
                        "title": "func defersSystemGestures(on: Edge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onpencildoubletap(perform:)",
                        "title": "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onpencilsqueeze(perform:)",
                        "title": "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/allowswindowactivationevents(_:)",
                        "title": "func allowsWindowActivationEvents(Bool?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Keyboard input",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/onkeypress(_:action:)",
                        "title": "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onkeypress(phases:action:)",
                        "title": "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onkeypress(_:phases:action:)",
                        "title": "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onkeypress(characters:phases:action:)",
                        "title": "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onkeypress(keys:phases:action:)",
                        "title": "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onmodifierkeyschanged(mask:initial:_:)",
                        "title": "func onModifierKeysChanged(mask: EventModifiers, initial: Bool, (EventModifiers, EventModifiers) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Keyboard shortcuts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/keyboardshortcut(_:)",
                        "title": "func keyboardShortcut(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/keyboardshortcut(_:modifiers:)",
                        "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/keyboardshortcut(_:modifiers:localization:)",
                        "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/modifierkeyalternate(_:_:)",
                        "title": "func modifierKeyAlternate<V>(EventModifiers, () -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Hover",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/onhover(perform:)",
                        "title": "func onHover(perform: (Bool) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/oncontinuoushover(coordinatespace:perform:)",
                        "title": "func onContinuousHover(coordinateSpace:perform:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/hovereffect(_:)",
                        "title": "func hoverEffect(HoverEffect) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/hovereffect(_:isenabled:)",
                        "title": "func hoverEffect(_:isEnabled:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/hovereffect(_:in:isenabled:)",
                        "title": "func hoverEffect(some CustomHoverEffect, in: HoverEffectGroup?, isEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/hovereffect(in:isenabled:body:)",
                        "title": "func hoverEffect(in: HoverEffectGroup?, isEnabled: Bool, body: (EmptyHoverEffectContent, Bool, GeometryProxy) -> some HoverEffectContent) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/hovereffectgroup()",
                        "title": "func hoverEffectGroup() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/hovereffectgroup(_:)",
                        "title": "func hoverEffectGroup(HoverEffectGroup?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/hovereffectgroup(id:in:behavior:)",
                        "title": "func hoverEffectGroup(id: String?, in: Namespace.ID, behavior: HoverEffectGroup.Behavior) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/hovereffectdisabled(_:)",
                        "title": "func hoverEffectDisabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/defaulthovereffect(_:)",
                        "title": "func defaultHoverEffect(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/listrowhovereffect(_:)",
                        "title": "func listRowHoverEffect(HoverEffect?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/listrowhovereffectdisabled(_:)",
                        "title": "func listRowHoverEffectDisabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Pointer",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/pointervisibility(_:)",
                        "title": "func pointerVisibility(Visibility) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/pointerstyle(_:)",
                        "title": "func pointerStyle(PointerStyle?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Focus",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/focused(_:equals:)",
                        "title": "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/focused(_:)",
                        "title": "func focused(FocusState<Bool>.Binding) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/focusedvalue(_:)",
                        "title": "func focusedValue<T>(T?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/focusedvalue(_:_:)",
                        "title": "func focusedValue(_:_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/focusedscenevalue(_:)",
                        "title": "func focusedSceneValue<T>(T?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/focusedscenevalue(_:_:)",
                        "title": "func focusedSceneValue(_:_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/focusedobject(_:)",
                        "title": "func focusedObject(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/focusedsceneobject(_:)",
                        "title": "func focusedSceneObject(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/prefersdefaultfocus(_:in:)",
                        "title": "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/focusscope(_:)",
                        "title": "func focusScope(Namespace.ID) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/focussection()",
                        "title": "func focusSection() -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/focusable(_:)",
                        "title": "func focusable(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/focusable(_:interactions:)",
                        "title": "func focusable(Bool, interactions: FocusInteractions) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/focuseffectdisabled(_:)",
                        "title": "func focusEffectDisabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/defaultfocus(_:_:priority:)",
                        "title": "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchfocused(_:)",
                        "title": "func searchFocused(FocusState<Bool>.Binding) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchfocused(_:equals:)",
                        "title": "func searchFocused<V>(FocusState<V>.Binding, equals: V) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Copy and paste",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/copyable(_:)",
                        "title": "func copyable<T>(@autoclosure () -> [T]) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/cuttable(for:action:)",
                        "title": "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/pastedestination(for:action:validator:)",
                        "title": "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/oncopycommand(perform:)",
                        "title": "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/oncutcommand(perform:)",
                        "title": "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onpastecommand(of:perform:)",
                        "title": "func onPasteCommand(of:perform:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onpastecommand(of:validator:perform:)",
                        "title": "func onPasteCommand(of:validator:perform:)",
                        "type": "method"
                      },
                      {
                        "title": "Drag and drop",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/ondrag(_:preview:)",
                        "title": "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/ondrag(_:)",
                        "title": "func onDrag(() -> NSItemProvider) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/itemprovider(_:)",
                        "title": "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/ondrop(of:istargeted:perform:)",
                        "title": "func onDrop(of:isTargeted:perform:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/ondrop(of:delegate:)",
                        "title": "func onDrop(of:delegate:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/dropdestination(for:action:istargeted:)",
                        "title": "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/draggable(_:)",
                        "title": "func draggable<T>(@autoclosure () -> T) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/draggable(_:preview:)",
                        "title": "func draggable<V, T>(@autoclosure () -> T, preview: () -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/springloadingbehavior(_:)",
                        "title": "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Submission",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/onsubmit(of:_:)",
                        "title": "func onSubmit(of: SubmitTriggers, () -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/submitscope(_:)",
                        "title": "func submitScope(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/submitlabel(_:)",
                        "title": "func submitLabel(SubmitLabel) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Movement",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/onmovecommand(perform:)",
                        "title": "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/movedisabled(_:)",
                        "title": "func moveDisabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Deletion",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/ondeletecommand(perform:)",
                        "title": "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/deletedisabled(_:)",
                        "title": "func deleteDisabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Commands",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/pagecommand(value:in:step:)",
                        "title": "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onexitcommand(perform:)",
                        "title": "func onExitCommand(perform: (() -> Void)?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onplaypausecommand(perform:)",
                        "title": "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/oncommand(_:perform:)",
                        "title": "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Digital crown",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/digitalcrownaccessory(_:)",
                        "title": "func digitalCrownAccessory(Visibility) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/digitalcrownaccessory(content:)",
                        "title": "func digitalCrownAccessory<Content>(content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/digitalcrownrotation(_:from:through:sensitivity:iscontinuous:ishapticfeedbackenabled:onchange:onidle:)",
                        "title": "func digitalCrownRotation<V>(Binding<V>, from: V, through: V, sensitivity: DigitalCrownRotationalSensitivity, isContinuous: Bool, isHapticFeedbackEnabled: Bool, onChange: (DigitalCrownEvent) -> Void, onIdle: () -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/digitalcrownrotation(_:onchange:onidle:)",
                        "title": "func digitalCrownRotation<V>(Binding<V>, onChange: (DigitalCrownEvent) -> Void, onIdle: () -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/digitalcrownrotation(detent:from:through:by:sensitivity:iscontinuous:ishapticfeedbackenabled:onchange:onidle:)",
                        "title": "func digitalCrownRotation(detent:from:through:by:sensitivity:isContinuous:isHapticFeedbackEnabled:onChange:onIdle:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/digitalcrownrotation(_:)",
                        "title": "func digitalCrownRotation<V>(Binding<V>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/digitalcrownrotation(_:from:through:by:sensitivity:iscontinuous:ishapticfeedbackenabled:)",
                        "title": "func digitalCrownRotation<V>(Binding<V>, from: V, through: V, by: V.Stride?, sensitivity: DigitalCrownRotationalSensitivity, isContinuous: Bool, isHapticFeedbackEnabled: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Immersive Spaces",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/onimmersionchange(initial:_:)",
                        "title": "func onImmersionChange(initial: Bool, (ImmersionChangeContext, ImmersionChangeContext) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Volumes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/onvolumeviewpointchange(updatestrategy:initial:_:)",
                        "title": "func onVolumeViewpointChange(updateStrategy: VolumeViewpointUpdateStrategy, initial: Bool, (Viewpoint3D, Viewpoint3D) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/supportedvolumeviewpoints(_:)",
                        "title": "func supportedVolumeViewpoints(SquareAzimuth.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "User activities",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/useractivity(_:element:_:)",
                        "title": "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/useractivity(_:isactive:_:)",
                        "title": "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/oncontinueuseractivity(_:perform:)",
                        "title": "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/handlesexternalevents(preferring:allowing:)",
                        "title": "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "View life cycle",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/onappear(perform:)",
                        "title": "func onAppear(perform: (() -> Void)?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/ondisappear(perform:)",
                        "title": "func onDisappear(perform: (() -> Void)?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onchange(of:initial:_:)",
                        "title": "func onChange(of:initial:_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/task(priority:_:)",
                        "title": "func task(priority: TaskPriority, () async -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/task(id:priority:_:)",
                        "title": "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "File renaming",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/renameaction(_:)",
                        "title": "func renameAction(_:)",
                        "type": "method"
                      },
                      {
                        "title": "URLs",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/onopenurl(perform:)",
                        "title": "func onOpenURL(perform: (URL) -> ()) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/widgeturl(_:)",
                        "title": "func widgetURL(URL?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Publisher events",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/onreceive(_:perform:)",
                        "title": "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Hit testing",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/allowshittesting(_:)",
                        "title": "func allowsHitTesting(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Content shape",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/contentshape(_:eofill:)",
                        "title": "func contentShape<S>(S, eoFill: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/contentshape(_:_:eofill:)",
                        "title": "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Import and export",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/exportsitemproviders(_:onexport:)",
                        "title": "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/exportsitemproviders(_:onexport:onedit:)",
                        "title": "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/importsitemproviders(_:onimport:)",
                        "title": "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/exportabletoservices(_:)",
                        "title": "func exportableToServices<T>(@autoclosure () -> [T]) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/exportabletoservices(_:onedit:)",
                        "title": "func exportableToServices<T>(@autoclosure () -> [T], onEdit: ([T]) -> Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/importablefromservices(for:action:)",
                        "title": "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "App intents",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/shortcutslinkstyle(_:)",
                        "title": "func shortcutsLinkStyle(ShortcutsLinkStyle) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/siritipviewstyle(_:)",
                        "title": "func siriTipViewStyle(SiriTipViewStyle) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Camera",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/oncameracaptureevent(isenabled:action:)",
                        "title": "func onCameraCaptureEvent(isEnabled: Bool, action: (AVCaptureEvent) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/oncameracaptureevent(isenabled:primaryaction:secondaryaction:)",
                        "title": "func onCameraCaptureEvent(isEnabled: Bool, primaryAction: (AVCaptureEvent) -> Void, secondaryAction: (AVCaptureEvent) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/cameraanchor(isactive:)",
                        "title": "func cameraAnchor(isActive: Bool) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-input-and-events",
                    "title": "Input and event modifiers",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Displaying a search interface",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchable(text:placement:prompt:)",
                        "title": "func searchable(text:placement:prompt:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchable(text:ispresented:placement:prompt:)",
                        "title": "func searchable(text:isPresented:placement:prompt:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchpresentationtoolbarbehavior(_:)",
                        "title": "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Searching with tokens",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchable(text:tokens:placement:prompt:token:)",
                        "title": "func searchable(text:tokens:placement:prompt:token:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchable(text:tokens:ispresented:placement:prompt:token:)",
                        "title": "func searchable(text:tokens:isPresented:placement:prompt:token:)",
                        "type": "method"
                      },
                      {
                        "title": "Searching with editable tokens",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchable(text:editabletokens:ispresented:placement:prompt:token:)",
                        "title": "func searchable(text:editableTokens:isPresented:placement:prompt:token:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchable(text:editabletokens:placement:prompt:token:)",
                        "title": "func searchable(text:editableTokens:placement:prompt:token:)",
                        "type": "method"
                      },
                      {
                        "title": "Making search suggestions",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchsuggestions(_:)",
                        "title": "func searchSuggestions<S>(() -> S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchsuggestions(_:for:)",
                        "title": "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchcompletion(_:)",
                        "title": "func searchCompletion(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchable(text:tokens:suggestedtokens:placement:prompt:token:)",
                        "title": "func searchable(text:tokens:suggestedTokens:placement:prompt:token:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)",
                        "title": "func searchable(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)",
                        "type": "method"
                      },
                      {
                        "title": "Limiting search scope",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchscopes(_:scopes:)",
                        "title": "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchscopes(_:activation:_:)",
                        "title": "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Searching through dictation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/searchdictationbehavior(_:)",
                        "title": "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-search",
                    "title": "Search modifiers",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Alerts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/alert(_:ispresented:actions:)",
                        "title": "func alert(_:isPresented:actions:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/alert(_:ispresented:presenting:actions:)",
                        "title": "func alert(_:isPresented:presenting:actions:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/alert(ispresented:error:actions:)",
                        "title": "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Alerts with a message",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/alert(_:ispresented:actions:message:)",
                        "title": "func alert(_:isPresented:actions:message:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/alert(_:ispresented:presenting:actions:message:)",
                        "title": "func alert(_:isPresented:presenting:actions:message:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/alert(ispresented:error:actions:message:)",
                        "title": "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Confirmation dialogs",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/confirmationdialog(_:ispresented:titlevisibility:actions:)",
                        "title": "func confirmationDialog(_:isPresented:titleVisibility:actions:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)",
                        "title": "func confirmationDialog(_:isPresented:titleVisibility:presenting:actions:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/dismissalconfirmationdialog(_:shouldpresent:actions:)",
                        "title": "func dismissalConfirmationDialog(_:shouldPresent:actions:)",
                        "type": "method"
                      },
                      {
                        "title": "Confirmation dialogs with a message",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/confirmationdialog(_:ispresented:titlevisibility:actions:message:)",
                        "title": "func confirmationDialog(_:isPresented:titleVisibility:actions:message:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)",
                        "title": "func confirmationDialog(_:isPresented:titleVisibility:presenting:actions:message:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/dismissalconfirmationdialog(_:shouldpresent:actions:message:)",
                        "title": "func dismissalConfirmationDialog(_:shouldPresent:actions:message:)",
                        "type": "method"
                      },
                      {
                        "title": "Dialog configuration",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/dialogicon(_:)",
                        "title": "func dialogIcon(Image?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/dialogseverity(_:)",
                        "title": "func dialogSeverity(DialogSeverity) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/dialogsuppressiontoggle(issuppressed:)",
                        "title": "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/dialogsuppressiontoggle(_:issuppressed:)",
                        "title": "func dialogSuppressionToggle(_:isSuppressed:)",
                        "type": "method"
                      },
                      {
                        "title": "Sheets",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/sheet(ispresented:ondismiss:content:)",
                        "title": "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/sheet(item:ondismiss:content:)",
                        "title": "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fullscreencover(ispresented:ondismiss:content:)",
                        "title": "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fullscreencover(item:ondismiss:content:)",
                        "title": "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Popovers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/popover(item:attachmentanchor:arrowedge:content:)",
                        "title": "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge?, content: (Item) -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/popover(ispresented:attachmentanchor:arrowedge:content:)",
                        "title": "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge?, content: () -> Content) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Sheet and popover configuration",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/interactivedismissdisabled(_:)",
                        "title": "func interactiveDismissDisabled(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentationdetents(_:)",
                        "title": "func presentationDetents(Set<PresentationDetent>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentationdetents(_:selection:)",
                        "title": "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentationdragindicator(_:)",
                        "title": "func presentationDragIndicator(Visibility) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentationbackground(_:)",
                        "title": "func presentationBackground<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentationbackground(alignment:content:)",
                        "title": "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentationbackgroundinteraction(_:)",
                        "title": "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentationcompactadaptation(horizontal:vertical:)",
                        "title": "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentationcompactadaptation(_:)",
                        "title": "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentationcontentinteraction(_:)",
                        "title": "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentationcornerradius(_:)",
                        "title": "func presentationCornerRadius(CGFloat?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/presentationsizing(_:)",
                        "title": "func presentationSizing(some PresentationSizing) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "File exporter",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)",
                        "title": "func fileExporter(isPresented:document:contentType:defaultFilename:onCompletion:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fileexporter(ispresented:documents:contenttype:oncompletion:)",
                        "title": "func fileExporter(isPresented:documents:contentType:onCompletion:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                        "title": "func fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)",
                        "title": "func fileExporter(isPresented:documents:contentTypes:onCompletion:onCancellation:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                        "title": "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                        "title": "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fileexporterfilenamelabel(_:)",
                        "title": "func fileExporterFilenameLabel(_:)",
                        "type": "method"
                      },
                      {
                        "title": "File importer",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                        "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                        "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                        "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "File mover",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/filemover(ispresented:file:oncompletion:)",
                        "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/filemover(ispresented:files:oncompletion:)",
                        "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/filemover(ispresented:file:oncompletion:oncancellation:)",
                        "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/filemover(ispresented:files:oncompletion:oncancellation:)",
                        "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "File dialog configuration",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/filedialogbrowseroptions(_:)",
                        "title": "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/filedialogconfirmationlabel(_:)",
                        "title": "func fileDialogConfirmationLabel(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/filedialogcustomizationid(_:)",
                        "title": "func fileDialogCustomizationID(String) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/filedialogdefaultdirectory(_:)",
                        "title": "func fileDialogDefaultDirectory(URL?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/filedialogimportsunresolvedaliases(_:)",
                        "title": "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/filedialogmessage(_:)",
                        "title": "func fileDialogMessage(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/filedialogurlenabled(_:)",
                        "title": "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Inspectors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/inspector(ispresented:content:)",
                        "title": "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/inspectorcolumnwidth(_:)",
                        "title": "func inspectorColumnWidth(CGFloat) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/inspectorcolumnwidth(min:ideal:max:)",
                        "title": "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Quick look previews",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/quicklookpreview(_:)",
                        "title": "func quickLookPreview(Binding<URL?>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/quicklookpreview(_:in:)",
                        "title": "func quickLookPreview<Items>(Binding<Items.Element?>, in: Items) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Family Sharing",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/familyactivitypicker(ispresented:selection:)",
                        "title": "func familyActivityPicker(isPresented: Binding<Bool>, selection: Binding<FamilyActivitySelection>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/familyactivitypicker(headertext:footertext:ispresented:selection:)",
                        "title": "func familyActivityPicker(headerText: String?, footerText: String?, isPresented: Binding<Bool>, selection: Binding<FamilyActivitySelection>) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Live Activities",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/activitysystemactionforegroundcolor(_:)",
                        "title": "func activitySystemActionForegroundColor(Color?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/activitybackgroundtint(_:)",
                        "title": "func activityBackgroundTint(Color?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Apple Music",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/musicsubscriptionoffer(ispresented:options:onloadcompletion:)",
                        "title": "func musicSubscriptionOffer(isPresented: Binding<Bool>, options: MusicSubscriptionOffer.Options, onLoadCompletion: ((any Error)?) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "StoreKit",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/appstoreoverlay(ispresented:configuration:)",
                        "title": "func appStoreOverlay(isPresented: Binding<Bool>, configuration: () -> SKOverlay.Configuration) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/managesubscriptionssheet(ispresented:)",
                        "title": "func manageSubscriptionsSheet(isPresented: Binding<Bool>) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/refundrequestsheet(for:ispresented:ondismiss:)",
                        "title": "func refundRequestSheet(for: Transaction.ID, isPresented: Binding<Bool>, onDismiss: ((Result<Transaction.RefundRequestStatus, Transaction.RefundRequestError>) -> ())?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/offercoderedemption(ispresented:oncompletion:)",
                        "title": "func offerCodeRedemption(isPresented: Binding<Bool>, onCompletion: (Result<Void, any Error>) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "PhotoKit",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/photospicker(ispresented:selection:matching:preferreditemencoding:)",
                        "title": "func photosPicker(isPresented: Binding<Bool>, selection: Binding<PhotosPickerItem?>, matching: PHPickerFilter?, preferredItemEncoding: PhotosPickerItem.EncodingDisambiguationPolicy) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/photospicker(ispresented:selection:matching:preferreditemencoding:photolibrary:)",
                        "title": "func photosPicker(isPresented: Binding<Bool>, selection: Binding<PhotosPickerItem?>, matching: PHPickerFilter?, preferredItemEncoding: PhotosPickerItem.EncodingDisambiguationPolicy, photoLibrary: PHPhotoLibrary) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/photospicker(ispresented:selection:maxselectioncount:selectionbehavior:matching:preferreditemencoding:)",
                        "title": "func photosPicker(isPresented: Binding<Bool>, selection: Binding<[PhotosPickerItem]>, maxSelectionCount: Int?, selectionBehavior: PhotosPickerSelectionBehavior, matching: PHPickerFilter?, preferredItemEncoding: PhotosPickerItem.EncodingDisambiguationPolicy) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/photospicker(ispresented:selection:maxselectioncount:selectionbehavior:matching:preferreditemencoding:photolibrary:)",
                        "title": "func photosPicker(isPresented: Binding<Bool>, selection: Binding<[PhotosPickerItem]>, maxSelectionCount: Int?, selectionBehavior: PhotosPickerSelectionBehavior, matching: PHPickerFilter?, preferredItemEncoding: PhotosPickerItem.EncodingDisambiguationPolicy, photoLibrary: PHPhotoLibrary) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/photospickeraccessoryvisibility(_:edges:)",
                        "title": "func photosPickerAccessoryVisibility(Visibility, edges: Edge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/photospickerdisabledcapabilities(_:)",
                        "title": "func photosPickerDisabledCapabilities(PHPickerCapabilities) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/photospickerstyle(_:)",
                        "title": "func photosPickerStyle(PhotosPickerStyle) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-presentation",
                    "title": "Presentation modifiers",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Identity",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/tag(_:includeoptional:)",
                        "title": "func tag<V>(V, includeOptional: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/id(_:)",
                        "title": "func id<ID>(ID) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/equatable()",
                        "title": "func equatable() -> EquatableView<Self>",
                        "type": "method"
                      },
                      {
                        "title": "Environment values",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/environment(_:)",
                        "title": "func environment<T>(T?) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/environment(_:_:)",
                        "title": "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/environmentobject(_:)",
                        "title": "func environmentObject<T>(T) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/transformenvironment(_:transform:)",
                        "title": "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Preferences",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/preference(key:value:)",
                        "title": "func preference<K>(key: K.Type, value: K.Value) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/transformpreference(_:_:)",
                        "title": "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/anchorpreference(key:value:transform:)",
                        "title": "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/transformanchorpreference(key:value:transform:)",
                        "title": "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/onpreferencechange(_:perform:)",
                        "title": "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/backgroundpreferencevalue(_:_:)",
                        "title": "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/backgroundpreferencevalue(_:alignment:_:)",
                        "title": "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/overlaypreferencevalue(_:_:)",
                        "title": "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/overlaypreferencevalue(_:alignment:_:)",
                        "title": "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Default storage",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/defaultappstorage(_:)",
                        "title": "func defaultAppStorage(UserDefaults) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Configuring a model",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/view/modelcontext(_:)",
                        "title": "func modelContext(ModelContext) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/modelcontainer(_:)",
                        "title": "func modelContainer(ModelContainer) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/modelcontainer(for:inmemory:isautosaveenabled:isundoenabled:onsetup:)",
                        "title": "func modelContainer(for:inMemory:isAutosaveEnabled:isUndoEnabled:onSetup:)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-state",
                    "title": "State modifiers",
                    "type": "collection"
                  },
                  {
                    "title": "Deprecated modifiers",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Accessibility modifiers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/accessibility(label:)",
                        "title": "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/accessibility(value:)",
                        "title": "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/accessibility(hidden:)",
                        "title": "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/accessibility(identifier:)",
                        "title": "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/accessibility(selectionidentifier:)",
                        "title": "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/accessibility(hint:)",
                        "title": "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/accessibility(activationpoint:)",
                        "title": "func accessibility(activationPoint:)",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/accessibility(inputlabels:)",
                        "title": "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/accessibility(addtraits:)",
                        "title": "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/accessibility(removetraits:)",
                        "title": "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/accessibility(sortpriority:)",
                        "title": "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                        "type": "method"
                      },
                      {
                        "title": "Appearance modifiers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/colorscheme(_:)",
                        "title": "func colorScheme(ColorScheme) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/listrowplattercolor(_:)",
                        "title": "func listRowPlatterColor(Color?) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/background(_:alignment:)",
                        "title": "func background<Background>(Background, alignment: Alignment) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/overlay(_:alignment:)",
                        "title": "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/foregroundcolor(_:)",
                        "title": "func foregroundColor(Color?) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/complicationforeground()",
                        "title": "func complicationForeground() -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Text modifiers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/autocapitalization(_:)",
                        "title": "func autocapitalization(UITextAutocapitalizationType) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/disableautocorrection(_:)",
                        "title": "func disableAutocorrection(Bool?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Auxiliary view modifiers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/navigationbartitle(_:)",
                        "title": "func navigationBarTitle(_:)",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/navigationbartitle(_:displaymode:)",
                        "title": "func navigationBarTitle(_:displayMode:)",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/navigationbaritems(leading:)",
                        "title": "func navigationBarItems<L>(leading: L) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/navigationbaritems(leading:trailing:)",
                        "title": "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/navigationbaritems(trailing:)",
                        "title": "func navigationBarItems<T>(trailing: T) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/navigationbarhidden(_:)",
                        "title": "func navigationBarHidden(Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/statusbar(hidden:)",
                        "title": "func statusBar(hidden: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/contextmenu(_:)",
                        "title": "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Style modifiers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/menubuttonstyle(_:)",
                        "title": "func menuButtonStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/navigationviewstyle(_:)",
                        "title": "func navigationViewStyle<S>(S) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Layout modifiers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/frame()",
                        "title": "func frame() -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/edgesignoringsafearea(_:)",
                        "title": "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/coordinatespace(name:)",
                        "title": "func coordinateSpace<T>(name: T) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Graphics and rendering modifiers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/accentcolor(_:)",
                        "title": "func accentColor(Color?) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/mask(_:)",
                        "title": "func mask<Mask>(Mask) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/animation(_:)-1hc0p",
                        "title": "func animation(Animation?) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/cornerradius(_:antialiased:)",
                        "title": "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Input and events modifiers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/onchange(of:perform:)",
                        "title": "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/ontapgesture(count:coordinatespace:perform:)-36x9h",
                        "title": "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                        "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/onlongpressgesture(minimumduration:pressing:perform:)",
                        "title": "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/onpastecommand(of:perform:)-4f78f",
                        "title": "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/onpastecommand(of:validator:perform:)-964k1",
                        "title": "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/ondrop(of:delegate:)-2vr9o",
                        "title": "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/view/ondrop(of:istargeted:perform:)",
                        "title": "func onDrop(of:isTargeted:perform:)",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/focusable(_:onfocuschange:)",
                        "title": "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/oncontinuoushover(coordinatespace:perform:)-8gyrl",
                        "title": "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "View presentation modifiers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/actionsheet(ispresented:content:)",
                        "title": "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/actionsheet(item:content:)",
                        "title": "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/alert(ispresented:content:)",
                        "title": "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                        "type": "method"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/alert(item:content:)",
                        "title": "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Search modifiers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/searchable(text:placement:prompt:suggestions:)",
                        "title": "func searchable(text:placement:prompt:suggestions:)",
                        "type": "method"
                      },
                      {
                        "title": "Tab modifiers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/view/tabitem(_:)",
                        "title": "func tabItem<V>(() -> V) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/view-deprecated",
                    "title": "Deprecated modifiers",
                    "type": "collection"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/view/accessibilityactions(category:_:)",
                    "title": "func accessibilityActions<Content>(category: AccessibilityActionCategory, () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/accessorywidgetgroupstyle(_:)",
                    "title": "func accessoryWidgetGroupStyle(AccessoryWidgetGroupStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/addordertowalletbuttonstyle(_:)",
                    "title": "func addOrderToWalletButtonStyle(AddOrderToWalletButtonStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/addpasstowalletbuttonstyle(_:)",
                    "title": "func addPassToWalletButtonStyle(AddPassToWalletButtonStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/appentityidentifier(_:)",
                    "title": "func appEntityIdentifier(EntityIdentifier?) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/appentityidentifier(forselectiontype:identifier:)",
                    "title": "func appEntityIdentifier<I>(forSelectionType: I.Type, identifier: (I) -> EntityIdentifier?) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/appentityuielements(_:)",
                    "title": "func appEntityUIElements((AppEntityUIElementsContext) -> [AppEntityUIElement]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/automateddeviceenrollmentaddition(ispresented:)",
                    "title": "func automatedDeviceEnrollmentAddition(isPresented: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/certificatesheet(ispresented:trust:title:message:help:)",
                    "title": "func certificateSheet(isPresented: Binding<Bool>, trust: SecTrust?, title: String?, message: String?, help: URL?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/contactaccessbuttoncaption(_:)",
                    "title": "func contactAccessButtonCaption(ContactAccessButton.Caption) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/contactaccessbuttonstyle(_:)",
                    "title": "func contactAccessButtonStyle(ContactAccessButton.Style) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/contactaccesspicker(ispresented:completionhandler:)",
                    "title": "func contactAccessPicker(isPresented: Binding<Bool>, completionHandler: ([String]) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/containervalue(_:_:)",
                    "title": "func containerValue<V>(WritableKeyPath<ContainerValues, V>, V) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/contenttoolbar(for:content:)",
                    "title": "func contentToolbar(for:content:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/continuitydevicepicker(ispresented:ondidconnect:)",
                    "title": "func continuityDevicePicker(isPresented: Binding<Bool>, onDidConnect: ((AVContinuityDevice?) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/controlwidgetactionhint(_:)",
                    "title": "func controlWidgetActionHint(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/controlwidgetstatus(_:)",
                    "title": "func controlWidgetStatus(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/currententitlementtask(for:priority:action:)",
                    "title": "func currentEntitlementTask(for: String, priority: TaskPriority, action: (EntitlementTaskState<VerificationResult<Transaction>?>) async -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/dialogpreventsapptermination(_:)",
                    "title": "func dialogPreventsAppTermination(Bool?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/documentbrowsercontextmenu(_:)",
                    "title": "func documentBrowserContextMenu(([URL]?) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/formstyle(_:)",
                    "title": "func formStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/glassbackgroundeffect(_:displaymode:)",
                    "title": "func glassBackgroundEffect<S>(S, displayMode: GlassBackgroundDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/glassbackgroundeffect(_:in:displaymode:)",
                    "title": "func glassBackgroundEffect<T, S>(S, in: T, displayMode: GlassBackgroundDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/handgestureshortcut(_:isenabled:)",
                    "title": "func handGestureShortcut(HandGestureShortcut, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/handpointerbehavior(_:)",
                    "title": "func handPointerBehavior(HandPointerBehavior?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/handlesgamecontrollerevents(matching:)",
                    "title": "func handlesGameControllerEvents(matching: GCUIEventTypes) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/healthdataaccessrequest(store:objecttype:predicate:trigger:completion:)",
                    "title": "func healthDataAccessRequest(store: HKHealthStore, objectType: HKObjectType, predicate: NSPredicate?, trigger: some Equatable, completion: (Result<Bool, any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/healthdataaccessrequest(store:readtypes:trigger:completion:)",
                    "title": "func healthDataAccessRequest(store: HKHealthStore, readTypes: Set<HKObjectType>, trigger: some Equatable, completion: (Result<Bool, any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/healthdataaccessrequest(store:sharetypes:readtypes:trigger:completion:)",
                    "title": "func healthDataAccessRequest(store: HKHealthStore, shareTypes: Set<HKSampleType>, readTypes: Set<HKObjectType>?, trigger: some Equatable, completion: (Result<Bool, any Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/imageplaygroundgenerationstyle(_:in:)",
                    "title": "func imagePlaygroundGenerationStyle(ImagePlaygroundStyle, in: [ImagePlaygroundStyle]) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/imageplaygroundpersonalizationpolicy(_:)",
                    "title": "func imagePlaygroundPersonalizationPolicy(ImagePlaygroundPersonalizationPolicy) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/imageplaygroundsheet(ispresented:concept:sourceimage:oncompletion:oncancellation:)",
                    "title": "func imagePlaygroundSheet(isPresented: Binding<Bool>, concept: String, sourceImage: Image?, onCompletion: (URL) -> Void, onCancellation: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/imageplaygroundsheet(ispresented:concept:sourceimageurl:oncompletion:oncancellation:)",
                    "title": "func imagePlaygroundSheet(isPresented: Binding<Bool>, concept: String, sourceImageURL: URL, onCompletion: (URL) -> Void, onCancellation: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/imageplaygroundsheet(ispresented:concepts:sourceimage:oncompletion:oncancellation:)",
                    "title": "func imagePlaygroundSheet(isPresented: Binding<Bool>, concepts: [ImagePlaygroundConcept], sourceImage: Image?, onCompletion: (URL) -> Void, onCancellation: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/imageplaygroundsheet(ispresented:concepts:sourceimageurl:oncompletion:oncancellation:)",
                    "title": "func imagePlaygroundSheet(isPresented: Binding<Bool>, concepts: [ImagePlaygroundConcept], sourceImageURL: URL, onCompletion: (URL) -> Void, onCancellation: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/immersiveenvironmentpicker(content:)",
                    "title": "func immersiveEnvironmentPicker<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/inapppurchaseoptions(_:)",
                    "title": "func inAppPurchaseOptions(((Product) async -> Set<Product.PurchaseOption>)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/journalingsuggestionspicker(ispresented:oncompletion:)",
                    "title": "func journalingSuggestionsPicker(isPresented: Binding<Bool>, onCompletion: (JournalingSuggestion) async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/labeledcontentstyle(_:)",
                    "title": "func labeledContentStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/labelsvisibility(_:)",
                    "title": "func labelsVisibility(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/lookaroundviewer(ispresented:initialscene:allowsnavigation:showsroadlabels:pointsofinterest:ondismiss:)",
                    "title": "func lookAroundViewer(isPresented: Binding<Bool>, initialScene: MKLookAroundScene?, allowsNavigation: Bool, showsRoadLabels: Bool, pointsOfInterest: PointOfInterestCategories, onDismiss: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/lookaroundviewer(ispresented:scene:allowsnavigation:showsroadlabels:pointsofinterest:ondismiss:)",
                    "title": "func lookAroundViewer(isPresented: Binding<Bool>, scene: Binding<MKLookAroundScene?>, allowsNavigation: Bool, showsRoadLabels: Bool, pointsOfInterest: PointOfInterestCategories, onDismiss: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/managesubscriptionssheet(ispresented:subscriptiongroupid:)",
                    "title": "func manageSubscriptionsSheet(isPresented: Binding<Bool>, subscriptionGroupID: String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/managedcontentstyle(_:)",
                    "title": "func managedContentStyle(ManagedContentStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapcamerakeyframeanimator(trigger:keyframes:)",
                    "title": "func mapCameraKeyframeAnimator(trigger: some Equatable, keyframes: (MapCamera) -> some Keyframes<MapCamera>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapcontrolvisibility(_:)",
                    "title": "func mapControlVisibility(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapcontrols(_:)",
                    "title": "func mapControls(() -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapfeatureselectionaccessory(_:)",
                    "title": "func mapFeatureSelectionAccessory(MapItemDetailSelectionAccessoryStyle?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapfeatureselectioncontent(content:)",
                    "title": "func mapFeatureSelectionContent(content: (MapFeature) -> some MapContent) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapfeatureselectiondisabled(_:)",
                    "title": "func mapFeatureSelectionDisabled((MapFeature) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapitemdetailpopover(ispresented:item:displaysmap:attachmentanchor:)",
                    "title": "func mapItemDetailPopover(isPresented: Binding<Bool>, item: MKMapItem?, displaysMap: Bool, attachmentAnchor: PopoverAttachmentAnchor) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapitemdetailpopover(ispresented:item:displaysmap:attachmentanchor:arrowedge:)",
                    "title": "func mapItemDetailPopover(isPresented: Binding<Bool>, item: MKMapItem?, displaysMap: Bool, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapitemdetailpopover(item:displaysmap:attachmentanchor:)",
                    "title": "func mapItemDetailPopover(item: Binding<MKMapItem?>, displaysMap: Bool, attachmentAnchor: PopoverAttachmentAnchor) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapitemdetailpopover(item:displaysmap:attachmentanchor:arrowedge:)",
                    "title": "func mapItemDetailPopover(item: Binding<MKMapItem?>, displaysMap: Bool, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapitemdetailsheet(ispresented:item:displaysmap:)",
                    "title": "func mapItemDetailSheet(isPresented: Binding<Bool>, item: MKMapItem?, displaysMap: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapitemdetailsheet(item:displaysmap:)",
                    "title": "func mapItemDetailSheet(item: Binding<MKMapItem?>, displaysMap: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapscope(_:)",
                    "title": "func mapScope(Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/mapstyle(_:)",
                    "title": "func mapStyle(MapStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/matchedtransitionsource(id:in:)",
                    "title": "func matchedTransitionSource(id: some Hashable, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/matchedtransitionsource(id:in:configuration:)",
                    "title": "func matchedTransitionSource(id: some Hashable, in: Namespace.ID, configuration: (EmptyMatchedTransitionSourceConfiguration) -> some MatchedTransitionSourceConfiguration) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/materialactiveappearance(_:)",
                    "title": "func materialActiveAppearance(MaterialActiveAppearance) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/navigationtransition(_:)",
                    "title": "func navigationTransition(some NavigationTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/onapplepaycouponcodechange(perform:)",
                    "title": "func onApplePayCouponCodeChange(perform: (String) async -> PKPaymentRequestCouponCodeUpdate) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/onapplepaypaymentmethodchange(perform:)",
                    "title": "func onApplePayPaymentMethodChange(perform: (PKPaymentMethod) async -> PKPaymentRequestPaymentMethodUpdate) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/onapplepayshippingcontactchange(perform:)",
                    "title": "func onApplePayShippingContactChange(perform: (PKContact) async -> PKPaymentRequestShippingContactUpdate) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/onapplepayshippingmethodchange(perform:)",
                    "title": "func onApplePayShippingMethodChange(perform: (PKShippingMethod) async -> PKPaymentRequestShippingMethodUpdate) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/ongeometrychange3d(for:of:action:)",
                    "title": "func onGeometryChange3D(for:of:action:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/oninapppurchasecompletion(perform:)",
                    "title": "func onInAppPurchaseCompletion(perform: ((Product, Result<Product.PurchaseResult, any Error>) async -> ())?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/oninapppurchasestart(perform:)",
                    "title": "func onInAppPurchaseStart(perform: ((Product) async -> ())?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/onmapcamerachange(frequency:_:)",
                    "title": "func onMapCameraChange(frequency:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/paylaterviewaction(_:)",
                    "title": "func payLaterViewAction(PayLaterViewAction) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/paylaterviewdisplaystyle(_:)",
                    "title": "func payLaterViewDisplayStyle(PayLaterViewDisplayStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/paywithapplepaybuttonstyle(_:)",
                    "title": "func payWithApplePayButtonStyle(PayWithApplePayButtonStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/popovertip(_:arrowedge:action:)",
                    "title": "func popoverTip((any Tip)?, arrowEdge: Edge?, action: (Tips.Action) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/preferredsubscriptionoffer(_:)",
                    "title": "func preferredSubscriptionOffer((Product, Product.SubscriptionInfo, [Product.SubscriptionOffer]) -> Product.SubscriptionOffer?) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/presentationpreventsapptermination(_:)",
                    "title": "func presentationPreventsAppTermination(Bool?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/productdescription(_:)",
                    "title": "func productDescription(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/producticonborder()",
                    "title": "func productIconBorder() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/productviewstyle(_:)",
                    "title": "func productViewStyle(some ProductViewStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/realityviewcameracontrols(_:)",
                    "title": "func realityViewCameraControls(CameraControls) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/scrollinputbehavior(_:for:)",
                    "title": "func scrollInputBehavior(ScrollInputBehavior, for: ScrollInputKind) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/signinwithapplebuttonstyle(_:)",
                    "title": "func signInWithAppleButtonStyle(SignInWithAppleButton.Style) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/storebutton(_:for:)",
                    "title": "func storeButton(Visibility, for: StoreButtonKind...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/storeproducttask(for:priority:action:)",
                    "title": "func storeProductTask(for: Product.ID, priority: TaskPriority, action: (Product.TaskState) async -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/storeproductstask(for:priority:action:)",
                    "title": "func storeProductsTask(for: some Collection<String> & Equatable & Sendable, priority: TaskPriority, action: (Product.CollectionTaskState) async -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionpromotionaloffer(offer:signature:)",
                    "title": "func subscriptionPromotionalOffer(offer: (Product, Product.SubscriptionInfo) -> Product.SubscriptionOffer?, signature: (Product, Product.SubscriptionInfo, Product.SubscriptionOffer) async throws -> Product.SubscriptionOffer.Signature) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstatustask(for:priority:action:)",
                    "title": "func subscriptionStatusTask(for: String, priority: TaskPriority, action: (EntitlementTaskState<[Product.SubscriptionInfo.Status]>) async -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstorebuttonlabel(_:)",
                    "title": "func subscriptionStoreButtonLabel(SubscriptionStoreButtonLabel) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstorecontrolbackground(_:)",
                    "title": "func subscriptionStoreControlBackground(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstorecontrolicon(icon:)",
                    "title": "func subscriptionStoreControlIcon(icon: (Product, Product.SubscriptionInfo) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstorecontrolstyle(_:)",
                    "title": "func subscriptionStoreControlStyle(some SubscriptionStoreControlStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstorecontrolstyle(_:placement:)",
                    "title": "func subscriptionStoreControlStyle<S>(S, placement: S.Placement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstoreoptiongroupstyle(_:)",
                    "title": "func subscriptionStoreOptionGroupStyle(some SubscriptionOptionGroupStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstorepickeritembackground(_:)",
                    "title": "func subscriptionStorePickerItemBackground(some ShapeStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstorepickeritembackground(_:in:)",
                    "title": "func subscriptionStorePickerItemBackground(some ShapeStyle, in: some Shape) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstorepolicydestination(for:destination:)",
                    "title": "func subscriptionStorePolicyDestination(for: SubscriptionStorePolicyKind, destination: () -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstorepolicydestination(url:for:)",
                    "title": "func subscriptionStorePolicyDestination(url: URL, for: SubscriptionStorePolicyKind) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstorepolicyforegroundstyle(_:)",
                    "title": "func subscriptionStorePolicyForegroundStyle(some ShapeStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstorepolicyforegroundstyle(_:_:)",
                    "title": "func subscriptionStorePolicyForegroundStyle(some ShapeStyle, some ShapeStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/subscriptionstoresigninaction(_:)",
                    "title": "func subscriptionStoreSignInAction((() -> ())?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/tabletopgame(_:parent:automaticupdate:)",
                    "title": "func tabletopGame(TabletopGame, parent: Entity, automaticUpdate: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/tabletopgame(_:parent:automaticupdate:interaction:)",
                    "title": "func tabletopGame(TabletopGame, parent: Entity, automaticUpdate: Bool, interaction: (TabletopInteraction.Value) -> any TabletopInteraction.Delegate) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/textcontenttype(_:)",
                    "title": "func textContentType(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/textrenderer(_:)",
                    "title": "func textRenderer<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/textselectionaffinity(_:)",
                    "title": "func textSelectionAffinity(TextSelectionAffinity) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/tipbackground(_:)",
                    "title": "func tipBackground(some ShapeStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/tipcornerradius(_:antialiased:)",
                    "title": "func tipCornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/tipimagesize(_:)",
                    "title": "func tipImageSize(CGSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/tipimagestyle(_:)",
                    "title": "func tipImageStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/tipimagestyle(_:_:)",
                    "title": "func tipImageStyle<S1, S2>(S1, S2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/tipimagestyle(_:_:_:)",
                    "title": "func tipImageStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/tipviewstyle(_:)",
                    "title": "func tipViewStyle(some TipViewStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/toolbaritemhidden(_:)",
                    "title": "func toolbarItemHidden(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/transactionpicker(ispresented:selection:)",
                    "title": "func transactionPicker(isPresented: Binding<Bool>, selection: Binding<[Transaction]>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/transactiontask(_:action:)",
                    "title": "func transactionTask(CredentialTransaction.Configuration?, action: (CredentialTransaction) async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/translationpresentation(ispresented:text:attachmentanchor:arrowedge:replacementaction:)",
                    "title": "func translationPresentation(isPresented: Binding<Bool>, text: String, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, replacementAction: ((String) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/translationtask(_:action:)",
                    "title": "func translationTask(TranslationSession.Configuration?, action: (TranslationSession) async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/translationtask(source:target:action:)",
                    "title": "func translationTask(source: Locale.Language?, target: Locale.Language?, action: (TranslationSession) async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/verifyidentitywithwalletbuttonstyle(_:)",
                    "title": "func verifyIdentityWithWalletButtonStyle(VerifyIdentityWithWalletButtonStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/windowtoolbarfullscreenvisibility(_:)",
                    "title": "func windowToolbarFullScreenVisibility(WindowToolbarFullScreenVisibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/workoutpreview(_:ispresented:)",
                    "title": "func workoutPreview(WorkoutPlan, isPresented: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/view/writingtoolsaffordancevisibility(_:)",
                    "title": "func writingToolsAffordanceVisibility(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/view/writingtoolsbehavior(_:)",
                    "title": "func writingToolsBehavior(WritingToolsBehavior) -> some View",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/view",
                "title": "View",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Building content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewbuilder/buildblock()",
                    "title": "static func buildBlock() -> EmptyView",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/viewbuilder/buildblock(_:)",
                    "title": "static buildBlock(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/viewbuilder/buildexpression(_:)",
                    "title": "static func buildExpression<Content>(Content) -> Content",
                    "type": "method"
                  },
                  {
                    "title": "Conditionally building content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewbuilder/buildeither(first:)",
                    "title": "static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> _ConditionalContent<TrueContent, FalseContent>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/viewbuilder/buildeither(second:)",
                    "title": "static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> _ConditionalContent<TrueContent, FalseContent>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/viewbuilder/buildif(_:)",
                    "title": "static func buildIf<Content>(Content?) -> Content?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/viewbuilder/buildlimitedavailability(_:)",
                    "title": "static func buildLimitedAvailability<Content>(Content) -> AnyView",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/viewbuilder",
                "title": "ViewBuilder",
                "type": "struct"
              },
              {
                "title": "Modifying a view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/configuring-views",
                "title": "Configuring views",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/reducing-view-modifier-maintenance",
                "title": "Reducing view modifier maintenance",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/view/modifier(_:)",
                "title": "func modifier<T>(T) -> ModifiedContent<Self, T>",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a view modifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewmodifier/body(content:)",
                    "title": "func body(content: Self.Content) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/viewmodifier/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "path": "/documentation/swiftui/viewmodifier/content",
                    "title": "ViewModifier.Content",
                    "type": "typealias"
                  },
                  {
                    "title": "Adding animations to a view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewmodifier/animation(_:)",
                    "title": "func animation(Animation?) -> some ViewModifier",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/viewmodifier/concat(_:)",
                    "title": "func concat<T>(T) -> ModifiedContent<Self, T>",
                    "type": "method"
                  },
                  {
                    "title": "Handling view taps and gestures",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewmodifier/transaction(_:)",
                    "title": "func transaction((inout Transaction) -> Void) -> some ViewModifier",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/viewmodifier",
                "title": "ViewModifier",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating an empty modifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/emptymodifier/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Getting the identity modifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/emptymodifier/identity",
                    "title": "static let identity: EmptyModifier",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/emptymodifier",
                "title": "EmptyModifier",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a modified content view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/init(content:modifier:)",
                    "title": "init(content: Content, modifier: Modifier)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/content",
                    "title": "var content: Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/modifier",
                    "title": "var modifier: Modifier",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/modifiedcontent/accessibility(activationpoint:)",
                    "title": "func accessibility(activationPoint:)",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/modifiedcontent/accessibility(addtraits:)",
                    "title": "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/modifiedcontent/accessibility(hidden:)",
                    "title": "func accessibility(hidden: Bool) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/modifiedcontent/accessibility(hint:)",
                    "title": "func accessibility(hint: Text) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/modifiedcontent/accessibility(identifier:)",
                    "title": "func accessibility(identifier: String) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/modifiedcontent/accessibility(inputlabels:)",
                    "title": "func accessibility(inputLabels: [Text]) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/modifiedcontent/accessibility(label:)",
                    "title": "func accessibility(label: Text) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/modifiedcontent/accessibility(removetraits:)",
                    "title": "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/modifiedcontent/accessibility(selectionidentifier:)",
                    "title": "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/modifiedcontent/accessibility(sortpriority:)",
                    "title": "func accessibility(sortPriority: Double) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/modifiedcontent/accessibility(value:)",
                    "title": "func accessibility(value: Text) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityaction(_:_:)",
                    "title": "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityaction(_:intent:)",
                    "title": "func accessibilityAction<I>(AccessibilityActionKind, intent: I) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityaction(named:_:)",
                    "title": "func accessibilityAction(named:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityaction(named:intent:)",
                    "title": "func accessibilityAction(named:intent:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityactivationpoint(_:)",
                    "title": "func accessibilityActivationPoint(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityactivationpoint(_:isenabled:)",
                    "title": "func accessibilityActivationPoint(_:isEnabled:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityaddtraits(_:)",
                    "title": "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityadjustableaction(_:)",
                    "title": "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilitycustomcontent(_:_:importance:)",
                    "title": "func accessibilityCustomContent(_:_:importance:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilitydirecttouch(_:options:)",
                    "title": "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilitydragpoint(_:description:)",
                    "title": "func accessibilityDragPoint(_:description:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilitydragpoint(_:description:isenabled:)",
                    "title": "func accessibilityDragPoint(_:description:isEnabled:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilitydroppoint(_:description:)",
                    "title": "func accessibilityDropPoint(_:description:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilitydroppoint(_:description:isenabled:)",
                    "title": "func accessibilityDropPoint(_:description:isEnabled:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityheading(_:)",
                    "title": "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityhidden(_:)",
                    "title": "func accessibilityHidden(Bool) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityhidden(_:isenabled:)",
                    "title": "func accessibilityHidden(Bool, isEnabled: Bool) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityhint(_:)",
                    "title": "func accessibilityHint(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityhint(_:isenabled:)",
                    "title": "func accessibilityHint(_:isEnabled:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityidentifier(_:)",
                    "title": "func accessibilityIdentifier(String) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityidentifier(_:isenabled:)",
                    "title": "func accessibilityIdentifier(String, isEnabled: Bool) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityinputlabels(_:)",
                    "title": "func accessibilityInputLabels(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityinputlabels(_:isenabled:)",
                    "title": "func accessibilityInputLabels(_:isEnabled:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilitylabel(_:)",
                    "title": "func accessibilityLabel(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilitylabel(_:isenabled:)",
                    "title": "func accessibilityLabel(_:isEnabled:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityremovetraits(_:)",
                    "title": "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityrespondstouserinteraction(_:)",
                    "title": "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityrespondstouserinteraction(_:isenabled:)",
                    "title": "func accessibilityRespondsToUserInteraction(Bool, isEnabled: Bool) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityscrollaction(_:)",
                    "title": "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilitysortpriority(_:)",
                    "title": "func accessibilitySortPriority(Double) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilitytextcontenttype(_:)",
                    "title": "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityvalue(_:)",
                    "title": "func accessibilityValue(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityvalue(_:isenabled:)",
                    "title": "func accessibilityValue(_:isEnabled:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/modifiedcontent/accessibilityzoomaction(_:)",
                    "title": "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Content, Modifier>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/modifiedcontent",
                "title": "ModifiedContent",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Resolving a modifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/environmentalmodifier/resolve(in:)",
                    "title": "func resolve(in: EnvironmentValues) -> Self.ResolvedModifier",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/environmentalmodifier/resolvedmodifier",
                    "title": "ResolvedModifier",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/environmentalmodifier",
                "title": "EnvironmentalModifier",
                "type": "protocol"
              },
              {
                "title": "Responding to view life cycle updates",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onappear(perform:)",
                "title": "func onAppear(perform: (() -> Void)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/ondisappear(perform:)",
                "title": "func onDisappear(perform: (() -> Void)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/task(priority:_:)",
                "title": "func task(priority: TaskPriority, () async -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/task(id:priority:_:)",
                "title": "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                "type": "method"
              },
              {
                "title": "Managing the view hierarchy",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/id(_:)",
                "title": "func id<ID>(ID) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/tag(_:includeoptional:)",
                "title": "func tag<V>(V, includeOptional: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/equatable()",
                "title": "func equatable() -> EquatableView<Self>",
                "type": "method"
              },
              {
                "title": "Supporting view types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anyview/init(_:)",
                    "title": "init<V>(V)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/anyview/init(erasing:)",
                    "title": "init<V>(erasing: V)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/anyview",
                "title": "AnyView",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating an empty view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/emptyview/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/emptyview",
                "title": "EmptyView",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating an equatable view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/equatableview/init(content:)",
                    "title": "init(content: Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/equatableview/content",
                    "title": "var content: Content",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/equatableview",
                "title": "EquatableView",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a subscription view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/subscriptionview/init(content:publisher:action:)",
                    "title": "init(content: Content, publisher: PublisherType, action: (PublisherType.Output) -> Void)",
                    "type": "init"
                  },
                  {
                    "title": "Managing the subscription",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/subscriptionview/publisher",
                    "title": "var publisher: PublisherType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/subscriptionview/action",
                    "title": "var action: (PublisherType.Output) -> Void",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/subscriptionview/content",
                    "title": "var content: Content",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/subscriptionview",
                "title": "SubscriptionView",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a tuple view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tupleview/init(_:)",
                    "title": "init(T)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tupleview/value",
                    "title": "var value: T",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/tupleview",
                "title": "TupleView",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/view-fundamentals",
            "title": "View fundamentals",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Hiding views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/opacity(_:)",
                "title": "func opacity(Double) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/hidden()",
                "title": "func hidden() -> some View",
                "type": "method"
              },
              {
                "title": "Hiding system elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/labelshidden()",
                "title": "func labelsHidden() -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/labelsvisibility(_:)",
                "title": "func labelsVisibility(Visibility) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/labelsvisibility",
                "title": "var labelsVisibility: Visibility",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/view/menuindicator(_:)",
                "title": "func menuIndicator(Visibility) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/statusbarhidden(_:)",
                "title": "func statusBarHidden(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/persistentsystemoverlays(_:)",
                "title": "func persistentSystemOverlays(Visibility) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting visibility options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/visibility/automatic",
                    "title": "case automatic",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/visibility/visible",
                    "title": "case visible",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/visibility/hidden",
                    "title": "case hidden",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/visibility",
                "title": "Visibility",
                "type": "enum"
              },
              {
                "title": "Managing view interaction",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/disabled(_:)",
                "title": "func disabled(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/isenabled",
                "title": "var isEnabled: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/view/interactionactivitytrackingtag(_:)",
                "title": "func interactionActivityTrackingTag(String) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/invalidatablecontent(_:)",
                "title": "func invalidatableContent(Bool) -> some View",
                "type": "method"
              },
              {
                "title": "Providing contextual help",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/help(_:)",
                "title": "func help(_:)",
                "type": "method"
              },
              {
                "title": "Adding a glass background",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/glassbackgroundeffect(displaymode:)",
                "title": "func glassBackgroundEffect(displayMode: GlassBackgroundDisplayMode) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/glassbackgroundeffect(in:displaymode:)",
                "title": "func glassBackgroundEffect<S>(in: S, displayMode: GlassBackgroundDisplayMode) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the mode",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/glassbackgrounddisplaymode/always",
                    "title": "case always",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/glassbackgrounddisplaymode/implicit",
                    "title": "case implicit",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/glassbackgrounddisplaymode/never",
                    "title": "case never",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/glassbackgrounddisplaymode",
                "title": "GlassBackgroundDisplayMode",
                "type": "enum"
              },
              {
                "title": "Detecting and requesting the light or dark appearance",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/preferredcolorscheme(_:)",
                "title": "func preferredColorScheme(ColorScheme?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/colorscheme",
                "title": "var colorScheme: ColorScheme",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting color schemes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/colorscheme/light",
                    "title": "case light",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/colorscheme/dark",
                    "title": "case dark",
                    "type": "case"
                  },
                  {
                    "title": "Creating a color scheme",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/colorscheme/init(_:)",
                    "title": "init?(UIUserInterfaceStyle)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/preferredcolorschemekey",
                    "title": "PreferredColorSchemeKey",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/colorscheme",
                "title": "ColorScheme",
                "type": "enum"
              },
              {
                "title": "Getting the color scheme contrast",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/colorschemecontrast",
                "title": "var colorSchemeContrast: ColorSchemeContrast",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting contrast options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/colorschemecontrast/standard",
                    "title": "case standard",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/colorschemecontrast/increased",
                    "title": "case increased",
                    "type": "case"
                  },
                  {
                    "title": "Creating a color scheme contrast",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/colorschemecontrast/init(_:)",
                    "title": "init?(UIAccessibilityContrast)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/colorschemecontrast",
                "title": "ColorSchemeContrast",
                "type": "enum"
              },
              {
                "title": "Configuring passthrough",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/preferredsurroundingseffect(_:)",
                "title": "func preferredSurroundingsEffect(SurroundingsEffect?) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the effect",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/surroundingseffect/systemdark",
                    "title": "static var systemDark: SurroundingsEffect",
                    "type": "property"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/surroundingseffect/dark",
                    "title": "static var dark: SurroundingsEffect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/surroundingseffect/semidark",
                    "title": "static var semiDark: SurroundingsEffect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/surroundingseffect/ultradark",
                    "title": "static var ultraDark: SurroundingsEffect",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/surroundingseffect/colormultiply(_:)",
                    "title": "static func colorMultiply(Color) -> SurroundingsEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/surroundingseffect/dim(intensity:)",
                    "title": "static func dim(intensity: Double) -> SurroundingsEffect",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/surroundingseffect",
                "title": "SurroundingsEffect",
                "type": "struct"
              },
              {
                "title": "Redacting private content",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/watchos-apps/designing-your-app-for-the-always-on-state",
                "title": "Designing your app for the Always On state",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/view/privacysensitive(_:)",
                "title": "func privacySensitive(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/redacted(reason:)",
                "title": "func redacted(reason: RedactionReasons) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/unredacted()",
                "title": "func unredacted() -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/redactionreasons",
                "title": "var redactionReasons: RedactionReasons",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/isscenecaptured",
                "title": "var isSceneCaptured: Bool",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting redaction reasons",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/redactionreasons/invalidated",
                    "title": "static let invalidated: RedactionReasons",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/redactionreasons/placeholder",
                    "title": "static let placeholder: RedactionReasons",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/redactionreasons/privacy",
                    "title": "static let privacy: RedactionReasons",
                    "type": "property"
                  },
                  {
                    "title": "Creating redaction reasons",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/redactionreasons/init(rawvalue:)",
                    "title": "init(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/redactionreasons/rawvalue",
                    "title": "let rawValue: Int",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/redactionreasons",
                "title": "RedactionReasons",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/view-configuration",
            "title": "View configuration",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Styling buttons",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/buttonstyle(_:)",
                "title": "func buttonStyle(_:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Custom button styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/buttonstyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/buttonstyle/configuration",
                    "title": "ButtonStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/buttonstyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/buttonstyle",
                "title": "ButtonStyle",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Configuring a button’s label",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/buttonstyleconfiguration/label-swift.property",
                    "title": "let label: ButtonStyleConfiguration.Label",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/buttonstyleconfiguration/label-swift.struct",
                    "title": "ButtonStyleConfiguration.Label",
                    "type": "struct"
                  },
                  {
                    "title": "Configuring a button’s interaction state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/buttonstyleconfiguration/ispressed",
                    "title": "let isPressed: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Defining the button’s purpose",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/buttonstyleconfiguration/role",
                    "title": "let role: ButtonRole?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/buttonstyleconfiguration",
                "title": "ButtonStyleConfiguration",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in button styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyle/automatic",
                    "title": "static var automatic: DefaultButtonStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyle/accessorybar",
                    "title": "static var accessoryBar: AccessoryBarButtonStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyle/accessorybaraction",
                    "title": "static var accessoryBarAction: AccessoryBarActionButtonStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyle/bordered",
                    "title": "static var bordered: BorderedButtonStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyle/borderedprominent",
                    "title": "static var borderedProminent: BorderedProminentButtonStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyle/borderless",
                    "title": "static var borderless: BorderlessButtonStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyle/card",
                    "title": "static var card: CardButtonStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyle/link",
                    "title": "static var link: LinkButtonStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyle/plain",
                    "title": "static var plain: PlainButtonStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom button styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyle/configuration",
                    "title": "PrimitiveButtonStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the button style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultbuttonstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultbuttonstyle/makebody(configuration:)",
                        "title": "func makeBody(configuration: DefaultButtonStyle.Configuration) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/defaultbuttonstyle",
                    "title": "DefaultButtonStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the button style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/accessorybarbuttonstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/accessorybarbuttonstyle/makebody(configuration:)",
                        "title": "func makeBody(configuration: AccessoryBarButtonStyle.Configuration) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/accessorybarbuttonstyle",
                    "title": "AccessoryBarButtonStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the button style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/accessorybaractionbuttonstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/accessorybaractionbuttonstyle/makebody(configuration:)",
                        "title": "func makeBody(configuration: AccessoryBarActionButtonStyle.Configuration) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/accessorybaractionbuttonstyle",
                    "title": "AccessoryBarActionButtonStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the button style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/borderedbuttonstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/borderedbuttonstyle/makebody(configuration:)",
                        "title": "func makeBody(configuration: BorderedButtonStyle.Configuration) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Deprecated symbols",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/borderedbuttonstyle/init(tint:)",
                        "title": "init(tint: Color)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/borderedbuttonstyle",
                    "title": "BorderedButtonStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the button style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/borderedprominentbuttonstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/borderedprominentbuttonstyle",
                    "title": "BorderedProminentButtonStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the button style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/borderlessbuttonstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/borderlessbuttonstyle/makebody(configuration:)",
                        "title": "func makeBody(configuration: BorderlessButtonStyle.Configuration) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/borderlessbuttonstyle",
                    "title": "BorderlessButtonStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the button style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/cardbuttonstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/cardbuttonstyle/makebody(configuration:)",
                        "title": "func makeBody(configuration: CardButtonStyle.Configuration) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/cardbuttonstyle",
                    "title": "CardButtonStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the button style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/linkbuttonstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/linkbuttonstyle/makebody(configuration:)",
                        "title": "func makeBody(configuration: LinkButtonStyle.Configuration) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/linkbuttonstyle",
                    "title": "LinkButtonStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the button style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/plainbuttonstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/plainbuttonstyle/makebody(configuration:)",
                        "title": "func makeBody(configuration: PlainButtonStyle.Configuration) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/plainbuttonstyle",
                    "title": "PlainButtonStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/primitivebuttonstyle",
                "title": "PrimitiveButtonStyle",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Configuring a button’s label",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyleconfiguration/label-swift.property",
                    "title": "let label: PrimitiveButtonStyleConfiguration.Label",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyleconfiguration/label-swift.struct",
                    "title": "PrimitiveButtonStyleConfiguration.Label",
                    "type": "struct"
                  },
                  {
                    "title": "Initiating a button’s action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyleconfiguration/trigger()",
                    "title": "func trigger()",
                    "type": "method"
                  },
                  {
                    "title": "Defining the button’s purpose",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/primitivebuttonstyleconfiguration/role",
                    "title": "let role: ButtonRole?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/primitivebuttonstyleconfiguration",
                "title": "PrimitiveButtonStyleConfiguration",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/signinwithapplebuttonstyle(_:)",
                "title": "func signInWithAppleButtonStyle(SignInWithAppleButton.Style) -> some View",
                "type": "method"
              },
              {
                "title": "Styling pickers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/pickerstyle(_:)",
                "title": "func pickerStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in picker styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pickerstyle/automatic",
                    "title": "static var automatic: DefaultPickerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pickerstyle/inline",
                    "title": "static var inline: InlinePickerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pickerstyle/menu",
                    "title": "static var menu: MenuPickerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pickerstyle/navigationlink",
                    "title": "static var navigationLink: NavigationLinkPickerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pickerstyle/palette",
                    "title": "static var palette: PalettePickerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pickerstyle/radiogroup",
                    "title": "static var radioGroup: RadioGroupPickerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pickerstyle/segmented",
                    "title": "static var segmented: SegmentedPickerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pickerstyle/wheel",
                    "title": "static var wheel: WheelPickerStyle",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultpickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaultpickerstyle",
                    "title": "DefaultPickerStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/inlinepickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/inlinepickerstyle",
                    "title": "InlinePickerStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/menupickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/menupickerstyle",
                    "title": "MenuPickerStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/navigationlinkpickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/navigationlinkpickerstyle",
                    "title": "NavigationLinkPickerStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/palettepickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/palettepickerstyle",
                    "title": "PalettePickerStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/radiogrouppickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/radiogrouppickerstyle",
                    "title": "RadioGroupPickerStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/segmentedpickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/segmentedpickerstyle",
                    "title": "SegmentedPickerStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/wheelpickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/wheelpickerstyle",
                    "title": "WheelPickerStyle",
                    "type": "struct"
                  },
                  {
                    "title": "Deprecated styles",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/popupbuttonpickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/swiftui/popupbuttonpickerstyle",
                    "title": "PopUpButtonPickerStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/pickerstyle",
                "title": "PickerStyle",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/view/datepickerstyle(_:)",
                "title": "func datePickerStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in date picker styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/datepickerstyle/automatic",
                    "title": "static var automatic: DefaultDatePickerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/datepickerstyle/compact",
                    "title": "static var compact: CompactDatePickerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/datepickerstyle/field",
                    "title": "static var field: FieldDatePickerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/datepickerstyle/graphical",
                    "title": "static var graphical: GraphicalDatePickerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/datepickerstyle/stepperfield",
                    "title": "static var stepperField: StepperFieldDatePickerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/datepickerstyle/wheel",
                    "title": "static var wheel: WheelDatePickerStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom date picker styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/datepickerstyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Establishing the date range",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/datepickerstyleconfiguration/minimumdate",
                        "title": "var minimumDate: Date?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/datepickerstyleconfiguration/maximumdate",
                        "title": "var maximumDate: Date?",
                        "type": "property"
                      },
                      {
                        "title": "Labeling the date picker",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/datepickerstyleconfiguration/label-swift.property",
                        "title": "let label: DatePickerStyleConfiguration.Label",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/datepickerstyleconfiguration/label-swift.struct",
                        "title": "DatePickerStyleConfiguration.Label",
                        "type": "struct"
                      },
                      {
                        "path": "/documentation/swiftui/datepickerstyleconfiguration/displayedcomponents",
                        "title": "var displayedComponents: DatePickerComponents",
                        "type": "property"
                      },
                      {
                        "title": "Selecting the date",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/datepickerstyleconfiguration/selection",
                        "title": "var selection: Date",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/datepickerstyleconfiguration/$selection",
                        "title": "var $selection: Binding<Date>",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/datepickerstyleconfiguration",
                    "title": "DatePickerStyleConfiguration",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/datepickerstyle/configuration",
                    "title": "DatePickerStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/datepickerstyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Suporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the date picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultdatepickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaultdatepickerstyle",
                    "title": "DefaultDatePickerStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the date picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/compactdatepickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/compactdatepickerstyle",
                    "title": "CompactDatePickerStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the date picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/fielddatepickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/fielddatepickerstyle",
                    "title": "FieldDatePickerStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the date picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicaldatepickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/graphicaldatepickerstyle",
                    "title": "GraphicalDatePickerStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the date picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/stepperfielddatepickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/stepperfielddatepickerstyle",
                    "title": "StepperFieldDatePickerStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the date picker style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/wheeldatepickerstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/wheeldatepickerstyle",
                    "title": "WheelDatePickerStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/datepickerstyle",
                "title": "DatePickerStyle",
                "type": "protocol"
              },
              {
                "title": "Styling menus",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/menustyle(_:)",
                "title": "func menuStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in menu styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/menustyle/automatic",
                    "title": "static var automatic: DefaultMenuStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/menustyle/button",
                    "title": "static var button: ButtonMenuStyle",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/menustyle/borderedbutton",
                    "title": "static var borderedButton: BorderedButtonMenuStyle",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/menustyle/borderlessbutton",
                    "title": "static var borderlessButton: BorderlessButtonMenuStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom menu styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/menustyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/menustyle/configuration",
                    "title": "MenuStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/menustyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the menu style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultmenustyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaultmenustyle",
                    "title": "DefaultMenuStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the menu style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/buttonmenustyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/buttonmenustyle",
                    "title": "ButtonMenuStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a bordeless button menu style",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/borderlessbuttonmenustyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/borderlessbuttonmenustyle/init(showsmenuindicator:)",
                        "title": "init(showsMenuIndicator: Bool)",
                        "type": "init"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/swiftui/borderlessbuttonmenustyle",
                    "title": "BorderlessButtonMenuStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a bordered button menu style",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/borderedbuttonmenustyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/swiftui/borderedbuttonmenustyle",
                    "title": "BorderedButtonMenuStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/menustyle",
                "title": "MenuStyle",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Setting the label and content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/menustyleconfiguration/label",
                    "title": "MenuStyleConfiguration.Label",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/menustyleconfiguration/content",
                    "title": "MenuStyleConfiguration.Content",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/menustyleconfiguration",
                "title": "MenuStyleConfiguration",
                "type": "struct"
              },
              {
                "title": "Styling toggles",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/togglestyle(_:)",
                "title": "func toggleStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in toggle styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/togglestyle/automatic",
                    "title": "static var automatic: DefaultToggleStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/togglestyle/button",
                    "title": "static var button: ButtonToggleStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/togglestyle/checkbox",
                    "title": "static var checkbox: CheckboxToggleStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/togglestyle/switch",
                    "title": "static var `switch`: SwitchToggleStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom toggle styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/togglestyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the label view",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/togglestyleconfiguration/label-swift.property",
                        "title": "let label: ToggleStyleConfiguration.Label",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/togglestyleconfiguration/label-swift.struct",
                        "title": "ToggleStyleConfiguration.Label",
                        "type": "struct"
                      },
                      {
                        "title": "Managing the toggle state",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/togglestyleconfiguration/ismixed",
                        "title": "var isMixed: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/togglestyleconfiguration/ison",
                        "title": "var isOn: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/togglestyleconfiguration/$ison",
                        "title": "var $isOn: Binding<Bool>",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/togglestyleconfiguration",
                    "title": "ToggleStyleConfiguration",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/togglestyle/configuration",
                    "title": "ToggleStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/togglestyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the toggle style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaulttogglestyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaulttogglestyle/makebody(configuration:)",
                        "title": "func makeBody(configuration: DefaultToggleStyle.Configuration) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/defaulttogglestyle",
                    "title": "DefaultToggleStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the toggle style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/buttontogglestyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/buttontogglestyle/makebody(configuration:)",
                        "title": "func makeBody(configuration: ButtonToggleStyle.Configuration) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/buttontogglestyle",
                    "title": "ButtonToggleStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the toggle style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/checkboxtogglestyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/checkboxtogglestyle/makebody(configuration:)",
                        "title": "func makeBody(configuration: CheckboxToggleStyle.Configuration) -> some View",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/checkboxtogglestyle",
                    "title": "CheckboxToggleStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the toggle style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/switchtogglestyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/switchtogglestyle/makebody(configuration:)",
                        "title": "func makeBody(configuration: SwitchToggleStyle.Configuration) -> some View",
                        "type": "method"
                      },
                      {
                        "title": "Deprecated initializers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/switchtogglestyle/init(tint:)",
                        "title": "init(tint: Color)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/switchtogglestyle",
                    "title": "SwitchToggleStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/togglestyle",
                "title": "ToggleStyle",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting the label view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/togglestyleconfiguration/label-swift.property",
                    "title": "let label: ToggleStyleConfiguration.Label",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/togglestyleconfiguration/label-swift.struct",
                    "title": "ToggleStyleConfiguration.Label",
                    "type": "struct"
                  },
                  {
                    "title": "Managing the toggle state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/togglestyleconfiguration/ismixed",
                    "title": "var isMixed: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/togglestyleconfiguration/ison",
                    "title": "var isOn: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/togglestyleconfiguration/$ison",
                    "title": "var $isOn: Binding<Bool>",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/togglestyleconfiguration",
                "title": "ToggleStyleConfiguration",
                "type": "struct"
              },
              {
                "title": "Styling indicators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/gaugestyle(_:)",
                "title": "func gaugeStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the automatic style",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyle/automatic",
                    "title": "static var automatic: DefaultGaugeStyle",
                    "type": "property"
                  },
                  {
                    "title": "Getting circular gauge styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyle/circular",
                    "title": "static var circular: CircularGaugeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyle/accessorycircular",
                    "title": "static var accessoryCircular: AccessoryCircularGaugeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyle/accessorycircularcapacity",
                    "title": "static var accessoryCircularCapacity: AccessoryCircularCapacityGaugeStyle",
                    "type": "property"
                  },
                  {
                    "title": "Getting linear gauge styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyle/linear",
                    "title": "static var linear: LinearGaugeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyle/linearcapacity",
                    "title": "static var linearCapacity: LinearCapacityGaugeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyle/accessorylinear",
                    "title": "static var accessoryLinear: AccessoryLinearGaugeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyle/accessorylinearcapacity",
                    "title": "static var accessoryLinearCapacity: AccessoryLinearCapacityGaugeStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom gauge styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyle/configuration",
                    "title": "GaugeStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the gauge style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultgaugestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaultgaugestyle",
                    "title": "DefaultGaugeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the gauge style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/circulargaugestyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/circulargaugestyle/init(tint:)",
                        "title": "init(tint:)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/circulargaugestyle",
                    "title": "CircularGaugeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the gauge style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/accessorycirculargaugestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/accessorycirculargaugestyle",
                    "title": "AccessoryCircularGaugeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the gauge style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/accessorycircularcapacitygaugestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/accessorycircularcapacitygaugestyle",
                    "title": "AccessoryCircularCapacityGaugeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the gauge style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/lineargaugestyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Deprecated initializers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/lineargaugestyle/init(tint:)",
                        "title": "init(tint:)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/lineargaugestyle",
                    "title": "LinearGaugeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the gauge style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/linearcapacitygaugestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/linearcapacitygaugestyle",
                    "title": "LinearCapacityGaugeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the gauge style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/accessorylineargaugestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/accessorylineargaugestyle",
                    "title": "AccessoryLinearGaugeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the gauge style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/accessorylinearcapacitygaugestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/accessorylinearcapacitygaugestyle",
                    "title": "AccessoryLinearCapacityGaugeStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/gaugestyle",
                "title": "GaugeStyle",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Describing the purpose of the gauge",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyleconfiguration/label-swift.property",
                    "title": "var label: GaugeStyleConfiguration.Label",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyleconfiguration/label-swift.struct",
                    "title": "GaugeStyleConfiguration.Label",
                    "type": "struct"
                  },
                  {
                    "title": "Reporting the range",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyleconfiguration/minimumvaluelabel-swift.property",
                    "title": "var minimumValueLabel: GaugeStyleConfiguration.MinimumValueLabel?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyleconfiguration/minimumvaluelabel-swift.struct",
                    "title": "GaugeStyleConfiguration.MinimumValueLabel",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyleconfiguration/maximumvaluelabel-swift.property",
                    "title": "var maximumValueLabel: GaugeStyleConfiguration.MaximumValueLabel?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyleconfiguration/maximumvaluelabel-swift.struct",
                    "title": "GaugeStyleConfiguration.MaximumValueLabel",
                    "type": "struct"
                  },
                  {
                    "title": "Setting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyleconfiguration/value",
                    "title": "var value: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyleconfiguration/currentvaluelabel-swift.property",
                    "title": "var currentValueLabel: GaugeStyleConfiguration.CurrentValueLabel?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyleconfiguration/currentvaluelabel-swift.struct",
                    "title": "GaugeStyleConfiguration.CurrentValueLabel",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/gaugestyleconfiguration/markedvaluelabel",
                    "title": "GaugeStyleConfiguration.MarkedValueLabel",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/gaugestyleconfiguration",
                "title": "GaugeStyleConfiguration",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/progressviewstyle(_:)",
                "title": "func progressViewStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in progress view styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/progressviewstyle/automatic",
                    "title": "static var automatic: DefaultProgressViewStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/progressviewstyle/circular",
                    "title": "static var circular: CircularProgressViewStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/progressviewstyle/linear",
                    "title": "static var linear: LinearProgressViewStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom progress view styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/progressviewstyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/progressviewstyle/configuration",
                    "title": "ProgressViewStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/progressviewstyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the progress view style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultprogressviewstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaultprogressviewstyle",
                    "title": "DefaultProgressViewStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the progress view style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/circularprogressviewstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Deprecated initializers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/circularprogressviewstyle/init(tint:)",
                        "title": "init(tint: Color)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/circularprogressviewstyle",
                    "title": "CircularProgressViewStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the progress view style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/linearprogressviewstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Deprecated initializers",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/linearprogressviewstyle/init(tint:)",
                        "title": "init(tint: Color)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/linearprogressviewstyle",
                    "title": "LinearProgressViewStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/progressviewstyle",
                "title": "ProgressViewStyle",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Configuring the label",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/progressviewstyleconfiguration/label-swift.property",
                    "title": "var label: ProgressViewStyleConfiguration.Label?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/progressviewstyleconfiguration/label-swift.struct",
                    "title": "ProgressViewStyleConfiguration.Label",
                    "type": "struct"
                  },
                  {
                    "title": "Configuring the current value label",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/progressviewstyleconfiguration/currentvaluelabel-swift.property",
                    "title": "var currentValueLabel: ProgressViewStyleConfiguration.CurrentValueLabel?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/progressviewstyleconfiguration/currentvaluelabel-swift.struct",
                    "title": "ProgressViewStyleConfiguration.CurrentValueLabel",
                    "type": "struct"
                  },
                  {
                    "title": "Configuring progress completion",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/progressviewstyleconfiguration/fractioncompleted",
                    "title": "let fractionCompleted: Double?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/progressviewstyleconfiguration",
                "title": "ProgressViewStyleConfiguration",
                "type": "struct"
              },
              {
                "title": "Styling views that display text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/labelstyle(_:)",
                "title": "func labelStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in label styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/labelstyle/automatic",
                    "title": "static var automatic: DefaultLabelStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/labelstyle/icononly",
                    "title": "static var iconOnly: IconOnlyLabelStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/labelstyle/titleandicon",
                    "title": "static var titleAndIcon: TitleAndIconLabelStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/labelstyle/titleonly",
                    "title": "static var titleOnly: TitleOnlyLabelStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom label styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/labelstyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/labelstyle/configuration",
                    "title": "LabelStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/labelstyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the label style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultlabelstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaultlabelstyle",
                    "title": "DefaultLabelStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the label style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/icononlylabelstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/icononlylabelstyle",
                    "title": "IconOnlyLabelStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the label style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/titleandiconlabelstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/titleandiconlabelstyle",
                    "title": "TitleAndIconLabelStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the label style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/titleonlylabelstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/titleonlylabelstyle",
                    "title": "TitleOnlyLabelStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/labelstyle",
                "title": "LabelStyle",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Setting the icon",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/labelstyleconfiguration/icon-swift.property",
                    "title": "var icon: LabelStyleConfiguration.Icon",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/labelstyleconfiguration/icon-swift.struct",
                    "title": "LabelStyleConfiguration.Icon",
                    "type": "struct"
                  },
                  {
                    "title": "Setting the title",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/labelstyleconfiguration/title-swift.property",
                    "title": "var title: LabelStyleConfiguration.Title",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/labelstyleconfiguration/title-swift.struct",
                    "title": "LabelStyleConfiguration.Title",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/labelstyleconfiguration",
                "title": "LabelStyleConfiguration",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/textfieldstyle(_:)",
                "title": "func textFieldStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in text field styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textfieldstyle/automatic",
                    "title": "static var automatic: DefaultTextFieldStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/textfieldstyle/plain",
                    "title": "static var plain: PlainTextFieldStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/textfieldstyle/roundedborder",
                    "title": "static var roundedBorder: RoundedBorderTextFieldStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/textfieldstyle/squareborder",
                    "title": "static var squareBorder: SquareBorderTextFieldStyle",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the text field style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaulttextfieldstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaulttextfieldstyle",
                    "title": "DefaultTextFieldStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the text field style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/plaintextfieldstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/plaintextfieldstyle",
                    "title": "PlainTextFieldStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the text field style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/roundedbordertextfieldstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/roundedbordertextfieldstyle",
                    "title": "RoundedBorderTextFieldStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the text field style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/squarebordertextfieldstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/squarebordertextfieldstyle",
                    "title": "SquareBorderTextFieldStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/textfieldstyle",
                "title": "TextFieldStyle",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/view/texteditorstyle(_:)",
                "title": "func textEditorStyle(some TextEditorStyle) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/texteditorstyle/automatic",
                    "title": "static var automatic: AutomaticTextEditorStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/texteditorstyle/plain",
                    "title": "static var plain: PlainTextEditorStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/texteditorstyle/roundedborder",
                    "title": "static var roundedBorder: RoundedBorderTextEditorStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/texteditorstyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/texteditorstyle/configuration",
                    "title": "TextEditorStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/texteditorstyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the text editor style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/automatictexteditorstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/automatictexteditorstyle",
                    "title": "AutomaticTextEditorStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the text editor style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/plaintexteditorstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/plaintexteditorstyle",
                    "title": "PlainTextEditorStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the text editor style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/roundedbordertexteditorstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/roundedbordertexteditorstyle",
                    "title": "RoundedBorderTextEditorStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/texteditorstyle",
                "title": "TextEditorStyle",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/texteditorstyleconfiguration",
                "title": "TextEditorStyleConfiguration",
                "type": "struct"
              },
              {
                "title": "Styling collection views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/liststyle(_:)",
                "title": "func listStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in list styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/liststyle/automatic",
                    "title": "static var automatic: DefaultListStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/liststyle/bordered",
                    "title": "static var bordered: BorderedListStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/liststyle/carousel",
                    "title": "static var carousel: CarouselListStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/liststyle/elliptical",
                    "title": "static var elliptical: EllipticalListStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/liststyle/grouped",
                    "title": "static var grouped: GroupedListStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/liststyle/inset",
                    "title": "static var inset: InsetListStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/liststyle/insetgrouped",
                    "title": "static var insetGrouped: InsetGroupedListStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/liststyle/plain",
                    "title": "static var plain: PlainListStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/liststyle/sidebar",
                    "title": "static var sidebar: SidebarListStyle",
                    "type": "property"
                  },
                  {
                    "title": "Deprecated styles",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/liststyle/bordered(alternatesrowbackgrounds:)",
                    "title": "static func bordered(alternatesRowBackgrounds: Bool) -> BorderedListStyle",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/liststyle/inset(alternatesrowbackgrounds:)",
                    "title": "static func inset(alternatesRowBackgrounds: Bool) -> InsetListStyle",
                    "type": "method"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the list style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultliststyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaultliststyle",
                    "title": "DefaultListStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the list style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/borderedliststyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/borderedliststyle/init(alternatesrowbackgrounds:)",
                        "title": "init(alternatesRowBackgrounds: Bool)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/borderedliststyle",
                    "title": "BorderedListStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the list style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/carouselliststyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/carouselliststyle",
                    "title": "CarouselListStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the list style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/ellipticalliststyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/ellipticalliststyle",
                    "title": "EllipticalListStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the list style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/groupedliststyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/groupedliststyle",
                    "title": "GroupedListStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the list style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/insetliststyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/insetliststyle/init(alternatesrowbackgrounds:)",
                        "title": "init(alternatesRowBackgrounds: Bool)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/insetliststyle",
                    "title": "InsetListStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the list style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/insetgroupedliststyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/insetgroupedliststyle",
                    "title": "InsetGroupedListStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the list style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/plainliststyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/plainliststyle",
                    "title": "PlainListStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the list style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/sidebarliststyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/sidebarliststyle",
                    "title": "SidebarListStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/liststyle",
                "title": "ListStyle",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/view/tablestyle(_:)",
                "title": "func tableStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in table styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablestyle/automatic",
                    "title": "static var automatic: AutomaticTableStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablestyle/inset",
                    "title": "static var inset: InsetTableStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablestyle/bordered",
                    "title": "static var bordered: BorderedTableStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom table styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablestyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablestyle/configuration",
                    "title": "TableStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/tablestyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Deprecated styles",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/tablestyle/inset(alternatesrowbackgrounds:)",
                    "title": "static func inset(alternatesRowBackgrounds: Bool) -> InsetTableStyle",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/tablestyle/bordered(alternatesrowbackgrounds:)",
                    "title": "static func bordered(alternatesRowBackgrounds: Bool) -> BorderedTableStyle",
                    "type": "method"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/automatictablestyle",
                    "title": "AutomaticTableStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the table style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/insettablestyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/insettablestyle/init(alternatesrowbackgrounds:)",
                        "title": "init(alternatesRowBackgrounds: Bool)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/insettablestyle",
                    "title": "InsetTableStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the table style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/borderedtablestyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/borderedtablestyle/init(alternatesrowbackgrounds:)",
                        "title": "init(alternatesRowBackgrounds: Bool)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/borderedtablestyle",
                    "title": "BorderedTableStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/tablestyle",
                "title": "TableStyle",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/tablestyleconfiguration",
                "title": "TableStyleConfiguration",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/disclosuregroupstyle(_:)",
                "title": "func disclosureGroupStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/disclosuregroupstyle/automatic",
                    "title": "static var automatic: AutomaticDisclosureGroupStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom disclosure group styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/disclosuregroupstyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Configuring the label",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/disclosuregroupstyleconfiguration/label-swift.property",
                        "title": "let label: DisclosureGroupStyleConfiguration.Label",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/disclosuregroupstyleconfiguration/label-swift.struct",
                        "title": "DisclosureGroupStyleConfiguration.Label",
                        "type": "struct"
                      },
                      {
                        "title": "Configuring the content",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/disclosuregroupstyleconfiguration/content-swift.property",
                        "title": "let content: DisclosureGroupStyleConfiguration.Content",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/disclosuregroupstyleconfiguration/content-swift.struct",
                        "title": "DisclosureGroupStyleConfiguration.Content",
                        "type": "struct"
                      },
                      {
                        "title": "Managing disclosure",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/disclosuregroupstyleconfiguration/isexpanded",
                        "title": "var isExpanded: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/disclosuregroupstyleconfiguration/$isexpanded",
                        "title": "var $isExpanded: Binding<Bool>",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/disclosuregroupstyleconfiguration",
                    "title": "DisclosureGroupStyleConfiguration",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/disclosuregroupstyle/configuration",
                    "title": "DisclosureGroupStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/disclosuregroupstyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the disclosure group style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/automaticdisclosuregroupstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/automaticdisclosuregroupstyle",
                    "title": "AutomaticDisclosureGroupStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/disclosuregroupstyle",
                "title": "DisclosureGroupStyle",
                "type": "protocol"
              },
              {
                "title": "Styling navigation views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/navigationsplitviewstyle(_:)",
                "title": "func navigationSplitViewStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating built-in styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewstyle/automatic",
                    "title": "static var automatic: AutomaticNavigationSplitViewStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewstyle/balanced",
                    "title": "static var balanced: BalancedNavigationSplitViewStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewstyle/prominentdetail",
                    "title": "static var prominentDetail: ProminentDetailNavigationSplitViewStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewstyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewstyle/configuration",
                    "title": "NavigationSplitViewStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewstyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the navigation split view style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/automaticnavigationsplitviewstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/automaticnavigationsplitviewstyle",
                    "title": "AutomaticNavigationSplitViewStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the navigation split view style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/balancednavigationsplitviewstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/balancednavigationsplitviewstyle",
                    "title": "BalancedNavigationSplitViewStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the navigation split view style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/prominentdetailnavigationsplitviewstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/prominentdetailnavigationsplitviewstyle",
                    "title": "ProminentDetailNavigationSplitViewStyle",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/navigationsplitviewstyleconfiguration",
                    "title": "NavigationSplitViewStyleConfiguration",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/navigationsplitviewstyle",
                "title": "NavigationSplitViewStyle",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/view/tabviewstyle(_:)",
                "title": "func tabViewStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in tab view styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabviewstyle/automatic",
                    "title": "static var automatic: DefaultTabViewStyle",
                    "type": "property"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/tabviewstyle/carousel",
                    "title": "static var carousel: CarouselTabViewStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabviewstyle/page",
                    "title": "static var page: PageTabViewStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabviewstyle/page(indexdisplaymode:)",
                    "title": "static func page(indexDisplayMode: PageTabViewStyle.IndexDisplayMode) -> PageTabViewStyle",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tabviewstyle/verticalpage",
                    "title": "static var verticalPage: VerticalPageTabViewStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabviewstyle/verticalpage(transitionstyle:)",
                    "title": "static func verticalPage(transitionStyle: VerticalPageTabViewStyle.TransitionStyle) -> VerticalPageTabViewStyle",
                    "type": "method"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the tab view style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaulttabviewstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaulttabviewstyle",
                    "title": "DefaultTabViewStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/sidebaradaptabletabviewstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/sidebaradaptabletabviewstyle",
                    "title": "SidebarAdaptableTabViewStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/tabbaronlytabviewstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/tabbaronlytabviewstyle",
                    "title": "TabBarOnlyTabViewStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/groupedtabviewstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/groupedtabviewstyle",
                    "title": "GroupedTabViewStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a page tab view style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/pagetabviewstyle/init(indexdisplaymode:)",
                        "title": "init(indexDisplayMode: PageTabViewStyle.IndexDisplayMode)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Getting the modes",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/pagetabviewstyle/indexdisplaymode/always",
                            "title": "static let always: PageTabViewStyle.IndexDisplayMode",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/pagetabviewstyle/indexdisplaymode/automatic",
                            "title": "static let automatic: PageTabViewStyle.IndexDisplayMode",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/pagetabviewstyle/indexdisplaymode/never",
                            "title": "static let never: PageTabViewStyle.IndexDisplayMode",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/pagetabviewstyle/indexdisplaymode",
                        "title": "PageTabViewStyle.IndexDisplayMode",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/swiftui/pagetabviewstyle",
                    "title": "PageTabViewStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the tab view style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/verticalpagetabviewstyle/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/verticalpagetabviewstyle/init(transitionstyle:)",
                        "title": "init(transitionStyle: VerticalPageTabViewStyle.TransitionStyle)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Getting the transition styles",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/verticalpagetabviewstyle/transitionstyle/automatic",
                            "title": "static let automatic: VerticalPageTabViewStyle.TransitionStyle",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/verticalpagetabviewstyle/transitionstyle/blur",
                            "title": "static let blur: VerticalPageTabViewStyle.TransitionStyle",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/verticalpagetabviewstyle/transitionstyle/identity",
                            "title": "static let identity: VerticalPageTabViewStyle.TransitionStyle",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/verticalpagetabviewstyle/transitionstyle",
                        "title": "VerticalPageTabViewStyle.TransitionStyle",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/swiftui/verticalpagetabviewstyle",
                    "title": "VerticalPageTabViewStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the tab view style",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/carouseltabviewstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/swiftui/carouseltabviewstyle",
                    "title": "CarouselTabViewStyle",
                    "type": "struct"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tabviewstyle/grouped",
                    "title": "static var grouped: GroupedTabViewStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabviewstyle/sidebaradaptable",
                    "title": "static var sidebarAdaptable: SidebarAdaptableTabViewStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tabviewstyle/tabbaronly",
                    "title": "static var tabBarOnly: TabBarOnlyTabViewStyle",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/tabviewstyle",
                "title": "TabViewStyle",
                "type": "protocol"
              },
              {
                "title": "Styling groups",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/controlgroupstyle(_:)",
                "title": "func controlGroupStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in control group styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroupstyle/automatic",
                    "title": "static var automatic: AutomaticControlGroupStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroupstyle/compactmenu",
                    "title": "static var compactMenu: CompactMenuControlGroupStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroupstyle/menu",
                    "title": "static var menu: MenuControlGroupStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroupstyle/navigation",
                    "title": "static var navigation: NavigationControlGroupStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroupstyle/palette",
                    "title": "static var palette: PaletteControlGroupStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom control group styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroupstyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroupstyle/configuration",
                    "title": "ControlGroupStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroupstyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/automaticcontrolgroupstyle",
                    "title": "AutomaticControlGroupStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the control group style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/compactmenucontrolgroupstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/compactmenucontrolgroupstyle",
                    "title": "CompactMenuControlGroupStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the control group style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/menucontrolgroupstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/menucontrolgroupstyle",
                    "title": "MenuControlGroupStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the control group style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/navigationcontrolgroupstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/navigationcontrolgroupstyle",
                    "title": "NavigationControlGroupStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the control group style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/palettecontrolgroupstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/palettecontrolgroupstyle",
                    "title": "PaletteControlGroupStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/controlgroupstyle",
                "title": "ControlGroupStyle",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Configuring the label",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroupstyleconfiguration/label-swift.property",
                    "title": "let label: ControlGroupStyleConfiguration.Label",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroupstyleconfiguration/label-swift.struct",
                    "title": "ControlGroupStyleConfiguration.Label",
                    "type": "struct"
                  },
                  {
                    "title": "Configuring the content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroupstyleconfiguration/content-swift.property",
                    "title": "let content: ControlGroupStyleConfiguration.Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroupstyleconfiguration/content-swift.struct",
                    "title": "ControlGroupStyleConfiguration.Content",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/controlgroupstyleconfiguration",
                "title": "ControlGroupStyleConfiguration",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/formstyle(_:)",
                "title": "func formStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in form styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/formstyle/automatic",
                    "title": "static var automatic: AutomaticFormStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/formstyle/columns",
                    "title": "static var columns: ColumnsFormStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/formstyle/grouped",
                    "title": "static var grouped: GroupedFormStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom form styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/formstyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/formstyle/configuration",
                    "title": "FormStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/formstyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the form style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/automaticformstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/automaticformstyle",
                    "title": "AutomaticFormStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the form style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/columnsformstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/columnsformstyle",
                    "title": "ColumnsFormStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the form style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/groupedformstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/groupedformstyle",
                    "title": "GroupedFormStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/formstyle",
                "title": "FormStyle",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting configuration content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/formstyleconfiguration/content-swift.property",
                    "title": "let content: FormStyleConfiguration.Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/formstyleconfiguration/content-swift.struct",
                    "title": "FormStyleConfiguration.Content",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/formstyleconfiguration",
                "title": "FormStyleConfiguration",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/groupboxstyle(_:)",
                "title": "func groupBoxStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in group box styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/groupboxstyle/automatic",
                    "title": "static var automatic: DefaultGroupBoxStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom group box styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/groupboxstyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/groupboxstyle/configuration",
                    "title": "GroupBoxStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/groupboxstyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the group box style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/defaultgroupboxstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/defaultgroupboxstyle",
                    "title": "DefaultGroupBoxStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/groupboxstyle",
                "title": "GroupBoxStyle",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Configuring the label",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/groupboxstyleconfiguration/label-swift.property",
                    "title": "let label: GroupBoxStyleConfiguration.Label",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/groupboxstyleconfiguration/label-swift.struct",
                    "title": "GroupBoxStyleConfiguration.Label",
                    "type": "struct"
                  },
                  {
                    "title": "Configuring the content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/groupboxstyleconfiguration/content-swift.property",
                    "title": "let content: GroupBoxStyleConfiguration.Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/groupboxstyleconfiguration/content-swift.struct",
                    "title": "GroupBoxStyleConfiguration.Content",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/groupboxstyleconfiguration",
                "title": "GroupBoxStyleConfiguration",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/indexviewstyle(_:)",
                "title": "func indexViewStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in index view styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/indexviewstyle/page",
                    "title": "static var page: PageIndexViewStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/indexviewstyle/page(backgrounddisplaymode:)",
                    "title": "static func page(backgroundDisplayMode: PageIndexViewStyle.BackgroundDisplayMode) -> PageIndexViewStyle",
                    "type": "method"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the control group style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/pageindexviewstyle/init(backgrounddisplaymode:)",
                        "title": "init(backgroundDisplayMode: PageIndexViewStyle.BackgroundDisplayMode)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Getting the display modes",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/pageindexviewstyle/backgrounddisplaymode/automatic",
                            "title": "static let automatic: PageIndexViewStyle.BackgroundDisplayMode",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/pageindexviewstyle/backgrounddisplaymode/always",
                            "title": "static let always: PageIndexViewStyle.BackgroundDisplayMode",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/pageindexviewstyle/backgrounddisplaymode/interactive",
                            "title": "static let interactive: PageIndexViewStyle.BackgroundDisplayMode",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/pageindexviewstyle/backgrounddisplaymode/never",
                            "title": "static let never: PageIndexViewStyle.BackgroundDisplayMode",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/pageindexviewstyle/backgrounddisplaymode",
                        "title": "PageIndexViewStyle.BackgroundDisplayMode",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/swiftui/pageindexviewstyle",
                    "title": "PageIndexViewStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/indexviewstyle",
                "title": "IndexViewStyle",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/view/labeledcontentstyle(_:)",
                "title": "func labeledContentStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in labeled content styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontentstyle/automatic",
                    "title": "static var automatic: AutomaticLabeledContentStyle",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom labeled content styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontentstyle/makebody(configuration:)",
                    "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontentstyle/configuration",
                    "title": "LabeledContentStyle.Configuration",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontentstyle/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the labeled content style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/automaticlabeledcontentstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/automaticlabeledcontentstyle",
                    "title": "AutomaticLabeledContentStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/labeledcontentstyle",
                "title": "LabeledContentStyle",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Configuring the label",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontentstyleconfiguration/label-swift.property",
                    "title": "let label: LabeledContentStyleConfiguration.Label",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontentstyleconfiguration/label-swift.struct",
                    "title": "LabeledContentStyleConfiguration.Label",
                    "type": "struct"
                  },
                  {
                    "title": "Configuring the content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontentstyleconfiguration/content-swift.property",
                    "title": "let content: LabeledContentStyleConfiguration.Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontentstyleconfiguration/content-swift.struct",
                    "title": "LabeledContentStyleConfiguration.Content",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/labeledcontentstyleconfiguration",
                "title": "LabeledContentStyleConfiguration",
                "type": "struct"
              },
              {
                "title": "Styling windows from a view inside the window",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/presentedwindowstyle(_:)",
                "title": "func presentedWindowStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/presentedwindowtoolbarstyle(_:)",
                "title": "func presentedWindowToolbarStyle<S>(S) -> some View",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/view-styles",
            "title": "View styles",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Adding state-based animation to an action",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/withanimation(_:_:)",
                "title": "func withAnimation<Result>(Animation?, () throws -> Result) rethrows -> Result",
                "type": "func"
              },
              {
                "path": "/documentation/swiftui/withanimation(_:completioncriteria:_:completion:)",
                "title": "func withAnimation<Result>(Animation?, completionCriteria: AnimationCompletionCriteria, () throws -> Result, completion: () -> Void) rethrows -> Result",
                "type": "func"
              },
              {
                "children": [
                  {
                    "title": "Getting the completion criteria",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animationcompletioncriteria/logicallycomplete",
                    "title": "static let logicallyComplete: AnimationCompletionCriteria",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animationcompletioncriteria/removed",
                    "title": "static let removed: AnimationCompletionCriteria",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/animationcompletioncriteria",
                "title": "AnimationCompletionCriteria",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the default animation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animation/default",
                    "title": "static let `default`: Animation",
                    "type": "property"
                  },
                  {
                    "title": "Getting linear animations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animation/linear",
                    "title": "static var linear: Animation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animation/linear(duration:)",
                    "title": "static func linear(duration: TimeInterval) -> Animation",
                    "type": "method"
                  },
                  {
                    "title": "Getting eased animations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animation/easein",
                    "title": "static var easeIn: Animation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animation/easein(duration:)",
                    "title": "static func easeIn(duration: TimeInterval) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/easeout",
                    "title": "static var easeOut: Animation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animation/easeout(duration:)",
                    "title": "static func easeOut(duration: TimeInterval) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/easeinout",
                    "title": "static var easeInOut: Animation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animation/easeinout(duration:)",
                    "title": "static func easeInOut(duration: TimeInterval) -> Animation",
                    "type": "method"
                  },
                  {
                    "title": "Getting built-in spring animations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animation/bouncy",
                    "title": "static var bouncy: Animation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animation/bouncy(duration:extrabounce:)",
                    "title": "static func bouncy(duration: TimeInterval, extraBounce: Double) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/smooth",
                    "title": "static var smooth: Animation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animation/smooth(duration:extrabounce:)",
                    "title": "static func smooth(duration: TimeInterval, extraBounce: Double) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/snappy",
                    "title": "static var snappy: Animation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animation/snappy(duration:extrabounce:)",
                    "title": "static func snappy(duration: TimeInterval, extraBounce: Double) -> Animation",
                    "type": "method"
                  },
                  {
                    "title": "Customizing spring animations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animation/spring",
                    "title": "static var spring: Animation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animation/spring(_:blendduration:)",
                    "title": "static func spring(Spring, blendDuration: TimeInterval) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/spring(duration:bounce:blendduration:)",
                    "title": "static func spring(duration: TimeInterval, bounce: Double, blendDuration: Double) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/spring(response:dampingfraction:blendduration:)",
                    "title": "static func spring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/interactivespring",
                    "title": "static var interactiveSpring: Animation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animation/interactivespring(response:dampingfraction:blendduration:)",
                    "title": "static func interactiveSpring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/interpolatingspring",
                    "title": "static var interpolatingSpring: Animation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animation/interpolatingspring(_:initialvelocity:)",
                    "title": "static func interpolatingSpring(Spring, initialVelocity: Double) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/interpolatingspring(duration:bounce:initialvelocity:)",
                    "title": "static func interpolatingSpring(duration: TimeInterval, bounce: Double, initialVelocity: Double) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/interpolatingspring(mass:stiffness:damping:initialvelocity:)",
                    "title": "static func interpolatingSpring(mass: Double, stiffness: Double, damping: Double, initialVelocity: Double) -> Animation",
                    "type": "method"
                  },
                  {
                    "title": "Creating custom animations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animation/init(_:)",
                    "title": "init<A>(A)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/animation/timingcurve(_:duration:)",
                    "title": "static func timingCurve(UnitCurve, duration: TimeInterval) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/timingcurve(_:_:_:_:duration:)",
                    "title": "static func timingCurve(Double, Double, Double, Double, duration: TimeInterval) -> Animation",
                    "type": "method"
                  },
                  {
                    "title": "Configuring an animation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animation/delay(_:)",
                    "title": "func delay(TimeInterval) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/repeatcount(_:autoreverses:)",
                    "title": "func repeatCount(Int, autoreverses: Bool) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/repeatforever(autoreverses:)",
                    "title": "func repeatForever(autoreverses: Bool) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/speed(_:)",
                    "title": "func speed(Double) -> Animation",
                    "type": "method"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animation/base",
                    "title": "var base: any CustomAnimation",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animation/animate(value:time:context:)",
                    "title": "func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/logicallycomplete(after:)",
                    "title": "func logicallyComplete(after: TimeInterval) -> Animation",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/shouldmerge(previous:value:time:context:)",
                    "title": "func shouldMerge<V>(previous: Animation, value: V, time: TimeInterval, context: inout AnimationContext<V>) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/animation/velocity(value:time:context:)",
                    "title": "func velocity<V>(value: V, time: TimeInterval, context: AnimationContext<V>) -> V?",
                    "type": "method"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animation/interactivespring(duration:extrabounce:blendduration:)",
                    "title": "static func interactiveSpring(duration: TimeInterval, extraBounce: Double, blendDuration: TimeInterval) -> Animation",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/animation",
                "title": "Animation",
                "type": "struct"
              },
              {
                "title": "Adding state-based animation to a view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/animation(_:)",
                "title": "func animation(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/animation(_:value:)",
                "title": "func animation<V>(Animation?, value: V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/animation(_:body:)",
                "title": "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                "type": "method"
              },
              {
                "title": "Creating phase-based animation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/controlling-the-timing-and-movements-of-your-animations",
                "title": "Controlling the timing and movements of your animations",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/view/phaseanimator(_:content:animation:)",
                "title": "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/phaseanimator(_:trigger:content:animation:)",
                "title": "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a phase animator",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/phaseanimator/init(_:content:animation:)",
                    "title": "init(some Sequence<Phase>, content: (Phase) -> Content, animation: (Phase) -> Animation?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/phaseanimator/init(_:trigger:content:animation:)",
                    "title": "init(some Sequence<Phase>, trigger: some Equatable, content: (Phase) -> Content, animation: (Phase) -> Animation?)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/phaseanimator",
                "title": "PhaseAnimator",
                "type": "struct"
              },
              {
                "title": "Creating keyframe-based animation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                "title": "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                "title": "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a phase animator",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyframeanimator/init(initialvalue:repeating:content:keyframes:)",
                    "title": "init(initialValue: Value, repeating: Bool, content: (Value) -> Content, keyframes: (Value) -> KeyframePath)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/keyframeanimator/init(initialvalue:trigger:content:keyframes:)",
                    "title": "init(initialValue: Value, trigger: some Equatable, content: (Value) -> Content, keyframes: (Value) -> KeyframePath)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/keyframeanimator",
                "title": "KeyframeAnimator",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a keyframe",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyframes/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyframes/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "path": "/documentation/swiftui/keyframes/value",
                    "title": "Value",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/keyframes",
                "title": "Keyframes",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating a keyframe timeline",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetimeline/init(initialvalue:content:)",
                    "title": "init(initialValue: Value, content: () -> some Keyframes<Value>)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the duration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetimeline/duration",
                    "title": "var duration: TimeInterval",
                    "type": "property"
                  },
                  {
                    "title": "Getting an interpolated value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetimeline/value(time:)",
                    "title": "func value(time: Double) -> Value",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetimeline/value(progress:)",
                    "title": "func value(progress: Double) -> Value",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/keyframetimeline",
                "title": "KeyframeTimeline",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a keyframe track",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrack/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrack/init(_:content:)",
                    "title": "init(WritableKeyPath<Root, Value>, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/keyframetrack",
                "title": "KeyframeTrack",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Building keyframe track content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrackcontentbuilder/buildarray(_:)",
                    "title": "static func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrackcontentbuilder/buildblock()",
                    "title": "static func buildBlock() -> some KeyframeTrackContent<Value>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrackcontentbuilder/buildeither(first:)",
                    "title": "static func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrackcontentbuilder/buildeither(second:)",
                    "title": "static func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrackcontentbuilder/buildexpression(_:)",
                    "title": "static func buildExpression<K>(K) -> K",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrackcontentbuilder/buildpartialblock(accumulated:next:)",
                    "title": "static func buildPartialBlock(accumulated: some KeyframeTrackContent<Value>, next: some KeyframeTrackContent<Value>) -> some KeyframeTrackContent<Value>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrackcontentbuilder/buildpartialblock(first:)",
                    "title": "static func buildPartialBlock<K>(first: K) -> K",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrackcontentbuilder/conditional",
                    "title": "KeyframeTrackContentBuilder.Conditional",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/keyframetrackcontentbuilder",
                "title": "KeyframeTrackContentBuilder",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Building keyframes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyframesbuilder/buildarray(_:)",
                    "title": "static func buildArray([some KeyframeTrackContent<Value>]) -> some KeyframeTrackContent<Value>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframesbuilder/buildblock()",
                    "title": "static buildBlock()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframesbuilder/buildeither(first:)",
                    "title": "static func buildEither<First, Second>(first: First) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframesbuilder/buildeither(second:)",
                    "title": "static func buildEither<First, Second>(second: Second) -> KeyframeTrackContentBuilder<Value>.Conditional<Value, First, Second>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframesbuilder/buildexpression(_:)",
                    "title": "static buildExpression(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframesbuilder/buildfinalresult(_:)",
                    "title": "static buildFinalResult(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframesbuilder/buildpartialblock(accumulated:next:)",
                    "title": "static buildPartialBlock(accumulated:next:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/keyframesbuilder/buildpartialblock(first:)",
                    "title": "static buildPartialBlock(first:)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/keyframesbuilder",
                "title": "KeyframesBuilder",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a keyframe",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrackcontent/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrackcontent/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "path": "/documentation/swiftui/keyframetrackcontent/value",
                    "title": "Value",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/keyframetrackcontent",
                "title": "KeyframeTrackContent",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating the keyframe",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/cubickeyframe/init(_:duration:startvelocity:endvelocity:)",
                    "title": "init(Value, duration: TimeInterval, startVelocity: Value?, endVelocity: Value?)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/cubickeyframe",
                "title": "CubicKeyframe",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the keyframe",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/linearkeyframe/init(_:duration:timingcurve:)",
                    "title": "init(Value, duration: TimeInterval, timingCurve: UnitCurve)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/linearkeyframe",
                "title": "LinearKeyframe",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the keyframe",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/movekeyframe/init(_:)",
                    "title": "init(Value)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/movekeyframe",
                "title": "MoveKeyframe",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the keyframe",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/springkeyframe/init(_:duration:spring:startvelocity:)",
                    "title": "init(Value, duration: TimeInterval?, spring: Spring, startVelocity: Value?)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/springkeyframe",
                "title": "SpringKeyframe",
                "type": "struct"
              },
              {
                "title": "Creating custom animations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Animating a value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/customanimation/animate(value:time:context:)",
                    "title": "func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V?",
                    "type": "method"
                  },
                  {
                    "title": "Getting the velocity",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/customanimation/velocity(value:time:context:)",
                    "title": "func velocity<V>(value: V, time: TimeInterval, context: AnimationContext<V>) -> V?",
                    "type": "method"
                  },
                  {
                    "title": "Determining whether to merge",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/customanimation/shouldmerge(previous:value:time:context:)",
                    "title": "func shouldMerge<V>(previous: Animation, value: V, time: TimeInterval, context: inout AnimationContext<V>) -> Bool",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/customanimation",
                "title": "CustomAnimation",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Managing state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animationcontext/state",
                    "title": "var state: AnimationState<Value>",
                    "type": "property"
                  },
                  {
                    "title": "Retrieving view environment values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animationcontext/environment",
                    "title": "var environment: EnvironmentValues",
                    "type": "property"
                  },
                  {
                    "title": "Creating context",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animationcontext/withstate(_:)",
                    "title": "func withState<T>(AnimationState<T>) -> AnimationContext<T>",
                    "type": "method"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animationcontext/islogicallycomplete",
                    "title": "var isLogicallyComplete: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/animationcontext",
                "title": "AnimationContext",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating animation state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animationstate/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Accessing custom keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animationstate/subscript(_:)",
                    "title": "subscript<K>(K.Type) -> K.Value",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/swiftui/animationstate",
                "title": "AnimationState",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Setting the default value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animationstatekey/defaultvalue",
                    "title": "static var defaultValue: Self.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animationstatekey/value",
                    "title": "Value",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/animationstatekey",
                "title": "AnimationStateKey",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting a linear curve",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitcurve/linear",
                    "title": "static let linear: UnitCurve",
                    "type": "property"
                  },
                  {
                    "title": "Getting easing curves",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitcurve/easein",
                    "title": "static let easeIn: UnitCurve",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitcurve/easeout",
                    "title": "static let easeOut: UnitCurve",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitcurve/easeinout",
                    "title": "static let easeInOut: UnitCurve",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitcurve/circulareasein",
                    "title": "static let circularEaseIn: UnitCurve",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitcurve/circulareaseout",
                    "title": "static let circularEaseOut: UnitCurve",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitcurve/circulareaseinout",
                    "title": "static let circularEaseInOut: UnitCurve",
                    "type": "property"
                  },
                  {
                    "title": "Creating a general Bezier curve",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitcurve/bezier(startcontrolpoint:endcontrolpoint:)",
                    "title": "static func bezier(startControlPoint: UnitPoint, endControlPoint: UnitPoint) -> UnitCurve",
                    "type": "method"
                  },
                  {
                    "title": "Inverting a curve",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitcurve/inverse",
                    "title": "var inverse: UnitCurve",
                    "type": "property"
                  },
                  {
                    "title": "Getting curve characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitcurve/value(at:)",
                    "title": "func value(at: Double) -> Double",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/unitcurve/velocity(at:)",
                    "title": "func velocity(at: Double) -> Double",
                    "type": "method"
                  },
                  {
                    "title": "Deprecated symbols",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/unitcurve/easeineaseout",
                    "title": "static let easeInEaseOut: UnitCurve",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/unitcurve",
                "title": "UnitCurve",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a spring",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/spring/init(duration:bounce:)",
                    "title": "init(duration: TimeInterval, bounce: Double)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/spring/init(mass:stiffness:damping:allowoverdamping:)",
                    "title": "init(mass: Double, stiffness: Double, damping: Double, allowOverDamping: Bool)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/spring/init(response:dampingratio:)",
                    "title": "init(response: Double, dampingRatio: Double)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/spring/init(settlingduration:dampingratio:epsilon:)",
                    "title": "init(settlingDuration: TimeInterval, dampingRatio: Double, epsilon: Double)",
                    "type": "init"
                  },
                  {
                    "title": "Getting built-in springs",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/spring/bouncy",
                    "title": "static var bouncy: Spring",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/spring/bouncy(duration:extrabounce:)",
                    "title": "static func bouncy(duration: TimeInterval, extraBounce: Double) -> Spring",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/spring/smooth",
                    "title": "static var smooth: Spring",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/spring/smooth(duration:extrabounce:)",
                    "title": "static func smooth(duration: TimeInterval, extraBounce: Double) -> Spring",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/spring/snappy",
                    "title": "static var snappy: Spring",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/spring/snappy(duration:extrabounce:)",
                    "title": "static func snappy(duration: TimeInterval, extraBounce: Double) -> Spring",
                    "type": "method"
                  },
                  {
                    "title": "Getting spring characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/spring/bounce",
                    "title": "var bounce: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/spring/damping",
                    "title": "var damping: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/spring/dampingratio",
                    "title": "var dampingRatio: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/spring/duration",
                    "title": "var duration: TimeInterval",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/spring/mass",
                    "title": "var mass: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/spring/response",
                    "title": "var response: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/spring/settlingduration",
                    "title": "var settlingDuration: TimeInterval",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/spring/stiffness",
                    "title": "var stiffness: Double",
                    "type": "property"
                  },
                  {
                    "title": "Getting spring state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/spring/value(target:initialvelocity:time:)",
                    "title": "func value<V>(target: V, initialVelocity: V, time: TimeInterval) -> V",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/spring/value(fromvalue:tovalue:initialvelocity:time:)",
                    "title": "func value<V>(fromValue: V, toValue: V, initialVelocity: V, time: TimeInterval) -> V",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/spring/velocity(target:initialvelocity:time:)",
                    "title": "func velocity<V>(target: V, initialVelocity: V, time: TimeInterval) -> V",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/spring/velocity(fromvalue:tovalue:initialvelocity:time:)",
                    "title": "func velocity<V>(fromValue: V, toValue: V, initialVelocity: V, time: TimeInterval) -> V",
                    "type": "method"
                  },
                  {
                    "title": "Setting spring state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/spring/update(value:velocity:target:deltatime:)",
                    "title": "func update<V>(value: inout V, velocity: inout V, target: V, deltaTime: TimeInterval)",
                    "type": "method"
                  },
                  {
                    "title": "Calculating forces and durations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/spring/force(target:position:velocity:)",
                    "title": "func force<V>(target: V, position: V, velocity: V) -> V",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/spring/force(fromvalue:tovalue:position:velocity:)",
                    "title": "func force<V>(fromValue: V, toValue: V, position: V, velocity: V) -> V",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/spring/settlingduration(target:initialvelocity:epsilon:)",
                    "title": "func settlingDuration<V>(target: V, initialVelocity: V, epsilon: Double) -> TimeInterval",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/spring/settlingduration(fromvalue:tovalue:initialvelocity:epsilon:)",
                    "title": "func settlingDuration<V>(fromValue: V, toValue: V, initialVelocity: V, epsilon: Double) -> TimeInterval",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/spring",
                "title": "Spring",
                "type": "struct"
              },
              {
                "title": "Making data animatable",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Animating data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animatable/animatabledata-6nydg",
                    "title": "var animatableData: Self.AnimatableData",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animatable/animatabledata-swift.associatedtype",
                    "title": "AnimatableData",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/animatable",
                "title": "Animatable",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating an animatable pair",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animatablepair/init(_:_:)",
                    "title": "init(First, Second)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the constituent animations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animatablepair/first",
                    "title": "var first: First",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/animatablepair/second",
                    "title": "var second: Second",
                    "type": "property"
                  },
                  {
                    "title": "Manipulating values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/animatablepair/magnitudesquared",
                    "title": "var magnitudeSquared: Double",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/animatablepair",
                "title": "AnimatablePair",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Manipulating values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/vectorarithmetic/magnitudesquared",
                    "title": "var magnitudeSquared: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/vectorarithmetic/scale(by:)",
                    "title": "func scale(by: Double)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/vectorarithmetic/scaled(by:)",
                    "title": "func scaled(by: Double) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/vectorarithmetic/interpolate(towards:amount:)",
                    "title": "func interpolate(towards: Self, amount: Double)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/vectorarithmetic/interpolated(towards:amount:)",
                    "title": "func interpolated(towards: Self, amount: Double) -> Self",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/vectorarithmetic",
                "title": "VectorArithmetic",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating the data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/emptyanimatabledata/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Manipulating the data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/emptyanimatabledata/magnitudesquared",
                    "title": "var magnitudeSquared: Double",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/emptyanimatabledata",
                "title": "EmptyAnimatableData",
                "type": "struct"
              },
              {
                "title": "Updating a view on a schedule",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/watchos-apps/updating-watchos-apps-with-timelines",
                "title": "Updating watchOS apps with timelines",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Creating a timeline",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/timelineview/init(_:content:)-1mlmj",
                    "title": "init(Schedule, content: (TimelineViewDefaultContext) -> Content)",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the date",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/timelineview/context/date",
                        "title": "let date: Date",
                        "type": "property"
                      },
                      {
                        "title": "Getting the cadence",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/timelineview/context/cadence-swift.property",
                        "title": "let cadence: TimelineView<Schedule, Content>.Context.Cadence",
                        "type": "property"
                      },
                      {
                        "children": [
                          {
                            "title": "Getting cadences",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/timelineview/context/cadence-swift.enum/live",
                            "title": "case live",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/swiftui/timelineview/context/cadence-swift.enum/seconds",
                            "title": "case seconds",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/swiftui/timelineview/context/cadence-swift.enum/minutes",
                            "title": "case minutes",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/swiftui/timelineview/context/cadence-swift.enum",
                        "title": "TimelineView.Context.Cadence",
                        "type": "enum"
                      },
                      {
                        "title": "Invalidating the context",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/timelineview/context/invalidatetimelinecontent()",
                        "title": "func invalidateTimelineContent()",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/timelineview/context",
                    "title": "TimelineView.Context",
                    "type": "struct"
                  },
                  {
                    "title": "Deprecated symbols",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/timelineview/init(_:content:)-67h35",
                    "title": "init(Schedule, content: (TimelineView<Schedule, Content>.Context) -> Content)",
                    "type": "init"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/timelineview/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/timelineview",
                "title": "TimelineView",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in schedules",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/timelineschedule/animation",
                    "title": "static var animation: AnimationTimelineSchedule",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/timelineschedule/animation(minimuminterval:paused:)",
                    "title": "static func animation(minimumInterval: Double?, paused: Bool) -> AnimationTimelineSchedule",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/timelineschedule/everyminute",
                    "title": "static var everyMinute: EveryMinuteTimelineSchedule",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/timelineschedule/explicit(_:)",
                    "title": "static func explicit<S>(S) -> ExplicitTimelineSchedule<S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/timelineschedule/periodic(from:by:)",
                    "title": "static func periodic(from: Date, by: TimeInterval) -> PeriodicTimelineSchedule",
                    "type": "method"
                  },
                  {
                    "title": "Getting a sequence of dates",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/timelineschedule/entries(from:mode:)",
                    "title": "func entries(from: Date, mode: Self.Mode) -> Self.Entries",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/timelineschedule/entries",
                    "title": "Entries",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Specifying a mode",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/timelineschedule/mode",
                    "title": "TimelineSchedule.Mode",
                    "type": "typealias"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting timeline schedule modes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/timelineschedulemode/normal",
                        "title": "case normal",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/timelineschedulemode/lowfrequency",
                        "title": "case lowFrequency",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/timelineschedulemode",
                    "title": "TimelineScheduleMode",
                    "type": "enum"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a schedule",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/animationtimelineschedule/init(minimuminterval:paused:)",
                        "title": "init(minimumInterval: Double?, paused: Bool)",
                        "type": "init"
                      },
                      {
                        "title": "Getting the sequence of dates",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/animationtimelineschedule/entries(from:mode:)",
                        "title": "func entries(from: Date, mode: TimelineScheduleMode) -> AnimationTimelineSchedule.Entries",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/animationtimelineschedule",
                    "title": "AnimationTimelineSchedule",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a schedule",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/everyminutetimelineschedule/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Getting the sequence of dates",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/everyminutetimelineschedule/entries(from:mode:)",
                        "title": "func entries(from: Date, mode: TimelineScheduleMode) -> EveryMinuteTimelineSchedule.Entries",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/everyminutetimelineschedule/entries",
                        "title": "EveryMinuteTimelineSchedule.Entries",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/swiftui/everyminutetimelineschedule",
                    "title": "EveryMinuteTimelineSchedule",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a schedule",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/explicittimelineschedule/init(_:)",
                        "title": "init(Entries)",
                        "type": "init"
                      },
                      {
                        "title": "Getting the sequence of dates",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/explicittimelineschedule/entries(from:mode:)",
                        "title": "func entries(from: Date, mode: TimelineScheduleMode) -> Entries",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/explicittimelineschedule",
                    "title": "ExplicitTimelineSchedule",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a schedule",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/periodictimelineschedule/init(from:by:)",
                        "title": "init(from: Date, by: TimeInterval)",
                        "type": "init"
                      },
                      {
                        "title": "Getting the sequence of dates",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/periodictimelineschedule/entries(from:mode:)",
                        "title": "func entries(from: Date, mode: TimelineScheduleMode) -> PeriodicTimelineSchedule.Entries",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/periodictimelineschedule/entries",
                        "title": "PeriodicTimelineSchedule.Entries",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/swiftui/periodictimelineschedule",
                    "title": "PeriodicTimelineSchedule",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/timelineschedule",
                "title": "TimelineSchedule",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/timelineviewdefaultcontext",
                "title": "TimelineViewDefaultContext",
                "type": "typealias"
              },
              {
                "title": "Synchronizing geometries",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                "title": "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Matching properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/matchedgeometryproperties/frame",
                    "title": "static let frame: MatchedGeometryProperties",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/matchedgeometryproperties/position",
                    "title": "static let position: MatchedGeometryProperties",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/matchedgeometryproperties/size",
                    "title": "static let size: MatchedGeometryProperties",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/matchedgeometryproperties",
                "title": "MatchedGeometryProperties",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Applying effects",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/geometryeffect/effectvalue(size:)",
                    "title": "func effectValue(size: CGSize) -> ProjectionTransform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/geometryeffect/ignoredbylayout()",
                    "title": "func ignoredByLayout() -> _IgnoredByLayoutEffect<Self>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/geometryeffect",
                "title": "GeometryEffect",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating a namespace",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/namespace/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Getting the namespace",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/namespace/wrappedvalue",
                    "title": "var wrappedValue: Namespace.ID",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/namespace/id",
                    "title": "Namespace.ID",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/namespace",
                "title": "Namespace",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/geometrygroup()",
                "title": "func geometryGroup() -> some View",
                "type": "method"
              },
              {
                "title": "Defining transitions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/transition(_:)",
                "title": "func transition(_:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in transitions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transition/blurreplace",
                    "title": "static var blurReplace: BlurReplaceTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transition/blurreplace(_:)",
                    "title": "static func blurReplace(BlurReplaceTransition.Configuration) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/transition/identity",
                    "title": "static var identity: IdentityTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transition/move(edge:)",
                    "title": "static func move(edge: Edge) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/transition/offset(_:)",
                    "title": "static func offset(CGSize) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/transition/offset(x:y:)",
                    "title": "static func offset(x: CGFloat, y: CGFloat) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/transition/opacity",
                    "title": "static var opacity: OpacityTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transition/push(from:)",
                    "title": "static func push(from: Edge) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/transition/scale",
                    "title": "static var scale: ScaleTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transition/scale(_:anchor:)",
                    "title": "static func scale(Double, anchor: UnitPoint) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/transition/slide",
                    "title": "static var slide: SlideTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transition/symboleffect",
                    "title": "static var symbolEffect: SymbolEffectTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transition/symboleffect(_:options:)",
                    "title": "static func symbolEffect<T>(T, options: SymbolEffectOptions) -> SymbolEffectTransition",
                    "type": "method"
                  },
                  {
                    "title": "Configuring a transition",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transition/animation(_:)",
                    "title": "func animation(Animation?) -> some Transition",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/transition/properties",
                    "title": "static var properties: TransitionProperties",
                    "type": "property"
                  },
                  {
                    "title": "Using a transition",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transition/apply(content:phase:)",
                    "title": "func apply<V>(content: V, phase: TransitionPhase) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/transition/combined(with:)",
                    "title": "func combined<T>(with: T) -> some Transition",
                    "type": "method"
                  },
                  {
                    "title": "Creating a custom transition",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transition/body(content:phase:)",
                    "title": "func body(content: Self.Content, phase: TransitionPhase) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/transition/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "path": "/documentation/swiftui/transition/content",
                    "title": "Transition.Content",
                    "type": "typealias"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the transition",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/blurreplacetransition/init(configuration:)",
                        "title": "init(configuration: BlurReplaceTransition.Configuration)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/blurreplacetransition/configuration-swift.property",
                        "title": "var configuration: BlurReplaceTransition.Configuration",
                        "type": "property"
                      },
                      {
                        "children": [
                          {
                            "title": "Getting the transition configuration",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/blurreplacetransition/configuration-swift.struct/downup",
                            "title": "static let downUp: BlurReplaceTransition.Configuration",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/blurreplacetransition/configuration-swift.struct/upup",
                            "title": "static let upUp: BlurReplaceTransition.Configuration",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/blurreplacetransition/configuration-swift.struct",
                        "title": "BlurReplaceTransition.Configuration",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/swiftui/blurreplacetransition",
                    "title": "BlurReplaceTransition",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the transition",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/identitytransition/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/identitytransition",
                    "title": "IdentityTransition",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the transition",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/movetransition/init(edge:)",
                        "title": "init(edge: Edge)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/movetransition/edge",
                        "title": "var edge: Edge",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/movetransition",
                    "title": "MoveTransition",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the transition",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/offsettransition/init(_:)",
                        "title": "init(CGSize)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/offsettransition/offset",
                        "title": "var offset: CGSize",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/offsettransition",
                    "title": "OffsetTransition",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the transition",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/opacitytransition/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/opacitytransition",
                    "title": "OpacityTransition",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the transition",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/pushtransition/init(edge:)",
                        "title": "init(edge: Edge)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/pushtransition/edge",
                        "title": "var edge: Edge",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/pushtransition",
                    "title": "PushTransition",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the transition",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/scaletransition/init(_:anchor:)",
                        "title": "init(Double, anchor: UnitPoint)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/scaletransition/anchor",
                        "title": "var anchor: UnitPoint",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/scaletransition/scale",
                        "title": "var scale: Double",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/scaletransition",
                    "title": "ScaleTransition",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the transition",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/slidetransition/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/slidetransition",
                    "title": "SlideTransition",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/transition",
                "title": "Transition",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating the transition properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transitionproperties/init(hasmotion:)",
                    "title": "init(hasMotion: Bool)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/transitionproperties/hasmotion",
                    "title": "var hasMotion: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/transitionproperties",
                "title": "TransitionProperties",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the phase",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transitionphase/identity",
                    "title": "case identity",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/transitionphase/willappear",
                    "title": "case willAppear",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/transitionphase/diddisappear",
                    "title": "case didDisappear",
                    "type": "case"
                  },
                  {
                    "title": "Getting phase characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transitionphase/isidentity",
                    "title": "var isIdentity: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transitionphase/value",
                    "title": "var value: Double",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/transitionphase",
                "title": "TransitionPhase",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating the transition",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/asymmetrictransition/init(insertion:removal:)",
                    "title": "init(insertion: Insertion, removal: Removal)",
                    "type": "init"
                  },
                  {
                    "title": "Getting transition properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/asymmetrictransition/insertion",
                    "title": "var insertion: Insertion",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/asymmetrictransition/removal",
                    "title": "var removal: Removal",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/asymmetrictransition",
                "title": "AsymmetricTransition",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in transitions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/identity",
                    "title": "static let identity: AnyTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/move(edge:)",
                    "title": "static func move(edge: Edge) -> AnyTransition",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/offset(_:)",
                    "title": "static func offset(CGSize) -> AnyTransition",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/offset(x:y:)",
                    "title": "static func offset(x: CGFloat, y: CGFloat) -> AnyTransition",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/opacity",
                    "title": "static let opacity: AnyTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/push(from:)",
                    "title": "static func push(from: Edge) -> AnyTransition",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/scale",
                    "title": "static var scale: AnyTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/scale(scale:anchor:)",
                    "title": "static func scale(scale: CGFloat, anchor: UnitPoint) -> AnyTransition",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/slide",
                    "title": "static var slide: AnyTransition",
                    "type": "property"
                  },
                  {
                    "title": "Combining and configuring transitions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/animation(_:)",
                    "title": "func animation(Animation?) -> AnyTransition",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/asymmetric(insertion:removal:)",
                    "title": "static func asymmetric(insertion: AnyTransition, removal: AnyTransition) -> AnyTransition",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/combined(with:)",
                    "title": "func combined(with: AnyTransition) -> AnyTransition",
                    "type": "method"
                  },
                  {
                    "title": "Creating a custom transition",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/init(_:)",
                    "title": "init<T>(T)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/anytransition/modifier(active:identity:)",
                    "title": "static func modifier<E>(active: E, identity: E) -> AnyTransition",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/anytransition",
                "title": "AnyTransition",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/contenttransition(_:)",
                "title": "func contentTransition(ContentTransition) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/contenttransition",
                "title": "var contentTransition: ContentTransition",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/contenttransitionaddsdrawinggroup",
                "title": "var contentTransitionAddsDrawingGroup: Bool",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting content transitions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/contenttransition/identity",
                    "title": "static let identity: ContentTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/contenttransition/interpolate",
                    "title": "static let interpolate: ContentTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/contenttransition/numerictext(countsdown:)",
                    "title": "static func numericText(countsDown: Bool) -> ContentTransition",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/contenttransition/numerictext(value:)",
                    "title": "static func numericText(value: Double) -> ContentTransition",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/contenttransition/opacity",
                    "title": "static let opacity: ContentTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/contenttransition/symboleffect",
                    "title": "static var symbolEffect: ContentTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/contenttransition/symboleffect(_:options:)",
                    "title": "static func symbolEffect<T>(T, options: SymbolEffectOptions) -> ContentTransition",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/contenttransition",
                "title": "ContentTransition",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/placeholdercontentview",
                "title": "PlaceholderContentView",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/navigationtransition(_:)",
                "title": "func navigationTransition(some NavigationTransition) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in transitions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/navigationtransition/automatic",
                    "title": "static var automatic: AutomaticNavigationTransition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/navigationtransition/zoom(sourceid:in:)",
                    "title": "static func zoom(sourceID: some Hashable, in: Namespace.ID) -> ZoomNavigationTransition",
                    "type": "method"
                  },
                  {
                    "title": "Supporting Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/automaticnavigationtransition",
                    "title": "AutomaticNavigationTransition",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/zoomnavigationtransition",
                    "title": "ZoomNavigationTransition",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/navigationtransition",
                "title": "NavigationTransition",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/view/matchedtransitionsource(id:in:)",
                "title": "func matchedTransitionSource(id: some Hashable, in: Namespace.ID) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/matchedtransitionsource(id:in:configuration:)",
                "title": "func matchedTransitionSource(id: some Hashable, in: Namespace.ID, configuration: (EmptyMatchedTransitionSourceConfiguration) -> some MatchedTransitionSourceConfiguration) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/matchedtransitionsourceconfiguration/background(_:)",
                    "title": "func background(Color) -> some MatchedTransitionSourceConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/matchedtransitionsourceconfiguration/clipshape(_:)",
                    "title": "func clipShape(RoundedRectangle) -> some MatchedTransitionSourceConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/matchedtransitionsourceconfiguration/shadow(color:radius:x:y:)",
                    "title": "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some MatchedTransitionSourceConfiguration",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/matchedtransitionsourceconfiguration",
                "title": "MatchedTransitionSourceConfiguration",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/emptymatchedtransitionsourceconfiguration",
                "title": "EmptyMatchedTransitionSourceConfiguration",
                "type": "struct"
              },
              {
                "title": "Moving an animation to another view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/withtransaction(_:_:)",
                "title": "func withTransaction<Result>(Transaction, () throws -> Result) rethrows -> Result",
                "type": "func"
              },
              {
                "path": "/documentation/swiftui/withtransaction(_:_:_:)",
                "title": "func withTransaction<R, V>(WritableKeyPath<Transaction, V>, V, () throws -> R) rethrows -> R",
                "type": "func"
              },
              {
                "path": "/documentation/swiftui/view/transaction(_:)",
                "title": "func transaction((inout Transaction) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/transaction(value:_:)",
                "title": "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/transaction(_:body:)",
                "title": "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a transaction",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transaction/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/transaction/init(animation:)",
                    "title": "init(animation: Animation?)",
                    "type": "init"
                  },
                  {
                    "title": "Managing animations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transaction/animation",
                    "title": "var animation: Animation?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transaction/disablesanimations",
                    "title": "var disablesAnimations: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transaction/addanimationcompletion(criteria:_:)",
                    "title": "func addAnimationCompletion(criteria: AnimationCompletionCriteria, () -> Void)",
                    "type": "method"
                  },
                  {
                    "title": "Managing window dismissal",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transaction/dismissbehavior",
                    "title": "var dismissBehavior: DismissBehavior",
                    "type": "property"
                  },
                  {
                    "title": "Getting information about a transaction",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transaction/iscontinuous",
                    "title": "var isContinuous: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transaction/scrolltargetanchor",
                    "title": "var scrollTargetAnchor: UnitPoint?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transaction/tracksvelocity",
                    "title": "var tracksVelocity: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transaction/subscript(_:)",
                    "title": "subscript<K>(K.Type) -> K.Value",
                    "type": "subscript"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transaction/scrollcontentoffsetadjustmentbehavior",
                    "title": "var scrollContentOffsetAdjustmentBehavior: ScrollContentOffsetAdjustmentBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transaction/scrollpositionupdatepreservesvelocity",
                    "title": "var scrollPositionUpdatePreservesVelocity: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/transaction",
                "title": "Transaction",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/entry()",
                "title": "macro Entry()",
                "type": "macro"
              },
              {
                "children": [
                  {
                    "title": "Setting a default value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transactionkey/defaultvalue",
                    "title": "static var defaultValue: Self.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transactionkey/value",
                    "title": "Value",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/transactionkey",
                "title": "TransactionKey",
                "type": "protocol"
              },
              {
                "title": "Deprecated types",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/swiftui/animatablemodifier",
                "title": "AnimatableModifier",
                "type": "protocol"
              }
            ],
            "path": "/documentation/swiftui/animations",
            "title": "Animations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Displaying text",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a text view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/text/init(_:tablename:bundle:comment:)",
                    "title": "init(LocalizedStringKey, tableName: String?, bundle: Bundle?, comment: StaticString?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/text/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/text/init(verbatim:)",
                    "title": "init(verbatim: String)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/text/init(_:style:)",
                    "title": "init(Date, style: Text.DateStyle)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/text/init(_:format:)",
                    "title": "init(_:format:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/text/init(_:formatter:)",
                    "title": "init(_:formatter:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/text/init(timerinterval:pausetime:countsdown:showshours:)",
                    "title": "init(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)",
                    "type": "init"
                  },
                  {
                    "title": "Choosing a font",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/text/font(_:)",
                    "title": "func font(Font?) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/fontweight(_:)",
                    "title": "func fontWeight(Font.Weight?) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/fontdesign(_:)",
                    "title": "func fontDesign(Font.Design?) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/fontwidth(_:)",
                    "title": "func fontWidth(Font.Width?) -> Text",
                    "type": "method"
                  },
                  {
                    "title": "Styling the view’s text",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/text/foregroundstyle(_:)",
                    "title": "func foregroundStyle<S>(S) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/bold()",
                    "title": "func bold() -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/bold(_:)",
                    "title": "func bold(Bool) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/italic()",
                    "title": "func italic() -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/italic(_:)",
                    "title": "func italic(Bool) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/strikethrough(_:color:)",
                    "title": "func strikethrough(Bool, color: Color?) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/strikethrough(_:pattern:color:)",
                    "title": "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/underline(_:color:)",
                    "title": "func underline(Bool, color: Color?) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/underline(_:pattern:color:)",
                    "title": "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/monospaced(_:)",
                    "title": "func monospaced(Bool) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/monospaceddigit()",
                    "title": "func monospacedDigit() -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/kerning(_:)",
                    "title": "func kerning(CGFloat) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/tracking(_:)",
                    "title": "func tracking(CGFloat) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/baselineoffset(_:)",
                    "title": "func baselineOffset(CGFloat) -> Text",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting text cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/text/case/lowercase",
                        "title": "case lowercase",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/text/case/uppercase",
                        "title": "case uppercase",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/text/case",
                    "title": "Text.Case",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting text date styles",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/text/datestyle/date",
                        "title": "static let date: Text.DateStyle",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/text/datestyle/offset",
                        "title": "static let offset: Text.DateStyle",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/text/datestyle/relative",
                        "title": "static let relative: Text.DateStyle",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/text/datestyle/time",
                        "title": "static let time: Text.DateStyle",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/text/datestyle/timer",
                        "title": "static let timer: Text.DateStyle",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/text/datestyle",
                    "title": "Text.DateStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting text line styles",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/text/linestyle/single",
                        "title": "static let single: Text.LineStyle",
                        "type": "property"
                      },
                      {
                        "title": "Creating a text line style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/text/linestyle/init(nsunderlinestyle:)",
                        "title": "init?(nsUnderlineStyle: NSUnderlineStyle)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/text/linestyle/init(pattern:color:)",
                        "title": "init(pattern: Text.LineStyle.Pattern, color: Color?)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Getting line style patterns",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/text/linestyle/pattern/solid",
                            "title": "static let solid: Text.LineStyle.Pattern",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/linestyle/pattern/dot",
                            "title": "static let dot: Text.LineStyle.Pattern",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/linestyle/pattern/dash",
                            "title": "static let dash: Text.LineStyle.Pattern",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/linestyle/pattern/dashdot",
                            "title": "static let dashDot: Text.LineStyle.Pattern",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/linestyle/pattern/dashdotdot",
                            "title": "static let dashDotDot: Text.LineStyle.Pattern",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/text/linestyle/pattern",
                        "title": "Text.LineStyle.Pattern",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/swiftui/text/linestyle",
                    "title": "Text.LineStyle",
                    "type": "struct"
                  },
                  {
                    "title": "Fitting text into available space",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/text/textscale(_:isenabled:)",
                    "title": "func textScale(Text.Scale, isEnabled: Bool) -> Text",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting built-in text scales",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/text/scale/default",
                        "title": "static let `default`: Text.Scale",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/text/scale/secondary",
                        "title": "static let secondary: Text.Scale",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/text/scale",
                    "title": "Text.Scale",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting text truncation modes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/text/truncationmode/head",
                        "title": "case head",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/text/truncationmode/middle",
                        "title": "case middle",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/text/truncationmode/tail",
                        "title": "case tail",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/text/truncationmode",
                    "title": "Text.TruncationMode",
                    "type": "enum"
                  },
                  {
                    "title": "Localizing text",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/text/typesettinglanguage(_:isenabled:)",
                    "title": "func typesettingLanguage(_:isEnabled:)",
                    "type": "method"
                  },
                  {
                    "title": "Configuring voiceover",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/text/speechadjustedpitch(_:)",
                    "title": "func speechAdjustedPitch(Double) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/speechalwaysincludespunctuation(_:)",
                    "title": "func speechAlwaysIncludesPunctuation(Bool) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/speechannouncementsqueued(_:)",
                    "title": "func speechAnnouncementsQueued(Bool) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/speechspellsoutcharacters(_:)",
                    "title": "func speechSpellsOutCharacters(Bool) -> Text",
                    "type": "method"
                  },
                  {
                    "title": "Providing accessibility information",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/text/accessibilityheading(_:)",
                    "title": "func accessibilityHeading(AccessibilityHeadingLevel) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/accessibilitylabel(_:)",
                    "title": "func accessibilityLabel(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/accessibilitytextcontenttype(_:)",
                    "title": "func accessibilityTextContentType(AccessibilityTextContentType) -> Text",
                    "type": "method"
                  },
                  {
                    "title": "Combining text views",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/text/+(_:_:)",
                    "title": "static func + (Text, Text) -> Text",
                    "type": "op"
                  },
                  {
                    "title": "Deprecated symbols",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/text/foregroundcolor(_:)",
                    "title": "func foregroundColor(Color?) -> Text",
                    "type": "method"
                  },
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Structures",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/text/layout/characterindex",
                        "title": "Text.Layout.CharacterIndex",
                        "type": "struct"
                      },
                      {
                        "children": [
                          {
                            "title": "Type Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/drawingoptions/disablessubpixelquantization",
                            "title": "static var disablesSubpixelQuantization: Text.Layout.DrawingOptions",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/text/layout/drawingoptions",
                        "title": "Text.Layout.DrawingOptions",
                        "type": "struct"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/line/origin",
                            "title": "var origin: CGPoint",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/line/typographicbounds",
                            "title": "var typographicBounds: Text.Layout.TypographicBounds",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/text/layout/line",
                        "title": "Text.Layout.Line",
                        "type": "struct"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/run/characterindices",
                            "title": "var characterIndices: [Text.Layout.CharacterIndex]",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/run/layoutdirection",
                            "title": "var layoutDirection: LayoutDirection",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/run/typographicbounds",
                            "title": "var typographicBounds: Text.Layout.TypographicBounds",
                            "type": "property"
                          },
                          {
                            "title": "Subscripts",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/run/subscript(_:)",
                            "title": "subscript<T>(T.Type) -> T?",
                            "type": "subscript"
                          }
                        ],
                        "path": "/documentation/swiftui/text/layout/run",
                        "title": "Text.Layout.Run",
                        "type": "struct"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/runslice/init(run:indices:)",
                            "title": "init(run: Text.Layout.Run, indices: Range<Int>)",
                            "type": "init"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/runslice/characterindices",
                            "title": "var characterIndices: [Text.Layout.CharacterIndex]",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/runslice/run",
                            "title": "var run: Text.Layout.Run",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/runslice/typographicbounds",
                            "title": "var typographicBounds: Text.Layout.TypographicBounds",
                            "type": "property"
                          },
                          {
                            "title": "Subscripts",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/runslice/subscript(_:)",
                            "title": "subscript<T>(T.Type) -> T?",
                            "type": "subscript"
                          }
                        ],
                        "path": "/documentation/swiftui/text/layout/runslice",
                        "title": "Text.Layout.RunSlice",
                        "type": "struct"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/typographicbounds/init()",
                            "title": "init()",
                            "type": "init"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/typographicbounds/ascent",
                            "title": "var ascent: CGFloat",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/typographicbounds/descent",
                            "title": "var descent: CGFloat",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/typographicbounds/leading",
                            "title": "var leading: CGFloat",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/typographicbounds/origin",
                            "title": "var origin: CGPoint",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/typographicbounds/rect",
                            "title": "var rect: CGRect",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/layout/typographicbounds/width",
                            "title": "var width: CGFloat",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/text/layout/typographicbounds",
                        "title": "Text.Layout.TypographicBounds",
                        "type": "struct"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/text/layout/istruncated",
                        "title": "var isTruncated: Bool",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/text/layout",
                    "title": "Text.Layout",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Structures",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/text/layoutkey/anchoredlayout/layout",
                            "title": "var layout: Text.Layout",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/text/layoutkey/anchoredlayout/origin",
                            "title": "var origin: Anchor<CGPoint>",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/text/layoutkey/anchoredlayout",
                        "title": "Text.LayoutKey.AnchoredLayout",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/swiftui/text/layoutkey",
                    "title": "Text.LayoutKey",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/text/customattribute(_:)",
                    "title": "func customAttribute<T>(T) -> Text",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/text/textvariant(_:)",
                    "title": "func textVariant<V>(V) -> some View",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/text",
                "title": "Text",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a label",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/label/init(_:image:)",
                    "title": "init(_:image:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/label/init(_:systemimage:)",
                    "title": "init(_:systemImage:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/label/init(title:icon:)",
                    "title": "init(title: () -> Title, icon: () -> Icon)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/label/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/label/init(_:image:)",
                    "title": "init(_:image:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/label",
                "title": "Label",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/labelstyle(_:)",
                "title": "func labelStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "title": "Getting text input",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a text field with a string",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textfield/init(_:text:)",
                    "title": "init(_:text:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/textfield/init(_:text:prompt:)",
                    "title": "init(_:text:prompt:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/textfield/init(text:prompt:label:)",
                    "title": "init(text: Binding<String>, prompt: Text?, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a scrollable text field",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textfield/init(_:text:axis:)",
                    "title": "init(_:text:axis:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/textfield/init(_:text:prompt:axis:)",
                    "title": "init(_:text:prompt:axis:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/textfield/init(text:prompt:axis:label:)",
                    "title": "init(text: Binding<String>, prompt: Text?, axis: Axis, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a text field with a value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textfield/init(_:value:format:prompt:)",
                    "title": "init(_:value:format:prompt:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/textfield/init(value:format:prompt:label:)",
                    "title": "init(value:format:prompt:label:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/textfield/init(_:value:formatter:)",
                    "title": "init(_:value:formatter:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/textfield/init(_:value:formatter:prompt:)",
                    "title": "init(_:value:formatter:prompt:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/textfield/init(value:formatter:prompt:label:)",
                    "title": "init<V>(value: Binding<V>, formatter: Formatter, prompt: Text?, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Deprecated initializers",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a text field with a string",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/textfield/init(_:text:oneditingchanged:oncommit:)",
                        "title": "init(_:text:onEditingChanged:onCommit:)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/textfield/init(_:text:oncommit:)",
                        "title": "init(_:text:onCommit:)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/textfield/init(_:text:oneditingchanged:)",
                        "title": "init(_:text:onEditingChanged:)",
                        "type": "init"
                      },
                      {
                        "title": "Creating a text field with a value",
                        "type": "groupMarker"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/textfield/init(_:value:formatter:oneditingchanged:oncommit:)",
                        "title": "init(_:value:formatter:onEditingChanged:onCommit:)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/textfield/init(_:value:formatter:oncommit:)",
                        "title": "init(_:value:formatter:onCommit:)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/swiftui/textfield/init(_:value:formatter:oneditingchanged:)",
                        "title": "init(_:value:formatter:onEditingChanged:)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/textfield-deprecated",
                    "title": "Deprecated initializers",
                    "type": "collection"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textfield/init(_:text:selection:prompt:axis:)",
                    "title": "init(_:text:selection:prompt:axis:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/textfield",
                "title": "TextField",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/textfieldstyle(_:)",
                "title": "func textFieldStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a secure text field",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/securefield/init(_:text:)",
                    "title": "init(_:text:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/securefield/init(_:text:prompt:)",
                    "title": "init(_:text:prompt:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/securefield/init(text:prompt:label:)",
                    "title": "init(text: Binding<String>, prompt: Text?, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Deprecated initializers",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/securefield/init(_:text:oncommit:)",
                    "title": "init(_:text:onCommit:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/securefield",
                "title": "SecureField",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a text editor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/texteditor/init(text:)",
                    "title": "init(text: Binding<String>)",
                    "type": "init"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/texteditor/init(text:selection:)",
                    "title": "init(text: Binding<String>, selection: Binding<TextSelection?>)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/texteditor",
                "title": "TextEditor",
                "type": "struct"
              },
              {
                "title": "Selecting text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/textselection(_:)",
                "title": "func textSelection<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting selectability options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textselectability/enabled",
                    "title": "static var enabled: EnabledTextSelectability",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/textselectability/disabled",
                    "title": "static var disabled: DisabledTextSelectability",
                    "type": "property"
                  },
                  {
                    "title": "Specifying selectability",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textselectability/allowsselection",
                    "title": "static var allowsSelection: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/enabledtextselectability",
                    "title": "EnabledTextSelectability",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/disabledtextselectability",
                    "title": "DisabledTextSelectability",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/textselectability",
                "title": "TextSelectability",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textselection/init(insertionpoint:)",
                    "title": "init(insertionPoint: String.Index)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/textselection/init(range:)",
                    "title": "init(range: Range<String.Index>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/textselection/init(ranges:)",
                    "title": "init(ranges: RangeSet<String.Index>)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textselection/affinity",
                    "title": "var affinity: TextSelectionAffinity",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/textselection/indices-swift.property",
                    "title": "var indices: TextSelection.Indices",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/textselection/isinsertion",
                    "title": "var isInsertion: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Enumerations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/textselection/indices-swift.enum/multiselection(_:)",
                        "title": "case multiSelection(RangeSet<String.Index>)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/textselection/indices-swift.enum/selection(_:)",
                        "title": "case selection(Range<String.Index>)",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/textselection/indices-swift.enum",
                    "title": "TextSelection.Indices",
                    "type": "enum"
                  }
                ],
                "path": "/documentation/swiftui/textselection",
                "title": "TextSelection",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/textselectionaffinity(_:)",
                "title": "func textSelectionAffinity(TextSelectionAffinity) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/textselectionaffinity",
                "title": "var textSelectionAffinity: TextSelectionAffinity",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textselectionaffinity/automatic",
                    "title": "case automatic",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/textselectionaffinity/downstream",
                    "title": "case downstream",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/textselectionaffinity/upstream",
                    "title": "case upstream",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/textselectionaffinity",
                "title": "TextSelectionAffinity",
                "type": "enum"
              },
              {
                "title": "Setting a font",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/applying-custom-fonts-to-text",
                "title": "Applying custom fonts to text",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/view/font(_:)",
                "title": "func font(Font?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fontdesign(_:)",
                "title": "func fontDesign(Font.Design?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fontweight(_:)",
                "title": "func fontWeight(Font.Weight?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fontwidth(_:)",
                "title": "func fontWidth(Font.Width?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/font",
                "title": "var font: Font?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting standard fonts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/font/extralargetitle2",
                    "title": "static let extraLargeTitle2: Font",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/font/extralargetitle",
                    "title": "static let extraLargeTitle: Font",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/font/largetitle",
                    "title": "static let largeTitle: Font",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/font/title",
                    "title": "static let title: Font",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/font/title2",
                    "title": "static let title2: Font",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/font/title3",
                    "title": "static let title3: Font",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/font/headline",
                    "title": "static let headline: Font",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/font/subheadline",
                    "title": "static let subheadline: Font",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/font/body",
                    "title": "static let body: Font",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/font/callout",
                    "title": "static let callout: Font",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/font/caption",
                    "title": "static let caption: Font",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/font/caption2",
                    "title": "static let caption2: Font",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/font/footnote",
                    "title": "static let footnote: Font",
                    "type": "property"
                  },
                  {
                    "title": "Getting system fonts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/font/system(_:design:weight:)",
                    "title": "static func system(Font.TextStyle, design: Font.Design?, weight: Font.Weight?) -> Font",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/font/system(size:weight:design:)-697b2",
                    "title": "static func system(size: CGFloat, weight: Font.Weight?, design: Font.Design?) -> Font",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting font designs",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/font/design/default",
                        "title": "case `default`",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/design/monospaced",
                        "title": "case monospaced",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/design/rounded",
                        "title": "case rounded",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/design/serif",
                        "title": "case serif",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/font/design",
                    "title": "Font.Design",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting font text styles",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/extralargetitle2",
                        "title": "case extraLargeTitle2",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/extralargetitle",
                        "title": "case extraLargeTitle",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/largetitle",
                        "title": "case largeTitle",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/title",
                        "title": "case title",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/title2",
                        "title": "case title2",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/title3",
                        "title": "case title3",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/headline",
                        "title": "case headline",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/subheadline",
                        "title": "case subheadline",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/body",
                        "title": "case body",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/callout",
                        "title": "case callout",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/caption",
                        "title": "case caption",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/caption2",
                        "title": "case caption2",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/textstyle/footnote",
                        "title": "case footnote",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/font/textstyle",
                    "title": "Font.TextStyle",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting font weights",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/font/weight/black",
                        "title": "static let black: Font.Weight",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/font/weight/bold",
                        "title": "static let bold: Font.Weight",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/font/weight/heavy",
                        "title": "static let heavy: Font.Weight",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/font/weight/light",
                        "title": "static let light: Font.Weight",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/font/weight/medium",
                        "title": "static let medium: Font.Weight",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/font/weight/regular",
                        "title": "static let regular: Font.Weight",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/font/weight/semibold",
                        "title": "static let semibold: Font.Weight",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/font/weight/thin",
                        "title": "static let thin: Font.Weight",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/font/weight/ultralight",
                        "title": "static let ultraLight: Font.Weight",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/font/weight",
                    "title": "Font.Weight",
                    "type": "struct"
                  },
                  {
                    "title": "Creating custom fonts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/font/custom(_:fixedsize:)",
                    "title": "static func custom(String, fixedSize: CGFloat) -> Font",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/font/custom(_:size:relativeto:)",
                    "title": "static func custom(String, size: CGFloat, relativeTo: Font.TextStyle) -> Font",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/font/custom(_:size:)",
                    "title": "static func custom(String, size: CGFloat) -> Font",
                    "type": "method"
                  },
                  {
                    "title": "Getting a font from another font",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/font/init(_:)",
                    "title": "init(CTFont)",
                    "type": "init"
                  },
                  {
                    "title": "Styling a font",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/font/bold()",
                    "title": "func bold() -> Font",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/font/italic()",
                    "title": "func italic() -> Font",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/font/monospaced()",
                    "title": "func monospaced() -> Font",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/font/monospaceddigit()",
                    "title": "func monospacedDigit() -> Font",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/font/smallcaps()",
                    "title": "func smallCaps() -> Font",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/font/lowercasesmallcaps()",
                    "title": "func lowercaseSmallCaps() -> Font",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/font/uppercasesmallcaps()",
                    "title": "func uppercaseSmallCaps() -> Font",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/font/weight(_:)",
                    "title": "func weight(Font.Weight) -> Font",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/font/width(_:)",
                    "title": "func width(Font.Width) -> Font",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting standard font widths",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/font/width/compressed",
                        "title": "static let compressed: Font.Width",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/font/width/condensed",
                        "title": "static let condensed: Font.Width",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/font/width/expanded",
                        "title": "static let expanded: Font.Width",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/font/width/standard",
                        "title": "static let standard: Font.Width",
                        "type": "property"
                      },
                      {
                        "title": "Creating an explicit font width",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/font/width/init(_:)",
                        "title": "init(CGFloat)",
                        "type": "init"
                      },
                      {
                        "title": "Accessing the width’s value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/font/width/value",
                        "title": "var value: CGFloat",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/font/width",
                    "title": "Font.Width",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/font/leading(_:)",
                    "title": "func leading(Font.Leading) -> Font",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting leading line spacing options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/font/leading/standard",
                        "title": "case standard",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/leading/loose",
                        "title": "case loose",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/font/leading/tight",
                        "title": "case tight",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/font/leading",
                    "title": "Font.Leading",
                    "type": "enum"
                  },
                  {
                    "title": "Deprecated symbols",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/font/system(_:design:)",
                    "title": "static func system(Font.TextStyle, design: Font.Design) -> Font",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/font/system(size:weight:design:)-73a88",
                    "title": "static func system(size: CGFloat, weight: Font.Weight, design: Font.Design) -> Font",
                    "type": "method"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/font/system(size:weight:design:)",
                    "title": "static system(size:weight:design:)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/font",
                "title": "Font",
                "type": "struct"
              },
              {
                "title": "Adjusting text size",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/textscale(_:isenabled:)",
                "title": "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/dynamictypesize(_:)",
                "title": "func dynamicTypeSize(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/dynamictypesize",
                "title": "var dynamicTypeSize: DynamicTypeSize",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting type sizes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/xsmall",
                    "title": "case xSmall",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/small",
                    "title": "case small",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/medium",
                    "title": "case medium",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/large",
                    "title": "case large",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/xlarge",
                    "title": "case xLarge",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/xxlarge",
                    "title": "case xxLarge",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/xxxlarge",
                    "title": "case xxxLarge",
                    "type": "case"
                  },
                  {
                    "title": "Getting accessibility type sizes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/accessibility1",
                    "title": "case accessibility1",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/accessibility2",
                    "title": "case accessibility2",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/accessibility3",
                    "title": "case accessibility3",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/accessibility4",
                    "title": "case accessibility4",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/accessibility5",
                    "title": "case accessibility5",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/isaccessibilitysize",
                    "title": "var isAccessibilitySize: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Creating a type size",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictypesize/init(_:)",
                    "title": "init?(UIContentSizeCategory)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/dynamictypesize",
                "title": "DynamicTypeSize",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating the metric",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scaledmetric/init(wrappedvalue:)",
                    "title": "init(wrappedValue: Value)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/scaledmetric/init(wrappedvalue:relativeto:)",
                    "title": "init(wrappedValue: Value, relativeTo: Font.TextStyle)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the metric",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scaledmetric/wrappedvalue",
                    "title": "var wrappedValue: Value",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scaledmetric",
                "title": "ScaledMetric",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textvariantpreference/fixed",
                    "title": "static var fixed: FixedTextVariant",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/textvariantpreference/sizedependent",
                    "title": "static var sizeDependent: SizeDependentTextVariant",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/textvariantpreference",
                "title": "TextVariantPreference",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/fixedtextvariant",
                "title": "FixedTextVariant",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/sizedependenttextvariant",
                "title": "SizeDependentTextVariant",
                "type": "struct"
              },
              {
                "title": "Controlling text style",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/bold(_:)",
                "title": "func bold(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/italic(_:)",
                "title": "func italic(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/underline(_:pattern:color:)",
                "title": "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/strikethrough(_:pattern:color:)",
                "title": "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/textcase(_:)",
                "title": "func textCase(Text.Case?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/textcase",
                "title": "var textCase: Text.Case?",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/view/monospaced(_:)",
                "title": "func monospaced(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/monospaceddigit()",
                "title": "func monospacedDigit() -> some View",
                "type": "method"
              },
              {
                "title": "Managing text layout",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/truncationmode(_:)",
                "title": "func truncationMode(Text.TruncationMode) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/truncationmode",
                "title": "var truncationMode: Text.TruncationMode",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/view/allowstightening(_:)",
                "title": "func allowsTightening(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/allowstightening",
                "title": "var allowsTightening: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/view/minimumscalefactor(_:)",
                "title": "func minimumScaleFactor(CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/minimumscalefactor",
                "title": "var minimumScaleFactor: CGFloat",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/view/baselineoffset(_:)",
                "title": "func baselineOffset(CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/kerning(_:)",
                "title": "func kerning(CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/tracking(_:)",
                "title": "func tracking(CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/flipsforrighttoleftlayoutdirection(_:)",
                "title": "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting text alignments",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textalignment/center",
                    "title": "case center",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/textalignment/leading",
                    "title": "case leading",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/textalignment/trailing",
                    "title": "case trailing",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/textalignment",
                "title": "TextAlignment",
                "type": "enum"
              },
              {
                "title": "Rendering text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/creating-visual-effects-with-swiftui",
                "title": "Creating visual effects with SwiftUI",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/textattribute",
                "title": "TextAttribute",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/view/textrenderer(_:)",
                "title": "func textRenderer<T>(T) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textrenderer/displaypadding",
                    "title": "var displayPadding: EdgeInsets",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textrenderer/draw(layout:in:)",
                    "title": "func draw(layout: Text.Layout, in: inout GraphicsContext)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/textrenderer/sizethatfits(proposal:text:)",
                    "title": "func sizeThatFits(proposal: ProposedViewSize, text: TextProxy) -> CGSize",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/textrenderer",
                "title": "TextRenderer",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textproxy/sizethatfits(_:)",
                    "title": "func sizeThatFits(ProposedViewSize) -> CGSize",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/textproxy",
                "title": "TextProxy",
                "type": "struct"
              },
              {
                "title": "Limiting line count for multiline text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/linelimit(_:)",
                "title": "func lineLimit(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/linelimit(_:reservesspace:)",
                "title": "func lineLimit(Int, reservesSpace: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/linelimit",
                "title": "var lineLimit: Int?",
                "type": "property"
              },
              {
                "title": "Formatting multiline text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/linespacing(_:)",
                "title": "func lineSpacing(CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/linespacing",
                "title": "var lineSpacing: CGFloat",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/view/multilinetextalignment(_:)",
                "title": "func multilineTextAlignment(TextAlignment) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/multilinetextalignment",
                "title": "var multilineTextAlignment: TextAlignment",
                "type": "property"
              },
              {
                "title": "Formatting date and time",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/systemformatstyle/dateoffset/init(to:allowedfields:maxfieldcount:sign:)",
                        "title": "init(to: Date, allowedFields: Set<Date.ComponentsFormatStyle.Field>, maxFieldCount: Int, sign: NumberFormatStyleConfiguration.SignDisplayStrategy)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/systemformatstyle/dateoffset/calendar(_:)",
                        "title": "func calendar(Calendar) -> SystemFormatStyle.DateOffset",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/systemformatstyle/dateoffset",
                    "title": "SystemFormatStyle.DateOffset",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/systemformatstyle/datereference/init(to:allowedfields:maxfieldcount:thresholdfield:)",
                        "title": "init(to: Date, allowedFields: Set<Date.RelativeFormatStyle.Field>, maxFieldCount: Int, thresholdField: Date.RelativeFormatStyle.Field)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/systemformatstyle/datereference/calendar(_:)",
                        "title": "func calendar(Calendar) -> SystemFormatStyle.DateReference",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/systemformatstyle/datereference",
                    "title": "SystemFormatStyle.DateReference",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/systemformatstyle/stopwatch/init(startingat:showshours:maxfieldcount:maxprecision:)",
                        "title": "init(startingAt: Date, showsHours: Bool, maxFieldCount: Int, maxPrecision: Duration)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/systemformatstyle/stopwatch",
                    "title": "SystemFormatStyle.Stopwatch",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/systemformatstyle/timer/init(countingdownin:showshours:maxfieldcount:maxprecision:)",
                        "title": "init(countingDownIn: Range<Date>, showsHours: Bool, maxFieldCount: Int, maxPrecision: Duration)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/systemformatstyle/timer/init(countingupin:showshours:maxfieldcount:maxprecision:)",
                        "title": "init(countingUpIn: Range<Date>, showsHours: Bool, maxFieldCount: Int, maxPrecision: Duration)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/systemformatstyle/timer",
                    "title": "SystemFormatStyle.Timer",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/systemformatstyle",
                "title": "SystemFormatStyle",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/timedatasource/currentdate",
                    "title": "static var currentDate: TimeDataSource<Date>",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/timedatasource/daterange(endingat:)",
                    "title": "static func dateRange(endingAt: Date) -> TimeDataSource<Range<Date>>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/timedatasource/daterange(startingat:)",
                    "title": "static func dateRange(startingAt: Date) -> TimeDataSource<Range<Date>>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/timedatasource/durationoffset(to:)",
                    "title": "static func durationOffset(to: Date) -> TimeDataSource<Duration>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/timedatasource",
                "title": "TimeDataSource",
                "type": "struct"
              },
              {
                "title": "Managing text entry",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/autocorrectiondisabled(_:)",
                "title": "func autocorrectionDisabled(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/autocorrectiondisabled",
                "title": "var autocorrectionDisabled: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/view/keyboardtype(_:)",
                "title": "func keyboardType(UIKeyboardType) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scrolldismisseskeyboard(_:)",
                "title": "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/textcontenttype(_:)",
                "title": "func textContentType(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/textinputautocapitalization(_:)",
                "title": "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting autocapitalization options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textinputautocapitalization/characters",
                    "title": "static var characters: TextInputAutocapitalization",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/textinputautocapitalization/sentences",
                    "title": "static var sentences: TextInputAutocapitalization",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/textinputautocapitalization/words",
                    "title": "static var words: TextInputAutocapitalization",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/textinputautocapitalization/never",
                    "title": "static var never: TextInputAutocapitalization",
                    "type": "property"
                  },
                  {
                    "title": "Creating an autocapitalization type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textinputautocapitalization/init(_:)",
                    "title": "init?(UITextAutocapitalizationType)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/textinputautocapitalization",
                "title": "TextInputAutocapitalization",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/textinputcompletion(_:)",
                "title": "func textInputCompletion(String) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/textinputsuggestions(_:)",
                "title": "func textInputSuggestions<S>(() -> S) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/textinputsuggestions(_:content:)",
                "title": "func textInputSuggestions<Data, Content>(Data, content: (Data.Element) -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/textinputsuggestions(_:id:content:)",
                "title": "func textInputSuggestions<Data, ID, Content>(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/textcontenttype(_:)-4dqqb",
                "title": "func textContentType(WKTextContentType?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/textcontenttype(_:)-6fic1",
                "title": "func textContentType(NSTextContentType?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/textcontenttype(_:)-ufdv",
                "title": "func textContentType(UITextContentType?) -> some View",
                "type": "method"
              },
              {
                "title": "Dictating text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/searchdictationbehavior(_:)",
                "title": "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting activation values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textinputdictationactivation/onlook",
                    "title": "static let onLook: TextInputDictationActivation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/textinputdictationactivation/onselect",
                    "title": "static let onSelect: TextInputDictationActivation",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/textinputdictationactivation",
                "title": "TextInputDictationActivation",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting behavior values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textinputdictationbehavior/automatic",
                    "title": "static let automatic: TextInputDictationBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/textinputdictationbehavior/inline(activation:)",
                    "title": "static func inline(activation: TextInputDictationActivation) -> TextInputDictationBehavior",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/textinputdictationbehavior/preventdictation",
                    "title": "static let preventDictation: TextInputDictationBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/textinputdictationbehavior",
                "title": "TextInputDictationBehavior",
                "type": "struct"
              },
              {
                "title": "Configuring the Writing Tools behavior",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/writingtoolsbehavior(_:)",
                "title": "func writingToolsBehavior(WritingToolsBehavior) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/writingtoolsbehavior/automatic",
                    "title": "static let automatic: WritingToolsBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/writingtoolsbehavior/complete",
                    "title": "static let complete: WritingToolsBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/writingtoolsbehavior/disabled",
                    "title": "static let disabled: WritingToolsBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/writingtoolsbehavior/limited",
                    "title": "static let limited: WritingToolsBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/writingtoolsbehavior",
                "title": "WritingToolsBehavior",
                "type": "struct"
              },
              {
                "title": "Specifying text equivalents",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/typeselectequivalent(_:)",
                "title": "func typeSelectEquivalent(_:)",
                "type": "method"
              },
              {
                "title": "Localizing text",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/preparing-views-for-localization",
                "title": "Preparing views for localization",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Creating a key from a literal value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/localizedstringkey/init(_:)",
                    "title": "init(String)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/localizedstringkey/init(stringliteral:)",
                    "title": "init(stringLiteral: String)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a key from an interpolation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/localizedstringkey/init(stringinterpolation:)",
                    "title": "init(stringInterpolation: LocalizedStringKey.StringInterpolation)",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Appending to an interpolation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:)",
                        "title": "func appendInterpolation(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:specifier:)",
                        "title": "func appendInterpolation<T>(T, specifier: String)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:format:)",
                        "title": "func appendInterpolation(_:format:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:formatter:)",
                        "title": "func appendInterpolation(_:formatter:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(_:style:)",
                        "title": "func appendInterpolation(Date, style: Text.DateStyle)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(timerinterval:pausetime:countsdown:showshours:)",
                        "title": "func appendInterpolation(timerInterval: ClosedRange<Date>, pauseTime: Date?, countsDown: Bool, showsHours: Bool)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/localizedstringkey/stringinterpolation/appendliteral(_:)",
                        "title": "func appendLiteral(String)",
                        "type": "method"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/localizedstringkey/stringinterpolation/appendinterpolation(accessibilityname:)",
                        "title": "func appendInterpolation(accessibilityName: Color)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/localizedstringkey/stringinterpolation",
                    "title": "LocalizedStringKey.StringInterpolation",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/localizedstringkey",
                "title": "LocalizedStringKey",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/locale",
                "title": "var locale: Locale",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/view/typesettinglanguage(_:isenabled:)",
                "title": "func typesettingLanguage(_:isEnabled:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting language behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/typesettinglanguage/automatic",
                    "title": "static let automatic: TypesettingLanguage",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/typesettinglanguage/explicit(_:)",
                    "title": "static func explicit(Locale.Language) -> TypesettingLanguage",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/typesettinglanguage",
                "title": "TypesettingLanguage",
                "type": "struct"
              },
              {
                "title": "Deprecated types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Content size categories",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/accessibilityextraextraextralarge",
                    "title": "case accessibilityExtraExtraExtraLarge",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/accessibilityextraextralarge",
                    "title": "case accessibilityExtraExtraLarge",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/accessibilityextralarge",
                    "title": "case accessibilityExtraLarge",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/accessibilitylarge",
                    "title": "case accessibilityLarge",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/accessibilitymedium",
                    "title": "case accessibilityMedium",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/extraextraextralarge",
                    "title": "case extraExtraExtraLarge",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/extraextralarge",
                    "title": "case extraExtraLarge",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/extralarge",
                    "title": "case extraLarge",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/extrasmall",
                    "title": "case extraSmall",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/large",
                    "title": "case large",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/medium",
                    "title": "case medium",
                    "type": "case"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/small",
                    "title": "case small",
                    "type": "case"
                  },
                  {
                    "title": "Creating a size category",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/contentsizecategory/init(_:)",
                    "title": "init?(UIContentSizeCategory)",
                    "type": "init"
                  },
                  {
                    "title": "Comparing content size categories",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contentsizecategory/isaccessibilitycategory",
                    "title": "var isAccessibilityCategory: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/contentsizecategory/_(_:_:)-1iyos",
                    "title": "static func < (ContentSizeCategory, ContentSizeCategory) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/swiftui/contentsizecategory/_(_:_:)-61nui",
                    "title": "static func > (ContentSizeCategory, ContentSizeCategory) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/swiftui/contentsizecategory/_=(_:_:)-3lvd8",
                    "title": "static func <= (ContentSizeCategory, ContentSizeCategory) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/swiftui/contentsizecategory/_=(_:_:)-3tkt4",
                    "title": "static func >= (ContentSizeCategory, ContentSizeCategory) -> Bool",
                    "type": "op"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/swiftui/contentsizecategory",
                "title": "ContentSizeCategory",
                "type": "enum"
              }
            ],
            "path": "/documentation/swiftui/text-input-and-output",
            "title": "Text input and output",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating an image",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating an image",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(_:bundle:)",
                    "title": "init(String, bundle: Bundle?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(_:variablevalue:bundle:)",
                    "title": "init(String, variableValue: Double?, bundle: Bundle?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(_:)",
                    "title": "init(ImageResource)",
                    "type": "init"
                  },
                  {
                    "title": "Creating an image for use as a control",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(_:bundle:label:)",
                    "title": "init(String, bundle: Bundle?, label: Text)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(_:variablevalue:bundle:label:)",
                    "title": "init(String, variableValue: Double?, bundle: Bundle?, label: Text)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(_:scale:orientation:label:)",
                    "title": "init(CGImage, scale: CGFloat, orientation: Image.Orientation, label: Text)",
                    "type": "init"
                  },
                  {
                    "title": "Creating an image for decorative use",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(decorative:bundle:)",
                    "title": "init(decorative: String, bundle: Bundle?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(decorative:variablevalue:bundle:)",
                    "title": "init(decorative: String, variableValue: Double?, bundle: Bundle?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(decorative:scale:orientation:)",
                    "title": "init(decorative: CGImage, scale: CGFloat, orientation: Image.Orientation)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a system symbol image",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(systemname:)",
                    "title": "init(systemName: String)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(systemname:variablevalue:)",
                    "title": "init(systemName: String, variableValue: Double?)",
                    "type": "init"
                  },
                  {
                    "title": "Creating an image from another image",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(uiimage:)",
                    "title": "init(uiImage: UIImage)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(nsimage:)",
                    "title": "init(nsImage: NSImage)",
                    "type": "init"
                  },
                  {
                    "title": "Creating an image from drawing instructions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/init(size:label:opaque:colormode:renderer:)",
                    "title": "init(size: CGSize, label: Text?, opaque: Bool, colorMode: ColorRenderingMode, renderer: (inout GraphicsContext) -> Void)",
                    "type": "init"
                  },
                  {
                    "title": "Resizing images",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/resizable(capinsets:resizingmode:)",
                    "title": "func resizable(capInsets: EdgeInsets, resizingMode: Image.ResizingMode) -> Image",
                    "type": "method"
                  },
                  {
                    "title": "Specifying rendering behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/antialiased(_:)",
                    "title": "func antialiased(Bool) -> Image",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/image/symbolrenderingmode(_:)",
                    "title": "func symbolRenderingMode(SymbolRenderingMode?) -> Image",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/image/renderingmode(_:)",
                    "title": "func renderingMode(Image.TemplateRenderingMode?) -> Image",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/image/interpolation(_:)",
                    "title": "func interpolation(Image.Interpolation) -> Image",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting rendering modes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/image/templaterenderingmode/original",
                        "title": "case original",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/templaterenderingmode/template",
                        "title": "case template",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/image/templaterenderingmode",
                    "title": "Image.TemplateRenderingMode",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting interpolation options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/image/interpolation/high",
                        "title": "case high",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/interpolation/low",
                        "title": "case low",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/interpolation/medium",
                        "title": "case medium",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/interpolation/none",
                        "title": "case none",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/image/interpolation",
                    "title": "Image.Interpolation",
                    "type": "enum"
                  },
                  {
                    "title": "Specifying dynamic range",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/alloweddynamicrange(_:)",
                    "title": "func allowedDynamicRange(Image.DynamicRange?) -> Image",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/environmentvalues/alloweddynamicrange",
                    "title": "var allowedDynamicRange: Image.DynamicRange?",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting dynamic range values",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/image/dynamicrange/standard",
                        "title": "static let standard: Image.DynamicRange",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/image/dynamicrange/high",
                        "title": "static let high: Image.DynamicRange",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/image/dynamicrange/constrainedhigh",
                        "title": "static let constrainedHigh: Image.DynamicRange",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/image/dynamicrange",
                    "title": "Image.DynamicRange",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/widgetaccentedrenderingmode(_:)",
                    "title": "func widgetAccentedRenderingMode(WidgetAccentedRenderingMode?) -> some View",
                    "type": "method"
                  },
                  {
                    "title": "Enumerations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting image orientations",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/image/orientation/up",
                        "title": "case up",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/orientation/down",
                        "title": "case down",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/orientation/left",
                        "title": "case left",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/orientation/right",
                        "title": "case right",
                        "type": "case"
                      },
                      {
                        "title": "Getting mirrored image orientation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/image/orientation/upmirrored",
                        "title": "case upMirrored",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/orientation/downmirrored",
                        "title": "case downMirrored",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/orientation/leftmirrored",
                        "title": "case leftMirrored",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/orientation/rightmirrored",
                        "title": "case rightMirrored",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/image/orientation",
                    "title": "Image.Orientation",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting resizing modes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/image/resizingmode/stretch",
                        "title": "case stretch",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/resizingmode/tile",
                        "title": "case tile",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/image/resizingmode",
                    "title": "Image.ResizingMode",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting image scales",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/image/scale/small",
                        "title": "case small",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/scale/medium",
                        "title": "case medium",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/image/scale/large",
                        "title": "case large",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/image/scale",
                    "title": "Image.Scale",
                    "type": "enum"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/image/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/swiftui/image/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/image/journalingsuggestioncontent",
                        "title": "Image.JournalingSuggestionContent",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/swiftui/image/journalingsuggestionasset-implementations",
                    "title": "JournalingSuggestionAsset Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/swiftui/image",
                "title": "Image",
                "type": "struct"
              },
              {
                "title": "Configuring an image",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/fitting-images-into-available-space",
                "title": "Fitting images into available space",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/view/imagescale(_:)",
                "title": "func imageScale(Image.Scale) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/imagescale",
                "title": "var imageScale: Image.Scale",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting image scales",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/scale/small",
                    "title": "case small",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/image/scale/medium",
                    "title": "case medium",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/image/scale/large",
                    "title": "case large",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/image/scale",
                "title": "Image.Scale",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting image orientations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/orientation/up",
                    "title": "case up",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/image/orientation/down",
                    "title": "case down",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/image/orientation/left",
                    "title": "case left",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/image/orientation/right",
                    "title": "case right",
                    "type": "case"
                  },
                  {
                    "title": "Getting mirrored image orientation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/orientation/upmirrored",
                    "title": "case upMirrored",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/image/orientation/downmirrored",
                    "title": "case downMirrored",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/image/orientation/leftmirrored",
                    "title": "case leftMirrored",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/image/orientation/rightmirrored",
                    "title": "case rightMirrored",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/image/orientation",
                "title": "Image.Orientation",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting resizing modes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/image/resizingmode/stretch",
                    "title": "case stretch",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/image/resizingmode/tile",
                    "title": "case tile",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/image/resizingmode",
                "title": "Image.ResizingMode",
                "type": "enum"
              },
              {
                "title": "Loading images asynchronously",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Loading an image",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/asyncimage/init(url:scale:)",
                    "title": "init(url: URL?, scale: CGFloat)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/asyncimage/init(url:scale:content:placeholder:)",
                    "title": "init<I, P>(url: URL?, scale: CGFloat, content: (Image) -> I, placeholder: () -> P)",
                    "type": "init"
                  },
                  {
                    "title": "Loading an image in phases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/asyncimage/init(url:scale:transaction:content:)",
                    "title": "init(url: URL?, scale: CGFloat, transaction: Transaction, content: (AsyncImagePhase) -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/asyncimage",
                "title": "AsyncImage",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting load phases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/asyncimagephase/empty",
                    "title": "case empty",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/asyncimagephase/success(_:)",
                    "title": "case success(Image)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/asyncimagephase/failure(_:)",
                    "title": "case failure(any Error)",
                    "type": "case"
                  },
                  {
                    "title": "Getting the image",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/asyncimagephase/image",
                    "title": "var image: Image?",
                    "type": "property"
                  },
                  {
                    "title": "Getting the error",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/asyncimagephase/error",
                    "title": "var error: (any Error)?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/asyncimagephase",
                "title": "AsyncImagePhase",
                "type": "enum"
              },
              {
                "title": "Setting a symbol variant",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/symbolvariant(_:)",
                "title": "func symbolVariant(SymbolVariants) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/symbolvariants",
                "title": "var symbolVariants: SymbolVariants",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting symbol variants",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/symbolvariants/none",
                    "title": "static let none: SymbolVariants",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/symbolvariants/circle-swift.type.property",
                    "title": "static let circle: SymbolVariants",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/symbolvariants/square-swift.type.property",
                    "title": "static let square: SymbolVariants",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/symbolvariants/rectangle-swift.type.property",
                    "title": "static let rectangle: SymbolVariants",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/symbolvariants/fill-swift.type.property",
                    "title": "static let fill: SymbolVariants",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/symbolvariants/slash-swift.type.property",
                    "title": "static let slash: SymbolVariants",
                    "type": "property"
                  },
                  {
                    "title": "Modifying a variant",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/symbolvariants/circle-swift.property",
                    "title": "var circle: SymbolVariants",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/symbolvariants/square-swift.property",
                    "title": "var square: SymbolVariants",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/symbolvariants/rectangle-swift.property",
                    "title": "var rectangle: SymbolVariants",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/symbolvariants/fill-swift.property",
                    "title": "var fill: SymbolVariants",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/symbolvariants/slash-swift.property",
                    "title": "var slash: SymbolVariants",
                    "type": "property"
                  },
                  {
                    "title": "Comparing variants",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/symbolvariants/contains(_:)",
                    "title": "func contains(SymbolVariants) -> Bool",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/symbolvariants",
                "title": "SymbolVariants",
                "type": "struct"
              },
              {
                "title": "Managing symbol effects",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/symboleffect(_:options:isactive:)",
                "title": "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/symboleffect(_:options:value:)",
                "title": "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/symboleffectsremoved(_:)",
                "title": "func symbolEffectsRemoved(Bool) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a transition",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/symboleffecttransition/init(effect:options:)",
                    "title": "init<T>(effect: T, options: SymbolEffectOptions)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/symboleffecttransition",
                "title": "SymbolEffectTransition",
                "type": "struct"
              },
              {
                "title": "Setting symbol rendering modes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/symbolrenderingmode(_:)",
                "title": "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/symbolrenderingmode",
                "title": "var symbolRenderingMode: SymbolRenderingMode?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting symbol rendering modes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/symbolrenderingmode/hierarchical",
                    "title": "static let hierarchical: SymbolRenderingMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/symbolrenderingmode/monochrome",
                    "title": "static let monochrome: SymbolRenderingMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/symbolrenderingmode/multicolor",
                    "title": "static let multicolor: SymbolRenderingMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/symbolrenderingmode/palette",
                    "title": "static let palette: SymbolRenderingMode",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/symbolrenderingmode",
                "title": "SymbolRenderingMode",
                "type": "struct"
              },
              {
                "title": "Rendering images from views",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating an image renderer",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/imagerenderer/init(content:)",
                    "title": "init(content: Content)",
                    "type": "init"
                  },
                  {
                    "title": "Providing the source view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/imagerenderer/content",
                    "title": "var content: Content",
                    "type": "property"
                  },
                  {
                    "title": "Accessing renderer properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/imagerenderer/proposedsize",
                    "title": "var proposedSize: ProposedViewSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/imagerenderer/scale",
                    "title": "var scale: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/imagerenderer/isopaque",
                    "title": "var isOpaque: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/imagerenderer/colormode",
                    "title": "var colorMode: ColorRenderingMode",
                    "type": "property"
                  },
                  {
                    "title": "Rendering images",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/imagerenderer/render(rasterizationscale:renderer:)",
                    "title": "func render(rasterizationScale: CGFloat, renderer: (CGSize, (CGContext) -> Void) -> Void)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/imagerenderer/cgimage",
                    "title": "var cgImage: CGImage?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/imagerenderer/nsimage",
                    "title": "var nsImage: NSImage?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/imagerenderer/uiimage",
                    "title": "var uiImage: UIImage?",
                    "type": "property"
                  },
                  {
                    "title": "Producing a stream of images",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/imagerenderer/objectwillchange",
                    "title": "let objectWillChange: PassthroughSubject<Void, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/imagerenderer/isobservationenabled",
                    "title": "var isObservationEnabled: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/imagerenderer",
                "title": "ImageRenderer",
                "type": "class"
              }
            ],
            "path": "/documentation/swiftui/images",
            "title": "Images",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating buttons",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a button",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(action:label:)",
                    "title": "init(action: () -> Void, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(_:action:)",
                    "title": "init(_:action:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(_:image:action:)",
                    "title": "init(_:image:action:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(_:systemimage:action:)",
                    "title": "init(_:systemImage:action:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a button with a role",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(role:action:label:)",
                    "title": "init(role: ButtonRole?, action: () -> Void, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(_:role:action:)",
                    "title": "init(_:role:action:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(_:image:role:action:)",
                    "title": "init(_:image:role:action:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(_:systemimage:role:action:)",
                    "title": "init(_:systemImage:role:action:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a button from a configuration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(_:)",
                    "title": "init(PrimitiveButtonStyleConfiguration)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a button to perform an App Intent",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(_:intent:)",
                    "title": "init(_:intent:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(intent:label:)",
                    "title": "init<I>(intent: I, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(_:role:intent:)",
                    "title": "init(_:role:intent:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(role:intent:label:)",
                    "title": "init(role: ButtonRole?, intent: some AppIntent, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(_:image:role:intent:)",
                    "title": "init(_:image:role:intent:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/button/init(_:systemimage:role:intent:)",
                    "title": "init(_:systemImage:role:intent:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/button",
                "title": "Button",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/buttonstyle(_:)",
                "title": "func buttonStyle(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/buttonbordershape(_:)",
                "title": "func buttonBorderShape(ButtonBorderShape) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/buttonrepeatbehavior(_:)",
                "title": "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/buttonrepeatbehavior",
                "title": "var buttonRepeatBehavior: ButtonRepeatBehavior",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting border shapes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/buttonbordershape/automatic",
                    "title": "static let automatic: ButtonBorderShape",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/buttonbordershape/capsule",
                    "title": "static let capsule: ButtonBorderShape",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/buttonbordershape/circle",
                    "title": "static let circle: ButtonBorderShape",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/buttonbordershape/roundedrectangle",
                    "title": "static let roundedRectangle: ButtonBorderShape",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/buttonbordershape/roundedrectangle(radius:)",
                    "title": "static func roundedRectangle(radius: CGFloat) -> ButtonBorderShape",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/buttonbordershape",
                "title": "ButtonBorderShape",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting button roles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/buttonrole/cancel",
                    "title": "static let cancel: ButtonRole",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/buttonrole/destructive",
                    "title": "static let destructive: ButtonRole",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/buttonrole",
                "title": "ButtonRole",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting repeat behaviors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/buttonrepeatbehavior/automatic",
                    "title": "static let automatic: ButtonRepeatBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/buttonrepeatbehavior/enabled",
                    "title": "static let enabled: ButtonRepeatBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/buttonrepeatbehavior/disabled",
                    "title": "static let disabled: ButtonRepeatBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/buttonrepeatbehavior",
                "title": "ButtonRepeatBehavior",
                "type": "struct"
              },
              {
                "title": "Creating special-purpose buttons",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating an edit button",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/editbutton/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/editbutton",
                "title": "EditButton",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a paste button",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pastebutton/init(supportedcontenttypes:payloadaction:)",
                    "title": "init(supportedContentTypes: [UTType], payloadAction: ([NSItemProvider]) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/pastebutton/init(payloadtype:onpaste:)",
                    "title": "init<T>(payloadType: T.Type, onPaste: ([T]) -> Void)",
                    "type": "init"
                  },
                  {
                    "title": "Deprecated initializers",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/pastebutton/init(supportedtypes:payloadaction:)",
                    "title": "init(supportedTypes: [String], payloadAction: ([NSItemProvider]) -> Void)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/pastebutton/init(supportedtypes:validator:payloadaction:)",
                    "title": "init<Payload>(supportedTypes: [String], validator: ([NSItemProvider]) -> Payload?, payloadAction: (Payload) -> Void)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/pastebutton/init(supportedcontenttypes:validator:payloadaction:)",
                    "title": "init<Payload>(supportedContentTypes: [UTType], validator: ([NSItemProvider]) -> Payload?, payloadAction: (Payload) -> Void)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/pastebutton",
                "title": "PasteButton",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating an rename button",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/renamebutton/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/renamebutton",
                "title": "RenameButton",
                "type": "struct"
              },
              {
                "title": "Linking to other content",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a link",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/link/init(_:destination:)",
                    "title": "init(_:destination:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/link/init(destination:label:)",
                    "title": "init(destination: URL, label: () -> Label)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/link",
                "title": "Link",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Sharing an item",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sharelink/init(item:subject:message:)",
                    "title": "init(item:subject:message:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sharelink/init(_:item:subject:message:)",
                    "title": "init(_:item:subject:message:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sharelink/init(item:subject:message:label:)",
                    "title": "init(item:subject:message:label:)",
                    "type": "init"
                  },
                  {
                    "title": "Sharing an item with a preview",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sharelink/init(item:subject:message:preview:)",
                    "title": "init<I>(item: I, subject: Text?, message: Text?, preview: SharePreview<PreviewImage, PreviewIcon>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sharelink/init(_:item:subject:message:preview:)",
                    "title": "init(_:item:subject:message:preview:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sharelink/init(item:subject:message:preview:label:)",
                    "title": "init<I>(item: I, subject: Text?, message: Text?, preview: SharePreview<PreviewImage, PreviewIcon>, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Sharing items",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sharelink/init(items:subject:message:)",
                    "title": "init(items:subject:message:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sharelink/init(_:items:subject:message:)",
                    "title": "init(_:items:subject:message:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sharelink/init(items:subject:message:label:)",
                    "title": "init(items:subject:message:label:)",
                    "type": "init"
                  },
                  {
                    "title": "Sharing items with a preview",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sharelink/init(items:subject:message:preview:)",
                    "title": "init(items: Data, subject: Text?, message: Text?, preview: (Data.Element) -> SharePreview<PreviewImage, PreviewIcon>)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sharelink/init(_:items:subject:message:preview:)",
                    "title": "init(_:items:subject:message:preview:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sharelink/init(items:subject:message:preview:label:)",
                    "title": "init(items: Data, subject: Text?, message: Text?, preview: (Data.Element) -> SharePreview<PreviewImage, PreviewIcon>, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/defaultsharelinklabel",
                    "title": "DefaultShareLinkLabel",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/sharelink",
                "title": "ShareLink",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a preview",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sharepreview/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sharepreview/init(_:image:)",
                    "title": "init(_:image:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sharepreview/init(_:icon:)",
                    "title": "init(_:icon:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sharepreview/init(_:image:icon:)",
                    "title": "init(_:image:icon:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/sharepreview",
                "title": "SharePreview",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a text field link",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textfieldlink/init(_:prompt:onsubmit:)",
                    "title": "init(_:prompt:onSubmit:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/textfieldlink/init(prompt:label:onsubmit:)",
                    "title": "init(prompt: Text?, label: () -> Label, onSubmit: (String) -> Void)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/textfieldlink",
                "title": "TextFieldLink",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a help link",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/helplink/init(action:)",
                    "title": "init(action: () -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/helplink/init(destination:)",
                    "title": "init(destination: URL)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/helplink/init(anchor:)",
                    "title": "init(anchor: NSHelpManager.AnchorName)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/helplink/init(anchor:book:)",
                    "title": "init(anchor: NSHelpManager.AnchorName, book: NSHelpManager.BookName)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/helplink",
                "title": "HelpLink",
                "type": "struct"
              },
              {
                "title": "Getting numeric inputs",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a slider",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/slider/init(value:in:oneditingchanged:)",
                    "title": "init<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/slider/init(value:in:step:oneditingchanged:)",
                    "title": "init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a slider with labels",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/slider/init(value:in:label:oneditingchanged:)",
                    "title": "init<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, onEditingChanged: (Bool) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/slider/init(value:in:step:label:oneditingchanged:)",
                    "title": "init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/slider/init(value:in:label:minimumvaluelabel:maximumvaluelabel:oneditingchanged:)",
                    "title": "init<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/slider/init(value:in:step:label:minimumvaluelabel:maximumvaluelabel:oneditingchanged:)",
                    "title": "init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)",
                    "type": "init"
                  },
                  {
                    "title": "Deprecated initializers",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/slider/init(value:in:oneditingchanged:label:)",
                    "title": "init<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/slider/init(value:in:step:oneditingchanged:label:)",
                    "title": "init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/slider/init(value:in:oneditingchanged:minimumvaluelabel:maximumvaluelabel:label:)",
                    "title": "init<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/slider/init(value:in:step:oneditingchanged:minimumvaluelabel:maximumvaluelabel:label:)",
                    "title": "init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, label: () -> Label)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/slider",
                "title": "Slider",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a stepper",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/stepper/init(value:step:label:oneditingchanged:)",
                    "title": "init<V>(value: Binding<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/stepper/init(value:step:format:label:oneditingchanged:)",
                    "title": "init<F>(value: Binding<F.FormatInput>, step: F.FormatInput.Stride, format: F, label: () -> Label, onEditingChanged: (Bool) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/stepper/init(_:value:step:oneditingchanged:)",
                    "title": "init(_:value:step:onEditingChanged:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/stepper/init(_:value:step:format:oneditingchanged:)",
                    "title": "init(_:value:step:format:onEditingChanged:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a stepper over a range",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/stepper/init(value:in:step:label:oneditingchanged:)",
                    "title": "init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/stepper/init(value:in:step:format:label:oneditingchanged:)",
                    "title": "init<F>(value: Binding<F.FormatInput>, in: ClosedRange<F.FormatInput>, step: F.FormatInput.Stride, format: F, label: () -> Label, onEditingChanged: (Bool) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/stepper/init(_:value:in:step:oneditingchanged:)",
                    "title": "init(_:value:in:step:onEditingChanged:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/stepper/init(_:value:in:step:format:oneditingchanged:)",
                    "title": "init(_:value:in:step:format:onEditingChanged:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a stepper with change behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/stepper/init(label:onincrement:ondecrement:oneditingchanged:)",
                    "title": "init(label: () -> Label, onIncrement: (() -> Void)?, onDecrement: (() -> Void)?, onEditingChanged: (Bool) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/stepper/init(_:onincrement:ondecrement:oneditingchanged:)",
                    "title": "init(_:onIncrement:onDecrement:onEditingChanged:)",
                    "type": "init"
                  },
                  {
                    "title": "Deprecated initializers",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/stepper/init(value:step:oneditingchanged:label:)",
                    "title": "init<V>(value: Binding<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/stepper/init(value:in:step:oneditingchanged:label:)",
                    "title": "init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/stepper/init(onincrement:ondecrement:oneditingchanged:label:)",
                    "title": "init(onIncrement: (() -> Void)?, onDecrement: (() -> Void)?, onEditingChanged: (Bool) -> Void, label: () -> Label)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/stepper",
                "title": "Stepper",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a toggle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toggle/init(_:ison:)",
                    "title": "init(_:isOn:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/toggle/init(ison:label:)",
                    "title": "init(isOn: Binding<Bool>, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/toggle/init(_:image:ison:)",
                    "title": "init(_:image:isOn:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/toggle/init(_:systemimage:ison:)",
                    "title": "init(_:systemImage:isOn:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a toggle for a collection",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toggle/init(_:sources:ison:)",
                    "title": "init(_:sources:isOn:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/toggle/init(sources:ison:label:)",
                    "title": "init<C>(sources: C, isOn: KeyPath<C.Element, Binding<Bool>>, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/toggle/init(_:image:sources:ison:)",
                    "title": "init(_:image:sources:isOn:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/toggle/init(_:systemimage:sources:ison:)",
                    "title": "init(_:systemImage:sources:isOn:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a toggle from a configuration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toggle/init(_:)",
                    "title": "init(ToggleStyleConfiguration)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a toggle for an App Intent",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toggle/init(ison:intent:label:)",
                    "title": "init<I>(isOn: Bool, intent: I, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/toggle/init(_:ison:intent:)",
                    "title": "init(_:isOn:intent:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/toggle",
                "title": "Toggle",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/togglestyle(_:)",
                "title": "func toggleStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "title": "Choosing from a set of options",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a picker",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(_:selection:content:)",
                    "title": "init(_:selection:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(selection:content:label:)",
                    "title": "init(selection: Binding<SelectionValue>, content: () -> Content, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a picker for a collection",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(_:sources:selection:content:)",
                    "title": "init(_:sources:selection:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(sources:selection:content:label:)",
                    "title": "init<C>(sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a picker with an image label",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(_:image:selection:content:)",
                    "title": "init(_:image:selection:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(_:image:sources:selection:content:)",
                    "title": "init(_:image:sources:selection:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(_:systemimage:selection:content:)",
                    "title": "init(_:systemImage:selection:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(_:systemimage:sources:selection:content:)",
                    "title": "init(_:systemImage:sources:selection:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Deprecated initializers",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/picker/init(selection:label:content:)",
                    "title": "init(selection: Binding<SelectionValue>, label: Label, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(_:image:selection:content:currentvaluelabel:)",
                    "title": "init(_:image:selection:content:currentValueLabel:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(_:image:sources:selection:content:currentvaluelabel:)",
                    "title": "init(_:image:sources:selection:content:currentValueLabel:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(_:selection:content:currentvaluelabel:)",
                    "title": "init(_:selection:content:currentValueLabel:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(_:sources:selection:content:currentvaluelabel:)",
                    "title": "init(_:sources:selection:content:currentValueLabel:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(_:systemimage:selection:content:currentvaluelabel:)",
                    "title": "init(_:systemImage:selection:content:currentValueLabel:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(_:systemimage:sources:selection:content:currentvaluelabel:)",
                    "title": "init(_:systemImage:sources:selection:content:currentValueLabel:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(selection:content:label:currentvaluelabel:)",
                    "title": "init(selection: Binding<SelectionValue>, content: () -> Content, label: () -> Label, currentValueLabel: () -> some View)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/picker/init(sources:selection:content:label:currentvaluelabel:)",
                    "title": "init<C>(sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content, label: () -> Label, currentValueLabel: () -> some View)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/picker",
                "title": "Picker",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/pickerstyle(_:)",
                "title": "func pickerStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/horizontalradiogrouplayout()",
                "title": "func horizontalRadioGroupLayout() -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/defaultwheelpickeritemheight(_:)",
                "title": "func defaultWheelPickerItemHeight(CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/defaultwheelpickeritemheight",
                "title": "var defaultWheelPickerItemHeight: CGFloat",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/view/paletteselectioneffect(_:)",
                "title": "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting palette selection effects",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/paletteselectioneffect/automatic",
                    "title": "static let automatic: PaletteSelectionEffect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/paletteselectioneffect/custom",
                    "title": "static let custom: PaletteSelectionEffect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/paletteselectioneffect/symbolvariant(_:)",
                    "title": "static func symbolVariant(SymbolVariants) -> PaletteSelectionEffect",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/paletteselectioneffect",
                "title": "PaletteSelectionEffect",
                "type": "struct"
              },
              {
                "title": "Choosing dates",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a date picker for any date",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/datepicker/init(_:selection:displayedcomponents:)",
                    "title": "init(_:selection:displayedComponents:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/datepicker/init(selection:displayedcomponents:label:)",
                    "title": "init(selection: Binding<Date>, displayedComponents: DatePicker<Label>.Components, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a date picker for specific dates",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/datepicker/init(_:selection:in:displayedcomponents:)",
                    "title": "init(_:selection:in:displayedComponents:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/datepicker/init(selection:in:displayedcomponents:label:)",
                    "title": "init(selection:in:displayedComponents:label:)",
                    "type": "init"
                  },
                  {
                    "title": "Setting date picker components",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/datepicker/components",
                    "title": "DatePicker.Components",
                    "type": "typealias"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting date picker components",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/datepickercomponents/date",
                        "title": "static let date: DatePickerComponents",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/datepickercomponents/hourandminute",
                        "title": "static let hourAndMinute: DatePickerComponents",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/datepickercomponents/hourminuteandsecond",
                        "title": "static let hourMinuteAndSecond: DatePickerComponents",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/datepickercomponents",
                    "title": "DatePickerComponents",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/datepicker",
                "title": "DatePicker",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/datepickerstyle(_:)",
                "title": "func datePickerStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Picking dates",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/multidatepicker/init(_:selection:)",
                    "title": "init(_:selection:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/multidatepicker/init(selection:label:)",
                    "title": "init(selection: Binding<Set<DateComponents>>, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "title": "Picking dates in a range",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/multidatepicker/init(_:selection:in:)",
                    "title": "init(_:selection:in:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/multidatepicker/init(selection:in:label:)",
                    "title": "init(selection:in:label:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/multidatepicker",
                "title": "MultiDatePicker",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/calendar",
                "title": "var calendar: Calendar",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/timezone",
                "title": "var timeZone: TimeZone",
                "type": "property"
              },
              {
                "title": "Choosing a color",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a color picker",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/colorpicker/init(_:selection:supportsopacity:)",
                    "title": "init(_:selection:supportsOpacity:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/colorpicker/init(selection:supportsopacity:label:)",
                    "title": "init(selection:supportsOpacity:label:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/colorpicker",
                "title": "ColorPicker",
                "type": "struct"
              },
              {
                "title": "Indicating a value",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a gauge",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gauge/init(value:in:label:)",
                    "title": "init<V>(value: V, in: ClosedRange<V>, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gauge/init(value:in:label:currentvaluelabel:)",
                    "title": "init<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gauge/init(value:in:label:currentvaluelabel:markedvaluelabels:)",
                    "title": "init<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, markedValueLabels: () -> MarkedValueLabels)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gauge/init(value:in:label:currentvaluelabel:minimumvaluelabel:maximumvaluelabel:)",
                    "title": "init<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, minimumValueLabel: () -> BoundsLabel, maximumValueLabel: () -> BoundsLabel)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gauge/init(value:in:label:currentvaluelabel:minimumvaluelabel:maximumvaluelabel:markedvaluelabels:)",
                    "title": "init<V>(value: V, in: ClosedRange<V>, label: () -> Label, currentValueLabel: () -> CurrentValueLabel, minimumValueLabel: () -> BoundsLabel, maximumValueLabel: () -> BoundsLabel, markedValueLabels: () -> MarkedValueLabels)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/gauge",
                "title": "Gauge",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/gaugestyle(_:)",
                "title": "func gaugeStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating an indeterminate progress view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init(label:)",
                    "title": "init(label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init(_:)-6k5se",
                    "title": "init(LocalizedStringKey)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init(_:)-3q5nf",
                    "title": "init<S>(S)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a determinate progress view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init(_:)-l5vj",
                    "title": "init(Progress)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init(value:total:)",
                    "title": "init<V>(value: V?, total: V)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init(_:value:total:)",
                    "title": "init(_:value:total:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init(value:total:label:)",
                    "title": "init<V>(value: V?, total: V, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init(value:total:label:currentvaluelabel:)",
                    "title": "init<V>(value: V?, total: V, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)",
                    "type": "init"
                  },
                  {
                    "title": "Create a progress view spanning a date range",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init(timerinterval:countsdown:)",
                    "title": "init(timerInterval: ClosedRange<Date>, countsDown: Bool)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init(timerinterval:countsdown:label:)",
                    "title": "init(timerInterval: ClosedRange<Date>, countsDown: Bool, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init(timerinterval:countsdown:label:currentvaluelabel:)",
                    "title": "init(timerInterval: ClosedRange<Date>, countsDown: Bool, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)",
                    "type": "init"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/progressview/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/progressview",
                "title": "ProgressView",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/progressviewstyle(_:)",
                "title": "func progressViewStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/defaultdateprogresslabel",
                "title": "DefaultDateProgressLabel",
                "type": "struct"
              },
              {
                "title": "Indicating missing content",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in unavailable views",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/contentunavailableview/search",
                    "title": "static var search: ContentUnavailableView<SearchUnavailableContent.Label, SearchUnavailableContent.Description, SearchUnavailableContent.Actions>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/contentunavailableview/search(text:)",
                    "title": "static func search(text: String) -> ContentUnavailableView<Label, Description, Actions>",
                    "type": "method"
                  },
                  {
                    "title": "Creating an unavailable view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/contentunavailableview/init(label:description:actions:)",
                    "title": "init(label: () -> Label, description: () -> Description, actions: () -> Actions)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/contentunavailableview/init(_:image:description:)",
                    "title": "init(_:image:description:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/contentunavailableview/init(_:systemimage:description:)",
                    "title": "init(_:systemImage:description:)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting content types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/searchunavailablecontent/actions",
                        "title": "SearchUnavailableContent.Actions",
                        "type": "struct"
                      },
                      {
                        "path": "/documentation/swiftui/searchunavailablecontent/description",
                        "title": "SearchUnavailableContent.Description",
                        "type": "struct"
                      },
                      {
                        "path": "/documentation/swiftui/searchunavailablecontent/label",
                        "title": "SearchUnavailableContent.Label",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/swiftui/searchunavailablecontent",
                    "title": "SearchUnavailableContent",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/contentunavailableview",
                "title": "ContentUnavailableView",
                "type": "struct"
              },
              {
                "title": "Providing haptic feedback",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/sensoryfeedback(_:trigger:)",
                "title": "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/sensoryfeedback(trigger:_:)",
                "title": "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/sensoryfeedback(_:trigger:condition:)",
                "title": "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Indicating start and stop",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/start",
                    "title": "static let start: SensoryFeedback",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/stop",
                    "title": "static let stop: SensoryFeedback",
                    "type": "property"
                  },
                  {
                    "title": "Indicating changes and selections",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/alignment",
                    "title": "static let alignment: SensoryFeedback",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/decrease",
                    "title": "static let decrease: SensoryFeedback",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/increase",
                    "title": "static let increase: SensoryFeedback",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/levelchange",
                    "title": "static let levelChange: SensoryFeedback",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/selection",
                    "title": "static let selection: SensoryFeedback",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/pathcomplete",
                    "title": "static let pathComplete: SensoryFeedback",
                    "type": "property"
                  },
                  {
                    "title": "Indicating the outcome of an operation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/success",
                    "title": "static let success: SensoryFeedback",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/warning",
                    "title": "static let warning: SensoryFeedback",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/error",
                    "title": "static let error: SensoryFeedback",
                    "type": "property"
                  },
                  {
                    "title": "Producing a physical impact",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/impact",
                    "title": "static let impact: SensoryFeedback",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/impact(weight:intensity:)",
                    "title": "static func impact(weight: SensoryFeedback.Weight, intensity: Double) -> SensoryFeedback",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/sensoryfeedback/impact(flexibility:intensity:)",
                    "title": "static func impact(flexibility: SensoryFeedback.Flexibility, intensity: Double) -> SensoryFeedback",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting flexibility values",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/sensoryfeedback/flexibility/rigid",
                        "title": "static let rigid: SensoryFeedback.Flexibility",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/sensoryfeedback/flexibility/soft",
                        "title": "static let soft: SensoryFeedback.Flexibility",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/sensoryfeedback/flexibility/solid",
                        "title": "static let solid: SensoryFeedback.Flexibility",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/sensoryfeedback/flexibility",
                    "title": "SensoryFeedback.Flexibility",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting flexibility values",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/sensoryfeedback/weight/light",
                        "title": "static let light: SensoryFeedback.Weight",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/sensoryfeedback/weight/medium",
                        "title": "static let medium: SensoryFeedback.Weight",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/sensoryfeedback/weight/heavy",
                        "title": "static let heavy: SensoryFeedback.Weight",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/sensoryfeedback/weight",
                    "title": "SensoryFeedback.Weight",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/sensoryfeedback",
                "title": "SensoryFeedback",
                "type": "struct"
              },
              {
                "title": "Sizing controls",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/controlsize(_:)",
                "title": "func controlSize(ControlSize) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/controlsize",
                "title": "var controlSize: ControlSize",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting control sizes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlsize/mini",
                    "title": "case mini",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/controlsize/small",
                    "title": "case small",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/controlsize/regular",
                    "title": "case regular",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/controlsize/large",
                    "title": "case large",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/controlsize/extralarge",
                    "title": "case extraLarge",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/controlsize",
                "title": "ControlSize",
                "type": "enum"
              }
            ],
            "path": "/documentation/swiftui/controls-and-indicators",
            "title": "Controls and indicators",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a menu",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a menu from content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/menu/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/menu/init(content:label:)",
                    "title": "init(content: () -> Content, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/menu/init(_:image:content:)",
                    "title": "init(_:image:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/menu/init(_:systemimage:content:)",
                    "title": "init(_:systemImage:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a menu with a primary action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/menu/init(_:content:primaryaction:)",
                    "title": "init(_:content:primaryAction:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/menu/init(content:label:primaryaction:)",
                    "title": "init(content: () -> Content, label: () -> Label, primaryAction: () -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/menu/init(_:image:content:primaryaction:)",
                    "title": "init(LocalizedStringKey, image: ImageResource, content: () -> Content, primaryAction: () -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/menu/init(_:systemimage:content:primaryaction:)",
                    "title": "init(LocalizedStringKey, systemImage: String, content: () -> Content, primaryAction: () -> Void)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a menu from a configuration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/menu/init(_:)",
                    "title": "init(MenuStyleConfiguration)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/menu",
                "title": "Menu",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/menustyle(_:)",
                "title": "func menuStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "title": "Creating context menus",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/contextmenu(menuitems:)",
                "title": "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/contextmenu(menuitems:preview:)",
                "title": "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/contextmenu(forselectiontype:menu:primaryaction:)",
                "title": "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                "type": "method"
              },
              {
                "title": "Defining commands",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/scene/commands(content:)",
                "title": "func commands<Content>(content: () -> Content) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/commandsremoved()",
                "title": "func commandsRemoved() -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/scene/commandsreplaced(content:)",
                "title": "func commandsReplaced<Content>(content: () -> Content) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Implementing commands",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/commands/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commands/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/commands",
                "title": "Commands",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating a command menu",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/commandmenu/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/commandmenu",
                "title": "CommandMenu",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a command group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroup/init(after:addition:)",
                    "title": "init(after: CommandGroupPlacement, addition: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroup/init(before:addition:)",
                    "title": "init(before: CommandGroupPlacement, addition: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroup/init(replacing:addition:)",
                    "title": "init(replacing: CommandGroupPlacement, addition: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/commandgroup",
                "title": "CommandGroup",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Building content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildblock()",
                    "title": "static func buildBlock() -> EmptyCommands",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildblock(_:)",
                    "title": "static func buildBlock<C>(C) -> C",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildblock(_:_:)",
                    "title": "static func buildBlock<C0, C1>(C0, C1) -> some Commands",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildblock(_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2>(C0, C1, C2) -> some Commands",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some Commands",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some Commands",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some Commands",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some Commands",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some Commands",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some Commands",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some Commands",
                    "type": "method"
                  },
                  {
                    "title": "Building conditionally",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildeither(first:)",
                    "title": "static func buildEither<T, F>(first: T) -> _ConditionalContent<T, F>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildeither(second:)",
                    "title": "static func buildEither<T, F>(second: F) -> _ConditionalContent<T, F>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildif(_:)",
                    "title": "static func buildIf<C>(C?) -> C?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildlimitedavailability(_:)",
                    "title": "static buildLimitedAvailability(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/commandsbuilder/buildexpression(_:)",
                    "title": "static func buildExpression<Content>(Content) -> Content",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/commandsbuilder",
                "title": "CommandsBuilder",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "App interactions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/appinfo",
                    "title": "static let appInfo: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/appsettings",
                    "title": "static let appSettings: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/apptermination",
                    "title": "static let appTermination: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/appvisibility",
                    "title": "static let appVisibility: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/systemservices",
                    "title": "static let systemServices: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "title": "File manipulation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/importexport",
                    "title": "static let importExport: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/newitem",
                    "title": "static let newItem: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/printitem",
                    "title": "static let printItem: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/saveitem",
                    "title": "static let saveItem: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "title": "Content updates",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/pasteboard",
                    "title": "static let pasteboard: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/textediting",
                    "title": "static let textEditing: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/textformatting",
                    "title": "static let textFormatting: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/undoredo",
                    "title": "static let undoRedo: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "title": "Bars",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/sidebar",
                    "title": "static let sidebar: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/toolbar",
                    "title": "static let toolbar: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "title": "Windows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/singlewindowlist",
                    "title": "static let singleWindowList: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/windowarrangement",
                    "title": "static let windowArrangement: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/windowlist",
                    "title": "static let windowList: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/windowsize",
                    "title": "static let windowSize: CommandGroupPlacement",
                    "type": "property"
                  },
                  {
                    "title": "Help",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/commandgroupplacement/help",
                    "title": "static let help: CommandGroupPlacement",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/commandgroupplacement",
                "title": "CommandGroupPlacement",
                "type": "struct"
              },
              {
                "title": "Getting built-in command groups",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating the command group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sidebarcommands/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/sidebarcommands",
                "title": "SidebarCommands",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the command group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/texteditingcommands/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/texteditingcommands",
                "title": "TextEditingCommands",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the command group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/textformattingcommands/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/textformattingcommands",
                "title": "TextFormattingCommands",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the command group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/toolbarcommands/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/toolbarcommands",
                "title": "ToolbarCommands",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the command group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/importfromdevicescommands/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/importfromdevicescommands",
                "title": "ImportFromDevicesCommands",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a command",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/inspectorcommands/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/inspectorcommands",
                "title": "InspectorCommands",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the command group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/emptycommands/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/emptycommands",
                "title": "EmptyCommands",
                "type": "struct"
              },
              {
                "title": "Showing a menu indicator",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/menuindicator(_:)",
                "title": "func menuIndicator(Visibility) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/menuindicatorvisibility",
                "title": "var menuIndicatorVisibility: Visibility",
                "type": "property"
              },
              {
                "title": "Configuring menu dismissal",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/menuactiondismissbehavior(_:)",
                "title": "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting dismiss behaviors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/menuactiondismissbehavior/automatic",
                    "title": "static let automatic: MenuActionDismissBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/menuactiondismissbehavior/disabled",
                    "title": "static let disabled: MenuActionDismissBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/menuactiondismissbehavior/enabled",
                    "title": "static let enabled: MenuActionDismissBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/menuactiondismissbehavior",
                "title": "MenuActionDismissBehavior",
                "type": "struct"
              },
              {
                "title": "Setting a preferred order",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/menuorder(_:)",
                "title": "func menuOrder(MenuOrder) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/menuorder",
                "title": "var menuOrder: MenuOrder",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting menu orders",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/menuorder/automatic",
                    "title": "static let automatic: MenuOrder",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/menuorder/fixed",
                    "title": "static let fixed: MenuOrder",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/menuorder/priority",
                    "title": "static let priority: MenuOrder",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/menuorder",
                "title": "MenuOrder",
                "type": "struct"
              },
              {
                "title": "Deprecated types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a menu button",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/menubutton/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/menubutton/init(label:content:)",
                    "title": "init(label: Label, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "title": "Styling a menu button",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/view/menubuttonstyle(_:)",
                    "title": "func menuButtonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Supporting types",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a borderless button menu button style",
                            "type": "groupMarker"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/swiftui/borderlessbuttonmenubuttonstyle/init()",
                            "title": "init()",
                            "type": "init"
                          }
                        ],
                        "deprecated": true,
                        "path": "/documentation/swiftui/borderlessbuttonmenubuttonstyle",
                        "title": "BorderlessButtonMenuButtonStyle",
                        "type": "struct"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a borderless pull down menu button style",
                            "type": "groupMarker"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/swiftui/borderlesspulldownmenubuttonstyle/init()",
                            "title": "init()",
                            "type": "init"
                          }
                        ],
                        "deprecated": true,
                        "path": "/documentation/swiftui/borderlesspulldownmenubuttonstyle",
                        "title": "BorderlessPullDownMenuButtonStyle",
                        "type": "struct"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a default menu button style",
                            "type": "groupMarker"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/swiftui/defaultmenubuttonstyle/init()",
                            "title": "init()",
                            "type": "init"
                          }
                        ],
                        "deprecated": true,
                        "path": "/documentation/swiftui/defaultmenubuttonstyle",
                        "title": "DefaultMenuButtonStyle",
                        "type": "struct"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a pull down menu button style",
                            "type": "groupMarker"
                          },
                          {
                            "deprecated": true,
                            "path": "/documentation/swiftui/pulldownmenubuttonstyle/init()",
                            "title": "init()",
                            "type": "init"
                          }
                        ],
                        "deprecated": true,
                        "path": "/documentation/swiftui/pulldownmenubuttonstyle",
                        "title": "PullDownMenuButtonStyle",
                        "type": "struct"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/swiftui/menubuttonstyle",
                    "title": "MenuButtonStyle",
                    "type": "protocol"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/swiftui/menubutton",
                "title": "MenuButton",
                "type": "struct"
              },
              {
                "deprecated": true,
                "path": "/documentation/swiftui/pulldownbutton",
                "title": "PullDownButton",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Creating a context menu",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/contextmenu/init(menuitems:)",
                    "title": "init(menuItems: () -> MenuItems)",
                    "type": "init"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/swiftui/contextmenu",
                "title": "ContextMenu",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/menus-and-commands",
            "title": "Menus and commands",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating rectangular shapes",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a rectangle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/rectangle/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/rectangle",
                "title": "Rectangle",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a rounded rectangle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/roundedrectangle/init(cornerradius:style:)",
                    "title": "init(cornerRadius: CGFloat, style: RoundedCornerStyle)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/roundedrectangle/init(cornersize:style:)",
                    "title": "init(cornerSize: CGSize, style: RoundedCornerStyle)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the shape’s characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/roundedrectangle/cornersize",
                    "title": "var cornerSize: CGSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/roundedrectangle/style",
                    "title": "var style: RoundedCornerStyle",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/roundedrectangle/animatabledata",
                    "title": "var animatableData: CGSize.AnimatableData",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/roundedrectangle",
                "title": "RoundedRectangle",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting corner styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/roundedcornerstyle/circular",
                    "title": "case circular",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/roundedcornerstyle/continuous",
                    "title": "case continuous",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/roundedcornerstyle",
                "title": "RoundedCornerStyle",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating an uneven rounded rectangle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unevenroundedrectangle/init(cornerradii:style:)",
                    "title": "init(cornerRadii: RectangleCornerRadii, style: RoundedCornerStyle)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/unevenroundedrectangle/init(topleadingradius:bottomleadingradius:bottomtrailingradius:toptrailingradius:style:)",
                    "title": "init(topLeadingRadius: CGFloat, bottomLeadingRadius: CGFloat, bottomTrailingRadius: CGFloat, topTrailingRadius: CGFloat, style: RoundedCornerStyle)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the shape’s characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unevenroundedrectangle/cornerradii",
                    "title": "var cornerRadii: RectangleCornerRadii",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unevenroundedrectangle/style",
                    "title": "var style: RoundedCornerStyle",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unevenroundedrectangle/animatabledata",
                    "title": "var animatableData: RectangleCornerRadii.AnimatableData",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/unevenroundedrectangle",
                "title": "UnevenRoundedRectangle",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a set of radii",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/rectanglecornerradii/init(topleading:bottomleading:bottomtrailing:toptrailing:)",
                    "title": "init(topLeading: CGFloat, bottomLeading: CGFloat, bottomTrailing: CGFloat, topTrailing: CGFloat)",
                    "type": "init"
                  },
                  {
                    "title": "Getting values for specific corners",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/rectanglecornerradii/topleading",
                    "title": "var topLeading: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/rectanglecornerradii/toptrailing",
                    "title": "var topTrailing: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/rectanglecornerradii/bottomleading",
                    "title": "var bottomLeading: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/rectanglecornerradii/bottomtrailing",
                    "title": "var bottomTrailing: CGFloat",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/rectanglecornerradii",
                "title": "RectangleCornerRadii",
                "type": "struct"
              },
              {
                "title": "Creating circular shapes",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a circle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/circle/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/circle",
                "title": "Circle",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating an ellipse",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/ellipse/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/ellipse",
                "title": "Ellipse",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a capsule",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/capsule/init(style:)",
                    "title": "init(style: RoundedCornerStyle)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the shape’s characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/capsule/style",
                    "title": "var style: RoundedCornerStyle",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/capsule",
                "title": "Capsule",
                "type": "struct"
              },
              {
                "title": "Drawing custom shapes",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a path",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/path/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/path/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/path/init(ellipsein:)",
                    "title": "init(ellipseIn: CGRect)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/path/init(roundedrect:cornerradius:style:)",
                    "title": "init(roundedRect: CGRect, cornerRadius: CGFloat, style: RoundedCornerStyle)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/path/init(roundedrect:cornersize:style:)",
                    "title": "init(roundedRect: CGRect, cornerSize: CGSize, style: RoundedCornerStyle)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/path/init(roundedrect:cornerradii:style:)",
                    "title": "init(roundedRect: CGRect, cornerRadii: RectangleCornerRadii, style: RoundedCornerStyle)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the path’s characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/path/boundingrect",
                    "title": "var boundingRect: CGRect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/path/cgpath",
                    "title": "var cgPath: CGPath",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/path/contains(_:eofill:)",
                    "title": "func contains(CGPoint, eoFill: Bool) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/currentpoint",
                    "title": "var currentPoint: CGPoint?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/path/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/path/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Drawing a path",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/path/move(to:)",
                    "title": "func move(to: CGPoint)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/addarc(center:radius:startangle:endangle:clockwise:transform:)",
                    "title": "func addArc(center: CGPoint, radius: CGFloat, startAngle: Angle, endAngle: Angle, clockwise: Bool, transform: CGAffineTransform)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/addarc(tangent1end:tangent2end:radius:transform:)",
                    "title": "func addArc(tangent1End: CGPoint, tangent2End: CGPoint, radius: CGFloat, transform: CGAffineTransform)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/addcurve(to:control1:control2:)",
                    "title": "func addCurve(to: CGPoint, control1: CGPoint, control2: CGPoint)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/addellipse(in:transform:)",
                    "title": "func addEllipse(in: CGRect, transform: CGAffineTransform)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/addline(to:)",
                    "title": "func addLine(to: CGPoint)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/addlines(_:)",
                    "title": "func addLines([CGPoint])",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/addpath(_:transform:)",
                    "title": "func addPath(Path, transform: CGAffineTransform)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/addquadcurve(to:control:)",
                    "title": "func addQuadCurve(to: CGPoint, control: CGPoint)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/addrect(_:transform:)",
                    "title": "func addRect(CGRect, transform: CGAffineTransform)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/addrects(_:transform:)",
                    "title": "func addRects([CGRect], transform: CGAffineTransform)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/addrelativearc(center:radius:startangle:delta:transform:)",
                    "title": "func addRelativeArc(center: CGPoint, radius: CGFloat, startAngle: Angle, delta: Angle, transform: CGAffineTransform)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/addroundedrect(in:cornersize:style:transform:)",
                    "title": "func addRoundedRect(in: CGRect, cornerSize: CGSize, style: RoundedCornerStyle, transform: CGAffineTransform)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/closesubpath()",
                    "title": "func closeSubpath()",
                    "type": "method"
                  },
                  {
                    "title": "Transforming the path",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/path/applying(_:)",
                    "title": "func applying(CGAffineTransform) -> Path",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/offsetby(dx:dy:)",
                    "title": "func offsetBy(dx: CGFloat, dy: CGFloat) -> Path",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/trimmedpath(from:to:)",
                    "title": "func trimmedPath(from: CGFloat, to: CGFloat) -> Path",
                    "type": "method"
                  },
                  {
                    "title": "Performing operations on the path",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/path/addroundedrect(in:cornersize:style:transform:)",
                    "title": "func addRoundedRect(in: CGRect, cornerSize: CGSize, style: RoundedCornerStyle, transform: CGAffineTransform)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/intersection(_:eofill:)",
                    "title": "func intersection(Path, eoFill: Bool) -> Path",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/lineintersection(_:eofill:)",
                    "title": "func lineIntersection(Path, eoFill: Bool) -> Path",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/linesubtraction(_:eofill:)",
                    "title": "func lineSubtraction(Path, eoFill: Bool) -> Path",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/normalized(eofill:)",
                    "title": "func normalized(eoFill: Bool) -> Path",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/subtracting(_:eofill:)",
                    "title": "func subtracting(Path, eoFill: Bool) -> Path",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/symmetricdifference(_:eofill:)",
                    "title": "func symmetricDifference(Path, eoFill: Bool) -> Path",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/path/union(_:eofill:)",
                    "title": "func union(Path, eoFill: Bool) -> Path",
                    "type": "method"
                  },
                  {
                    "title": "Operating over path elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/path/foreach(_:)",
                    "title": "func forEach((Path.Element) -> Void)",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting path elements",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/path/element/closesubpath",
                        "title": "case closeSubpath",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/path/element/curve(to:control1:control2:)",
                        "title": "case curve(to: CGPoint, control1: CGPoint, control2: CGPoint)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/path/element/line(to:)",
                        "title": "case line(to: CGPoint)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/path/element/move(to:)",
                        "title": "case move(to: CGPoint)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/path/element/quadcurve(to:control:)",
                        "title": "case quadCurve(to: CGPoint, control: CGPoint)",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/path/element",
                    "title": "Path.Element",
                    "type": "enum"
                  },
                  {
                    "title": "Applying a style",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/path/strokedpath(_:)",
                    "title": "func strokedPath(StrokeStyle) -> Path",
                    "type": "method"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/path/addroundedrect(in:cornerradii:style:transform:)",
                    "title": "func addRoundedRect(in: CGRect, cornerRadii: RectangleCornerRadii, style: RoundedCornerStyle, transform: CGAffineTransform)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/path",
                "title": "Path",
                "type": "struct"
              },
              {
                "title": "Defining shape behavior",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Getting the shape",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapeview/shape",
                    "title": "var shape: Self.Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapeview/content",
                    "title": "Content",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Modify the shape",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapeview/fill(_:style:)",
                    "title": "func fill<S>(S, style: FillStyle) -> FillShapeView<Self.Content, S, Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapeview/stroke(_:style:antialiased:)",
                    "title": "func stroke<S>(S, style: StrokeStyle, antialiased: Bool) -> StrokeShapeView<Self.Content, S, Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapeview/stroke(_:linewidth:antialiased:)",
                    "title": "func stroke<S>(S, lineWidth: CGFloat, antialiased: Bool) -> StrokeShapeView<Self.Content, S, Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapeview/strokeborder(_:style:antialiased:)",
                    "title": "func strokeBorder<S>(S, style: StrokeStyle, antialiased: Bool) -> StrokeBorderShapeView<Self.Content, S, Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapeview/strokeborder(_:linewidth:antialiased:)",
                    "title": "func strokeBorder<S>(S, lineWidth: CGFloat, antialiased: Bool) -> StrokeBorderShapeView<Self.Content, S, Self>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/shapeview",
                "title": "ShapeView",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting standard shapes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shape/buttonborder",
                    "title": "static var buttonBorder: ButtonBorderShape",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shape/capsule",
                    "title": "static var capsule: Capsule",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shape/capsule(style:)",
                    "title": "static func capsule(style: RoundedCornerStyle) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/circle",
                    "title": "static var circle: Circle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shape/containerrelative",
                    "title": "static var containerRelative: ContainerRelativeShape",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shape/ellipse",
                    "title": "static var ellipse: Ellipse",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shape/rect",
                    "title": "static var rect: Rectangle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shape/rect(cornerradii:style:)",
                    "title": "static func rect(cornerRadii: RectangleCornerRadii, style: RoundedCornerStyle) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/rect(cornerradius:style:)",
                    "title": "static func rect(cornerRadius: CGFloat, style: RoundedCornerStyle) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/rect(cornersize:style:)",
                    "title": "static func rect(cornerSize: CGSize, style: RoundedCornerStyle) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/rect(topleadingradius:bottomleadingradius:bottomtrailingradius:toptrailingradius:style:)",
                    "title": "static func rect(topLeadingRadius: CGFloat, bottomLeadingRadius: CGFloat, bottomTrailingRadius: CGFloat, topTrailingRadius: CGFloat, style: RoundedCornerStyle) -> Self",
                    "type": "method"
                  },
                  {
                    "title": "Defining a shape’s size and path",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shape/sizethatfits(_:)",
                    "title": "func sizeThatFits(ProposedViewSize) -> CGSize",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/path(in:)",
                    "title": "func path(in: CGRect) -> Path",
                    "type": "method"
                  },
                  {
                    "title": "Transforming a shape",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shape/trim(from:to:)",
                    "title": "func trim(from: CGFloat, to: CGFloat) -> some Shape",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/transform(_:)",
                    "title": "func transform(CGAffineTransform) -> TransformedShape<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/size(_:)",
                    "title": "func size(CGSize) -> some Shape",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/size(width:height:)",
                    "title": "func size(width: CGFloat, height: CGFloat) -> some Shape",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/scale(_:anchor:)",
                    "title": "func scale(CGFloat, anchor: UnitPoint) -> ScaledShape<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/scale(x:y:anchor:)",
                    "title": "func scale(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> ScaledShape<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/rotation(_:anchor:)",
                    "title": "func rotation(Angle, anchor: UnitPoint) -> RotatedShape<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/offset(_:)",
                    "title": "func offset(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/offset(x:y:)",
                    "title": "func offset(x: CGFloat, y: CGFloat) -> OffsetShape<Self>",
                    "type": "method"
                  },
                  {
                    "title": "Setting the stroke characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shape/stroke(_:linewidth:)",
                    "title": "func stroke<S>(S, lineWidth: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/stroke(_:linewidth:antialiased:)",
                    "title": "func stroke<S>(S, lineWidth: CGFloat, antialiased: Bool) -> StrokeShapeView<Self, S, EmptyView>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/stroke(linewidth:)",
                    "title": "func stroke(lineWidth: CGFloat) -> some Shape",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/stroke(_:style:)",
                    "title": "func stroke<S>(S, style: StrokeStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/stroke(_:style:antialiased:)",
                    "title": "func stroke<S>(S, style: StrokeStyle, antialiased: Bool) -> StrokeShapeView<Self, S, EmptyView>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/stroke(style:)",
                    "title": "func stroke(style: StrokeStyle) -> some Shape",
                    "type": "method"
                  },
                  {
                    "title": "Filling a shape",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shape/fill(_:style:)",
                    "title": "func fill(_:style:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/fill(style:)",
                    "title": "func fill(style: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "title": "Setting the role",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shape/role",
                    "title": "static var role: ShapeRole",
                    "type": "property"
                  },
                  {
                    "title": "Indicating a layout direction",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shape/layoutdirectionbehavior",
                    "title": "var layoutDirectionBehavior: LayoutDirectionBehavior",
                    "type": "property"
                  },
                  {
                    "title": "Performing operations on a shape",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shape/intersection(_:eofill:)",
                    "title": "func intersection<T>(T, eoFill: Bool) -> some Shape",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/lineintersection(_:eofill:)",
                    "title": "func lineIntersection<T>(T, eoFill: Bool) -> some Shape",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/linesubtraction(_:eofill:)",
                    "title": "func lineSubtraction<T>(T, eoFill: Bool) -> some Shape",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/subtracting(_:eofill:)",
                    "title": "func subtracting<T>(T, eoFill: Bool) -> some Shape",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/symmetricdifference(_:eofill:)",
                    "title": "func symmetricDifference<T>(T, eoFill: Bool) -> some Shape",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/union(_:eofill:)",
                    "title": "func union<T>(T, eoFill: Bool) -> some Shape",
                    "type": "method"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shape/size(_:anchor:)",
                    "title": "func size(CGSize, anchor: UnitPoint) -> some Shape",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shape/size(width:height:anchor:)",
                    "title": "func size(width: CGFloat, height: CGFloat, anchor: UnitPoint) -> some Shape",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/shape",
                "title": "Shape",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating a shape",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anyshape/init(_:)",
                    "title": "init<S>(S)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/anyshape",
                "title": "AnyShape",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting shape roles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shaperole/fill",
                    "title": "case fill",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/shaperole/stroke",
                    "title": "case stroke",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/shaperole/separator",
                    "title": "case separator",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/shaperole",
                "title": "ShapeRole",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating a stroke style",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/strokestyle/init(linewidth:linecap:linejoin:miterlimit:dash:dashphase:)",
                    "title": "init(lineWidth: CGFloat, lineCap: CGLineCap, lineJoin: CGLineJoin, miterLimit: CGFloat, dash: [CGFloat], dashPhase: CGFloat)",
                    "type": "init"
                  },
                  {
                    "title": "Setting stroke style properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/strokestyle/linewidth",
                    "title": "var lineWidth: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokestyle/linecap",
                    "title": "var lineCap: CGLineCap",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokestyle/linejoin",
                    "title": "var lineJoin: CGLineJoin",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokestyle/miterlimit",
                    "title": "var miterLimit: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokestyle/dash",
                    "title": "var dash: [CGFloat]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokestyle/dashphase",
                    "title": "var dashPhase: CGFloat",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/strokestyle",
                "title": "StrokeStyle",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a stroke shape view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/strokeshapeview/init(shape:style:strokestyle:isantialiased:background:)",
                    "title": "init(shape: Content, style: Style, strokeStyle: StrokeStyle, isAntialiased: Bool, background: Background)",
                    "type": "init"
                  },
                  {
                    "title": "Getting shape view properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/strokeshapeview/background",
                    "title": "var background: Background",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokeshapeview/isantialiased",
                    "title": "var isAntialiased: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokeshapeview/shape",
                    "title": "var shape: Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokeshapeview/strokestyle",
                    "title": "var strokeStyle: StrokeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokeshapeview/style",
                    "title": "var style: Style",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/strokeshapeview",
                "title": "StrokeShapeView",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a stroke border shape view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/strokebordershapeview/init(shape:style:strokestyle:isantialiased:background:)",
                    "title": "init(shape: Content, style: Style, strokeStyle: StrokeStyle, isAntialiased: Bool, background: Background)",
                    "type": "init"
                  },
                  {
                    "title": "Getting shape view properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/strokebordershapeview/background",
                    "title": "var background: Background",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokebordershapeview/isantialiased",
                    "title": "var isAntialiased: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokebordershapeview/shape",
                    "title": "var shape: Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokebordershapeview/strokestyle",
                    "title": "var strokeStyle: StrokeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/strokebordershapeview/style",
                    "title": "var style: Style",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/strokebordershapeview",
                "title": "StrokeBorderShapeView",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a fill style",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/fillstyle/init(eofill:antialiased:)",
                    "title": "init(eoFill: Bool, antialiased: Bool)",
                    "type": "init"
                  },
                  {
                    "title": "Setting fill style properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/fillstyle/iseofilled",
                    "title": "var isEOFilled: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/fillstyle/isantialiased",
                    "title": "var isAntialiased: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/fillstyle",
                "title": "FillStyle",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a stroke shape view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/fillshapeview/init(shape:style:fillstyle:background:)",
                    "title": "init(shape: Content, style: Style, fillStyle: FillStyle, background: Background)",
                    "type": "init"
                  },
                  {
                    "title": "Getting shape view properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/fillshapeview/background",
                    "title": "var background: Background",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/fillshapeview/fillstyle",
                    "title": "var fillStyle: FillStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/fillshapeview/shape",
                    "title": "var shape: Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/fillshapeview/style",
                    "title": "var style: Style",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/fillshapeview",
                "title": "FillShapeView",
                "type": "struct"
              },
              {
                "title": "Transforming a shape",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a scaled shape",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scaledshape/init(shape:scale:anchor:)",
                    "title": "init(shape: Content, scale: CGSize, anchor: UnitPoint)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the shape’s characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scaledshape/anchor",
                    "title": "var anchor: UnitPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scaledshape/scale",
                    "title": "var scale: CGSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scaledshape/shape",
                    "title": "var shape: Content",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scaledshape/animatabledata",
                    "title": "var animatableData: ScaledShape<Content>.AnimatableData",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scaledshape",
                "title": "ScaledShape",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a rotated shape",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/rotatedshape/init(shape:angle:anchor:)",
                    "title": "init(shape: Content, angle: Angle, anchor: UnitPoint)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the shape’s characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/rotatedshape/anchor",
                    "title": "var anchor: UnitPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/rotatedshape/angle",
                    "title": "var angle: Angle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/rotatedshape/shape",
                    "title": "var shape: Content",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/rotatedshape/animatabledata",
                    "title": "var animatableData: RotatedShape<Content>.AnimatableData",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/rotatedshape",
                "title": "RotatedShape",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating an offset shape",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/offsetshape/init(shape:offset:)",
                    "title": "init(shape: Content, offset: CGSize)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the shape’s characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/offsetshape/offset",
                    "title": "var offset: CGSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/offsetshape/shape",
                    "title": "var shape: Content",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/offsetshape/animatabledata",
                    "title": "var animatableData: OffsetShape<Content>.AnimatableData",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/offsetshape",
                "title": "OffsetShape",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a transformed shape",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transformedshape/init(shape:transform:)",
                    "title": "init(shape: Content, transform: CGAffineTransform)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the shape’s characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/transformedshape/shape",
                    "title": "var shape: Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/transformedshape/transform",
                    "title": "var transform: CGAffineTransform",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/transformedshape",
                "title": "TransformedShape",
                "type": "struct"
              },
              {
                "title": "Setting a container shape",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/containershape(_:)",
                "title": "func containerShape<T>(T) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Setting the stroke border characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/insettableshape/strokeborder(_:linewidth:antialiased:)",
                    "title": "func strokeBorder(_:lineWidth:antialiased:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/insettableshape/strokeborder(linewidth:antialiased:)",
                    "title": "func strokeBorder(lineWidth: CGFloat, antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/insettableshape/strokeborder(_:style:antialiased:)",
                    "title": "func strokeBorder(_:style:antialiased:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/insettableshape/strokeborder(style:antialiased:)",
                    "title": "func strokeBorder(style: StrokeStyle, antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "title": "Setting the inset",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/insettableshape/inset(by:)",
                    "title": "func inset(by: CGFloat) -> Self.InsetShape",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/insettableshape/insetshape",
                    "title": "InsetShape",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/insettableshape",
                "title": "InsettableShape",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating the shape",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/containerrelativeshape/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/containerrelativeshape",
                "title": "ContainerRelativeShape",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/shapes",
            "title": "Shapes",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Immediate mode drawing",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/add_rich_graphics_to_your_swiftui_app",
                "title": "Add Rich Graphics to Your SwiftUI App",
                "type": "sampleCode"
              },
              {
                "children": [
                  {
                    "title": "Creating a canvas",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/canvas/init(opaque:colormode:rendersasynchronously:renderer:)",
                    "title": "init(opaque: Bool, colorMode: ColorRenderingMode, rendersAsynchronously: Bool, renderer: (inout GraphicsContext, CGSize) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/canvas/init(opaque:colormode:rendersasynchronously:renderer:symbols:)",
                    "title": "init(opaque: Bool, colorMode: ColorRenderingMode, rendersAsynchronously: Bool, renderer: (inout GraphicsContext, CGSize) -> Void, symbols: () -> Symbols)",
                    "type": "init"
                  },
                  {
                    "title": "Managing opacity and color",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/canvas/isopaque",
                    "title": "var isOpaque: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/canvas/colormode",
                    "title": "var colorMode: ColorRenderingMode",
                    "type": "property"
                  },
                  {
                    "title": "Referencing symbols",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/canvas/symbols",
                    "title": "var symbols: Symbols",
                    "type": "property"
                  },
                  {
                    "title": "Rendering",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/canvas/rendersasynchronously",
                    "title": "var rendersAsynchronously: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/canvas/renderer",
                    "title": "var renderer: (inout GraphicsContext, CGSize) -> Void",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/canvas",
                "title": "Canvas",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Drawing a path",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/stroke(_:with:linewidth:)",
                    "title": "func stroke(Path, with: GraphicsContext.Shading, lineWidth: CGFloat)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/stroke(_:with:style:)",
                    "title": "func stroke(Path, with: GraphicsContext.Shading, style: StrokeStyle)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/fill(_:with:style:)",
                    "title": "func fill(Path, with: GraphicsContext.Shading, style: FillStyle)",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Colors",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/color(_:)",
                        "title": "static func color(Color) -> GraphicsContext.Shading",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/color(_:red:green:blue:opacity:)",
                        "title": "static func color(Color.RGBColorSpace, red: Double, green: Double, blue: Double, opacity: Double) -> GraphicsContext.Shading",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/color(_:white:opacity:)",
                        "title": "static func color(Color.RGBColorSpace, white: Double, opacity: Double) -> GraphicsContext.Shading",
                        "type": "method"
                      },
                      {
                        "title": "Gradients",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/lineargradient(_:startpoint:endpoint:options:)",
                        "title": "static func linearGradient(Gradient, startPoint: CGPoint, endPoint: CGPoint, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/radialgradient(_:center:startradius:endradius:options:)",
                        "title": "static func radialGradient(Gradient, center: CGPoint, startRadius: CGFloat, endRadius: CGFloat, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/conicgradient(_:center:angle:options:)",
                        "title": "static func conicGradient(Gradient, center: CGPoint, angle: Angle, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading",
                        "type": "method"
                      },
                      {
                        "title": "Other shape styles",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/style(_:)",
                        "title": "static func style<S>(S) -> GraphicsContext.Shading",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/foreground",
                        "title": "static var foreground: GraphicsContext.Shading",
                        "type": "property"
                      },
                      {
                        "title": "Images",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/tiledimage(_:origin:sourcerect:scale:)",
                        "title": "static func tiledImage(Image, origin: CGPoint, sourceRect: CGRect, scale: CGFloat) -> GraphicsContext.Shading",
                        "type": "method"
                      },
                      {
                        "title": "Composite shading types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/palette(_:)",
                        "title": "static func palette([GraphicsContext.Shading]) -> GraphicsContext.Shading",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/backdrop",
                        "title": "static var backdrop: GraphicsContext.Shading",
                        "type": "property"
                      },
                      {
                        "title": "Using a custom Metal shader",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/shader(_:bounds:)",
                        "title": "static func shader(Shader, bounds: CGRect) -> GraphicsContext.Shading",
                        "type": "method"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shading/meshgradient(_:)",
                        "title": "static func meshGradient(MeshGradient) -> GraphicsContext.Shading",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/graphicscontext/shading",
                    "title": "GraphicsContext.Shading",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting gradient options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/gradientoptions/linearcolor",
                        "title": "static var linearColor: GraphicsContext.GradientOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/gradientoptions/mirror",
                        "title": "static var mirror: GraphicsContext.GradientOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/gradientoptions/repeat",
                        "title": "static var `repeat`: GraphicsContext.GradientOptions",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/graphicscontext/gradientoptions",
                    "title": "GraphicsContext.GradientOptions",
                    "type": "struct"
                  },
                  {
                    "title": "Drawing images, text, and views",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/draw(_:in:)",
                    "title": "func draw(_:in:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/draw(_:in:style:)",
                    "title": "func draw(_:in:style:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/draw(_:at:anchor:)",
                    "title": "func draw(_:at:anchor:)",
                    "type": "method"
                  },
                  {
                    "title": "Drawing into a new layer",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/drawlayer(content:)",
                    "title": "func drawLayer(content: (inout GraphicsContext) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "title": "Resolving a drawn entity",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/resolve(_:)",
                    "title": "func resolve(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/resolvesymbol(id:)",
                    "title": "func resolveSymbol<ID>(id: ID) -> GraphicsContext.ResolvedSymbol?",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the symbol properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/resolvedsymbol/size",
                        "title": "var size: CGSize",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/graphicscontext/resolvedsymbol",
                    "title": "GraphicsContext.ResolvedSymbol",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the image properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/resolvedimage/size",
                        "title": "var size: CGSize",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/resolvedimage/baseline",
                        "title": "let baseline: CGFloat",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/resolvedimage/shading",
                        "title": "var shading: GraphicsContext.Shading?",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/graphicscontext/resolvedimage",
                    "title": "GraphicsContext.ResolvedImage",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the text properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/resolvedtext/firstbaseline(in:)",
                        "title": "func firstBaseline(in: CGSize) -> CGFloat",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/resolvedtext/lastbaseline(in:)",
                        "title": "func lastBaseline(in: CGSize) -> CGFloat",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/resolvedtext/measure(in:)",
                        "title": "func measure(in: CGSize) -> CGSize",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/resolvedtext/shading",
                        "title": "var shading: GraphicsContext.Shading",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/graphicscontext/resolvedtext",
                    "title": "GraphicsContext.ResolvedText",
                    "type": "struct"
                  },
                  {
                    "title": "Masking",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/clip(to:style:options:)",
                    "title": "func clip(to: Path, style: FillStyle, options: GraphicsContext.ClipOptions)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/cliptolayer(opacity:options:content:)",
                    "title": "func clipToLayer(opacity: Double, options: GraphicsContext.ClipOptions, content: (inout GraphicsContext) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/clipboundingrect",
                    "title": "var clipBoundingRect: CGRect",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting clip options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/clipoptions/inverse",
                        "title": "static var inverse: GraphicsContext.ClipOptions",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/graphicscontext/clipoptions",
                    "title": "GraphicsContext.ClipOptions",
                    "type": "struct"
                  },
                  {
                    "title": "Setting opacity and the blend mode",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/opacity",
                    "title": "var opacity: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/blendmode-swift.property",
                    "title": "var blendMode: GraphicsContext.BlendMode",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the default",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/normal",
                        "title": "static var normal: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "title": "Darkening",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/darken",
                        "title": "static var darken: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/multiply",
                        "title": "static var multiply: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/colorburn",
                        "title": "static var colorBurn: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/plusdarker",
                        "title": "static var plusDarker: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "title": "Lightening",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/lighten",
                        "title": "static var lighten: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/screen",
                        "title": "static var screen: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/colordodge",
                        "title": "static var colorDodge: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/pluslighter",
                        "title": "static var plusLighter: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "title": "Adding contrast",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/overlay",
                        "title": "static var overlay: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/softlight",
                        "title": "static var softLight: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/hardlight",
                        "title": "static var hardLight: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "title": "Inverting",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/difference",
                        "title": "static var difference: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/exclusion",
                        "title": "static var exclusion: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "title": "Mixing color components",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/hue",
                        "title": "static var hue: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/saturation",
                        "title": "static var saturation: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/color",
                        "title": "static var color: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/luminosity",
                        "title": "static var luminosity: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "title": "Accessing porter-duff modes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/clear",
                        "title": "static var clear: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/copy",
                        "title": "static var copy: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/sourcein",
                        "title": "static var sourceIn: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/sourceout",
                        "title": "static var sourceOut: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/sourceatop",
                        "title": "static var sourceAtop: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/destinationover",
                        "title": "static var destinationOver: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/destinationin",
                        "title": "static var destinationIn: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/destinationout",
                        "title": "static var destinationOut: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/destinationatop",
                        "title": "static var destinationAtop: GraphicsContext.BlendMode",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct/xor",
                        "title": "static var xor: GraphicsContext.BlendMode",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/graphicscontext/blendmode-swift.struct",
                    "title": "GraphicsContext.BlendMode",
                    "type": "struct"
                  },
                  {
                    "title": "Filtering",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/addfilter(_:options:)",
                    "title": "func addFilter(GraphicsContext.Filter, options: GraphicsContext.FilterOptions)",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Changing brightness and contrast",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/brightness(_:)",
                        "title": "static func brightness(Double) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/contrast(_:)",
                        "title": "static func contrast(Double) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "title": "Manipulating color",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/saturation(_:)",
                        "title": "static func saturation(Double) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/colorinvert(_:)",
                        "title": "static func colorInvert(Double) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/colormultiply(_:)",
                        "title": "static func colorMultiply(Color) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/huerotation(_:)",
                        "title": "static func hueRotation(Angle) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/grayscale(_:)",
                        "title": "static func grayscale(Double) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/colormatrix(_:)",
                        "title": "static func colorMatrix(ColorMatrix) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "title": "Adding blur",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/blur(radius:options:)",
                        "title": "static func blur(radius: CGFloat, options: GraphicsContext.BlurOptions) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "title": "Adding a shadow",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/shadow(color:radius:x:y:blendmode:options:)",
                        "title": "static func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat, blendMode: GraphicsContext.BlendMode, options: GraphicsContext.ShadowOptions) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "title": "Adjusting opacity",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/luminancetoalpha",
                        "title": "static var luminanceToAlpha: GraphicsContext.Filter",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/alphathreshold(min:max:color:)",
                        "title": "static func alphaThreshold(min: Double, max: Double, color: Color) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "title": "Adding a transformation",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/projectiontransform(_:)",
                        "title": "static func projectionTransform(ProjectionTransform) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "title": "Using a custom Metal shader",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/colorshader(_:)",
                        "title": "static func colorShader(Shader) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/distortionshader(_:maxsampleoffset:)",
                        "title": "static func distortionShader(Shader, maxSampleOffset: CGSize) -> GraphicsContext.Filter",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filter/layershader(_:maxsampleoffset:)",
                        "title": "static func layerShader(Shader, maxSampleOffset: CGSize) -> GraphicsContext.Filter",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/graphicscontext/filter",
                    "title": "GraphicsContext.Filter",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting filter options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/filteroptions/linearcolor",
                        "title": "static var linearColor: GraphicsContext.FilterOptions",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/graphicscontext/filteroptions",
                    "title": "GraphicsContext.FilterOptions",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting blur options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/bluroptions/dithersresult",
                        "title": "static var dithersResult: GraphicsContext.BlurOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/bluroptions/opaque",
                        "title": "static var opaque: GraphicsContext.BlurOptions",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/graphicscontext/bluroptions",
                    "title": "GraphicsContext.BlurOptions",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting shadow options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shadowoptions/disablesgroup",
                        "title": "static var disablesGroup: GraphicsContext.ShadowOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shadowoptions/invertsalpha",
                        "title": "static var invertsAlpha: GraphicsContext.ShadowOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shadowoptions/shadowabove",
                        "title": "static var shadowAbove: GraphicsContext.ShadowOptions",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/graphicscontext/shadowoptions/shadowonly",
                        "title": "static var shadowOnly: GraphicsContext.ShadowOptions",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/graphicscontext/shadowoptions",
                    "title": "GraphicsContext.ShadowOptions",
                    "type": "struct"
                  },
                  {
                    "title": "Applying transforms",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/scaleby(x:y:)",
                    "title": "func scaleBy(x: CGFloat, y: CGFloat)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/rotate(by:)",
                    "title": "func rotate(by: Angle)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/translateby(x:y:)",
                    "title": "func translateBy(x: CGFloat, y: CGFloat)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/concatenate(_:)",
                    "title": "func concatenate(CGAffineTransform)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/transform",
                    "title": "var transform: CGAffineTransform",
                    "type": "property"
                  },
                  {
                    "title": "Drawing with a core graphics context",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/withcgcontext(content:)",
                    "title": "func withCGContext(content: (CGContext) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "title": "Accessing the environment",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/environment",
                    "title": "var environment: EnvironmentValues",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/graphicscontext/draw(_:options:)",
                    "title": "func draw(_:options:)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/graphicscontext",
                "title": "GraphicsContext",
                "type": "struct"
              },
              {
                "title": "Setting a color",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/tint(_:)",
                "title": "func tint(_:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a color",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/color/init(_:bundle:)",
                    "title": "init(String, bundle: Bundle?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/color/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/color/resolve(in:)",
                    "title": "func resolve(in: EnvironmentValues) -> Color.Resolved",
                    "type": "method"
                  },
                  {
                    "title": "Creating a color from component values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/color/init(hue:saturation:brightness:opacity:)",
                    "title": "init(hue: Double, saturation: Double, brightness: Double, opacity: Double)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/color/init(_:white:opacity:)",
                    "title": "init(Color.RGBColorSpace, white: Double, opacity: Double)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/color/init(_:red:green:blue:opacity:)",
                    "title": "init(Color.RGBColorSpace, red: Double, green: Double, blue: Double, opacity: Double)",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting color spaces",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/color/rgbcolorspace/srgb",
                        "title": "case sRGB",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/color/rgbcolorspace/srgblinear",
                        "title": "case sRGBLinear",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/color/rgbcolorspace/displayp3",
                        "title": "case displayP3",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/color/rgbcolorspace",
                    "title": "Color.RGBColorSpace",
                    "type": "enum"
                  },
                  {
                    "title": "Creating a color from another color",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/color/init(uicolor:)",
                    "title": "init(uiColor: UIColor)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/color/init(nscolor:)",
                    "title": "init(nsColor: NSColor)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/color/init(cgcolor:)",
                    "title": "init(cgColor: CGColor)",
                    "type": "init"
                  },
                  {
                    "title": "Getting standard colors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/color/black",
                    "title": "static let black: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/blue",
                    "title": "static let blue: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/brown",
                    "title": "static let brown: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/clear",
                    "title": "static let clear: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/cyan",
                    "title": "static let cyan: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/gray",
                    "title": "static let gray: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/green",
                    "title": "static let green: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/indigo",
                    "title": "static let indigo: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/mint",
                    "title": "static let mint: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/orange",
                    "title": "static let orange: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/pink",
                    "title": "static let pink: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/purple",
                    "title": "static let purple: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/red",
                    "title": "static let red: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/teal",
                    "title": "static let teal: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/white",
                    "title": "static let white: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/yellow",
                    "title": "static let yellow: Color",
                    "type": "property"
                  },
                  {
                    "title": "Getting semantic colors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/color/accentcolor",
                    "title": "static var accentColor: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/primary",
                    "title": "static let primary: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/color/secondary",
                    "title": "static let secondary: Color",
                    "type": "property"
                  },
                  {
                    "title": "Modifying a color",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/color/opacity(_:)",
                    "title": "func opacity(Double) -> Color",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/color/gradient",
                    "title": "var gradient: AnyGradient",
                    "type": "property"
                  },
                  {
                    "title": "Describing a color",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/color/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "title": "Comparing colors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/color/==(_:_:)",
                    "title": "static func == (Color, Color) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/swiftui/color/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Deprecated symbols",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/color/cgcolor",
                    "title": "var cgColor: CGColor?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/color/mix(with:by:in:)",
                    "title": "func mix(with: Color, by: Double, in: Gradient.ColorSpace) -> Color",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Structures",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/color/resolved/init(colorspace:red:green:blue:opacity:)",
                            "title": "init(colorSpace: Color.RGBColorSpace, red: Float, green: Float, blue: Float, opacity: Float)",
                            "type": "init"
                          },
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/color/resolved/blue",
                            "title": "var blue: Float",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/color/resolved/cgcolor",
                            "title": "var cgColor: CGColor",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/color/resolved/green",
                            "title": "var green: Float",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/color/resolved/linearblue",
                            "title": "var linearBlue: Float",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/color/resolved/lineargreen",
                            "title": "var linearGreen: Float",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/color/resolved/linearred",
                            "title": "var linearRed: Float",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/color/resolved/opacity",
                            "title": "var opacity: Float",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/color/resolved/red",
                            "title": "var red: Float",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/color/resolved",
                        "title": "Color.Resolved",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/swiftui/color/shapestyle-implementations",
                    "title": "ShapeStyle Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/color/transferrepresentation",
                        "title": "static var transferRepresentation: some TransferRepresentation",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/color/transferable-implementations",
                    "title": "Transferable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/swiftui/color",
                "title": "Color",
                "type": "struct"
              },
              {
                "title": "Styling content",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/border(_:width:)",
                "title": "func border<S>(S, width: CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/foregroundstyle(_:)",
                "title": "func foregroundStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/foregroundstyle(_:_:)",
                "title": "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/foregroundstyle(_:_:_:)",
                "title": "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/backgroundstyle(_:)",
                "title": "func backgroundStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/backgroundstyle",
                "title": "var backgroundStyle: AnyShapeStyle?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "System colors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/black",
                    "title": "static var black: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/blue",
                    "title": "static var blue: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/brown",
                    "title": "static var brown: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/clear",
                    "title": "static var clear: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/cyan",
                    "title": "static var cyan: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/gray",
                    "title": "static var gray: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/green",
                    "title": "static var green: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/indigo",
                    "title": "static var indigo: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/mint",
                    "title": "static var mint: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/orange",
                    "title": "static var orange: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/pink",
                    "title": "static var pink: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/purple",
                    "title": "static var purple: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/red",
                    "title": "static var red: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/teal",
                    "title": "static var teal: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/white",
                    "title": "static var white: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/yellow",
                    "title": "static var yellow: Color",
                    "type": "property"
                  },
                  {
                    "title": "Angular gradients",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/angulargradient(_:center:startangle:endangle:)",
                    "title": "static angularGradient(_:center:startAngle:endAngle:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/angulargradient(colors:center:startangle:endangle:)",
                    "title": "static func angularGradient(colors: [Color], center: UnitPoint, startAngle: Angle, endAngle: Angle) -> AngularGradient",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/angulargradient(stops:center:startangle:endangle:)",
                    "title": "static func angularGradient(stops: [Gradient.Stop], center: UnitPoint, startAngle: Angle, endAngle: Angle) -> AngularGradient",
                    "type": "method"
                  },
                  {
                    "title": "Conic gradients",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/conicgradient(_:center:angle:)",
                    "title": "static conicGradient(_:center:angle:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/conicgradient(colors:center:angle:)",
                    "title": "static func conicGradient(colors: [Color], center: UnitPoint, angle: Angle) -> AngularGradient",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/conicgradient(stops:center:angle:)",
                    "title": "static func conicGradient(stops: [Gradient.Stop], center: UnitPoint, angle: Angle) -> AngularGradient",
                    "type": "method"
                  },
                  {
                    "title": "Elliptical gradients",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/ellipticalgradient(_:center:startradiusfraction:endradiusfraction:)",
                    "title": "static ellipticalGradient(_:center:startRadiusFraction:endRadiusFraction:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/ellipticalgradient(colors:center:startradiusfraction:endradiusfraction:)",
                    "title": "static func ellipticalGradient(colors: [Color], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> EllipticalGradient",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/ellipticalgradient(stops:center:startradiusfraction:endradiusfraction:)",
                    "title": "static func ellipticalGradient(stops: [Gradient.Stop], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat) -> EllipticalGradient",
                    "type": "method"
                  },
                  {
                    "title": "Linear gradients",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/lineargradient(_:startpoint:endpoint:)",
                    "title": "static linearGradient(_:startPoint:endPoint:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/lineargradient(colors:startpoint:endpoint:)",
                    "title": "static func linearGradient(colors: [Color], startPoint: UnitPoint, endPoint: UnitPoint) -> LinearGradient",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/lineargradient(stops:startpoint:endpoint:)",
                    "title": "static func linearGradient(stops: [Gradient.Stop], startPoint: UnitPoint, endPoint: UnitPoint) -> LinearGradient",
                    "type": "method"
                  },
                  {
                    "title": "Radial gradients",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/radialgradient(_:center:startradius:endradius:)",
                    "title": "static radialGradient(_:center:startRadius:endRadius:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/radialgradient(colors:center:startradius:endradius:)",
                    "title": "static func radialGradient(colors: [Color], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> RadialGradient",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/radialgradient(stops:center:startradius:endradius:)",
                    "title": "static func radialGradient(stops: [Gradient.Stop], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat) -> RadialGradient",
                    "type": "method"
                  },
                  {
                    "title": "Materials",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/ultrathinmaterial",
                    "title": "static var ultraThinMaterial: Material",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/thinmaterial",
                    "title": "static var thinMaterial: Material",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/regularmaterial",
                    "title": "static var regularMaterial: Material",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/thickmaterial",
                    "title": "static var thickMaterial: Material",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/ultrathickmaterial",
                    "title": "static var ultraThickMaterial: Material",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/bar",
                    "title": "static var bar: Material",
                    "type": "property"
                  },
                  {
                    "title": "Image paint styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/image(_:sourcerect:scale:)",
                    "title": "static func image(Image, sourceRect: CGRect, scale: CGFloat) -> ImagePaint",
                    "type": "method"
                  },
                  {
                    "title": "Hierarchical styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/secondary-swift.property",
                    "title": "var secondary: some ShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/tertiary-swift.property",
                    "title": "var tertiary: some ShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/quaternary-swift.property",
                    "title": "var quaternary: some ShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/quinary-swift.property",
                    "title": "var quinary: some ShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/primary",
                    "title": "static var primary: HierarchicalShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/secondary-swift.type.property",
                    "title": "static var secondary: HierarchicalShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/tertiary-swift.type.property",
                    "title": "static var tertiary: HierarchicalShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/quaternary-swift.type.property",
                    "title": "static var quaternary: HierarchicalShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/quinary-swift.type.property",
                    "title": "static var quinary: HierarchicalShapeStyle",
                    "type": "property"
                  },
                  {
                    "title": "Semantic styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/foreground",
                    "title": "static var foreground: ForegroundStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/background",
                    "title": "static var background: BackgroundStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/selection",
                    "title": "static var selection: SelectionShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/separator",
                    "title": "static var separator: SeparatorShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/tint",
                    "title": "static var tint: TintShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/placeholder",
                    "title": "static var placeholder: PlaceholderTextShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/link",
                    "title": "static var link: LinkShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/fill",
                    "title": "static var fill: FillShapeStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/windowbackground",
                    "title": "static var windowBackground: WindowBackgroundShapeStyle",
                    "type": "property"
                  },
                  {
                    "title": "Modifying a shape style",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/blendmode(_:)-swift.method",
                    "title": "func blendMode(BlendMode) -> some ShapeStyle",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/opacity(_:)-swift.method",
                    "title": "func opacity(Double) -> some ShapeStyle",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/shadow(_:)-swift.method",
                    "title": "func shadow(ShadowStyle) -> some ShapeStyle",
                    "type": "method"
                  },
                  {
                    "title": "Configuring the default shape style",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/blendmode(_:)-swift.type.method",
                    "title": "static func blendMode(BlendMode) -> some ShapeStyle",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/opacity(_:)-swift.type.method",
                    "title": "static func opacity(Double) -> some ShapeStyle",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/shadow(_:)-swift.type.method",
                    "title": "static func shadow(ShadowStyle) -> some ShapeStyle",
                    "type": "method"
                  },
                  {
                    "title": "Mapping to absolute coordinates",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/in(_:)",
                    "title": "func `in`(CGRect) -> some ShapeStyle",
                    "type": "method"
                  },
                  {
                    "title": "Resolving a shape style in an environment",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/resolve(in:)",
                    "title": "func resolve(in: EnvironmentValues) -> Self.Resolved",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/resolved",
                    "title": "Resolved",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Using a shape style as a view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/body",
                    "title": "var body: _ShapeView<Rectangle, Self>",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a full rotation angular gradient",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/angulargradient/init(gradient:center:angle:)",
                        "title": "init(gradient: Gradient, center: UnitPoint, angle: Angle)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/angulargradient/init(colors:center:angle:)",
                        "title": "init(colors: [Color], center: UnitPoint, angle: Angle)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/angulargradient/init(stops:center:angle:)",
                        "title": "init(stops: [Gradient.Stop], center: UnitPoint, angle: Angle)",
                        "type": "init"
                      },
                      {
                        "title": "Creating a partial rotation angular gradient",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/angulargradient/init(gradient:center:startangle:endangle:)",
                        "title": "init(gradient: Gradient, center: UnitPoint, startAngle: Angle, endAngle: Angle)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/angulargradient/init(colors:center:startangle:endangle:)",
                        "title": "init(colors: [Color], center: UnitPoint, startAngle: Angle, endAngle: Angle)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/angulargradient/init(stops:center:startangle:endangle:)",
                        "title": "init(stops: [Gradient.Stop], center: UnitPoint, startAngle: Angle, endAngle: Angle)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/angulargradient",
                    "title": "AngularGradient",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating an elliptical gradient",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/ellipticalgradient/init(gradient:center:startradiusfraction:endradiusfraction:)",
                        "title": "init(gradient: Gradient, center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/ellipticalgradient/init(colors:center:startradiusfraction:endradiusfraction:)",
                        "title": "init(colors: [Color], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/ellipticalgradient/init(stops:center:startradiusfraction:endradiusfraction:)",
                        "title": "init(stops: [Gradient.Stop], center: UnitPoint, startRadiusFraction: CGFloat, endRadiusFraction: CGFloat)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/ellipticalgradient",
                    "title": "EllipticalGradient",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a linear gradient",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/lineargradient/init(gradient:startpoint:endpoint:)",
                        "title": "init(gradient: Gradient, startPoint: UnitPoint, endPoint: UnitPoint)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/lineargradient/init(colors:startpoint:endpoint:)",
                        "title": "init(colors: [Color], startPoint: UnitPoint, endPoint: UnitPoint)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/lineargradient/init(stops:startpoint:endpoint:)",
                        "title": "init(stops: [Gradient.Stop], startPoint: UnitPoint, endPoint: UnitPoint)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/lineargradient",
                    "title": "LinearGradient",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a radial gradient",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/radialgradient/init(gradient:center:startradius:endradius:)",
                        "title": "init(gradient: Gradient, center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/radialgradient/init(colors:center:startradius:endradius:)",
                        "title": "init(colors: [Color], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/swiftui/radialgradient/init(stops:center:startradius:endradius:)",
                        "title": "init(stops: [Gradient.Stop], center: UnitPoint, startRadius: CGFloat, endRadius: CGFloat)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/radialgradient",
                    "title": "RadialGradient",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting material types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/material/ultrathin",
                        "title": "static let ultraThin: Material",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/material/thin",
                        "title": "static let thin: Material",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/material/regular",
                        "title": "static let regular: Material",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/material/thick",
                        "title": "static let thick: Material",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/material/ultrathick",
                        "title": "static let ultraThick: Material",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/material/bar",
                        "title": "static let bar: Material",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/material/materialactiveappearance(_:)",
                        "title": "func materialActiveAppearance(MaterialActiveAppearance) -> Material",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/material",
                    "title": "Material",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating an image paint style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/imagepaint/init(image:sourcerect:scale:)",
                        "title": "init(image: Image, sourceRect: CGRect, scale: CGFloat)",
                        "type": "init"
                      },
                      {
                        "title": "Configuring the image paint style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/imagepaint/image",
                        "title": "var image: Image",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/imagepaint/scale",
                        "title": "var scale: CGFloat",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/imagepaint/sourcerect",
                        "title": "var sourceRect: CGRect",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/imagepaint",
                    "title": "ImagePaint",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting hierarchical shape styles",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/hierarchicalshapestyle/primary",
                        "title": "static let primary: HierarchicalShapeStyle",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/hierarchicalshapestyle/secondary",
                        "title": "static let secondary: HierarchicalShapeStyle",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/hierarchicalshapestyle/tertiary",
                        "title": "static let tertiary: HierarchicalShapeStyle",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/hierarchicalshapestyle/quaternary",
                        "title": "static let quaternary: HierarchicalShapeStyle",
                        "type": "property"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/hierarchicalshapestyle/quinary",
                        "title": "static let quinary: HierarchicalShapeStyle",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/hierarchicalshapestyle",
                    "title": "HierarchicalShapeStyle",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/hierarchicalshapestylemodifier",
                    "title": "HierarchicalShapeStyleModifier",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a foreground style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/foregroundstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/foregroundstyle",
                    "title": "ForegroundStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a background style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/backgroundstyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/backgroundstyle",
                    "title": "BackgroundStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a selection shape style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/selectionshapestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/selectionshapestyle",
                    "title": "SelectionShapeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a separator shape style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/separatorshapestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/separatorshapestyle",
                    "title": "SeparatorShapeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a tint shape style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/tintshapestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/tintshapestyle",
                    "title": "TintShapeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/fillshapestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/fillshapestyle",
                    "title": "FillShapeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/linkshapestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/linkshapestyle",
                    "title": "LinkShapeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/placeholdertextshapestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/placeholdertextshapestyle",
                    "title": "PlaceholderTextShapeStyle",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the style",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/windowbackgroundshapestyle/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/windowbackgroundshapestyle",
                    "title": "WindowBackgroundShapeStyle",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shapestyle/materialactiveappearance(_:)",
                    "title": "func materialActiveAppearance(MaterialActiveAppearance) -> some ShapeStyle",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/shapestyle",
                "title": "ShapeStyle",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating a shape style",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anyshapestyle/init(_:)",
                    "title": "init<S>(S)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/anyshapestyle",
                "title": "AnyShapeStyle",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a gradient from colors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gradient/init(colors:)",
                    "title": "init(colors: [Color])",
                    "type": "init"
                  },
                  {
                    "title": "Creating a gradient from stops",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gradient/init(stops:)",
                    "title": "init(stops: [Gradient.Stop])",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gradient/stops",
                    "title": "var stops: [Gradient.Stop]",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a gradient stop",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/gradient/stop/init(color:location:)",
                        "title": "init(color: Color, location: CGFloat)",
                        "type": "init"
                      },
                      {
                        "title": "Configuring a gradient stop",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/gradient/stop/color",
                        "title": "var color: Color",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/gradient/stop/location",
                        "title": "var location: CGFloat",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/gradient/stop",
                    "title": "Gradient.Stop",
                    "type": "struct"
                  },
                  {
                    "title": "Working with color spaces",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gradient/colorspace(_:)",
                    "title": "func colorSpace(Gradient.ColorSpace) -> AnyGradient",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting an interpolation method",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/gradient/colorspace/device",
                        "title": "static let device: Gradient.ColorSpace",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/gradient/colorspace/perceptual",
                        "title": "static let perceptual: Gradient.ColorSpace",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/gradient/colorspace",
                    "title": "Gradient.ColorSpace",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/gradient",
                "title": "Gradient",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/meshgradient/bezierpoint/init(position:leadingcontrolpoint:topcontrolpoint:trailingcontrolpoint:bottomcontrolpoint:)",
                        "title": "init(position: SIMD2<Float>, leadingControlPoint: SIMD2<Float>, topControlPoint: SIMD2<Float>, trailingControlPoint: SIMD2<Float>, bottomControlPoint: SIMD2<Float>)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/meshgradient/bezierpoint/bottomcontrolpoint",
                        "title": "var bottomControlPoint: SIMD2<Float>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/meshgradient/bezierpoint/leadingcontrolpoint",
                        "title": "var leadingControlPoint: SIMD2<Float>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/meshgradient/bezierpoint/position",
                        "title": "var position: SIMD2<Float>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/meshgradient/bezierpoint/topcontrolpoint",
                        "title": "var topControlPoint: SIMD2<Float>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/meshgradient/bezierpoint/trailingcontrolpoint",
                        "title": "var trailingControlPoint: SIMD2<Float>",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/meshgradient/bezierpoint",
                    "title": "MeshGradient.BezierPoint",
                    "type": "struct"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/meshgradient/init(width:height:bezierpoints:colors:background:smoothscolors:colorspace:)",
                    "title": "init(width: Int, height: Int, bezierPoints: [MeshGradient.BezierPoint], colors: [Color], background: Color, smoothsColors: Bool, colorSpace: Gradient.ColorSpace)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/meshgradient/init(width:height:bezierpoints:resolvedcolors:background:smoothscolors:colorspace:)",
                    "title": "init(width: Int, height: Int, bezierPoints: [MeshGradient.BezierPoint], resolvedColors: [Color.Resolved], background: Color, smoothsColors: Bool, colorSpace: Gradient.ColorSpace)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/meshgradient/init(width:height:locations:colors:background:smoothscolors:colorspace:)",
                    "title": "init(width: Int, height: Int, locations: MeshGradient.Locations, colors: MeshGradient.Colors, background: Color, smoothsColors: Bool, colorSpace: Gradient.ColorSpace)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/meshgradient/init(width:height:points:colors:background:smoothscolors:colorspace:)",
                    "title": "init(width: Int, height: Int, points: [SIMD2<Float>], colors: [Color], background: Color, smoothsColors: Bool, colorSpace: Gradient.ColorSpace)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/meshgradient/init(width:height:points:resolvedcolors:background:smoothscolors:colorspace:)",
                    "title": "init(width: Int, height: Int, points: [SIMD2<Float>], resolvedColors: [Color.Resolved], background: Color, smoothsColors: Bool, colorSpace: Gradient.ColorSpace)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/meshgradient/background",
                    "title": "var background: Color",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/meshgradient/colorspace",
                    "title": "var colorSpace: Gradient.ColorSpace",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/meshgradient/colors-swift.property",
                    "title": "var colors: MeshGradient.Colors",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/meshgradient/height",
                    "title": "var height: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/meshgradient/locations-swift.property",
                    "title": "var locations: MeshGradient.Locations",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/meshgradient/smoothscolors",
                    "title": "var smoothsColors: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/meshgradient/width",
                    "title": "var width: Int",
                    "type": "property"
                  },
                  {
                    "title": "Enumerations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/meshgradient/colors-swift.enum/colors(_:)",
                        "title": "case colors([Color])",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/meshgradient/colors-swift.enum/resolvedcolors(_:)",
                        "title": "case resolvedColors([Color.Resolved])",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/meshgradient/colors-swift.enum",
                    "title": "MeshGradient.Colors",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/meshgradient/locations-swift.enum/bezierpoints(_:)",
                        "title": "case bezierPoints([MeshGradient.BezierPoint])",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/meshgradient/locations-swift.enum/points(_:)",
                        "title": "case points([SIMD2<Float>])",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/meshgradient/locations-swift.enum",
                    "title": "MeshGradient.Locations",
                    "type": "enum"
                  }
                ],
                "path": "/documentation/swiftui/meshgradient",
                "title": "MeshGradient",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a gradient",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anygradient/init(_:)",
                    "title": "init(Gradient)",
                    "type": "init"
                  },
                  {
                    "title": "Working with color spaces",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anygradient/colorspace(_:)",
                    "title": "func colorSpace(Gradient.ColorSpace) -> AnyGradient",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/anygradient",
                "title": "AnyGradient",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting shadow styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shadowstyle/drop(color:radius:x:y:)",
                    "title": "static func drop(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> ShadowStyle",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/shadowstyle/inner(color:radius:x:y:)",
                    "title": "static func inner(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> ShadowStyle",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/shadowstyle",
                "title": "ShadowStyle",
                "type": "struct"
              },
              {
                "title": "Transforming colors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/brightness(_:)",
                "title": "func brightness(Double) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/contrast(_:)",
                "title": "func contrast(Double) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/colorinvert()",
                "title": "func colorInvert() -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/colormultiply(_:)",
                "title": "func colorMultiply(Color) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/saturation(_:)",
                "title": "func saturation(Double) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/grayscale(_:)",
                "title": "func grayscale(Double) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/huerotation(_:)",
                "title": "func hueRotation(Angle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/luminancetoalpha()",
                "title": "func luminanceToAlpha() -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/materialactiveappearance(_:)",
                "title": "func materialActiveAppearance(MaterialActiveAppearance) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/materialactiveappearance",
                "title": "var materialActiveAppearance: MaterialActiveAppearance",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/materialactiveappearance/active",
                    "title": "static let active: MaterialActiveAppearance",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/materialactiveappearance/automatic",
                    "title": "static let automatic: MaterialActiveAppearance",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/materialactiveappearance/inactive",
                    "title": "static let inactive: MaterialActiveAppearance",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/materialactiveappearance/matchwindow",
                    "title": "static let matchWindow: MaterialActiveAppearance",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/materialactiveappearance",
                "title": "MaterialActiveAppearance",
                "type": "struct"
              },
              {
                "title": "Scaling, rotating, or transforming a view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/scaledtofill()",
                "title": "func scaledToFill() -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scaledtofit()",
                "title": "func scaledToFit() -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scaleeffect(_:anchor:)",
                "title": "func scaleEffect(_:anchor:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scaleeffect(x:y:anchor:)",
                "title": "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scaleeffect(x:y:z:anchor:)",
                "title": "func scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/aspectratio(_:contentmode:)",
                "title": "func aspectRatio(_:contentMode:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/rotationeffect(_:anchor:)",
                "title": "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                "title": "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/perspectiverotationeffect(_:axis:anchor:anchorz:perspective:)",
                "title": "func perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/rotation3deffect(_:anchor:)",
                "title": "func rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/rotation3deffect(_:axis:anchor:)",
                "title": "func rotation3DEffect(_:axis:anchor:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/transformeffect(_:)",
                "title": "func transformEffect(CGAffineTransform) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/transform3deffect(_:)",
                "title": "func transform3DEffect(AffineTransform3D) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/projectioneffect(_:)",
                "title": "func projectionEffect(ProjectionTransform) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a transform",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "title": "Getting transform characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/isaffine",
                    "title": "var isAffine: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/isidentity",
                    "title": "var isIdentity: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Manipulating transforms",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/invert()",
                    "title": "func invert() -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/inverted()",
                    "title": "func inverted() -> ProjectionTransform",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/concatenating(_:)",
                    "title": "func concatenating(ProjectionTransform) -> ProjectionTransform",
                    "type": "method"
                  },
                  {
                    "title": "Accessing the transform’s coefficients",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/m11",
                    "title": "var m11: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/m12",
                    "title": "var m12: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/m13",
                    "title": "var m13: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/m21",
                    "title": "var m21: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/m22",
                    "title": "var m22: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/m23",
                    "title": "var m23: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/m31",
                    "title": "var m31: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/m32",
                    "title": "var m32: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/projectiontransform/m33",
                    "title": "var m33: CGFloat",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/projectiontransform",
                "title": "ProjectionTransform",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting content modes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/contentmode/fill",
                    "title": "case fill",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/contentmode/fit",
                    "title": "case fit",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/contentmode",
                "title": "ContentMode",
                "type": "enum"
              },
              {
                "title": "Masking and clipping",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/mask(alignment:_:)",
                "title": "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/clipped(antialiased:)",
                "title": "func clipped(antialiased: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/clipshape(_:style:)",
                "title": "func clipShape<S>(S, style: FillStyle) -> some View",
                "type": "method"
              },
              {
                "title": "Applying blur and shadows",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/blur(radius:opaque:)",
                "title": "func blur(radius: CGFloat, opaque: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/shadow(color:radius:x:y:)",
                "title": "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating an identity matrix",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "First column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/r1",
                    "title": "var r1: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/g1",
                    "title": "var g1: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/b1",
                    "title": "var b1: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/a1",
                    "title": "var a1: Float",
                    "type": "property"
                  },
                  {
                    "title": "Second column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/r2",
                    "title": "var r2: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/g2",
                    "title": "var g2: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/b2",
                    "title": "var b2: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/a2",
                    "title": "var a2: Float",
                    "type": "property"
                  },
                  {
                    "title": "Third column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/r3",
                    "title": "var r3: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/g3",
                    "title": "var g3: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/b3",
                    "title": "var b3: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/a3",
                    "title": "var a3: Float",
                    "type": "property"
                  },
                  {
                    "title": "Fourth column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/r4",
                    "title": "var r4: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/g4",
                    "title": "var g4: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/b4",
                    "title": "var b4: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/a4",
                    "title": "var a4: Float",
                    "type": "property"
                  },
                  {
                    "title": "Fifth column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/r5",
                    "title": "var r5: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/g5",
                    "title": "var g5: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/b5",
                    "title": "var b5: Float",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/colormatrix/a5",
                    "title": "var a5: Float",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/colormatrix",
                "title": "ColorMatrix",
                "type": "struct"
              },
              {
                "title": "Applying effects based on geometry",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/visualeffect(_:)",
                "title": "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/visualeffect3d(_:)",
                "title": "func visualEffect3D((EmptyVisualEffect, GeometryProxy3D) -> some VisualEffect) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Adjusting Color",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/brightness(_:)",
                    "title": "func brightness(Double) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/coloreffect(_:isenabled:)",
                    "title": "func colorEffect(Shader, isEnabled: Bool) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/contrast(_:)",
                    "title": "func contrast(Double) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/grayscale(_:)",
                    "title": "func grayscale(Double) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/huerotation(_:)",
                    "title": "func hueRotation(Angle) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/saturation(_:)",
                    "title": "func saturation(Double) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/opacity(_:)",
                    "title": "func opacity(Double) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "title": "Scaling",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/scaleeffect(_:anchor:)",
                    "title": "func scaleEffect(_:anchor:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/scaleeffect(x:y:anchor:)",
                    "title": "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/scaleeffect(x:y:z:anchor:)",
                    "title": "func scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "title": "Rotating",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/rotationeffect(_:anchor:)",
                    "title": "func rotationEffect(Angle, anchor: UnitPoint) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title": "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/perspectiverotationeffect(_:axis:anchor:perspective:)",
                    "title": "func perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D, perspective: CGFloat) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/rotation3deffect(_:anchor:)",
                    "title": "func rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/rotation3deffect(_:axis:anchor:)",
                    "title": "func rotation3DEffect(_:axis:anchor:)",
                    "type": "method"
                  },
                  {
                    "title": "Translating",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/offset(_:)",
                    "title": "func offset(CGSize) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/offset(x:y:)",
                    "title": "func offset(x: CGFloat, y: CGFloat) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/offset(z:)",
                    "title": "func offset(z: CGFloat) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "title": "Applying a transform",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/transform3deffect(_:)",
                    "title": "func transform3DEffect(AffineTransform3D) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/transformeffect(_:)",
                    "title": "func transformEffect(_:)",
                    "type": "method"
                  },
                  {
                    "title": "Applying other effects",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/blur(radius:opaque:)",
                    "title": "func blur(radius: CGFloat, opaque: Bool) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title": "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/layereffect(_:maxsampleoffset:isenabled:)",
                    "title": "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some VisualEffect",
                    "type": "method"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/visualeffect/blendmode(_:)",
                    "title": "func blendMode(BlendMode) -> some VisualEffect",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/visualeffect",
                "title": "VisualEffect",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating an empty visual effect",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/emptyvisualeffect/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/emptyvisualeffect",
                "title": "EmptyVisualEffect",
                "type": "struct"
              },
              {
                "title": "Compositing views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/blendmode(_:)",
                "title": "func blendMode(BlendMode) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/compositinggroup()",
                "title": "func compositingGroup() -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/drawinggroup(opaque:colormode:)",
                "title": "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the default",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/normal",
                    "title": "case normal",
                    "type": "case"
                  },
                  {
                    "title": "Darkening",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/darken",
                    "title": "case darken",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/multiply",
                    "title": "case multiply",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/colorburn",
                    "title": "case colorBurn",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/plusdarker",
                    "title": "case plusDarker",
                    "type": "case"
                  },
                  {
                    "title": "Lightening",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/lighten",
                    "title": "case lighten",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/screen",
                    "title": "case screen",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/colordodge",
                    "title": "case colorDodge",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/pluslighter",
                    "title": "case plusLighter",
                    "type": "case"
                  },
                  {
                    "title": "Adding contrast",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/overlay",
                    "title": "case overlay",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/softlight",
                    "title": "case softLight",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/hardlight",
                    "title": "case hardLight",
                    "type": "case"
                  },
                  {
                    "title": "Inverting",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/difference",
                    "title": "case difference",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/exclusion",
                    "title": "case exclusion",
                    "type": "case"
                  },
                  {
                    "title": "Mixing color components",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/hue",
                    "title": "case hue",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/saturation",
                    "title": "case saturation",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/color",
                    "title": "case color",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/luminosity",
                    "title": "case luminosity",
                    "type": "case"
                  },
                  {
                    "title": "Accessing porter-duff modes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/sourceatop",
                    "title": "case sourceAtop",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/destinationover",
                    "title": "case destinationOver",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/blendmode/destinationout",
                    "title": "case destinationOut",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/blendmode",
                "title": "BlendMode",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting rendering modes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/colorrenderingmode/extendedlinear",
                    "title": "case extendedLinear",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/colorrenderingmode/linear",
                    "title": "case linear",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/colorrenderingmode/nonlinear",
                    "title": "case nonLinear",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/colorrenderingmode",
                "title": "ColorRenderingMode",
                "type": "enum"
              },
              {
                "title": "Measuring a view",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a geometry reader",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/geometryreader/init(content:)",
                    "title": "init(content: (GeometryProxy) -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/geometryreader/content",
                    "title": "var content: (GeometryProxy) -> Content",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/geometryreader",
                "title": "GeometryReader",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a geometry reader",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/geometryreader3d/init(content:)",
                    "title": "init(content: (GeometryProxy3D) -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/geometryreader3d/content",
                    "title": "var content: (GeometryProxy3D) -> Content",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/geometryreader3d",
                "title": "GeometryReader3D",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Accessing geometry characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/geometryproxy/bounds(of:)",
                    "title": "func bounds(of: NamedCoordinateSpace) -> CGRect?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/geometryproxy/frame(in:)",
                    "title": "func frame(in:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/geometryproxy/size",
                    "title": "var size: CGSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/geometryproxy/safeareainsets",
                    "title": "var safeAreaInsets: EdgeInsets",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/geometryproxy/subscript(_:)",
                    "title": "subscript<T>(Anchor<T>) -> T",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/swiftui/geometryproxy/transform(in:)",
                    "title": "func transform(in: some CoordinateSpaceProtocol) -> AffineTransform3D?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/geometryproxy",
                "title": "GeometryProxy",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Accessing geometry characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/geometryproxy3d/frame(in:)",
                    "title": "func frame(in: some CoordinateSpaceProtocol) -> Rect3D",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/geometryproxy3d/size",
                    "title": "var size: Size3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/geometryproxy3d/safeareainsets",
                    "title": "var safeAreaInsets: EdgeInsets3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/geometryproxy3d/subscript(_:)",
                    "title": "subscript<T>(Anchor<T>) -> T",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/swiftui/geometryproxy3d/transform(in:)",
                    "title": "func transform(in: some CoordinateSpaceProtocol) -> AffineTransform3D?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/geometryproxy3d",
                "title": "GeometryProxy3D",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/coordinatespace(_:)",
                "title": "func coordinateSpace(NamedCoordinateSpace) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting coordinate spaces",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/coordinatespace/global",
                    "title": "case global",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/coordinatespace/local",
                    "title": "case local",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/coordinatespace/named(_:)",
                    "title": "case named(AnyHashable)",
                    "type": "case"
                  },
                  {
                    "title": "Testing a space",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/coordinatespace/isglobal",
                    "title": "var isGlobal: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/coordinatespace/islocal",
                    "title": "var isLocal: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/coordinatespace",
                "title": "CoordinateSpace",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in coordinate spaces",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/coordinatespaceprotocol/immersivespace",
                    "title": "static var immersiveSpace: NamedCoordinateSpace",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/coordinatespaceprotocol/global",
                    "title": "static var global: GlobalCoordinateSpace",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/coordinatespaceprotocol/local",
                    "title": "static var local: LocalCoordinateSpace",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/coordinatespaceprotocol/named(_:)",
                    "title": "static func named(some Hashable) -> NamedCoordinateSpace",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/coordinatespaceprotocol/scrollview",
                    "title": "static var scrollView: NamedCoordinateSpace",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/coordinatespaceprotocol/scrollview(axis:)",
                    "title": "static func scrollView(axis: Axis) -> Self",
                    "type": "method"
                  },
                  {
                    "title": "Getting the resolved coordinate space",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/coordinatespaceprotocol/coordinatespace",
                    "title": "var coordinateSpace: CoordinateSpace",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the coordinate space",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/globalcoordinatespace/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/globalcoordinatespace",
                    "title": "GlobalCoordinateSpace",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating the coordinate space",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/localcoordinatespace/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/localcoordinatespace",
                    "title": "LocalCoordinateSpace",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/namedcoordinatespace",
                    "title": "NamedCoordinateSpace",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/coordinatespaceprotocol",
                "title": "CoordinateSpaceProtocol",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating a metric",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/physicalmetric/init(wrappedvalue:from:)",
                    "title": "init(wrappedValue:from:)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/physicalmetric/wrappedvalue",
                    "title": "var wrappedValue: Value",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/physicalmetric",
                "title": "PhysicalMetric",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Converting a unit length",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/physicalmetricsconverter/convert(_:from:)",
                    "title": "func convert(_:from:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/physicalmetricsconverter/convert(_:to:)",
                    "title": "func convert(_:to:)",
                    "type": "method"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/physicalmetricsconverter/worldscalingcompensation",
                    "title": "var worldScalingCompensation: WorldScalingCompensation",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/physicalmetricsconverter/worldscalingcompensation(_:)",
                    "title": "func worldScalingCompensation(WorldScalingCompensation) -> PhysicalMetricsConverter",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/physicalmetricsconverter",
                "title": "PhysicalMetricsConverter",
                "type": "struct"
              },
              {
                "title": "Responding to a geometry change",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/ongeometrychange(for:of:action:)",
                "title": "func onGeometryChange(for:of:action:)",
                "type": "method"
              },
              {
                "title": "Accessing Metal shaders",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/coloreffect(_:isenabled:)",
                "title": "func colorEffect(Shader, isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/distortioneffect(_:maxsampleoffset:isenabled:)",
                "title": "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/layereffect(_:maxsampleoffset:isenabled:)",
                "title": "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a shader",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shader/init(function:arguments:)",
                    "title": "init(function: ShaderFunction, arguments: [Shader.Argument])",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating argument values",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/shader/argument/boundingrect",
                        "title": "static var boundingRect: Shader.Argument",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/shader/argument/color(_:)",
                        "title": "static func color(Color) -> Shader.Argument",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/shader/argument/colorarray(_:)",
                        "title": "static func colorArray([Color]) -> Shader.Argument",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/shader/argument/data(_:)",
                        "title": "static func data(Data) -> Shader.Argument",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/shader/argument/float(_:)",
                        "title": "static func float<T>(T) -> Shader.Argument",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/shader/argument/float2(_:)",
                        "title": "static float2(_:)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/shader/argument/float2(_:_:)",
                        "title": "static func float2<T>(T, T) -> Shader.Argument",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/shader/argument/float3(_:_:_:)",
                        "title": "static func float3<T>(T, T, T) -> Shader.Argument",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/shader/argument/float4(_:_:_:_:)",
                        "title": "static func float4<T>(T, T, T, T) -> Shader.Argument",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/shader/argument/floatarray(_:)",
                        "title": "static func floatArray([Float]) -> Shader.Argument",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/shader/argument/image(_:)",
                        "title": "static func image(Image) -> Shader.Argument",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/shader/argument",
                    "title": "Shader.Argument",
                    "type": "struct"
                  },
                  {
                    "title": "Getting the shader function",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shader/function",
                    "title": "var function: ShaderFunction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shader/arguments",
                    "title": "var arguments: [Shader.Argument]",
                    "type": "property"
                  },
                  {
                    "title": "Configuring the shader",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shader/ditherscolor",
                    "title": "var dithersColor: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/shader/usagetype/coloreffect",
                        "title": "static let colorEffect: Shader.UsageType",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/shader/usagetype/distortioneffect",
                        "title": "static let distortionEffect: Shader.UsageType",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/shader/usagetype/layereffect",
                        "title": "static let layerEffect: Shader.UsageType",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/shader/usagetype/shapestyle",
                        "title": "static let shapeStyle: Shader.UsageType",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/shader/usagetype",
                    "title": "Shader.UsageType",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shader/compile(as:)",
                    "title": "func compile(as: Shader.UsageType) async throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/shader",
                "title": "Shader",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a shader function",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shaderfunction/init(library:name:)",
                    "title": "init(library: ShaderLibrary, name: String)",
                    "type": "init"
                  },
                  {
                    "title": "Configuring a function",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shaderfunction/library",
                    "title": "var library: ShaderLibrary",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shaderfunction/name",
                    "title": "var name: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shaderfunction/dynamicallycall(witharguments:)",
                    "title": "func dynamicallyCall(withArguments: [Shader.Argument]) -> Shader",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/shaderfunction",
                "title": "ShaderFunction",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the default shader library",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shaderlibrary/default",
                    "title": "static let `default`: ShaderLibrary",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/shaderlibrary/bundle(_:)",
                    "title": "static func bundle(Bundle) -> ShaderLibrary",
                    "type": "method"
                  },
                  {
                    "title": "Creating a shader library",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shaderlibrary/init(url:)",
                    "title": "init(url: URL)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/shaderlibrary/init(data:)",
                    "title": "init(data: Data)",
                    "type": "init"
                  },
                  {
                    "title": "Access shader functions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shaderlibrary/subscript(dynamicmember:)-swift.type.subscript",
                    "title": "static subscript(dynamicMember _: String) -> ShaderFunction",
                    "type": "subscript"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/shaderlibrary/subscript(dynamicmember:)-swift.subscript",
                    "title": "subscript(dynamicMember _: String) -> ShaderFunction",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/swiftui/shaderlibrary",
                "title": "ShaderLibrary",
                "type": "struct"
              },
              {
                "title": "Accessing geometric constructs",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Getting axes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/axis/horizontal",
                    "title": "case horizontal",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/axis/vertical",
                    "title": "case vertical",
                    "type": "case"
                  },
                  {
                    "title": "Getting all axes",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting axis sets",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/axis/set/horizontal",
                        "title": "static let horizontal: Axis.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/axis/set/vertical",
                        "title": "static let vertical: Axis.Set",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/axis/set",
                    "title": "Axis.Set",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/axis",
                "title": "Axis",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting constant angles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/angle/zero",
                    "title": "static var zero: Angle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/angle/degrees(_:)",
                    "title": "static func degrees(Double) -> Angle",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/angle/radians(_:)",
                    "title": "static func radians(Double) -> Angle",
                    "type": "method"
                  },
                  {
                    "title": "Creating an angle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/angle/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/angle/init(degrees:)",
                    "title": "init(degrees: Double)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/angle/init(radians:)",
                    "title": "init(radians: Double)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/angle/init(_:)",
                    "title": "init(Angle2D)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the angle size",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/angle/degrees",
                    "title": "var degrees: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/angle/radians",
                    "title": "var radians: Double",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/angle",
                "title": "Angle",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the origin",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/zero",
                    "title": "static let zero: UnitPoint",
                    "type": "property"
                  },
                  {
                    "title": "Getting top points",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/topleading",
                    "title": "static let topLeading: UnitPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/top",
                    "title": "static let top: UnitPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/toptrailing",
                    "title": "static let topTrailing: UnitPoint",
                    "type": "property"
                  },
                  {
                    "title": "Getting middle points",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/leading",
                    "title": "static let leading: UnitPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/center",
                    "title": "static let center: UnitPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/trailing",
                    "title": "static let trailing: UnitPoint",
                    "type": "property"
                  },
                  {
                    "title": "Getting bottom points",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/bottomleading",
                    "title": "static let bottomLeading: UnitPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/bottom",
                    "title": "static let bottom: UnitPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/bottomtrailing",
                    "title": "static let bottomTrailing: UnitPoint",
                    "type": "property"
                  },
                  {
                    "title": "Creating a point",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/init(x:y:)",
                    "title": "init(x: CGFloat, y: CGFloat)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the point’s coordinates",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/x",
                    "title": "var x: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint/y",
                    "title": "var y: CGFloat",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/unitpoint",
                "title": "UnitPoint",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the origin",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/origin",
                    "title": "static let origin: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/zero",
                    "title": "static let zero: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "title": "Getting top points",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/topleadingback",
                    "title": "static let topLeadingBack: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/topleading",
                    "title": "static let topLeading: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/topleadingfront",
                    "title": "static let topLeadingFront: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/topback",
                    "title": "static let topBack: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/top",
                    "title": "static let top: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/topfront",
                    "title": "static let topFront: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/toptrailingback",
                    "title": "static let topTrailingBack: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/toptrailing",
                    "title": "static let topTrailing: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/toptrailingfront",
                    "title": "static let topTrailingFront: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "title": "Getting middle points",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/leadingback",
                    "title": "static let leadingBack: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/leading",
                    "title": "static let leading: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/leadingfront",
                    "title": "static let leadingFront: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/back",
                    "title": "static let back: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/center",
                    "title": "static let center: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/front",
                    "title": "static let front: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/trailingback",
                    "title": "static let trailingBack: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/trailing",
                    "title": "static let trailing: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/trailingfront",
                    "title": "static let trailingFront: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "title": "Getting bottom points",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/bottomleadingback",
                    "title": "static let bottomLeadingBack: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/bottomleading",
                    "title": "static let bottomLeading: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/bottomleadingfront",
                    "title": "static let bottomLeadingFront: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/bottomback",
                    "title": "static let bottomBack: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/bottom",
                    "title": "static let bottom: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/bottomfront",
                    "title": "static let bottomFront: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/bottomtrailingback",
                    "title": "static let bottomTrailingBack: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/bottomtrailing",
                    "title": "static let bottomTrailing: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/bottomtrailingfront",
                    "title": "static let bottomTrailingFront: UnitPoint3D",
                    "type": "property"
                  },
                  {
                    "title": "Creating a point",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/init(x:y:z:)",
                    "title": "init(x: CGFloat, y: CGFloat, z: CGFloat)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the point’s coordinates",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/x",
                    "title": "var x: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/y",
                    "title": "var y: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/unitpoint3d/z",
                    "title": "var z: CGFloat",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/unitpoint3d",
                "title": "UnitPoint3D",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the anchor’s source",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting point anchor sources",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/point(_:)",
                        "title": "static func point(CGPoint) -> Anchor<Value>.Source",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/unitpoint(_:)",
                        "title": "static func unitPoint(UnitPoint) -> Anchor<Value>.Source",
                        "type": "method"
                      },
                      {
                        "title": "Getting rectangle anchor sources",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/rect(_:)",
                        "title": "static func rect(CGRect) -> Anchor<Value>.Source",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/bounds",
                        "title": "static var bounds: Anchor<CGRect>.Source",
                        "type": "property"
                      },
                      {
                        "title": "Getting top anchor sources",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/topleading",
                        "title": "static var topLeading: Anchor<CGPoint>.Source",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/top",
                        "title": "static var top: Anchor<CGPoint>.Source",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/toptrailing",
                        "title": "static var topTrailing: Anchor<CGPoint>.Source",
                        "type": "property"
                      },
                      {
                        "title": "Getting middle anchor sources",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/leading",
                        "title": "static var leading: Anchor<CGPoint>.Source",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/center",
                        "title": "static var center: Anchor<CGPoint>.Source",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/trailing",
                        "title": "static var trailing: Anchor<CGPoint>.Source",
                        "type": "property"
                      },
                      {
                        "title": "Getting bottom anchor sources",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/bottomtrailing",
                        "title": "static var bottomTrailing: Anchor<CGPoint>.Source",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/bottom",
                        "title": "static var bottom: Anchor<CGPoint>.Source",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/bottomleading",
                        "title": "static var bottomLeading: Anchor<CGPoint>.Source",
                        "type": "property"
                      },
                      {
                        "title": "Creating an anchor source",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/anchor/source/init(_:)",
                        "title": "init(_:)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/anchor/source",
                    "title": "Anchor.Source",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/anchor",
                "title": "Anchor",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/drawing-and-graphics",
            "title": "Drawing and graphics",
            "type": "collection"
          },
          {
            "title": "View layout",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Choosing a layout",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/picking-container-views-for-your-content",
                "title": "Picking container views for your content",
                "type": "article"
              },
              {
                "title": "Statically arranging views in one dimension",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/building-layouts-with-stack-views",
                "title": "Building layouts with stack views",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Creating a stack",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/hstack/init(alignment:spacing:content:)",
                    "title": "init(alignment: VerticalAlignment, spacing: CGFloat?, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/hstack",
                "title": "HStack",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a stack",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/vstack/init(alignment:spacing:content:)",
                    "title": "init(alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/vstack",
                "title": "VStack",
                "type": "struct"
              },
              {
                "title": "Dynamically arranging views in one dimension",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/grouping-data-with-lazy-stack-views",
                "title": "Grouping data with lazy stack views",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/creating-performant-scrollable-stacks",
                "title": "Creating performant scrollable stacks",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Creating a lazy-loading horizontal stack",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/lazyhstack/init(alignment:spacing:pinnedviews:content:)",
                    "title": "init(alignment: VerticalAlignment, spacing: CGFloat?, pinnedViews: PinnedScrollableViews, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/lazyhstack",
                "title": "LazyHStack",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a lazy-loading vertical stack",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/lazyvstack/init(alignment:spacing:pinnedviews:content:)",
                    "title": "init(alignment: HorizontalAlignment, spacing: CGFloat?, pinnedViews: PinnedScrollableViews, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/lazyvstack",
                "title": "LazyVStack",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting scrollable view types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pinnedscrollableviews/sectionheaders",
                    "title": "static let sectionHeaders: PinnedScrollableViews",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pinnedscrollableviews/sectionfooters",
                    "title": "static let sectionFooters: PinnedScrollableViews",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/pinnedscrollableviews",
                "title": "PinnedScrollableViews",
                "type": "struct"
              },
              {
                "title": "Statically arranging views in two dimensions",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a grid",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/grid/init(alignment:horizontalspacing:verticalspacing:content:)",
                    "title": "init(alignment: Alignment, horizontalSpacing: CGFloat?, verticalSpacing: CGFloat?, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/grid",
                "title": "Grid",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a grid row",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gridrow/init(alignment:content:)",
                    "title": "init(alignment: VerticalAlignment?, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/gridrow",
                "title": "GridRow",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/gridcellcolumns(_:)",
                "title": "func gridCellColumns(Int) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/gridcellanchor(_:)",
                "title": "func gridCellAnchor(UnitPoint) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/gridcellunsizedaxes(_:)",
                "title": "func gridCellUnsizedAxes(Axis.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/gridcolumnalignment(_:)",
                "title": "func gridColumnAlignment(HorizontalAlignment) -> some View",
                "type": "method"
              },
              {
                "title": "Dynamically arranging views in two dimensions",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a horizontal grid",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/lazyhgrid/init(rows:alignment:spacing:pinnedviews:content:)",
                    "title": "init(rows: [GridItem], alignment: VerticalAlignment, spacing: CGFloat?, pinnedViews: PinnedScrollableViews, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/lazyhgrid",
                "title": "LazyHGrid",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a vertical grid",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/lazyvgrid/init(columns:alignment:spacing:pinnedviews:content:)",
                    "title": "init(columns: [GridItem], alignment: HorizontalAlignment, spacing: CGFloat?, pinnedViews: PinnedScrollableViews, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/lazyvgrid",
                "title": "LazyVGrid",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a grid item",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/griditem/init(_:spacing:alignment:)",
                    "title": "init(GridItem.Size, spacing: CGFloat?, alignment: Alignment?)",
                    "type": "init"
                  },
                  {
                    "title": "Inspecting grid item properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/griditem/alignment",
                    "title": "var alignment: Alignment?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/griditem/spacing",
                    "title": "var spacing: CGFloat?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/griditem/size-swift.property",
                    "title": "var size: GridItem.Size",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the sizes",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/griditem/size-swift.enum/adaptive(minimum:maximum:)",
                        "title": "case adaptive(minimum: CGFloat, maximum: CGFloat)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/griditem/size-swift.enum/fixed(_:)",
                        "title": "case fixed(CGFloat)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/griditem/size-swift.enum/flexible(minimum:maximum:)",
                        "title": "case flexible(minimum: CGFloat, maximum: CGFloat)",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/griditem/size-swift.enum",
                    "title": "GridItem.Size",
                    "type": "enum"
                  }
                ],
                "path": "/documentation/swiftui/griditem",
                "title": "GridItem",
                "type": "struct"
              },
              {
                "title": "Layering views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/adding-a-background-to-your-view",
                "title": "Adding a background to your view",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Creating a stack",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/zstack/init(alignment:content:)",
                    "title": "init(alignment: Alignment, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting symbols",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/zstackcontent3d/init(spacing:content:)",
                        "title": "init(spacing: CGFloat?, content: Content)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/zstackcontent3d/content",
                        "title": "var content: Content",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/zstackcontent3d/spacing",
                        "title": "var spacing: CGFloat?",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/zstackcontent3d",
                    "title": "ZStackContent3D",
                    "type": "struct"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/zstack/init(alignment:spacing:content:)",
                    "title": "init<V>(alignment: Alignment, spacing: CGFloat?, content: () -> V)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/zstack",
                "title": "ZStack",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/zindex(_:)",
                "title": "func zIndex(Double) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/background(alignment:content:)",
                "title": "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/background(_:ignoressafeareaedges:)",
                "title": "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/background(ignoressafeareaedges:)",
                "title": "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/background(_:in:fillstyle:)",
                "title": "func background(_:in:fillStyle:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/background(in:fillstyle:)",
                "title": "func background(in:fillStyle:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/overlay(alignment:content:)",
                "title": "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/overlay(_:ignoressafeareaedges:)",
                "title": "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/overlay(_:in:fillstyle:)",
                "title": "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/backgroundmaterial",
                "title": "var backgroundMaterial: Material?",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/view/containerbackground(_:for:)",
                "title": "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/containerbackground(for:alignment:content:)",
                "title": "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting placements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/containerbackgroundplacement/navigation",
                    "title": "static let navigation: ContainerBackgroundPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/containerbackgroundplacement/tabview",
                    "title": "static let tabView: ContainerBackgroundPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/containerbackgroundplacement/widget",
                    "title": "static let widget: ContainerBackgroundPlacement",
                    "type": "property"
                  },
                  {
                    "title": "Getting StoreKit placements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/containerbackgroundplacement/subscriptionstore",
                    "title": "static var subscriptionStore: ContainerBackgroundPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/containerbackgroundplacement/subscriptionstorefullheight",
                    "title": "static var subscriptionStoreFullHeight: ContainerBackgroundPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/containerbackgroundplacement/subscriptionstoreheader",
                    "title": "static var subscriptionStoreHeader: ContainerBackgroundPlacement",
                    "type": "property"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/containerbackgroundplacement/navigationsplitview",
                    "title": "static let navigationSplitView: ContainerBackgroundPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/containerbackgroundplacement/window",
                    "title": "static let window: ContainerBackgroundPlacement",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/containerbackgroundplacement",
                "title": "ContainerBackgroundPlacement",
                "type": "struct"
              },
              {
                "title": "Automatically choosing the layout that fits",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a view that fits",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewthatfits/init(in:content:)",
                    "title": "init(in: Axis.Set, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/viewthatfits",
                "title": "ViewThatFits",
                "type": "struct"
              },
              {
                "title": "Separators",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a spacer",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/spacer/init(minlength:)",
                    "title": "init(minLength: CGFloat?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/spacer/minlength",
                    "title": "var minLength: CGFloat?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/spacer",
                "title": "Spacer",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a divider",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/divider/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/divider",
                "title": "Divider",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/layout-fundamentals",
            "title": "Layout fundamentals",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Finetuning a layout",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/laying-out-a-simple-view",
                "title": "Laying out a simple view",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/inspecting-view-layout",
                "title": "Inspecting view layout",
                "type": "article"
              },
              {
                "title": "Adding padding around a view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/padding(_:)",
                "title": "func padding(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/padding(_:_:)",
                "title": "func padding(Edge.Set, CGFloat?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/padding3d(_:)",
                "title": "func padding3D(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/padding3d(_:_:)",
                "title": "func padding3D(Edge3D.Set, CGFloat?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scenepadding(_:)",
                "title": "func scenePadding(Edge.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scenepadding(_:edges:)",
                "title": "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting padding values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scenepadding/minimum",
                    "title": "static let minimum: ScenePadding",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scenepadding/navigationbar",
                    "title": "static let navigationBar: ScenePadding",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scenepadding",
                "title": "ScenePadding",
                "type": "struct"
              },
              {
                "title": "Influencing a view’s size",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/frame(width:height:alignment:)",
                "title": "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/frame(depth:alignment:)",
                "title": "func frame(depth: CGFloat?, alignment: DepthAlignment) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                "title": "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/frame(mindepth:idealdepth:maxdepth:alignment:)",
                "title": "func frame(minDepth: CGFloat?, idealDepth: CGFloat?, maxDepth: CGFloat?, alignment: DepthAlignment) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/containerrelativeframe(_:alignment:)",
                "title": "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/containerrelativeframe(_:alignment:_:)",
                "title": "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/containerrelativeframe(_:count:span:spacing:alignment:)",
                "title": "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fixedsize()",
                "title": "func fixedSize() -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/fixedsize(horizontal:vertical:)",
                "title": "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/layoutpriority(_:)",
                "title": "func layoutPriority(Double) -> some View",
                "type": "method"
              },
              {
                "title": "Adjusting a view’s position",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/making-fine-adjustments-to-a-view-s-position",
                "title": "Making fine adjustments to a view’s position",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/view/position(_:)",
                "title": "func position(CGPoint) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/position(x:y:)",
                "title": "func position(x: CGFloat, y: CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/offset(_:)",
                "title": "func offset(CGSize) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/offset(x:y:)",
                "title": "func offset(x: CGFloat, y: CGFloat) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/offset(z:)",
                "title": "func offset(z: CGFloat) -> some View",
                "type": "method"
              },
              {
                "title": "Aligning views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/aligning-views-within-a-stack",
                "title": "Aligning views within a stack",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/aligning-views-across-stacks",
                "title": "Aligning views across stacks",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/view/alignmentguide(_:computevalue:)",
                "title": "func alignmentGuide(_:computeValue:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting top guides",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/topleading",
                    "title": "static let topLeading: Alignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/top",
                    "title": "static let top: Alignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/toptrailing",
                    "title": "static let topTrailing: Alignment",
                    "type": "property"
                  },
                  {
                    "title": "Getting middle guides",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/leading",
                    "title": "static let leading: Alignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/center",
                    "title": "static let center: Alignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/trailing",
                    "title": "static let trailing: Alignment",
                    "type": "property"
                  },
                  {
                    "title": "Getting bottom guides",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/bottomleading",
                    "title": "static let bottomLeading: Alignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/bottom",
                    "title": "static let bottom: Alignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/bottomtrailing",
                    "title": "static let bottomTrailing: Alignment",
                    "type": "property"
                  },
                  {
                    "title": "Getting text baseline guides",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/leadingfirsttextbaseline",
                    "title": "static var leadingFirstTextBaseline: Alignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/centerfirsttextbaseline",
                    "title": "static var centerFirstTextBaseline: Alignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/trailingfirsttextbaseline",
                    "title": "static var trailingFirstTextBaseline: Alignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/leadinglasttextbaseline",
                    "title": "static var leadingLastTextBaseline: Alignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/centerlasttextbaseline",
                    "title": "static var centerLastTextBaseline: Alignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/trailinglasttextbaseline",
                    "title": "static var trailingLastTextBaseline: Alignment",
                    "type": "property"
                  },
                  {
                    "title": "Creating a custom alignment",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/init(horizontal:vertical:)",
                    "title": "init(horizontal: HorizontalAlignment, vertical: VerticalAlignment)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/horizontal",
                    "title": "var horizontal: HorizontalAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alignment/vertical",
                    "title": "var vertical: VerticalAlignment",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/alignment",
                "title": "Alignment",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting guides",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/horizontalalignment/leading",
                    "title": "static let leading: HorizontalAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/horizontalalignment/center",
                    "title": "static let center: HorizontalAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/horizontalalignment/trailing",
                    "title": "static let trailing: HorizontalAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/horizontalalignment/listrowseparatorleading",
                    "title": "static let listRowSeparatorLeading: HorizontalAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/horizontalalignment/listrowseparatortrailing",
                    "title": "static let listRowSeparatorTrailing: HorizontalAlignment",
                    "type": "property"
                  },
                  {
                    "title": "Creating a custom alignment",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/horizontalalignment/init(_:)",
                    "title": "init(any AlignmentID.Type)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/horizontalalignment/combineexplicit(_:)",
                    "title": "func combineExplicit<S>(S) -> CGFloat?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/horizontalalignment",
                "title": "HorizontalAlignment",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting guides",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/verticalalignment/top",
                    "title": "static let top: VerticalAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/verticalalignment/center",
                    "title": "static let center: VerticalAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/verticalalignment/bottom",
                    "title": "static let bottom: VerticalAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/verticalalignment/firsttextbaseline",
                    "title": "static let firstTextBaseline: VerticalAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/verticalalignment/lasttextbaseline",
                    "title": "static let lastTextBaseline: VerticalAlignment",
                    "type": "property"
                  },
                  {
                    "title": "Creating a custom alignment",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/verticalalignment/init(_:)",
                    "title": "init(any AlignmentID.Type)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/verticalalignment/combineexplicit(_:)",
                    "title": "func combineExplicit<S>(S) -> CGFloat?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/verticalalignment",
                "title": "VerticalAlignment",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting guides",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/depthalignment/back",
                    "title": "static let back: DepthAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/depthalignment/center",
                    "title": "static let center: DepthAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/depthalignment/front",
                    "title": "static let front: DepthAlignment",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/depthalignment",
                "title": "DepthAlignment",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the default value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/alignmentid/defaultvalue(in:)",
                    "title": "static func defaultValue(in: ViewDimensions) -> CGFloat",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/alignmentid",
                "title": "AlignmentID",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting dimensions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewdimensions/height",
                    "title": "var height: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/viewdimensions/width",
                    "title": "var width: CGFloat",
                    "type": "property"
                  },
                  {
                    "title": "Accessing guide values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewdimensions/subscript(_:)",
                    "title": "subscript(_:)",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/swiftui/viewdimensions/subscript(explicit:)",
                    "title": "subscript(explicit:)",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/swiftui/viewdimensions",
                "title": "ViewDimensions",
                "type": "struct"
              },
              {
                "title": "Setting margins",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/contentmargins(_:for:)",
                "title": "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/contentmargins(_:_:for:)",
                "title": "func contentMargins(_:_:for:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the placement",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/contentmarginplacement/automatic",
                    "title": "static var automatic: ContentMarginPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/contentmarginplacement/scrollcontent",
                    "title": "static var scrollContent: ContentMarginPlacement",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/contentmarginplacement/scrollindicators",
                    "title": "static var scrollIndicators: ContentMarginPlacement",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/contentmarginplacement",
                "title": "ContentMarginPlacement",
                "type": "struct"
              },
              {
                "title": "Staying in the safe areas",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/ignoressafearea(_:edges:)",
                "title": "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/safeareainset(edge:alignment:spacing:content:)",
                "title": "func safeAreaInset(edge:alignment:spacing:content:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/safeareapadding(_:)",
                "title": "func safeAreaPadding(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/safeareapadding(_:_:)",
                "title": "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting safe area regions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/safearearegions/all",
                    "title": "static let all: SafeAreaRegions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/safearearegions/container",
                    "title": "static let container: SafeAreaRegions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/safearearegions/keyboard",
                    "title": "static let keyboard: SafeAreaRegions",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/safearearegions",
                "title": "SafeAreaRegions",
                "type": "struct"
              },
              {
                "title": "Setting a layout direction",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/layoutdirectionbehavior(_:)",
                "title": "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting behaviors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layoutdirectionbehavior/fixed",
                    "title": "case fixed",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/layoutdirectionbehavior/mirrors",
                    "title": "static var mirrors: LayoutDirectionBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/layoutdirectionbehavior/mirrors(in:)",
                    "title": "case mirrors(in: LayoutDirection)",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/layoutdirectionbehavior",
                "title": "LayoutDirectionBehavior",
                "type": "enum"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/layoutdirection",
                "title": "var layoutDirection: LayoutDirection",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting layout directions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layoutdirection/lefttoright",
                    "title": "case leftToRight",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/layoutdirection/righttoleft",
                    "title": "case rightToLeft",
                    "type": "case"
                  },
                  {
                    "title": "Creating a layout direction",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layoutdirection/init(_:)",
                    "title": "init?(UITraitEnvironmentLayoutDirection)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/layoutdirection",
                "title": "LayoutDirection",
                "type": "enum"
              },
              {
                "title": "Reacting to interface characteristics",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/isluminancereduced",
                "title": "var isLuminanceReduced: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/displayscale",
                "title": "var displayScale: CGFloat",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/pixellength",
                "title": "var pixelLength: CGFloat",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/horizontalsizeclass",
                "title": "var horizontalSizeClass: UserInterfaceSizeClass?",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/verticalsizeclass",
                "title": "var verticalSizeClass: UserInterfaceSizeClass?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting size classes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/userinterfacesizeclass/compact",
                    "title": "case compact",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/userinterfacesizeclass/regular",
                    "title": "case regular",
                    "type": "case"
                  },
                  {
                    "title": "Creating a size class",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/userinterfacesizeclass/init(_:)",
                    "title": "init?(UIUserInterfaceSizeClass)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/userinterfacesizeclass",
                "title": "UserInterfaceSizeClass",
                "type": "enum"
              },
              {
                "title": "Accessing edges and regions",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Getting the edges",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/edge/top",
                    "title": "case top",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/edge/bottom",
                    "title": "case bottom",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/edge/leading",
                    "title": "case leading",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/edge/trailing",
                    "title": "case trailing",
                    "type": "case"
                  },
                  {
                    "title": "Creating an edge",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/edge/init(_:)",
                    "title": "init?(Edge3D)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing sets of edges",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting edge sets",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/edge/set/all",
                        "title": "static let all: Edge.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge/set/top",
                        "title": "static let top: Edge.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge/set/bottom",
                        "title": "static let bottom: Edge.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge/set/leading",
                        "title": "static let leading: Edge.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge/set/trailing",
                        "title": "static let trailing: Edge.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge/set/horizontal",
                        "title": "static let horizontal: Edge.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge/set/vertical",
                        "title": "static let vertical: Edge.Set",
                        "type": "property"
                      },
                      {
                        "title": "Creating an edge set",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/edge/set/init(_:)",
                        "title": "init(Edge)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/edge/set",
                    "title": "Edge.Set",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/edge",
                "title": "Edge",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting the edges",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/edge3d/top",
                    "title": "case top",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/edge3d/bottom",
                    "title": "case bottom",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/edge3d/leading",
                    "title": "case leading",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/edge3d/trailing",
                    "title": "case trailing",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/edge3d/front",
                    "title": "case front",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/edge3d/back",
                    "title": "case back",
                    "type": "case"
                  },
                  {
                    "title": "Creating an edge",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/edge3d/init(_:)",
                    "title": "init(Edge)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing sets of edges",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting edge sets",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/edge3d/set/all",
                        "title": "static let all: Edge3D.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge3d/set/top",
                        "title": "static let top: Edge3D.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge3d/set/bottom",
                        "title": "static let bottom: Edge3D.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge3d/set/leading",
                        "title": "static let leading: Edge3D.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge3d/set/front",
                        "title": "static let front: Edge3D.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge3d/set/back",
                        "title": "static let back: Edge3D.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge3d/set/trailing",
                        "title": "static let trailing: Edge3D.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge3d/set/horizontal",
                        "title": "static let horizontal: Edge3D.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge3d/set/vertical",
                        "title": "static let vertical: Edge3D.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/edge3d/set/depth",
                        "title": "static let depth: Edge3D.Set",
                        "type": "property"
                      },
                      {
                        "title": "Creating an edge set",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/edge3d/set/init(_:)",
                        "title": "init(_:)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/edge3d/set",
                    "title": "Edge3D.Set",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/edge3d",
                "title": "Edge3D",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting the edges",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/horizontaledge/leading",
                    "title": "case leading",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/horizontaledge/trailing",
                    "title": "case trailing",
                    "type": "case"
                  },
                  {
                    "title": "Accessing sets of edges",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting edge sets",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/horizontaledge/set/all",
                        "title": "static let all: HorizontalEdge.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/horizontaledge/set/leading",
                        "title": "static let leading: HorizontalEdge.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/horizontaledge/set/trailing",
                        "title": "static let trailing: HorizontalEdge.Set",
                        "type": "property"
                      },
                      {
                        "title": "Creating an edge set",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/horizontaledge/set/init(_:)",
                        "title": "init(HorizontalEdge)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/horizontaledge/set",
                    "title": "HorizontalEdge.Set",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/horizontaledge",
                "title": "HorizontalEdge",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting the edges",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/verticaledge/top",
                    "title": "case top",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/verticaledge/bottom",
                    "title": "case bottom",
                    "type": "case"
                  },
                  {
                    "title": "Accessing sets of edges",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting edge sets",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/verticaledge/set/all",
                        "title": "static let all: VerticalEdge.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/verticaledge/set/top",
                        "title": "static let top: VerticalEdge.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/verticaledge/set/bottom",
                        "title": "static let bottom: VerticalEdge.Set",
                        "type": "property"
                      },
                      {
                        "title": "Creating an edge set",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/verticaledge/set/init(_:)",
                        "title": "init(VerticalEdge)",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/verticaledge/set",
                    "title": "VerticalEdge.Set",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/verticaledge",
                "title": "VerticalEdge",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting edge insets",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets/top",
                    "title": "var top: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets/bottom",
                    "title": "var bottom: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets/leading",
                    "title": "var leading: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets/trailing",
                    "title": "var trailing: CGFloat",
                    "type": "property"
                  },
                  {
                    "title": "Creating an edge inset",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets/init(top:leading:bottom:trailing:)",
                    "title": "init(top: CGFloat, leading: CGFloat, bottom: CGFloat, trailing: CGFloat)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/edgeinsets",
                "title": "EdgeInsets",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting edge insets",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets3d/top",
                    "title": "var top: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets3d/bottom",
                    "title": "var bottom: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets3d/leading",
                    "title": "var leading: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets3d/trailing",
                    "title": "var trailing: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets3d/front",
                    "title": "var front: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets3d/back",
                    "title": "var back: CGFloat",
                    "type": "property"
                  },
                  {
                    "title": "Creating an edge inset",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets3d/init(horizontal:vertical:depth:)",
                    "title": "init(horizontal: CGFloat, vertical: CGFloat, depth: CGFloat)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/edgeinsets3d/init(top:leading:bottom:trailing:front:back:)",
                    "title": "init(top: CGFloat, leading: CGFloat, bottom: CGFloat, trailing: CGFloat, front: CGFloat, back: CGFloat)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/edgeinsets3d",
                "title": "EdgeInsets3D",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/layout-adjustments",
            "title": "Layout adjustments",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a custom layout container",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/composing_custom_layouts_with_swiftui",
                "title": "Composing custom layouts with SwiftUI",
                "type": "sampleCode"
              },
              {
                "children": [
                  {
                    "title": "Sizing the container and placing subviews",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layout/sizethatfits(proposal:subviews:cache:)",
                    "title": "func sizeThatFits(proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGSize",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/layout/placesubviews(in:proposal:subviews:cache:)",
                    "title": "func placeSubviews(in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/layout/subviews",
                    "title": "Layout.Subviews",
                    "type": "typealias"
                  },
                  {
                    "title": "Reporting layout container characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layout/explicitalignment(of:in:proposal:subviews:cache:)",
                    "title": "func explicitAlignment(of:in:proposal:subviews:cache:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/layout/spacing(subviews:cache:)",
                    "title": "func spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> ViewSpacing",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/layout/layoutproperties",
                    "title": "static var layoutProperties: LayoutProperties",
                    "type": "property"
                  },
                  {
                    "title": "Managing a cache",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layout/makecache(subviews:)",
                    "title": "func makeCache(subviews: Self.Subviews) -> Self.Cache",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/layout/updatecache(_:subviews:)",
                    "title": "func updateCache(inout Self.Cache, subviews: Self.Subviews)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/layout/cache",
                    "title": "Cache",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layout/callasfunction(_:)",
                    "title": "func callAsFunction<V>(() -> V) -> some View",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/layout",
                "title": "Layout",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Placing the subview",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubview/place(at:anchor:proposal:)",
                    "title": "func place(at: CGPoint, anchor: UnitPoint, proposal: ProposedViewSize)",
                    "type": "method"
                  },
                  {
                    "title": "Getting subview characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubview/dimensions(in:)",
                    "title": "func dimensions(in: ProposedViewSize) -> ViewDimensions",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubview/sizethatfits(_:)",
                    "title": "func sizeThatFits(ProposedViewSize) -> CGSize",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubview/spacing",
                    "title": "var spacing: ViewSpacing",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubview/priority",
                    "title": "var priority: Double",
                    "type": "property"
                  },
                  {
                    "title": "Getting custom values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubview/subscript(_:)",
                    "title": "subscript<K>(K.Type) -> K.Value",
                    "type": "subscript"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubview/containervalues",
                    "title": "var containerValues: ContainerValues",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/layoutsubview",
                "title": "LayoutSubview",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the layout direction",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubviews/layoutdirection",
                    "title": "var layoutDirection: LayoutDirection",
                    "type": "property"
                  },
                  {
                    "title": "Accessing subviews",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubviews/subscript(_:)",
                    "title": "subscript(_:)",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubviews/startindex",
                    "title": "var startIndex: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubviews/endindex",
                    "title": "var endIndex: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubviews/element",
                    "title": "LayoutSubviews.Element",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubviews/index",
                    "title": "LayoutSubviews.Index",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/layoutsubviews/subsequence",
                    "title": "LayoutSubviews.SubSequence",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/swiftui/layoutsubviews",
                "title": "LayoutSubviews",
                "type": "struct"
              },
              {
                "title": "Configuring a custom layout",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a layout properties instance",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layoutproperties/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Getting layout properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layoutproperties/stackorientation",
                    "title": "var stackOrientation: Axis?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/layoutproperties",
                "title": "LayoutProperties",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting standard proposals",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/proposedviewsize/zero",
                    "title": "static let zero: ProposedViewSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/proposedviewsize/infinity",
                    "title": "static let infinity: ProposedViewSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/proposedviewsize/unspecified",
                    "title": "static let unspecified: ProposedViewSize",
                    "type": "property"
                  },
                  {
                    "title": "Creating a custom size proposal",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/proposedviewsize/init(_:)",
                    "title": "init(CGSize)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/proposedviewsize/init(width:height:)",
                    "title": "init(width: CGFloat?, height: CGFloat?)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the proposal’s dimensions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/proposedviewsize/height",
                    "title": "var height: CGFloat?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/proposedviewsize/width",
                    "title": "var width: CGFloat?",
                    "type": "property"
                  },
                  {
                    "title": "Modifying a proposal",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/proposedviewsize/replacingunspecifieddimensions(by:)",
                    "title": "func replacingUnspecifiedDimensions(by: CGSize) -> CGSize",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/proposedviewsize",
                "title": "ProposedViewSize",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating spacing instances",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewspacing/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/viewspacing/zero",
                    "title": "static let zero: ViewSpacing",
                    "type": "property"
                  },
                  {
                    "title": "Measuring spacing distance",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewspacing/distance(to:along:)",
                    "title": "func distance(to: ViewSpacing, along: Axis) -> CGFloat",
                    "type": "method"
                  },
                  {
                    "title": "Merging spacing instances",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewspacing/formunion(_:edges:)",
                    "title": "func formUnion(ViewSpacing, edges: Edge.Set)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/viewspacing/union(_:edges:)",
                    "title": "func union(ViewSpacing, edges: Edge.Set) -> ViewSpacing",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/viewspacing",
                "title": "ViewSpacing",
                "type": "struct"
              },
              {
                "title": "Associating values with views in a custom layout",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/layoutvalue(key:value:)",
                "title": "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Providing a default value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/layoutvaluekey/defaultvalue",
                    "title": "static var defaultValue: Self.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/layoutvaluekey/value",
                    "title": "Value",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/layoutvaluekey",
                "title": "LayoutValueKey",
                "type": "protocol"
              },
              {
                "title": "Transitioning between layout types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating the layout",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anylayout/init(_:)",
                    "title": "init<L>(L)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/anylayout",
                "title": "AnyLayout",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a horizontal stack",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/hstacklayout/init(alignment:spacing:)",
                    "title": "init(alignment: VerticalAlignment, spacing: CGFloat?)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the stack’s properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/hstacklayout/alignment",
                    "title": "var alignment: VerticalAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/hstacklayout/spacing",
                    "title": "var spacing: CGFloat?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/hstacklayout",
                "title": "HStackLayout",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a vertical stack",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/vstacklayout/init(alignment:spacing:)",
                    "title": "init(alignment: HorizontalAlignment, spacing: CGFloat?)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the stack’s properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/vstacklayout/alignment",
                    "title": "var alignment: HorizontalAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/vstacklayout/spacing",
                    "title": "var spacing: CGFloat?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/vstacklayout",
                "title": "VStackLayout",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a stack",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/zstacklayout/init(alignment:)",
                    "title": "init(alignment: Alignment)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the stack’s properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/zstacklayout/alignment",
                    "title": "var alignment: Alignment",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/zstacklayout",
                "title": "ZStackLayout",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a grid",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gridlayout/init(alignment:horizontalspacing:verticalspacing:)",
                    "title": "init(alignment: Alignment, horizontalSpacing: CGFloat?, verticalSpacing: CGFloat?)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the grid’s properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gridlayout/alignment",
                    "title": "var alignment: Alignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gridlayout/horizontalspacing",
                    "title": "var horizontalSpacing: CGFloat?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gridlayout/verticalspacing",
                    "title": "var verticalSpacing: CGFloat?",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gridlayout/body",
                    "title": "GridLayout.Body",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Structures",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/gridlayout/cache",
                        "title": "GridLayout.Cache",
                        "type": "struct"
                      }
                    ],
                    "path": "/documentation/swiftui/gridlayout/layout-implementations",
                    "title": "Layout Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/swiftui/gridlayout",
                "title": "GridLayout",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/custom-layout",
            "title": "Custom layout",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a list",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/displaying-data-in-lists",
                "title": "Displaying data in lists",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Creating a list from a set of views",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(selection:content:)",
                    "title": "init(selection:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a list from enumerated data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(_:rowcontent:)",
                    "title": "init(_:rowContent:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(_:selection:rowcontent:)",
                    "title": "init(_:selection:rowContent:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(_:id:rowcontent:)",
                    "title": "init(_:id:rowContent:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(_:id:selection:rowcontent:)",
                    "title": "init(_:id:selection:rowContent:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a list from hierarchical data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(_:children:rowcontent:)",
                    "title": "init(_:children:rowContent:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(_:children:selection:rowcontent:)",
                    "title": "init(_:children:selection:rowContent:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(_:id:children:rowcontent:)",
                    "title": "init(_:id:children:rowContent:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(_:id:children:selection:rowcontent:)",
                    "title": "init(_:id:children:selection:rowContent:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a list from editable data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(_:editactions:rowcontent:)",
                    "title": "init<Data, RowContent>(Binding<Data>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(_:editactions:selection:rowcontent:)",
                    "title": "init(_:editActions:selection:rowContent:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(_:id:editactions:rowcontent:)",
                    "title": "init<Data, ID, RowContent>(Binding<Data>, id: KeyPath<Data.Element, ID>, editActions: EditActions<Data>, rowContent: (Binding<Data.Element>) -> RowContent)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/list/init(_:id:editactions:selection:rowcontent:)",
                    "title": "init(_:id:editActions:selection:rowContent:)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/list/body",
                    "title": "var body: some View",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/list",
                "title": "List",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/liststyle(_:)",
                "title": "func listStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "title": "Disclosing information progressively",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating an outline group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/outlinegroup/init(_:children:)",
                    "title": "init(_:children:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/outlinegroup/init(_:children:content:)",
                    "title": "init(_:children:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/outlinegroup/init(_:id:children:content:)",
                    "title": "init(_:id:children:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/outlinesubgroupchildren",
                    "title": "OutlineSubgroupChildren",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/outlinegroup",
                "title": "OutlineGroup",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a disclosure group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/disclosuregroup/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/disclosuregroup/init(content:label:)",
                    "title": "init(content: () -> Content, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/disclosuregroup/init(_:isexpanded:content:)",
                    "title": "init(_:isExpanded:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/disclosuregroup/init(isexpanded:content:label:)",
                    "title": "init(isExpanded: Binding<Bool>, content: () -> Content, label: () -> Label)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/disclosuregroup",
                "title": "DisclosureGroup",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/disclosuregroupstyle(_:)",
                "title": "func disclosureGroupStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "title": "Configuring rows",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/listrowinsets(_:)",
                "title": "func listRowInsets(EdgeInsets?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/listrowhovereffect(_:)",
                "title": "func listRowHoverEffect(HoverEffect?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/listrowhovereffectdisabled(_:)",
                "title": "func listRowHoverEffectDisabled(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/listitemtint(_:)",
                "title": "func listItemTint(_:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting list item tint options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/listitemtint/monochrome",
                    "title": "static let monochrome: ListItemTint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/listitemtint/fixed(_:)",
                    "title": "static func fixed(Color) -> ListItemTint",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/listitemtint/preferred(_:)",
                    "title": "static func preferred(Color) -> ListItemTint",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/listitemtint",
                "title": "ListItemTint",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/defaultminlistrowheight",
                "title": "var defaultMinListRowHeight: CGFloat",
                "type": "property"
              },
              {
                "title": "Configuring separators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/listrowseparatortint(_:edges:)",
                "title": "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/listsectionseparatortint(_:edges:)",
                "title": "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/listrowseparator(_:edges:)",
                "title": "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/listsectionseparator(_:edges:)",
                "title": "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                "type": "method"
              },
              {
                "title": "Configuring headers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/headerprominence(_:)",
                "title": "func headerProminence(Prominence) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/headerprominence",
                "title": "var headerProminence: Prominence",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting prominence options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/prominence/standard",
                    "title": "case standard",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/prominence/increased",
                    "title": "case increased",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/prominence",
                "title": "Prominence",
                "type": "enum"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/defaultminlistheaderheight",
                "title": "var defaultMinListHeaderHeight: CGFloat?",
                "type": "property"
              },
              {
                "title": "Configuring spacing",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/listrowspacing(_:)",
                "title": "func listRowSpacing(CGFloat?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/listsectionspacing(_:)",
                "title": "func listSectionSpacing(_:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting section spacing",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/listsectionspacing/default",
                    "title": "static let `default`: ListSectionSpacing",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/listsectionspacing/compact",
                    "title": "static let compact: ListSectionSpacing",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/listsectionspacing/custom(_:)",
                    "title": "static func custom(CGFloat) -> ListSectionSpacing",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/listsectionspacing",
                "title": "ListSectionSpacing",
                "type": "struct"
              },
              {
                "title": "Configuring backgrounds",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/listrowbackground(_:)",
                "title": "func listRowBackground<V>(V?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/alternatingrowbackgrounds(_:)",
                "title": "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting alternating row background behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/alternatingrowbackgroundbehavior/automatic",
                    "title": "static let automatic: AlternatingRowBackgroundBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alternatingrowbackgroundbehavior/enabled",
                    "title": "static let enabled: AlternatingRowBackgroundBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/alternatingrowbackgroundbehavior/disabled",
                    "title": "static let disabled: AlternatingRowBackgroundBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/alternatingrowbackgroundbehavior",
                "title": "AlternatingRowBackgroundBehavior",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/backgroundprominence",
                "title": "var backgroundProminence: BackgroundProminence",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting background prominence",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/backgroundprominence/standard",
                    "title": "static let standard: BackgroundProminence",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/backgroundprominence/increased",
                    "title": "static let increased: BackgroundProminence",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/backgroundprominence",
                "title": "BackgroundProminence",
                "type": "struct"
              },
              {
                "title": "Displaying a badge on a list item",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/badge(_:)",
                "title": "func badge(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/badgeprominence(_:)",
                "title": "func badgeProminence(BadgeProminence) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/badgeprominence",
                "title": "var badgeProminence: BadgeProminence",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting background prominence",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/badgeprominence/standard",
                    "title": "static let standard: BadgeProminence",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/badgeprominence/increased",
                    "title": "static let increased: BadgeProminence",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/badgeprominence/decreased",
                    "title": "static let decreased: BadgeProminence",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/badgeprominence",
                "title": "BadgeProminence",
                "type": "struct"
              },
              {
                "title": "Configuring interaction",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/swipeactions(edge:allowsfullswipe:content:)",
                "title": "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/selectiondisabled(_:)",
                "title": "func selectionDisabled(Bool) -> some View",
                "type": "method"
              },
              {
                "title": "Refreshing a list’s content",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/refreshable(action:)",
                "title": "func refreshable(action: () async -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/refresh",
                "title": "var refresh: RefreshAction?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/refreshaction/callasfunction()",
                    "title": "func callAsFunction() async",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/refreshaction",
                "title": "RefreshAction",
                "type": "struct"
              },
              {
                "title": "Editing a list",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/movedisabled(_:)",
                "title": "func moveDisabled(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/deletedisabled(_:)",
                "title": "func deleteDisabled(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/editmode",
                "title": "var editMode: Binding<EditMode>?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting edit modes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/editmode/active",
                    "title": "case active",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/editmode/inactive",
                    "title": "case inactive",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/editmode/transient",
                    "title": "case transient",
                    "type": "case"
                  },
                  {
                    "title": "Checking for editing mode",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/editmode/isediting",
                    "title": "var isEditing: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/editmode",
                "title": "EditMode",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting edit operations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/editactions/all-45m4m",
                    "title": "static var all: EditActions<Data>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/editactions/all-4dctm",
                    "title": "static var all: EditActions<Data>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/editactions/all-4uyun",
                    "title": "static var all: EditActions<Data>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/editactions/all-6ryvk",
                    "title": "static var all: EditActions<Data>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/editactions/delete",
                    "title": "static var delete: EditActions<Data>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/editactions/move",
                    "title": "static var move: EditActions<Data>",
                    "type": "property"
                  },
                  {
                    "title": "Creating an edit operation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/editactions/init(rawvalue:)",
                    "title": "init(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/editactions/rawvalue",
                    "title": "let rawValue: Int",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/editactions",
                "title": "EditActions",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/editablecollectioncontent",
                "title": "EditableCollectionContent",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/indexedidentifiercollection",
                "title": "IndexedIdentifierCollection",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/lists",
            "title": "Lists",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a table",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/building_a_great_mac_app_with_swiftui",
                "title": "Building a Great Mac App with SwiftUI",
                "type": "sampleCode"
              },
              {
                "children": [
                  {
                    "title": "Creating a table from columns",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(_:columns:)",
                    "title": "init<Data>(Data, columns: () -> Columns)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(_:selection:columns:)",
                    "title": "init(_:selection:columns:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a sortable table from columns",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(_:sortorder:columns:)",
                    "title": "init<Data, Sort>(Data, sortOrder: Binding<[Sort]>, columns: () -> Columns)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(_:selection:sortorder:columns:)",
                    "title": "init(_:selection:sortOrder:columns:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a table from columns and rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(of:columns:rows:)",
                    "title": "init(of: Value.Type, columns: () -> Columns, rows: () -> Rows)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(of:selection:columns:rows:)",
                    "title": "init(of:selection:columns:rows:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a sortable table from columns and rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(of:sortorder:columns:rows:)",
                    "title": "init<Sort>(of: Value.Type, sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(of:selection:sortorder:columns:rows:)",
                    "title": "init(of:selection:sortOrder:columns:rows:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(sortorder:columns:rows:)",
                    "title": "init<Sort>(sortOrder: Binding<[Sort]>, columns: () -> Columns, rows: () -> Rows)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(selection:sortorder:columns:rows:)",
                    "title": "init(selection:sortOrder:columns:rows:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a table with customizable columns",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(_:columncustomization:columns:)",
                    "title": "init<Data>(Data, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(_:selection:columncustomization:columns:)",
                    "title": "init(_:selection:columnCustomization:columns:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(_:selection:sortorder:columncustomization:columns:)",
                    "title": "init(_:selection:sortOrder:columnCustomization:columns:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(_:sortorder:columncustomization:columns:)",
                    "title": "init<Data, Sort>(Data, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a table with dynamically customizable columns",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(of:columncustomization:columns:rows:)",
                    "title": "init(of: Value.Type, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(of:selection:columncustomization:columns:rows:)",
                    "title": "init(of:selection:columnCustomization:columns:rows:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(of:selection:sortorder:columncustomization:columns:rows:)",
                    "title": "init(of:selection:sortOrder:columnCustomization:columns:rows:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(of:sortorder:columncustomization:columns:rows:)",
                    "title": "init<Sort>(of: Value.Type, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>, columns: () -> Columns, rows: () -> Rows)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a hierarchical table",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(_:children:columncustomization:columns:)",
                    "title": "init<Data>(Data, children: KeyPath<Value, Data?>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(_:children:selection:columncustomization:columns:)",
                    "title": "init(_:children:selection:columnCustomization:columns:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(_:children:selection:sortorder:columncustomization:columns:)",
                    "title": "init(_:children:selection:sortOrder:columnCustomization:columns:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/table/init(_:children:sortorder:columncustomization:columns:)",
                    "title": "init<Data, Sort>(Data, children: KeyPath<Data.Element, Data?>, sortOrder: Binding<[Sort]>, columnCustomization: Binding<TableColumnCustomization<Value>>?, columns: () -> Columns)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/table",
                "title": "Table",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/tablestyle(_:)",
                "title": "func tableStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "title": "Creating columns",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating an unsortable column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumn/init(_:value:)",
                    "title": "init(_:value:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumn/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a sortable column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumn/init(_:value:content:)",
                    "title": "init(_:value:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumn/init(_:value:comparator:)",
                    "title": "init(_:value:comparator:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumn/init(_:value:comparator:content:)",
                    "title": "init(_:value:comparator:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumn/init(_:sortusing:content:)",
                    "title": "init(_:sortUsing:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Setting the column width",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumn/width(_:)",
                    "title": "func width(CGFloat?) -> TableColumn<RowValue, Sort, Content, Label>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumn/width(min:ideal:max:)",
                    "title": "func width(min: CGFloat?, ideal: CGFloat?, max: CGFloat?) -> TableColumn<RowValue, Sort, Content, Label>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/tablecolumn/width()",
                    "title": "func width() -> TableColumn<RowValue, Sort, Content, Label>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/tablecolumn",
                "title": "TableColumn",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the column body",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncontent/tablecolumnbody-swift.property",
                    "title": "var tableColumnBody: Self.TableColumnBody",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncontent/tablecolumnbody-swift.associatedtype",
                    "title": "TableColumnBody",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Defining the row value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncontent/tablerowvalue",
                    "title": "TableRowValue",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Defining the comparator",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncontent/tablecolumnsortcomparator",
                    "title": "TableColumnSortComparator",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Configuring the content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncontent/alignment(_:)",
                    "title": "func alignment(TableColumnAlignment) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncontent/customizationid(_:)",
                    "title": "func customizationID(String) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncontent/defaultvisibility(_:)",
                    "title": "func defaultVisibility(Visibility) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncontent/disabledcustomizationbehavior(_:)",
                    "title": "func disabledCustomizationBehavior(TableColumnCustomizationBehavior) -> some TableColumnContent<Self.TableRowValue, Self.TableColumnSortComparator>\n",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/tablecolumncontent",
                "title": "TableColumnContent",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting the alignment",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnalignment/automatic",
                    "title": "static var automatic: TableColumnAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnalignment/leading",
                    "title": "static var leading: TableColumnAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnalignment/center",
                    "title": "static var center: TableColumnAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnalignment/trailing",
                    "title": "static var trailing: TableColumnAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnalignment/numeric",
                    "title": "static var numeric: TableColumnAlignment",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnalignment/numeric(_:)",
                    "title": "static func numeric(Locale.NumberingSystem) -> TableColumnAlignment",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/tablecolumnalignment",
                "title": "TableColumnAlignment",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Building a column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildblock(_:)",
                    "title": "static buildBlock(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:)",
                    "title": "static buildBlock(_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:)",
                    "title": "static buildBlock(_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:_:_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)",
                    "title": "static buildBlock(_:_:_:_:_:_:_:_:_:_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildexpression(_:)",
                    "title": "static buildExpression(_:)",
                    "type": "method"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Accessing the value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/tupletablecolumncontent/value",
                        "title": "var value: T",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/tupletablecolumncontent",
                    "title": "TupleTableColumnContent",
                    "type": "struct"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildeither(first:)",
                    "title": "static buildEither(first:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildeither(second:)",
                    "title": "static buildEither(second:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildif(_:)",
                    "title": "static buildIf(_:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnbuilder/buildlimitedavailability(_:)",
                    "title": "static buildLimitedAvailability(_:)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/tablecolumnbuilder",
                "title": "TableColumnBuilder",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the collection",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnforeach/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnforeach/init(_:id:content:)",
                    "title": "init(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing collection content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnforeach/content",
                    "title": "var content: (Data.Element) -> Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumnforeach/data",
                    "title": "var data: Data",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/tablecolumnforeach",
                "title": "TableColumnForEach",
                "type": "struct"
              },
              {
                "title": "Customizing columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/tablecolumnheaders(_:)",
                "title": "func tableColumnHeaders(Visibility) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a table column customization",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncustomization/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Managing the customization",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncustomization/resetorder()",
                    "title": "func resetOrder()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncustomization/subscript(visibility:)",
                    "title": "subscript(visibility _: String) -> Visibility",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/swiftui/tablecolumncustomization",
                "title": "TableColumnCustomization",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the customization behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncustomizationbehavior/all",
                    "title": "static var all: TableColumnCustomizationBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncustomizationbehavior/reorder",
                    "title": "static let reorder: TableColumnCustomizationBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncustomizationbehavior/resize",
                    "title": "static let resize: TableColumnCustomizationBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncustomizationbehavior/visibility",
                    "title": "static let visibility: TableColumnCustomizationBehavior",
                    "type": "property"
                  },
                  {
                    "title": "Creating a behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablecolumncustomizationbehavior/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/tablecolumncustomizationbehavior",
                "title": "TableColumnCustomizationBehavior",
                "type": "struct"
              },
              {
                "title": "Creating rows",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a row",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablerow/init(_:)",
                    "title": "init(Value)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/tablerow",
                "title": "TableRow",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the row body",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowcontent/tablerowbody-swift.property",
                    "title": "var tableRowBody: Self.TableRowBody",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowcontent/tablerowbody-swift.associatedtype",
                    "title": "TableRowBody",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Defining the row value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowcontent/tablerowvalue",
                    "title": "TableRowValue",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Managing interaction",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowcontent/draggable(_:)",
                    "title": "func draggable<T>(@autoclosure () -> T) -> some TableRowContent<Self.TableRowValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowcontent/dropdestination(for:action:)",
                    "title": "func dropDestination<T>(for: T.Type, action: ([T]) -> Void) -> some TableRowContent<Self.TableRowValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowcontent/onhover(perform:)",
                    "title": "func onHover(perform: (Bool) -> Void) -> some TableRowContent<Self.TableRowValue>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowcontent/itemprovider(_:)",
                    "title": "func itemProvider((() -> NSItemProvider?)?) -> ModifiedContent<Self, ItemProviderTableRowModifier>",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/itemprovidertablerowmodifier/body-swift.property",
                        "title": "var body: some _TableRowContentModifier",
                        "type": "property"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/itemprovidertablerowmodifier/body-swift.typealias",
                        "title": "ItemProviderTableRowModifier.Body",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/swiftui/itemprovidertablerowmodifier",
                    "title": "ItemProviderTableRowModifier",
                    "type": "struct"
                  },
                  {
                    "title": "Adding a context menu to a row",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowcontent/contextmenu(menuitems:)",
                    "title": "func contextMenu<M>(menuItems: () -> M) -> ModifiedContent<Self, _ContextMenuTableRowModifier<M>>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowcontent/contextmenu(menuitems:preview:)",
                    "title": "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> ModifiedContent<Self, _ContextMenuPreviewTableRowModifier<M, P>>",
                    "type": "method"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowcontent/selectiondisabled(_:)",
                    "title": "func selectionDisabled(Bool) -> some TableRowContent<Self.TableRowValue>\n",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/tablerowcontent",
                "title": "TableRowContent",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/tableheaderrowcontent",
                "title": "TableHeaderRowContent",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Accessing the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tupletablerowcontent/value",
                    "title": "var value: T",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/tupletablerowcontent",
                "title": "TupleTableRowContent",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/tableforeachcontent",
                "title": "TableForEachContent",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/emptytablerowcontent",
                "title": "EmptyTableRowContent",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting row data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictablerowcontent/data-swift.property",
                    "title": "var data: Self.Data",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictablerowcontent/data-swift.associatedtype",
                    "title": "Data",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Inserting rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictablerowcontent/oninsert(of:perform:)",
                    "title": "func onInsert(of: [UTType], perform: (Int, [NSItemProvider]) -> Void) -> ModifiedContent<Self, OnInsertTableRowModifier>",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/oninserttablerowmodifier/body-swift.property",
                        "title": "var body: some _TableRowContentModifier",
                        "type": "property"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/oninserttablerowmodifier/body-swift.typealias",
                        "title": "OnInsertTableRowModifier.Body",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/swiftui/oninserttablerowmodifier",
                    "title": "OnInsertTableRowModifier",
                    "type": "struct"
                  },
                  {
                    "title": "Supporting drag and drop",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dynamictablerowcontent/dropdestination(for:action:)",
                    "title": "func dropDestination<T>(for: T.Type, action: (Int, [T]) -> Void) -> ModifiedContent<Self, OnInsertTableRowModifier>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/dynamictablerowcontent",
                "title": "DynamicTableRowContent",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Building a row from sources",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildblock(_:)",
                    "title": "static func buildBlock<C>(C) -> C",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildblock(_:_:)",
                    "title": "static func buildBlock<C0, C1>(C0, C1) -> TupleTableRowContent<Value, (C0, C1)>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableRowContent<Value, (C0, C1, C2)>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableRowContent<Value, (C0, C1, C2, C3)>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4)>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>",
                    "type": "method"
                  },
                  {
                    "title": "Building a row from conditionals",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildif(_:)",
                    "title": "static func buildIf<C>(C?) -> C?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildeither(first:)",
                    "title": "static func buildEither<T, F>(first: T) -> _ConditionalContent<T, F>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildeither(second:)",
                    "title": "static func buildEither<T, F>(second: F) -> _ConditionalContent<T, F>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/tablerowbuilder/buildexpression(_:)",
                    "title": "static func buildExpression<Content>(Content) -> Content",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/tablerowbuilder",
                "title": "TableRowBuilder",
                "type": "struct"
              },
              {
                "title": "Adding progressive disclosure",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a disclosure table row",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/disclosuretablerow/init(_:isexpanded:content:)",
                    "title": "init<Value>(Value, isExpanded: Binding<Bool>?, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/disclosuretablerow",
                "title": "DisclosureTableRow",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/tableoutlinegroupcontent",
                "title": "TableOutlineGroupContent",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/tables",
            "title": "Tables",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Grouping views into a container",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/creating-custom-container-views",
                "title": "Creating custom container views",
                "type": "sampleCode"
              },
              {
                "children": [
                  {
                    "title": "Creating a group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/group/init(content:)",
                    "title": "init(content:)",
                    "type": "init"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/group/init(sections:transform:)",
                    "title": "init<Base, Result>(sections: Base, transform: (SectionCollection) -> Result)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/group/init(subviews:transform:)",
                    "title": "init<Base, Result>(subviews: Base, transform: (SubviewsCollection) -> Result)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/group",
                "title": "Group",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/groupelementsofcontent",
                "title": "GroupElementsOfContent",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/groupsectionsofcontent",
                "title": "GroupSectionsOfContent",
                "type": "struct"
              },
              {
                "title": "Organizing views into sections",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a section",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/section/init(content:)",
                    "title": "init(content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/section/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Adding headers and footers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/section/init(content:header:)",
                    "title": "init(content:header:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/section/init(content:footer:)",
                    "title": "init(content: () -> Content, footer: () -> Footer)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/section/init(content:header:footer:)",
                    "title": "init(content: () -> Content, header: () -> Parent, footer: () -> Footer)",
                    "type": "init"
                  },
                  {
                    "title": "Controlling collapsibility",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/section/init(_:isexpanded:content:)",
                    "title": "init(_:isExpanded:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/section/init(isexpanded:content:header:)",
                    "title": "init(isExpanded:content:header:)",
                    "type": "init"
                  },
                  {
                    "title": "Deprecated symbols",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/section/init(header:content:)",
                    "title": "init(header: Parent, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/section/init(footer:content:)",
                    "title": "init(footer: Footer, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/section/init(header:footer:content:)",
                    "title": "init(header: Parent, footer: Footer, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/section/collapsible(_:)",
                    "title": "func collapsible(Bool) -> some View",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/section",
                "title": "Section",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/sectioncollection",
                "title": "SectionCollection",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sectionconfiguration/id-swift.struct",
                    "title": "SectionConfiguration.ID",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sectionconfiguration/containervalues",
                    "title": "var containerValues: ContainerValues",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sectionconfiguration/content",
                    "title": "var content: SubviewsCollection",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sectionconfiguration/footer",
                    "title": "var footer: SubviewsCollection",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sectionconfiguration/header",
                    "title": "var header: SubviewsCollection",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sectionconfiguration/id-swift.property",
                    "title": "var id: SectionConfiguration.ID",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/sectionconfiguration",
                "title": "SectionConfiguration",
                "type": "struct"
              },
              {
                "title": "Iterating over dynamic data",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a collection",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/foreach/init(_:)",
                    "title": "init(Data)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/foreach/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/foreach/init(_:id:content:)",
                    "title": "init(_:id:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating an editable collection",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/foreach/init(_:editactions:content:)",
                    "title": "init<C, R>(Binding<C>, editActions: EditActions<C>, content: (Binding<C.Element>) -> R)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/foreach/init(_:id:editactions:content:)",
                    "title": "init<C, R>(Binding<C>, id: KeyPath<C.Element, ID>, editActions: EditActions<C>, content: (Binding<C.Element>) -> R)",
                    "type": "init"
                  },
                  {
                    "title": "Accessing content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/foreach/content",
                    "title": "var content: (Data.Element) -> Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/foreach/data",
                    "title": "var data: Data",
                    "type": "property"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/foreach/init(sections:content:)",
                    "title": "init<V>(sections: V, content: (SectionConfiguration) -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/foreach/init(subviews:content:)",
                    "title": "init<V>(subviews: V, content: (Subview) -> Content)",
                    "type": "init"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/foreach/body-swift.property",
                        "title": "var body: Never",
                        "type": "property"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/foreach/body-swift.typealias",
                        "title": "ForEach.Body",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/swiftui/foreach/attachmentcontent-implementations",
                    "title": "AttachmentContent Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/swiftui/foreach",
                "title": "ForEach",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/foreachsectioncollection",
                "title": "ForEachSectionCollection",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/foreachsubviewcollection",
                "title": "ForEachSubviewCollection",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Managing the data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dynamicviewcontent/data-swift.property",
                    "title": "var data: Self.Data",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/dynamicviewcontent/data-swift.associatedtype",
                    "title": "Data",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Responding to updates",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dynamicviewcontent/ondelete(perform:)",
                    "title": "func onDelete(perform: Optional<(IndexSet) -> Void>) -> some DynamicViewContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/dynamicviewcontent/oninsert(of:perform:)-418bq",
                    "title": "func onInsert(of: [UTType], perform: (Int, [NSItemProvider]) -> Void) -> some DynamicViewContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/dynamicviewcontent/onmove(perform:)",
                    "title": "func onMove(perform: Optional<(IndexSet, Int) -> Void>) -> some DynamicViewContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/dynamicviewcontent/dropdestination(for:action:)",
                    "title": "func dropDestination<T>(for: T.Type, action: ([T], Int) -> Void) -> some DynamicViewContent",
                    "type": "method"
                  },
                  {
                    "title": "Deprecated symbols",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/dynamicviewcontent/oninsert(of:perform:)-40hwa",
                    "title": "func onInsert(of: [String], perform: (Int, [NSItemProvider]) -> Void) -> some DynamicViewContent",
                    "type": "method"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dynamicviewcontent/oninsert(of:perform:)",
                    "title": "func onInsert(of:perform:)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/dynamicviewcontent",
                "title": "DynamicViewContent",
                "type": "protocol"
              },
              {
                "title": "Accessing a container’s subviews",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/subview/id-swift.struct",
                    "title": "Subview.ID",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/subview/containervalues",
                    "title": "var containerValues: ContainerValues",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/subview/id-swift.property",
                    "title": "var id: Subview.ID",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/subview",
                "title": "Subview",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/subviewscollection",
                "title": "SubviewsCollection",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/subviewscollectionslice",
                "title": "SubviewsCollectionSlice",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/containervalue(_:_:)",
                "title": "func containerValue<V>(WritableKeyPath<ContainerValues, V>, V) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/containervalues/hastag(_:)",
                    "title": "func hasTag<V>(V) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/containervalues/tag(for:)",
                    "title": "func tag<V>(for: V.Type) -> V?",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/containervalues/subscript(_:)",
                    "title": "subscript<Key>(Key.Type) -> Key.Value",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/swiftui/containervalues",
                "title": "ContainerValues",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Associated Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/containervaluekey/value",
                    "title": "Value",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/containervaluekey/defaultvalue",
                    "title": "static var defaultValue: Self.Value",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/containervaluekey",
                "title": "ContainerValueKey",
                "type": "protocol"
              },
              {
                "title": "Grouping views into a box",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a group box",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/groupbox/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/groupbox/init(content:label:)",
                    "title": "init(content: () -> Content, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/groupbox/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a group box from a configuration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/groupbox/init(_:)",
                    "title": "init(GroupBoxStyleConfiguration)",
                    "type": "init"
                  },
                  {
                    "title": "Deprecated initializers",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/groupbox/init(label:content:)",
                    "title": "init(label: Label, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/groupbox",
                "title": "GroupBox",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/groupboxstyle(_:)",
                "title": "func groupBoxStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "title": "Grouping inputs",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a form",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/form/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a form from a configuration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/form/init(_:)",
                    "title": "init(FormStyleConfiguration)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/form",
                "title": "Form",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/formstyle(_:)",
                "title": "func formStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating labeled content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontent/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontent/init(content:label:)",
                    "title": "init(content: () -> Content, label: () -> Label)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontent/init(_:value:)",
                    "title": "init(_:value:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontent/init(_:value:format:)",
                    "title": "init(_:value:format:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontent/init(_:)",
                    "title": "init(LabeledContentStyleConfiguration)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/labeledcontent",
                "title": "LabeledContent",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/labeledcontentstyle(_:)",
                "title": "func labeledContentStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "title": "Presenting a group of controls",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a control group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroup/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroup/init(content:label:)",
                    "title": "init<C, L>(content: () -> C, label: () -> L)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroup/init(_:content:)",
                    "title": "init(_:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a control group with an image",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroup/init(_:image:content:)",
                    "title": "init(_:image:content:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroup/init(_:systemimage:content:)",
                    "title": "init(_:systemImage:content:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating a configured control group",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/controlgroup/init(_:)",
                    "title": "init(ControlGroupStyleConfiguration)",
                    "type": "init"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/labeledcontrolgroupcontent",
                    "title": "LabeledControlGroupContent",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/controlgroup",
                "title": "ControlGroup",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/controlgroupstyle(_:)",
                "title": "func controlGroupStyle<S>(S) -> some View",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/view-groupings",
            "title": "View groupings",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating a scroll view",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a scroll view",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/scrollview/init(_:showsindicators:content:)",
                    "title": "init(Axis.Set, showsIndicators: Bool, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/scrollview/init(_:content:)",
                    "title": "init(Axis.Set, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "title": "Configuring a scroll view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollview/content",
                    "title": "var content: Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollview/axes",
                    "title": "var axes: Axis.Set",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollview/showsindicators",
                    "title": "var showsIndicators: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollview/body",
                    "title": "var body: some View",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrollview",
                "title": "ScrollView",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a scroll view reader",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollviewreader/init(content:)",
                    "title": "init(content: (ScrollViewProxy) -> Content)",
                    "type": "init"
                  },
                  {
                    "title": "Configuring a scroll view reader",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollviewreader/content",
                    "title": "var content: (ScrollViewProxy) -> Content",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrollviewreader",
                "title": "ScrollViewReader",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Performing scrolling",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollviewproxy/scrollto(_:anchor:)",
                    "title": "func scrollTo<ID>(ID, anchor: UnitPoint?)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/scrollviewproxy",
                "title": "ScrollViewProxy",
                "type": "struct"
              },
              {
                "title": "Managing scroll position",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/scrollposition(_:anchor:)",
                "title": "func scrollPosition(Binding<ScrollPosition>, anchor: UnitPoint?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scrollposition(id:anchor:)",
                "title": "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/defaultscrollanchor(_:)",
                "title": "func defaultScrollAnchor(UnitPoint?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/defaultscrollanchor(_:for:)",
                "title": "func defaultScrollAnchor(UnitPoint?, for: ScrollAnchorRole) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollanchorrole/alignment",
                    "title": "static var alignment: ScrollAnchorRole",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollanchorrole/initialoffset",
                    "title": "static var initialOffset: ScrollAnchorRole",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollanchorrole/sizechanges",
                    "title": "static var sizeChanges: ScrollAnchorRole",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrollanchorrole",
                "title": "ScrollAnchorRole",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/init(id:anchor:)",
                    "title": "init(id: some Hashable & Sendable, anchor: UnitPoint?)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/init(idtype:)",
                    "title": "init(idType: (some Hashable & Sendable).Type)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/init(idtype:edge:)",
                    "title": "init(idType: (some Hashable & Sendable).Type, edge: Edge)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/init(idtype:point:)",
                    "title": "init(idType: (some Hashable & Sendable).Type, point: CGPoint)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/init(idtype:x:)",
                    "title": "init(idType: (some Hashable & Sendable).Type, x: CGFloat)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/init(idtype:x:y:)",
                    "title": "init(idType: (some Hashable & Sendable).Type, x: CGFloat, y: CGFloat)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/init(idtype:y:)",
                    "title": "init(idType: (some Hashable & Sendable).Type, y: CGFloat)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/edge",
                    "title": "var edge: Edge?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/ispositionedbyuser",
                    "title": "var isPositionedByUser: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/point",
                    "title": "var point: CGPoint?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/viewid",
                    "title": "var viewID: (any Hashable & Sendable)?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/scrollto(edge:)",
                    "title": "func scrollTo(edge: Edge)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/scrollto(id:anchor:)",
                    "title": "func scrollTo(id: some Hashable & Sendable, anchor: UnitPoint?)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/scrollto(point:)",
                    "title": "func scrollTo(point: CGPoint)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/scrollto(x:)",
                    "title": "func scrollTo(x: CGFloat)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/scrollto(x:y:)",
                    "title": "func scrollTo(x: CGFloat, y: CGFloat)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/scrollto(y:)",
                    "title": "func scrollTo(y: CGFloat)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scrollposition/viewid(type:)",
                    "title": "func viewID<T>(type: T.Type) -> T?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/scrollposition",
                "title": "ScrollPosition",
                "type": "struct"
              },
              {
                "title": "Defining scroll targets",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/scrolltargetbehavior(_:)",
                "title": "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scrolltargetlayout(isenabled:)",
                "title": "func scrollTargetLayout(isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the scroll target",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltarget/anchor",
                    "title": "var anchor: UnitPoint?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltarget/rect",
                    "title": "var rect: CGRect",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrolltarget",
                "title": "ScrollTarget",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the scroll target behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltargetbehavior/paging",
                    "title": "static var paging: PagingScrollTargetBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltargetbehavior/viewaligned",
                    "title": "static var viewAligned: ViewAlignedScrollTargetBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltargetbehavior/viewaligned(limitbehavior:)",
                    "title": "static func viewAligned(limitBehavior: ViewAlignedScrollTargetBehavior.LimitBehavior) -> Self",
                    "type": "method"
                  },
                  {
                    "title": "Updating the proposed target",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltargetbehavior/updatetarget(_:context:)",
                    "title": "func updateTarget(inout ScrollTarget, context: Self.TargetContext)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltargetbehavior/targetcontext",
                    "title": "ScrollTargetBehavior.TargetContext",
                    "type": "typealias"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/scrolltargetbehavior/properties(context:)",
                    "title": "func properties(context: Self.PropertiesContext) -> Self.Properties",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/scrolltargetbehavior/properties",
                    "title": "ScrollTargetBehavior.Properties",
                    "type": "typealias"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/scrolltargetbehavior/propertiescontext",
                    "title": "ScrollTargetBehavior.PropertiesContext",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/swiftui/scrolltargetbehavior",
                "title": "ScrollTargetBehavior",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting the scroll target behavior context",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltargetbehaviorcontext/axes",
                    "title": "var axes: Axis.Set",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltargetbehaviorcontext/containersize",
                    "title": "var containerSize: CGSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltargetbehaviorcontext/contentsize",
                    "title": "var contentSize: CGSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltargetbehaviorcontext/originaltarget",
                    "title": "var originalTarget: ScrollTarget",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltargetbehaviorcontext/velocity",
                    "title": "var velocity: CGVector",
                    "type": "property"
                  },
                  {
                    "title": "Accessing the context",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltargetbehaviorcontext/subscript(dynamicmember:)",
                    "title": "subscript<T>(dynamicMember _: KeyPath<EnvironmentValues, T>) -> T",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/swiftui/scrolltargetbehaviorcontext",
                "title": "ScrollTargetBehaviorContext",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the target behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pagingscrolltargetbehavior/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/pagingscrolltargetbehavior",
                "title": "PagingScrollTargetBehavior",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the target behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/viewalignedscrolltargetbehavior/init(limitbehavior:)",
                    "title": "init(limitBehavior: ViewAlignedScrollTargetBehavior.LimitBehavior)",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the limit behavior",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/viewalignedscrolltargetbehavior/limitbehavior/automatic",
                        "title": "static var automatic: ViewAlignedScrollTargetBehavior.LimitBehavior",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/viewalignedscrolltargetbehavior/limitbehavior/always",
                        "title": "static var always: ViewAlignedScrollTargetBehavior.LimitBehavior",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/viewalignedscrolltargetbehavior/limitbehavior/never",
                        "title": "static var never: ViewAlignedScrollTargetBehavior.LimitBehavior",
                        "type": "property"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/viewalignedscrolltargetbehavior/limitbehavior/alwaysbyfew",
                        "title": "static var alwaysByFew: ViewAlignedScrollTargetBehavior.LimitBehavior",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/viewalignedscrolltargetbehavior/limitbehavior/alwaysbyone",
                        "title": "static var alwaysByOne: ViewAlignedScrollTargetBehavior.LimitBehavior",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/viewalignedscrolltargetbehavior/limitbehavior",
                    "title": "ViewAlignedScrollTargetBehavior.LimitBehavior",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/viewalignedscrolltargetbehavior",
                "title": "ViewAlignedScrollTargetBehavior",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anyscrolltargetbehavior/init(_:)",
                    "title": "init(some ScrollTargetBehavior)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anyscrolltargetbehavior/base",
                    "title": "var base: any ScrollTargetBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/anyscrolltargetbehavior",
                "title": "AnyScrollTargetBehavior",
                "type": "struct"
              },
              {
                "title": "Animating scroll transitions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/scrolltransition(_:axis:transition:)",
                "title": "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                "title": "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the phase",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltransitionphase/identity",
                    "title": "case identity",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltransitionphase/topleading",
                    "title": "case topLeading",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltransitionphase/bottomtrailing",
                    "title": "case bottomTrailing",
                    "type": "case"
                  },
                  {
                    "title": "Accessing the phase state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltransitionphase/isidentity",
                    "title": "var isIdentity: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltransitionphase/value",
                    "title": "var value: Double",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrolltransitionphase",
                "title": "ScrollTransitionPhase",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting the configuration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltransitionconfiguration/identity",
                    "title": "static let identity: ScrollTransitionConfiguration",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltransitionconfiguration/animated",
                    "title": "static let animated: ScrollTransitionConfiguration",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltransitionconfiguration/animated(_:)",
                    "title": "static func animated(Animation) -> ScrollTransitionConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltransitionconfiguration/interactive",
                    "title": "static let interactive: ScrollTransitionConfiguration",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltransitionconfiguration/interactive(timingcurve:)",
                    "title": "static func interactive(timingCurve: UnitCurve) -> ScrollTransitionConfiguration",
                    "type": "method"
                  },
                  {
                    "title": "Accessing the configuration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltransitionconfiguration/animation(_:)",
                    "title": "func animation(Animation) -> ScrollTransitionConfiguration",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/scrolltransitionconfiguration/threshold(_:)",
                    "title": "func threshold(ScrollTransitionConfiguration.Threshold) -> ScrollTransitionConfiguration",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the threshold",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/scrolltransitionconfiguration/threshold/centered",
                        "title": "static var centered: ScrollTransitionConfiguration.Threshold",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/scrolltransitionconfiguration/threshold/hidden",
                        "title": "static let hidden: ScrollTransitionConfiguration.Threshold",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/scrolltransitionconfiguration/threshold/visible",
                        "title": "static let visible: ScrollTransitionConfiguration.Threshold",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/scrolltransitionconfiguration/threshold/visible(_:)",
                        "title": "static func visible(Double) -> ScrollTransitionConfiguration.Threshold",
                        "type": "method"
                      },
                      {
                        "title": "Modifying the threshold",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/scrolltransitionconfiguration/threshold/inset(by:)",
                        "title": "func inset(by: Double) -> ScrollTransitionConfiguration.Threshold",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/swiftui/scrolltransitionconfiguration/threshold/interpolated(towards:amount:)",
                        "title": "func interpolated(towards: ScrollTransitionConfiguration.Threshold, amount: Double) -> ScrollTransitionConfiguration.Threshold",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/scrolltransitionconfiguration/threshold",
                    "title": "ScrollTransitionConfiguration.Threshold",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/scrolltransitionconfiguration",
                "title": "ScrollTransitionConfiguration",
                "type": "struct"
              },
              {
                "title": "Responding to scroll view changes",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onscrollgeometrychange(for:of:action:)",
                "title": "func onScrollGeometryChange<T>(for: T.Type, of: (ScrollGeometry) -> T, action: (T, T) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onscrolltargetvisibilitychange(idtype:threshold:_:)",
                "title": "func onScrollTargetVisibilityChange<ID>(idType: ID.Type, threshold: Double, ([ID]) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onscrollvisibilitychange(threshold:_:)",
                "title": "func onScrollVisibilityChange(threshold: Double, (Bool) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onscrollphasechange(_:)",
                "title": "func onScrollPhaseChange(_:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollgeometry/init(contentoffset:contentsize:contentinsets:containersize:)",
                    "title": "init(contentOffset: CGPoint, contentSize: CGSize, contentInsets: EdgeInsets, containerSize: CGSize)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollgeometry/bounds",
                    "title": "var bounds: CGRect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollgeometry/containersize",
                    "title": "var containerSize: CGSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollgeometry/contentinsets",
                    "title": "var contentInsets: EdgeInsets",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollgeometry/contentoffset",
                    "title": "var contentOffset: CGPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollgeometry/contentsize",
                    "title": "var contentSize: CGSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollgeometry/visiblerect",
                    "title": "var visibleRect: CGRect",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrollgeometry",
                "title": "ScrollGeometry",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting scroll gesture states",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollphase/animating",
                    "title": "case animating",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/scrollphase/decelerating",
                    "title": "case decelerating",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/scrollphase/idle",
                    "title": "case idle",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/scrollphase/interacting",
                    "title": "case interacting",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/scrollphase/tracking",
                    "title": "case tracking",
                    "type": "case"
                  },
                  {
                    "title": "Checking for active scrolling",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollphase/isscrolling",
                    "title": "var isScrolling: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrollphase",
                "title": "ScrollPhase",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollphasechangecontext/geometry",
                    "title": "var geometry: ScrollGeometry",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollphasechangecontext/velocity",
                    "title": "var velocity: CGVector?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrollphasechangecontext",
                "title": "ScrollPhaseChangeContext",
                "type": "struct"
              },
              {
                "title": "Showing scroll indicators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/scrollindicatorsflash(onappear:)",
                "title": "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scrollindicatorsflash(trigger:)",
                "title": "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scrollindicators(_:axes:)",
                "title": "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/horizontalscrollindicatorvisibility",
                "title": "var horizontalScrollIndicatorVisibility: ScrollIndicatorVisibility",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/verticalscrollindicatorvisibility",
                "title": "var verticalScrollIndicatorVisibility: ScrollIndicatorVisibility",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting visibilties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollindicatorvisibility/automatic",
                    "title": "static var automatic: ScrollIndicatorVisibility",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollindicatorvisibility/hidden",
                    "title": "static var hidden: ScrollIndicatorVisibility",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollindicatorvisibility/never",
                    "title": "static var never: ScrollIndicatorVisibility",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollindicatorvisibility/visible",
                    "title": "static var visible: ScrollIndicatorVisibility",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrollindicatorvisibility",
                "title": "ScrollIndicatorVisibility",
                "type": "struct"
              },
              {
                "title": "Managing content visibility",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/scrollcontentbackground(_:)",
                "title": "func scrollContentBackground(Visibility) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/scrollclipdisabled(_:)",
                "title": "func scrollClipDisabled(Bool) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollcontentoffsetadjustmentbehavior/automatic",
                    "title": "static var automatic: ScrollContentOffsetAdjustmentBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollcontentoffsetadjustmentbehavior/disabled",
                    "title": "static var disabled: ScrollContentOffsetAdjustmentBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrollcontentoffsetadjustmentbehavior",
                "title": "ScrollContentOffsetAdjustmentBehavior",
                "type": "struct"
              },
              {
                "title": "Disabling scrolling",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/scrolldisabled(_:)",
                "title": "func scrollDisabled(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/isscrollenabled",
                "title": "var isScrollEnabled: Bool",
                "type": "property"
              },
              {
                "title": "Configuring scroll bounce behavior",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/scrollbouncebehavior(_:axes:)",
                "title": "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/horizontalscrollbouncebehavior",
                "title": "var horizontalScrollBounceBehavior: ScrollBounceBehavior",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/verticalscrollbouncebehavior",
                "title": "var verticalScrollBounceBehavior: ScrollBounceBehavior",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Bounce behaviors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollbouncebehavior/automatic",
                    "title": "static var automatic: ScrollBounceBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollbouncebehavior/always",
                    "title": "static var always: ScrollBounceBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollbouncebehavior/basedonsize",
                    "title": "static var basedOnSize: ScrollBounceBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrollbouncebehavior",
                "title": "ScrollBounceBehavior",
                "type": "struct"
              },
              {
                "title": "Interacting with a software keyboard",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/scrolldismisseskeyboard(_:)",
                "title": "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/scrolldismisseskeyboardmode",
                "title": "var scrollDismissesKeyboardMode: ScrollDismissesKeyboardMode",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting modes",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrolldismisseskeyboardmode/automatic",
                    "title": "static var automatic: ScrollDismissesKeyboardMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolldismisseskeyboardmode/immediately",
                    "title": "static var immediately: ScrollDismissesKeyboardMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolldismisseskeyboardmode/interactively",
                    "title": "static var interactively: ScrollDismissesKeyboardMode",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrolldismisseskeyboardmode/never",
                    "title": "static var never: ScrollDismissesKeyboardMode",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrolldismisseskeyboardmode",
                "title": "ScrollDismissesKeyboardMode",
                "type": "struct"
              },
              {
                "title": "Managing scrolling for different inputs",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/scrollinputbehavior(_:for:)",
                "title": "func scrollInputBehavior(ScrollInputBehavior, for: ScrollInputKind) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollinputkind/handgestureshortcut",
                    "title": "static let handGestureShortcut: ScrollInputKind",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrollinputkind",
                "title": "ScrollInputKind",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/scrollinputbehavior/automatic",
                    "title": "static let automatic: ScrollInputBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollinputbehavior/disabled",
                    "title": "static let disabled: ScrollInputBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/scrollinputbehavior/enabled",
                    "title": "static let enabled: ScrollInputBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/scrollinputbehavior",
                "title": "ScrollInputBehavior",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/scroll-views",
            "title": "Scroll views",
            "type": "collection"
          },
          {
            "title": "Event handling",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/adding-interactivity-with-gestures",
                "title": "Adding interactivity with gestures",
                "type": "article"
              },
              {
                "title": "Recognizing tap gestures",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/ontapgesture(count:perform:)",
                "title": "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/ontapgesture(count:coordinatespace:perform:)",
                "title": "func onTapGesture(count:coordinateSpace:perform:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a tap gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/tapgesture/init(count:)",
                    "title": "init(count: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/tapgesture/count",
                    "title": "var count: Int",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/tapgesture",
                "title": "TapGesture",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a spatial tap gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/spatialtapgesture/init(count:coordinatespace:)-75s7q",
                    "title": "init(count: Int, coordinateSpace: some CoordinateSpaceProtocol)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/spatialtapgesture/coordinatespace",
                    "title": "var coordinateSpace: CoordinateSpace",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/spatialtapgesture/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "title": "Getting the gesture’s value",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the tap location",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/spatialtapgesture/value/location",
                        "title": "var location: CGPoint",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/spatialtapgesture/value/location3d",
                        "title": "var location3D: Point3D",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/spatialtapgesture/value",
                    "title": "SpatialTapGesture.Value",
                    "type": "struct"
                  },
                  {
                    "title": "Deprecated initializers",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/spatialtapgesture/init(count:coordinatespace:)-1b85g",
                    "title": "init(count: Int, coordinateSpace: CoordinateSpace)",
                    "type": "init"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/spatialtapgesture/init(count:coordinatespace:)",
                    "title": "init(count:coordinateSpace:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/spatialtapgesture",
                "title": "SpatialTapGesture",
                "type": "struct"
              },
              {
                "title": "Recognizing long press gestures",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                "title": "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onlongtouchgesture(minimumduration:perform:ontouchingchanged:)",
                "title": "func onLongTouchGesture(minimumDuration: Double, perform: () -> Void, onTouchingChanged: ((Bool) -> Void)?) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a long press gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/longpressgesture/init(minimumduration:)",
                    "title": "init(minimumDuration: Double)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/longpressgesture/init(minimumduration:maximumdistance:)",
                    "title": "init(minimumDuration: Double, maximumDistance: CGFloat)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/longpressgesture/minimumduration",
                    "title": "var minimumDuration: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/longpressgesture/maximumdistance",
                    "title": "var maximumDistance: CGFloat",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/longpressgesture",
                "title": "LongPressGesture",
                "type": "struct"
              },
              {
                "title": "Recognizing spatial events",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a spatial event gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/spatialeventgesture/init(coordinatespace:)",
                    "title": "init(coordinateSpace: any CoordinateSpaceProtocol)",
                    "type": "init"
                  },
                  {
                    "title": "Getting gesture properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/spatialeventgesture/coordinatespace",
                    "title": "let coordinateSpace: CoordinateSpace",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/spatialeventgesture",
                "title": "SpatialEventGesture",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Accessing the collection’s events",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Identifying the event",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/event/timestamp",
                        "title": "var timestamp: TimeInterval",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/event/id-swift.property",
                        "title": "var id: SpatialEventCollection.Event.ID",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/event/id-swift.struct",
                        "title": "SpatialEventCollection.Event.ID",
                        "type": "struct"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/event/kind-swift.property",
                        "title": "var kind: SpatialEventCollection.Event.Kind",
                        "type": "property"
                      },
                      {
                        "children": [
                          {
                            "title": "Getting the event type",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/spatialeventcollection/event/kind-swift.enum/directpinch",
                            "title": "case directPinch",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/swiftui/spatialeventcollection/event/kind-swift.enum/indirectpinch",
                            "title": "case indirectPinch",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/swiftui/spatialeventcollection/event/kind-swift.enum/pointer",
                            "title": "case pointer",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/swiftui/spatialeventcollection/event/kind-swift.enum/touch",
                            "title": "case touch",
                            "type": "case"
                          },
                          {
                            "title": "Enumeration Cases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/spatialeventcollection/event/kind-swift.enum/pencil",
                            "title": "case pencil",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/swiftui/spatialeventcollection/event/kind-swift.enum",
                        "title": "SpatialEventCollection.Event.Kind",
                        "type": "enum"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/event/modifierkeys",
                        "title": "var modifierKeys: EventModifiers",
                        "type": "property"
                      },
                      {
                        "title": "Locating the event",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/event/location",
                        "title": "var location: CGPoint",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/event/location3d",
                        "title": "var location3D: Point3D",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/event/selectionray",
                        "title": "var selectionRay: Ray3D?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/event/inputdevicepose-swift.property",
                        "title": "var inputDevicePose: SpatialEventCollection.Event.InputDevicePose?",
                        "type": "property"
                      },
                      {
                        "children": [
                          {
                            "title": "Getting the event type",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/spatialeventcollection/event/inputdevicepose-swift.struct/altitude",
                            "title": "var altitude: Angle",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/spatialeventcollection/event/inputdevicepose-swift.struct/azimuth",
                            "title": "var azimuth: Angle",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/swiftui/spatialeventcollection/event/inputdevicepose-swift.struct/pose3d",
                            "title": "var pose3D: Pose3D",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/swiftui/spatialeventcollection/event/inputdevicepose-swift.struct",
                        "title": "SpatialEventCollection.Event.InputDevicePose",
                        "type": "struct"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/event/targetedentity",
                        "title": "var targetedEntity: Entity?",
                        "type": "property"
                      },
                      {
                        "title": "Getting the event’s current phase",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/event/phase-swift.property",
                        "title": "var phase: SpatialEventCollection.Event.Phase",
                        "type": "property"
                      },
                      {
                        "children": [
                          {
                            "title": "Getting the phase",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/swiftui/spatialeventcollection/event/phase-swift.enum/active",
                            "title": "case active",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/swiftui/spatialeventcollection/event/phase-swift.enum/cancelled",
                            "title": "case cancelled",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/swiftui/spatialeventcollection/event/phase-swift.enum/ended",
                            "title": "case ended",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/swiftui/spatialeventcollection/event/phase-swift.enum",
                        "title": "SpatialEventCollection.Event.Phase",
                        "type": "enum"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/event/chirality",
                        "title": "var chirality: Chirality?",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/spatialeventcollection/event",
                    "title": "SpatialEventCollection.Event",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/spatialeventcollection/subscript(_:)",
                    "title": "subscript(SpatialEventCollection.Event.ID) -> SpatialEventCollection.Event?",
                    "type": "subscript"
                  },
                  {
                    "title": "Iterating over events in the collection",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/spatialeventcollection/makeiterator()",
                    "title": "func makeIterator() -> SpatialEventCollection.Iterator",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the next event",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/spatialeventcollection/iterator/next()",
                        "title": "func next() -> SpatialEventCollection.Event?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/spatialeventcollection/iterator",
                    "title": "SpatialEventCollection.Iterator",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/spatialeventcollection",
                "title": "SpatialEventCollection",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/chirality/left",
                    "title": "case left",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/chirality/right",
                    "title": "case right",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/chirality",
                "title": "Chirality",
                "type": "enum"
              },
              {
                "title": "Recognizing gestures that change over time",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/gesture(_:)",
                "title": "func gesture(some UIGestureRecognizerRepresentable) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/gesture(_:isenabled:)",
                "title": "func gesture<T>(T, isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/gesture(_:name:isenabled:)",
                "title": "func gesture<T>(T, name: String, isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/gesture(_:including:)",
                "title": "func gesture<T>(T, including: GestureMask) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a drag gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/draggesture/init(minimumdistance:coordinatespace:)-8ffe5",
                    "title": "init(minimumDistance: CGFloat, coordinateSpace: some CoordinateSpaceProtocol)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/draggesture/minimumdistance",
                    "title": "var minimumDistance: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/draggesture/coordinatespace",
                    "title": "var coordinateSpace: CoordinateSpace",
                    "type": "property"
                  },
                  {
                    "title": "Deprecated initializers",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/draggesture/init(minimumdistance:coordinatespace:)-3804h",
                    "title": "init(minimumDistance: CGFloat, coordinateSpace: CoordinateSpace)",
                    "type": "init"
                  },
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting 2D position",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/startlocation",
                        "title": "var startLocation: CGPoint",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/location",
                        "title": "var location: CGPoint",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/predictedendlocation",
                        "title": "var predictedEndLocation: CGPoint",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/translation",
                        "title": "var translation: CGSize",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/predictedendtranslation",
                        "title": "var predictedEndTranslation: CGSize",
                        "type": "property"
                      },
                      {
                        "title": "Getting 3D position",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/startlocation3d",
                        "title": "var startLocation3D: Point3D",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/location3d",
                        "title": "var location3D: Point3D",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/predictedendlocation3d",
                        "title": "var predictedEndLocation3D: Point3D",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/translation3d",
                        "title": "var translation3D: Vector3D",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/predictedendtranslation3d",
                        "title": "var predictedEndTranslation3D: Vector3D",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/startinputdevicepose3d",
                        "title": "var startInputDevicePose3D: Pose3D?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/inputdevicepose3d",
                        "title": "var inputDevicePose3D: Pose3D?",
                        "type": "property"
                      },
                      {
                        "title": "Handling changes over time",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/time",
                        "title": "var time: Date",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/draggesture/value/velocity",
                        "title": "var velocity: CGSize",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/draggesture/value",
                    "title": "DragGesture.Value",
                    "type": "struct"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/draggesture/init(minimumdistance:coordinatespace:)",
                    "title": "init(minimumDistance:coordinateSpace:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/draggesture",
                "title": "DragGesture",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowdraggesture/value",
                    "title": "WindowDragGesture.Value",
                    "type": "struct"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/windowdraggesture/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/windowdraggesture",
                "title": "WindowDragGesture",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/magnifygesture/init(minimumscaledelta:)",
                    "title": "init(minimumScaleDelta: CGFloat)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/magnifygesture/minimumscaledelta",
                    "title": "var minimumScaleDelta: CGFloat",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/magnifygesture",
                "title": "MagnifyGesture",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/rotategesture/init(minimumangledelta:)",
                    "title": "init(minimumAngleDelta: Angle)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/rotategesture/minimumangledelta",
                    "title": "var minimumAngleDelta: Angle",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/rotategesture",
                "title": "RotateGesture",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/rotategesture3d/init(constrainedtoaxis:minimumangledelta:)",
                    "title": "init(constrainedToAxis: RotationAxis3D?, minimumAngleDelta: Angle)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/rotategesture3d/minimumangledelta",
                    "title": "var minimumAngleDelta: Angle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/rotategesture3d/constrainedaxis",
                    "title": "var constrainedAxis: RotationAxis3D?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/rotategesture3d",
                "title": "RotateGesture3D",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting gesture options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gesturemask/all",
                    "title": "static let all: GestureMask",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gesturemask/gesture",
                    "title": "static let gesture: GestureMask",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gesturemask/subviews",
                    "title": "static let subviews: GestureMask",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gesturemask/none",
                    "title": "static let none: GestureMask",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/gesturemask",
                "title": "GestureMask",
                "type": "struct"
              },
              {
                "title": "Recognizing Apple Pencil gestures",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onpencildoubletap(perform:)",
                "title": "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onpencilsqueeze(perform:)",
                "title": "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/preferredpencildoubletapaction",
                "title": "var preferredPencilDoubleTapAction: PencilPreferredAction",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/preferredpencilsqueezeaction",
                "title": "var preferredPencilSqueezeAction: PencilPreferredAction",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting the preffered actions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pencilpreferredaction/ignore",
                    "title": "static let ignore: PencilPreferredAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pencilpreferredaction/showcolorpalette",
                    "title": "static let showColorPalette: PencilPreferredAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pencilpreferredaction/showinkattributes",
                    "title": "static let showInkAttributes: PencilPreferredAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pencilpreferredaction/switcheraser",
                    "title": "static let switchEraser: PencilPreferredAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pencilpreferredaction/switchprevious",
                    "title": "static let switchPrevious: PencilPreferredAction",
                    "type": "property"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pencilpreferredaction/runsystemshortcut",
                    "title": "static let runSystemShortcut: PencilPreferredAction",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pencilpreferredaction/showcontextualpalette",
                    "title": "static let showContextualPalette: PencilPreferredAction",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/pencilpreferredaction",
                "title": "PencilPreferredAction",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the gesture values",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pencildoubletapgesturevalue/hoverpose",
                    "title": "let hoverPose: PencilHoverPose?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/pencildoubletapgesturevalue",
                "title": "PencilDoubleTapGestureValue",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pencilsqueezegesturevalue/hoverpose",
                    "title": "let hoverPose: PencilHoverPose?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/pencilsqueezegesturevalue",
                "title": "PencilSqueezeGestureValue",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pencilsqueezegesturephase/active(_:)",
                    "title": "case active(PencilSqueezeGestureValue)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/pencilsqueezegesturephase/ended(_:)",
                    "title": "case ended(PencilSqueezeGestureValue)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/pencilsqueezegesturephase/failed",
                    "title": "case failed",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/pencilsqueezegesturephase",
                "title": "PencilSqueezeGesturePhase",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting the hover characteristics",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pencilhoverpose/anchor",
                    "title": "let anchor: UnitPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pencilhoverpose/location",
                    "title": "let location: CGPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pencilhoverpose/zdistance",
                    "title": "let zDistance: CGFloat",
                    "type": "property"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pencilhoverpose/altitude",
                    "title": "let altitude: Angle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pencilhoverpose/azimuth",
                    "title": "let azimuth: Angle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pencilhoverpose/roll",
                    "title": "let roll: Angle",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/pencilhoverpose",
                "title": "PencilHoverPose",
                "type": "struct"
              },
              {
                "title": "Combining gestures",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/composing-swiftui-gestures",
                "title": "Composing SwiftUI gestures",
                "type": "article"
              },
              {
                "path": "/documentation/swiftui/view/simultaneousgesture(_:including:)",
                "title": "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/simultaneousgesture(_:isenabled:)",
                "title": "func simultaneousGesture<T>(T, isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/simultaneousgesture(_:name:isenabled:)",
                "title": "func simultaneousGesture<T>(T, name: String, isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating the gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/sequencegesture/init(_:_:)",
                    "title": "init(First, Second)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/sequencegesture/first",
                    "title": "var first: First",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/sequencegesture/second",
                    "title": "var second: Second",
                    "type": "property"
                  },
                  {
                    "title": "Getting the gesture’s values",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting gesture values",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/sequencegesture/value/first(_:)",
                        "title": "case first(First.Value)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/sequencegesture/value/second(_:_:)",
                        "title": "case second(First.Value, Second.Value?)",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/sequencegesture/value",
                    "title": "SequenceGesture.Value",
                    "type": "enum"
                  }
                ],
                "path": "/documentation/swiftui/sequencegesture",
                "title": "SequenceGesture",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/simultaneousgesture/init(_:_:)",
                    "title": "init(First, Second)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/simultaneousgesture/first",
                    "title": "var first: First",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/simultaneousgesture/second",
                    "title": "var second: Second",
                    "type": "property"
                  },
                  {
                    "title": "Getting the gesture’s values",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting gesture values",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/simultaneousgesture/value/first",
                        "title": "var first: First.Value?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/simultaneousgesture/value/second",
                        "title": "var second: Second.Value?",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/simultaneousgesture/value",
                    "title": "SimultaneousGesture.Value",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/simultaneousgesture",
                "title": "SimultaneousGesture",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/exclusivegesture/init(_:_:)",
                    "title": "init(First, Second)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/exclusivegesture/first",
                    "title": "var first: First",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/exclusivegesture/second",
                    "title": "var second: Second",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting gesture values",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/exclusivegesture/value/first(_:)",
                        "title": "case first(First.Value)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/exclusivegesture/value/second(_:)",
                        "title": "case second(Second.Value)",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/exclusivegesture/value",
                    "title": "ExclusiveGesture.Value",
                    "type": "enum"
                  }
                ],
                "path": "/documentation/swiftui/exclusivegesture",
                "title": "ExclusiveGesture",
                "type": "struct"
              },
              {
                "title": "Defining custom gestures",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/highprioritygesture(_:including:)",
                "title": "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/highprioritygesture(_:isenabled:)",
                "title": "func highPriorityGesture<T>(T, isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/highprioritygesture(_:name:isenabled:)",
                "title": "func highPriorityGesture<T>(T, name: String, isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/handgestureshortcut(_:isenabled:)",
                "title": "func handGestureShortcut(HandGestureShortcut, isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/deferssystemgestures(on:)",
                "title": "func defersSystemGestures(on: Edge.Set) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Implementing a custom gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Performing the gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/updating(_:body:)",
                    "title": "func updating<State>(GestureState<State>, body: (Self.Value, inout State, inout Transaction) -> Void) -> GestureStateGesture<Self, State>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/onchanged(_:)",
                    "title": "func onChanged((Self.Value) -> Void) -> _ChangedGesture<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/onended(_:)",
                    "title": "func onEnded((Self.Value) -> Void) -> _EndedGesture<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/value",
                    "title": "Value",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Composing gestures",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/simultaneously(with:)",
                    "title": "func simultaneously<Other>(with: Other) -> SimultaneousGesture<Self, Other>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/sequenced(before:)",
                    "title": "func sequenced<Other>(before: Other) -> SequenceGesture<Self, Other>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/exclusively(before:)",
                    "title": "func exclusively<Other>(before: Other) -> ExclusiveGesture<Self, Other>",
                    "type": "method"
                  },
                  {
                    "title": "Adding modifier keys to a gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/modifiers(_:)",
                    "title": "func modifiers(EventModifiers) -> _ModifiersGesture<Self>",
                    "type": "method"
                  },
                  {
                    "title": "Transforming a gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/map(_:)",
                    "title": "func map<T>((Self.Value) -> T) -> _MapGesture<Self, T>",
                    "type": "method"
                  },
                  {
                    "title": "Customizing gesture activation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/handactivationbehavior(_:)",
                    "title": "func handActivationBehavior(HandActivationBehavior) -> some Gesture<Self.Value>\n",
                    "type": "method"
                  },
                  {
                    "title": "Using a gesture with a RealityKit entity",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/targetedtoanyentity()",
                    "title": "func targetedToAnyEntity() -> some Gesture<EntityTargetValue<Self.Value>>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/targetedtoentity(_:)",
                    "title": "func targetedToEntity(Entity) -> some Gesture<EntityTargetValue<Self.Value>>\n",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/gesture/targetedtoentity(where:)",
                    "title": "func targetedToEntity(where: QueryPredicate<Entity>) -> some Gesture<EntityTargetValue<Self.Value>>\n",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/gesture",
                "title": "Gesture",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Implementing a custom gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/anygesture/init(_:)",
                    "title": "init<T>(T)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/anygesture",
                "title": "AnyGesture",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the behaviors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/handactivationbehavior/automatic",
                    "title": "static let automatic: HandActivationBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/handactivationbehavior/pinch",
                    "title": "static let pinch: HandActivationBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/handactivationbehavior",
                "title": "HandActivationBehavior",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/handgestureshortcut/primaryaction",
                    "title": "static let primaryAction: HandGestureShortcut",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/handgestureshortcut",
                "title": "HandGestureShortcut",
                "type": "struct"
              },
              {
                "title": "Managing gesture state",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a gesture state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestate/init(initialvalue:)",
                    "title": "init(initialValue: Value)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestate/init(initialvalue:reset:)",
                    "title": "init(initialValue: Value, reset: (Value, inout Transaction) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestate/init(initialvalue:resettransaction:)",
                    "title": "init(initialValue: Value, resetTransaction: Transaction)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestate/init(reset:)",
                    "title": "init(reset: (Value, inout Transaction) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestate/init(resettransaction:)",
                    "title": "init(resetTransaction: Transaction)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestate/init(wrappedvalue:)",
                    "title": "init(wrappedValue: Value)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestate/init(wrappedvalue:reset:)",
                    "title": "init(wrappedValue: Value, reset: (Value, inout Transaction) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestate/init(wrappedvalue:resettransaction:)",
                    "title": "init(wrappedValue: Value, resetTransaction: Transaction)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestate/wrappedvalue",
                    "title": "var wrappedValue: Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestate/projectedvalue",
                    "title": "var projectedValue: GestureState<Value>",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/gesturestate",
                "title": "GestureState",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating an in-progress gesture",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestategesture/init(base:state:body:)",
                    "title": "init(base: Base, state: GestureState<State>, body: (GestureStateGesture<Base, State>.Value, inout State, inout Transaction) -> Void)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestategesture/base",
                    "title": "var base: Base",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestategesture/state",
                    "title": "var state: GestureState<State>",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/gesturestategesture/body",
                    "title": "var body: (GestureStateGesture<Base, State>.Value, inout State, inout Transaction) -> Void",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/gesturestategesture",
                "title": "GestureStateGesture",
                "type": "struct"
              },
              {
                "title": "Handling activation events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/allowswindowactivationevents(_:)",
                "title": "func allowsWindowActivationEvents(Bool?) -> some View",
                "type": "method"
              },
              {
                "title": "Deprecated gestures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating the gesture",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/magnificationgesture/init(minimumscaledelta:)",
                    "title": "init(minimumScaleDelta: CGFloat)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/magnificationgesture/minimumscaledelta",
                    "title": "var minimumScaleDelta: CGFloat",
                    "type": "property"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/swiftui/magnificationgesture",
                "title": "MagnificationGesture",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the gesture",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/rotationgesture/init(minimumangledelta:)",
                    "title": "init(minimumAngleDelta: Angle)",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/rotationgesture/minimumangledelta",
                    "title": "var minimumAngleDelta: Angle",
                    "type": "property"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/swiftui/rotationgesture",
                "title": "RotationGesture",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/gestures",
            "title": "Gestures",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Responding to keyboard input",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onkeypress(_:action:)",
                "title": "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onkeypress(phases:action:)",
                "title": "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onkeypress(_:phases:action:)",
                "title": "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onkeypress(characters:phases:action:)",
                "title": "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onkeypress(keys:phases:action:)",
                "title": "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the keypress",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keypress/key",
                    "title": "let key: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keypress/characters",
                    "title": "let characters: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keypress/modifiers",
                    "title": "let modifiers: EventModifiers",
                    "type": "property"
                  },
                  {
                    "title": "Getting the phase of the keypress",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keypress/phase",
                    "title": "let phase: KeyPress.Phases",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the phases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/keypress/phases/down",
                        "title": "static let down: KeyPress.Phases",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/keypress/phases/up",
                        "title": "static let up: KeyPress.Phases",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/keypress/phases/repeat",
                        "title": "static let `repeat`: KeyPress.Phases",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/keypress/phases/all",
                        "title": "static let all: KeyPress.Phases",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/keypress/phases",
                    "title": "KeyPress.Phases",
                    "type": "struct"
                  },
                  {
                    "title": "Getting the result",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the result",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/keypress/result/handled",
                        "title": "case handled",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/keypress/result/ignored",
                        "title": "case ignored",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/keypress/result",
                    "title": "KeyPress.Result",
                    "type": "enum"
                  }
                ],
                "path": "/documentation/swiftui/keypress",
                "title": "KeyPress",
                "type": "struct"
              },
              {
                "title": "Creating keyboard shortcuts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/keyboardshortcut(_:)",
                "title": "func keyboardShortcut(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/keyboardshortcut(_:modifiers:)",
                "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/keyboardshortcut(_:modifiers:localization:)",
                "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/keyboardshortcut",
                "title": "var keyboardShortcut: KeyboardShortcut?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting standard shortcuts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyboardshortcut/cancelaction",
                    "title": "static let cancelAction: KeyboardShortcut",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyboardshortcut/defaultaction",
                    "title": "static let defaultAction: KeyboardShortcut",
                    "type": "property"
                  },
                  {
                    "title": "Creating a shortcut",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyboardshortcut/init(_:modifiers:)",
                    "title": "init(KeyEquivalent, modifiers: EventModifiers)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/keyboardshortcut/key",
                    "title": "var key: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyboardshortcut/modifiers",
                    "title": "var modifiers: EventModifiers",
                    "type": "property"
                  },
                  {
                    "title": "Creating a localized shortcut",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyboardshortcut/init(_:modifiers:localization:)",
                    "title": "init(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/keyboardshortcut/localization-swift.property",
                    "title": "var localization: KeyboardShortcut.Localization",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting localization strategies",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/keyboardshortcut/localization-swift.struct/automatic",
                        "title": "static let automatic: KeyboardShortcut.Localization",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/keyboardshortcut/localization-swift.struct/custom",
                        "title": "static let custom: KeyboardShortcut.Localization",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/keyboardshortcut/localization-swift.struct/withoutmirroring",
                        "title": "static let withoutMirroring: KeyboardShortcut.Localization",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/keyboardshortcut/localization-swift.struct",
                    "title": "KeyboardShortcut.Localization",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/keyboardshortcut",
                "title": "KeyboardShortcut",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting arrow keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/uparrow",
                    "title": "static let upArrow: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/downarrow",
                    "title": "static let downArrow: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/leftarrow",
                    "title": "static let leftArrow: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/rightarrow",
                    "title": "static let rightArrow: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "title": "Getting other special keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/clear",
                    "title": "static let clear: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/delete",
                    "title": "static let delete: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/deleteforward",
                    "title": "static let deleteForward: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/end",
                    "title": "static let end: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/escape",
                    "title": "static let escape: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/home",
                    "title": "static let home: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/pagedown",
                    "title": "static let pageDown: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/pageup",
                    "title": "static let pageUp: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/return",
                    "title": "static let `return`: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/space",
                    "title": "static let space: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/tab",
                    "title": "static let tab: KeyEquivalent",
                    "type": "property"
                  },
                  {
                    "title": "Creating a key equivalent",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/init(_:)",
                    "title": "init(Character)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/keyequivalent/character",
                    "title": "var character: Character",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/keyequivalent",
                "title": "KeyEquivalent",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting modifier keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/eventmodifiers/all",
                    "title": "static let all: EventModifiers",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/eventmodifiers/capslock",
                    "title": "static let capsLock: EventModifiers",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/eventmodifiers/command",
                    "title": "static let command: EventModifiers",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/eventmodifiers/control",
                    "title": "static let control: EventModifiers",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/eventmodifiers/numericpad",
                    "title": "static let numericPad: EventModifiers",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/eventmodifiers/option",
                    "title": "static let option: EventModifiers",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/eventmodifiers/shift",
                    "title": "static let shift: EventModifiers",
                    "type": "property"
                  },
                  {
                    "title": "Creating a set of options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/eventmodifiers/init(rawvalue:)",
                    "title": "init(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/eventmodifiers/rawvalue",
                    "title": "let rawValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Deprecated modifiers",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/eventmodifiers/function",
                    "title": "static let function: EventModifiers",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/eventmodifiers",
                "title": "EventModifiers",
                "type": "struct"
              },
              {
                "title": "Responding to modifier keys",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onmodifierkeyschanged(mask:initial:_:)",
                "title": "func onModifierKeysChanged(mask: EventModifiers, initial: Bool, (EventModifiers, EventModifiers) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/modifierkeyalternate(_:_:)",
                "title": "func modifierKeyAlternate<V>(EventModifiers, () -> V) -> some View",
                "type": "method"
              },
              {
                "title": "Responding to hover events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onhover(perform:)",
                "title": "func onHover(perform: (Bool) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/oncontinuoushover(coordinatespace:perform:)",
                "title": "func onContinuousHover(coordinateSpace:perform:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/hovereffect(_:isenabled:)",
                "title": "func hoverEffect(_:isEnabled:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/hovereffectdisabled(_:)",
                "title": "func hoverEffectDisabled(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/defaulthovereffect(_:)",
                "title": "func defaultHoverEffect(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/ishovereffectenabled",
                "title": "var isHoverEffectEnabled: Bool",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting hover phases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/hoverphase/active(_:)",
                    "title": "case active(CGPoint)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/hoverphase/ended",
                    "title": "case ended",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/hoverphase",
                "title": "HoverPhase",
                "type": "enum"
              },
              {
                "title": "Modifying pointer appearance",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/pointerstyle(_:)",
                "title": "func pointerStyle(PointerStyle?) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/columnresize",
                    "title": "static let columnResize: PointerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/default",
                    "title": "static let `default`: PointerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/grabactive",
                    "title": "static let grabActive: PointerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/grabidle",
                    "title": "static let grabIdle: PointerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/horizontaltext",
                    "title": "static let horizontalText: PointerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/link",
                    "title": "static let link: PointerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/rectselection",
                    "title": "static let rectSelection: PointerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/rowresize",
                    "title": "static let rowResize: PointerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/verticaltext",
                    "title": "static let verticalText: PointerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/zoomin",
                    "title": "static let zoomIn: PointerStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/zoomout",
                    "title": "static let zoomOut: PointerStyle",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/columnresize(directions:)",
                    "title": "static func columnResize(directions: HorizontalDirection.Set) -> PointerStyle",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/frameresize(position:directions:)",
                    "title": "static func frameResize(position: FrameResizePosition, directions: FrameResizeDirection.Set) -> PointerStyle",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/image(_:hotspot:)",
                    "title": "static image(_:hotSpot:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/rowresize(directions:)",
                    "title": "static func rowResize(directions: VerticalDirection.Set) -> PointerStyle",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/pointerstyle/shape(_:eofill:size:)",
                    "title": "static func shape(some Shape, eoFill: Bool, size: CGSize) -> PointerStyle",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/pointerstyle",
                "title": "PointerStyle",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/pointervisibility(_:)",
                "title": "func pointerVisibility(Visibility) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/horizontaldirection/set/init(_:)",
                        "title": "init(HorizontalDirection)",
                        "type": "init"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/horizontaldirection/set/all",
                        "title": "static let all: HorizontalDirection.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/horizontaldirection/set/leading",
                        "title": "static let leading: HorizontalDirection.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/horizontaldirection/set/trailing",
                        "title": "static let trailing: HorizontalDirection.Set",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/horizontaldirection/set",
                    "title": "HorizontalDirection.Set",
                    "type": "struct"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/horizontaldirection/leading",
                    "title": "case leading",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/horizontaldirection/trailing",
                    "title": "case trailing",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/horizontaldirection",
                "title": "HorizontalDirection",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/verticaldirection/set/init(_:)",
                        "title": "init(VerticalDirection)",
                        "type": "init"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/verticaldirection/set/all",
                        "title": "static let all: VerticalDirection.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/verticaldirection/set/down",
                        "title": "static let down: VerticalDirection.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/verticaldirection/set/up",
                        "title": "static let up: VerticalDirection.Set",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/verticaldirection/set",
                    "title": "VerticalDirection.Set",
                    "type": "struct"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/verticaldirection/down",
                    "title": "case down",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/verticaldirection/up",
                    "title": "case up",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/verticaldirection",
                "title": "VerticalDirection",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/frameresizeposition/bottom",
                    "title": "case bottom",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/frameresizeposition/bottomleading",
                    "title": "case bottomLeading",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/frameresizeposition/bottomtrailing",
                    "title": "case bottomTrailing",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/frameresizeposition/leading",
                    "title": "case leading",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/frameresizeposition/top",
                    "title": "case top",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/frameresizeposition/topleading",
                    "title": "case topLeading",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/frameresizeposition/toptrailing",
                    "title": "case topTrailing",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/frameresizeposition/trailing",
                    "title": "case trailing",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/frameresizeposition",
                "title": "FrameResizePosition",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/frameresizedirection/set/init(_:)",
                        "title": "init(FrameResizeDirection)",
                        "type": "init"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/frameresizedirection/set/all",
                        "title": "static let all: FrameResizeDirection.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/frameresizedirection/set/inward",
                        "title": "static let inward: FrameResizeDirection.Set",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/frameresizedirection/set/outward",
                        "title": "static let outward: FrameResizeDirection.Set",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/frameresizedirection/set",
                    "title": "FrameResizeDirection.Set",
                    "type": "struct"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/frameresizedirection/inward",
                    "title": "case inward",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/frameresizedirection/outward",
                    "title": "case outward",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/frameresizedirection",
                "title": "FrameResizeDirection",
                "type": "enum"
              },
              {
                "title": "Changing view appearance for hover events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/hovereffect(_:)",
                "title": "func hoverEffect(HoverEffect) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting hover effects",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffect/automatic",
                    "title": "static let automatic: HoverEffect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffect/highlight",
                    "title": "static let highlight: HoverEffect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffect/lift",
                    "title": "static let lift: HoverEffect",
                    "type": "property"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffect/init(_:)",
                    "title": "init<E>(E)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/hovereffect",
                "title": "HoverEffect",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/hovereffect(_:in:isenabled:)",
                "title": "func hoverEffect(some CustomHoverEffect, in: HoverEffectGroup?, isEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/hovereffect(in:isenabled:body:)",
                "title": "func hoverEffect(in: HoverEffectGroup?, isEnabled: Bool, body: (EmptyHoverEffectContent, Bool, GeometryProxy) -> some HoverEffectContent) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in hover effects",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/customhovereffect/automatic",
                    "title": "static var automatic: AutomaticHoverEffect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/customhovereffect/empty",
                    "title": "static var empty: EmptyHoverEffect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/customhovereffect/highlight",
                    "title": "static var highlight: HighlightHoverEffect",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/customhovereffect/lift",
                    "title": "static var lift: LiftHoverEffect",
                    "type": "property"
                  },
                  {
                    "title": "Creating custom hover effects",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/customhovereffect/hovereffect(_:in:isenabled:)",
                    "title": "func hoverEffect(some CustomHoverEffect, in: HoverEffectGroup?, isEnabled: Bool) -> some CustomHoverEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/customhovereffect/hovereffect(in:isenabled:body:)",
                    "title": "func hoverEffect(in: HoverEffectGroup?, isEnabled: Bool, body: (EmptyHoverEffectContent, Bool, GeometryProxy) -> some HoverEffectContent) -> some CustomHoverEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/customhovereffect/hovereffectgroup(_:)",
                    "title": "func hoverEffectGroup(HoverEffectGroup?) -> some CustomHoverEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/customhovereffect/hovereffectgroup(id:in:behavior:)",
                    "title": "func hoverEffectGroup(id: String?, in: Namespace.ID, behavior: HoverEffectGroup.Behavior) -> some CustomHoverEffect",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/customhovereffect/hovereffectdisabled(_:)",
                    "title": "func hoverEffectDisabled(Bool) -> some CustomHoverEffect",
                    "type": "method"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/automatichovereffect/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/automatichovereffect",
                    "title": "AutomaticHoverEffect",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/emptyhovereffect",
                    "title": "EmptyHoverEffect",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/highlighthovereffect/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/highlighthovereffect",
                    "title": "HighlightHoverEffect",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/lifthovereffect/init()",
                        "title": "init()",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/swiftui/lifthovereffect",
                    "title": "LiftHoverEffect",
                    "type": "struct"
                  },
                  {
                    "title": "Associated Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/customhovereffect/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/customhovereffect/body(content:)",
                    "title": "func body(content: Self.Content) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/customhovereffect/content",
                    "title": "CustomHoverEffect.Content",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/swiftui/customhovereffect",
                "title": "CustomHoverEffect",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/hovereffectgroup/behavior/activatesgroup",
                        "title": "static let activatesGroup: HoverEffectGroup.Behavior",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/hovereffectgroup/behavior/followsgroup",
                        "title": "static let followsGroup: HoverEffectGroup.Behavior",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/hovereffectgroup/behavior/ignoresgroup",
                        "title": "static let ignoresGroup: HoverEffectGroup.Behavior",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/hovereffectgroup/behavior",
                    "title": "HoverEffectGroup.Behavior",
                    "type": "struct"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffectgroup/init(_:behavior:)",
                    "title": "init(Namespace.ID, behavior: HoverEffectGroup.Behavior)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffectgroup/init(id:in:behavior:)",
                    "title": "init(id: String?, in: Namespace.ID, behavior: HoverEffectGroup.Behavior)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffectgroup/behavior(_:)",
                    "title": "func behavior(HoverEffectGroup.Behavior) -> HoverEffectGroup",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/hovereffectgroup",
                "title": "HoverEffectGroup",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/hovereffectgroup()",
                "title": "func hoverEffectGroup() -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/hovereffectgroup(_:)",
                "title": "func hoverEffectGroup(HoverEffectGroup?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/hovereffectgroup(id:in:behavior:)",
                "title": "func hoverEffectGroup(id: String?, in: Namespace.ID, behavior: HoverEffectGroup.Behavior) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffectcontent/animation(_:body:)",
                    "title": "func animation(Animation?, body: (EmptyHoverEffectContent) -> some HoverEffectContent) -> some HoverEffectContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffectcontent/clipshape(_:style:)",
                    "title": "func clipShape<S>(S, style: FillStyle) -> some HoverEffectContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffectcontent/offset(_:)",
                    "title": "func offset(CGSize) -> some HoverEffectContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffectcontent/offset(x:y:)",
                    "title": "func offset(x: CGFloat, y: CGFloat) -> some HoverEffectContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffectcontent/opacity(_:)",
                    "title": "func opacity(Double) -> some HoverEffectContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffectcontent/rotationeffect(_:anchor:)",
                    "title": "func rotationEffect(Angle, anchor: UnitPoint) -> some HoverEffectContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffectcontent/scaleeffect(_:anchor:)",
                    "title": "func scaleEffect(_:anchor:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffectcontent/scaleeffect(x:y:anchor:)",
                    "title": "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some HoverEffectContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/hovereffectcontent/transformeffect(_:)",
                    "title": "func transformEffect(CGAffineTransform) -> some HoverEffectContent",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/hovereffectcontent",
                "title": "HoverEffectContent",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/emptyhovereffectcontent",
                "title": "EmptyHoverEffectContent",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/handpointerbehavior(_:)",
                "title": "func handPointerBehavior(HandPointerBehavior?) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/handpointerbehavior/drawing",
                    "title": "static let drawing: HandPointerBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/handpointerbehavior/inactive",
                    "title": "static let inactive: HandPointerBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/handpointerbehavior",
                "title": "HandPointerBehavior",
                "type": "struct"
              },
              {
                "title": "Responding to submission events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onsubmit(of:_:)",
                "title": "func onSubmit(of: SubmitTriggers, () -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/submitscope(_:)",
                "title": "func submitScope(Bool) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting submit triggers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/submittriggers/search",
                    "title": "static let search: SubmitTriggers",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/submittriggers/text",
                    "title": "static let text: SubmitTriggers",
                    "type": "property"
                  },
                  {
                    "title": "Creating a set of options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/submittriggers/init(rawvalue:)",
                    "title": "init(rawValue: SubmitTriggers.RawValue)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/submittriggers",
                "title": "SubmitTriggers",
                "type": "struct"
              },
              {
                "title": "Labeling a submission event",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/submitlabel(_:)",
                "title": "func submitLabel(SubmitLabel) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting submission labels",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/submitlabel/continue",
                    "title": "static var `continue`: SubmitLabel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/submitlabel/done",
                    "title": "static var done: SubmitLabel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/submitlabel/go",
                    "title": "static var go: SubmitLabel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/submitlabel/join",
                    "title": "static var join: SubmitLabel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/submitlabel/next",
                    "title": "static var next: SubmitLabel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/submitlabel/return",
                    "title": "static var `return`: SubmitLabel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/submitlabel/route",
                    "title": "static var route: SubmitLabel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/submitlabel/search",
                    "title": "static var search: SubmitLabel",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/submitlabel/send",
                    "title": "static var send: SubmitLabel",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/submitlabel",
                "title": "SubmitLabel",
                "type": "struct"
              },
              {
                "title": "Responding to commands",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/onmovecommand(perform:)",
                "title": "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/ondeletecommand(perform:)",
                "title": "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/pagecommand(value:in:step:)",
                "title": "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onexitcommand(perform:)",
                "title": "func onExitCommand(perform: (() -> Void)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onplaypausecommand(perform:)",
                "title": "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/oncommand(_:perform:)",
                "title": "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting move command directions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/movecommanddirection/up",
                    "title": "case up",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/movecommanddirection/down",
                    "title": "case down",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/movecommanddirection/left",
                    "title": "case left",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/movecommanddirection/right",
                    "title": "case right",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/movecommanddirection",
                "title": "MoveCommandDirection",
                "type": "enum"
              },
              {
                "title": "Controlling hit testing",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/allowstightening(_:)",
                "title": "func allowsTightening(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/contentshape(_:eofill:)",
                "title": "func contentShape<S>(S, eoFill: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/contentshape(_:_:eofill:)",
                "title": "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting shape kinds",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/contentshapekinds/interaction",
                    "title": "static let interaction: ContentShapeKinds",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/contentshapekinds/dragpreview",
                    "title": "static let dragPreview: ContentShapeKinds",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/contentshapekinds/contextmenupreview",
                    "title": "static let contextMenuPreview: ContentShapeKinds",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/contentshapekinds/focuseffect",
                    "title": "static let focusEffect: ContentShapeKinds",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/contentshapekinds/hovereffect",
                    "title": "static let hoverEffect: ContentShapeKinds",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/contentshapekinds/accessibility",
                    "title": "static let accessibility: ContentShapeKinds",
                    "type": "property"
                  },
                  {
                    "title": "Creating a set of options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/contentshapekinds/init(rawvalue:)",
                    "title": "init(rawValue: Int)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/contentshapekinds",
                "title": "ContentShapeKinds",
                "type": "struct"
              },
              {
                "title": "Interacting with the Digital Crown",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/digitalcrownaccessory(_:)",
                "title": "func digitalCrownAccessory(Visibility) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/digitalcrownaccessory(content:)",
                "title": "func digitalCrownAccessory<Content>(content: () -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/digitalcrownrotation(_:from:through:sensitivity:iscontinuous:ishapticfeedbackenabled:onchange:onidle:)",
                "title": "func digitalCrownRotation<V>(Binding<V>, from: V, through: V, sensitivity: DigitalCrownRotationalSensitivity, isContinuous: Bool, isHapticFeedbackEnabled: Bool, onChange: (DigitalCrownEvent) -> Void, onIdle: () -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/digitalcrownrotation(_:onchange:onidle:)",
                "title": "func digitalCrownRotation<V>(Binding<V>, onChange: (DigitalCrownEvent) -> Void, onIdle: () -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/digitalcrownrotation(detent:from:through:by:sensitivity:iscontinuous:ishapticfeedbackenabled:onchange:onidle:)",
                "title": "func digitalCrownRotation(detent:from:through:by:sensitivity:isContinuous:isHapticFeedbackEnabled:onChange:onIdle:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/digitalcrownrotation(_:)",
                "title": "func digitalCrownRotation<V>(Binding<V>) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/digitalcrownrotation(_:from:through:by:sensitivity:iscontinuous:ishapticfeedbackenabled:)",
                "title": "func digitalCrownRotation<V>(Binding<V>, from: V, through: V, by: V.Stride?, sensitivity: DigitalCrownRotationalSensitivity, isContinuous: Bool, isHapticFeedbackEnabled: Bool) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting events",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/digitalcrownevent/offset",
                    "title": "var offset: Double",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/digitalcrownevent/velocity",
                    "title": "var velocity: Double",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/digitalcrownevent",
                "title": "DigitalCrownEvent",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting sensitivity options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/digitalcrownrotationalsensitivity/low",
                    "title": "case low",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/digitalcrownrotationalsensitivity/medium",
                    "title": "case medium",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/digitalcrownrotationalsensitivity/high",
                    "title": "case high",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/digitalcrownrotationalsensitivity",
                "title": "DigitalCrownRotationalSensitivity",
                "type": "enum"
              },
              {
                "title": "Managing Touch Bar input",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/touchbar(content:)",
                "title": "func touchBar<Content>(content: () -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/touchbar(_:)",
                "title": "func touchBar<Content>(TouchBar<Content>) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/touchbaritemprincipal(_:)",
                "title": "func touchBarItemPrincipal(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/touchbarcustomizationlabel(_:)",
                "title": "func touchBarCustomizationLabel(Text) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/touchbaritempresence(_:)",
                "title": "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a Touch Bar view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/touchbar/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/touchbar/init(id:content:)",
                    "title": "init(id: String, content: () -> Content)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/touchbar",
                "title": "TouchBar",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting presence options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/touchbaritempresence/default(_:)",
                    "title": "case `default`(String)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/touchbaritempresence/optional(_:)",
                    "title": "case optional(String)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/touchbaritempresence/required(_:)",
                    "title": "case required(String)",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/touchbaritempresence",
                "title": "TouchBarItemPresence",
                "type": "enum"
              },
              {
                "title": "Responding to capture events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/oncameracaptureevent(isenabled:action:)",
                "title": "func onCameraCaptureEvent(isEnabled: Bool, action: (AVCaptureEvent) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/oncameracaptureevent(isenabled:primaryaction:secondaryaction:)",
                "title": "func onCameraCaptureEvent(isEnabled: Bool, primaryAction: (AVCaptureEvent) -> Void, secondaryAction: (AVCaptureEvent) -> Void) -> some View",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/input-events",
            "title": "Input events",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Copying transferable items",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/copyable(_:)",
                "title": "func copyable<T>(@autoclosure () -> [T]) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/cuttable(for:action:)",
                "title": "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/pastedestination(for:action:validator:)",
                "title": "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                "type": "method"
              },
              {
                "title": "Copying items using item providers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/oncopycommand(perform:)",
                "title": "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/oncutcommand(perform:)",
                "title": "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onpastecommand(of:perform:)",
                "title": "func onPasteCommand(of:perform:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onpastecommand(of:validator:perform:)",
                "title": "func onPasteCommand(of:validator:perform:)",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/clipboard",
            "title": "Clipboard",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/adopting-drag-and-drop-using-swiftui",
                "title": "Adopting drag and drop using SwiftUI",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/making-a-view-into-a-drag-source",
                "title": "Making a view into a drag source",
                "type": "article"
              },
              {
                "title": "Moving transferable items",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/draggable(_:)",
                "title": "func draggable<T>(@autoclosure () -> T) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/draggable(_:preview:)",
                "title": "func draggable<V, T>(@autoclosure () -> T, preview: () -> V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/dropdestination(for:action:istargeted:)",
                "title": "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                "type": "method"
              },
              {
                "title": "Moving items using item providers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/itemprovider(_:)",
                "title": "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/ondrag(_:preview:)",
                "title": "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/ondrag(_:)",
                "title": "func onDrag(() -> NSItemProvider) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/ondrop(of:istargeted:perform:)",
                "title": "func onDrop(of:isTargeted:perform:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/ondrop(of:delegate:)",
                "title": "func onDrop(of:delegate:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Receiving drop information",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dropdelegate/dropentered(info:)",
                    "title": "func dropEntered(info: DropInfo)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/dropdelegate/dropexited(info:)",
                    "title": "func dropExited(info: DropInfo)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/dropdelegate/dropupdated(info:)",
                    "title": "func dropUpdated(info: DropInfo) -> DropProposal?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/dropdelegate/validatedrop(info:)",
                    "title": "func validateDrop(info: DropInfo) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/dropdelegate/performdrop(info:)",
                    "title": "func performDrop(info: DropInfo) -> Bool",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/dropdelegate",
                "title": "DropDelegate",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating a drop proposal",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dropproposal/init(operation:)",
                    "title": "init(operation: DropOperation)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/dropproposal/operation",
                    "title": "let operation: DropOperation",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/dropproposal",
                "title": "DropProposal",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting operation types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dropoperation/cancel",
                    "title": "case cancel",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dropoperation/copy",
                    "title": "case copy",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dropoperation/forbidden",
                    "title": "case forbidden",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/dropoperation/move",
                    "title": "case move",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/dropoperation",
                "title": "DropOperation",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting the drop location",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dropinfo/location",
                    "title": "var location: CGPoint",
                    "type": "property"
                  },
                  {
                    "title": "Checking for items",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dropinfo/hasitemsconforming(to:)-47irh",
                    "title": "func hasItemsConforming(to: [UTType]) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/dropinfo/itemproviders(for:)-93409",
                    "title": "func itemProviders(for: [UTType]) -> [NSItemProvider]",
                    "type": "method"
                  },
                  {
                    "title": "Deprecated symbols",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/dropinfo/hasitemsconforming(to:)-4qeez",
                    "title": "func hasItemsConforming(to: [String]) -> Bool",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/dropinfo/itemproviders(for:)-b6fo",
                    "title": "func itemProviders(for: [String]) -> [NSItemProvider]",
                    "type": "method"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/dropinfo/hasitemsconforming(to:)",
                    "title": "func hasItemsConforming(to:)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/dropinfo/itemproviders(for:)",
                    "title": "func itemProviders(for:)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/dropinfo",
                "title": "DropInfo",
                "type": "struct"
              },
              {
                "title": "Configuring spring loading",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/springloadingbehavior(_:)",
                "title": "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/springloadingbehavior",
                "title": "var springLoadingBehavior: SpringLoadingBehavior",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting the behaviors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/springloadingbehavior/automatic",
                    "title": "static let automatic: SpringLoadingBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/springloadingbehavior/enabled",
                    "title": "static let enabled: SpringLoadingBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/springloadingbehavior/disabled",
                    "title": "static let disabled: SpringLoadingBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/springloadingbehavior",
                "title": "SpringLoadingBehavior",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/drag-and-drop",
            "title": "Drag and drop",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/focus-cookbook-sample",
                "title": "Focus Cookbook: Supporting and enhancing focus-driven interactions in your SwiftUI app",
                "type": "sampleCode"
              },
              {
                "title": "Indicating that a view can receive focus",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/focusable(_:)",
                "title": "func focusable(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/focusable(_:interactions:)",
                "title": "func focusable(Bool, interactions: FocusInteractions) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating the interaction types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/focusinteractions/automatic",
                    "title": "static var automatic: FocusInteractions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/focusinteractions/activate",
                    "title": "static let activate: FocusInteractions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/focusinteractions/edit",
                    "title": "static let edit: FocusInteractions",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/focusinteractions",
                "title": "FocusInteractions",
                "type": "struct"
              },
              {
                "title": "Managing focus state",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/focused(_:equals:)",
                "title": "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/focused(_:)",
                "title": "func focused(FocusState<Bool>.Binding) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/isfocused",
                "title": "var isFocused: Bool",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating a focus state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/focusstate/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Inspecting the focus state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/focusstate/projectedvalue",
                    "title": "var projectedValue: FocusState<Value>.Binding",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Inspecting the binding",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/focusstate/binding/projectedvalue",
                        "title": "var projectedValue: FocusState<Value>.Binding",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/focusstate/binding/wrappedvalue",
                        "title": "var wrappedValue: Value",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/focusstate/binding",
                    "title": "FocusState.Binding",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/focusstate/wrappedvalue",
                    "title": "var wrappedValue: Value",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/focusstate",
                "title": "FocusState",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/focusedvalue/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/focusedvalue/wrappedvalue",
                    "title": "var wrappedValue: Value?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/focusedvalue",
                "title": "FocusedValue",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/entry()",
                "title": "macro Entry()",
                "type": "macro"
              },
              {
                "children": [
                  {
                    "title": "Specifying the value type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/focusedvaluekey/value",
                    "title": "Value",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/focusedvaluekey",
                "title": "FocusedValueKey",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Creating the binding",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/focusedbinding/init(_:)",
                    "title": "init(KeyPath<FocusedValues, Binding<Value>?>)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/focusedbinding/projectedvalue",
                    "title": "var projectedValue: Binding<Value?>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/focusedbinding/wrappedvalue",
                    "title": "var wrappedValue: Value?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/focusedbinding",
                "title": "FocusedBinding",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/searchfocused(_:)",
                "title": "func searchFocused(FocusState<Bool>.Binding) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/searchfocused(_:equals:)",
                "title": "func searchFocused<V>(FocusState<V>.Binding, equals: V) -> some View",
                "type": "method"
              },
              {
                "title": "Exposing value types to focused views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/focusedvalue(_:)",
                "title": "func focusedValue<T>(T?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/focusedvalue(_:_:)",
                "title": "func focusedValue(_:_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/focusedscenevalue(_:)",
                "title": "func focusedSceneValue<T>(T?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/focusedscenevalue(_:_:)",
                "title": "func focusedSceneValue(_:_:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the value for a key",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/focusedvalues/subscript(_:)",
                    "title": "subscript<Key>(Key.Type) -> Key.Value?",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/swiftui/focusedvalues",
                "title": "FocusedValues",
                "type": "struct"
              },
              {
                "title": "Exposing reference types to focused views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/focusedobject(_:)",
                "title": "func focusedObject(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/focusedsceneobject(_:)",
                "title": "func focusedSceneObject(_:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating the focused object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/focusedobject/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Getting the value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/focusedobject/projectedvalue",
                    "title": "var projectedValue: FocusedObject<ObjectType>.Wrapper?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/focusedobject/wrappedvalue",
                    "title": "var wrappedValue: ObjectType?",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Accessing members",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/focusedobject/wrapper/subscript(dynamicmember:)",
                        "title": "subscript<T>(dynamicMember _: ReferenceWritableKeyPath<ObjectType, T>) -> Binding<T>",
                        "type": "subscript"
                      }
                    ],
                    "path": "/documentation/swiftui/focusedobject/wrapper",
                    "title": "FocusedObject.Wrapper",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/focusedobject",
                "title": "FocusedObject",
                "type": "struct"
              },
              {
                "title": "Setting focus scope",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/focusscope(_:)",
                "title": "func focusScope(Namespace.ID) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/focussection()",
                "title": "func focusSection() -> some View",
                "type": "method"
              },
              {
                "title": "Controlling default focus",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/prefersdefaultfocus(_:in:)",
                "title": "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/defaultfocus(_:_:priority:)",
                "title": "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the priorities",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/defaultfocusevaluationpriority/automatic",
                    "title": "static let automatic: DefaultFocusEvaluationPriority",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/defaultfocusevaluationpriority/userinitiated",
                    "title": "static let userInitiated: DefaultFocusEvaluationPriority",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/defaultfocusevaluationpriority",
                "title": "DefaultFocusEvaluationPriority",
                "type": "struct"
              },
              {
                "title": "Resetting focus",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/resetfocus",
                "title": "var resetFocus: ResetFocusAction",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/resetfocusaction/callasfunction(in:)",
                    "title": "func callAsFunction(in: Namespace.ID)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/resetfocusaction",
                "title": "ResetFocusAction",
                "type": "struct"
              },
              {
                "title": "Configuring effects",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/focuseffectdisabled(_:)",
                "title": "func focusEffectDisabled(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/isfocuseffectenabled",
                "title": "var isFocusEffectEnabled: Bool",
                "type": "property"
              }
            ],
            "path": "/documentation/swiftui/focus",
            "title": "Focus",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Sending and receiving user activities",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/restoring_your_app_s_state_with_swiftui",
                "title": "Restoring Your App’s State with SwiftUI",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/view/useractivity(_:element:_:)",
                "title": "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/useractivity(_:isactive:_:)",
                "title": "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/oncontinueuseractivity(_:perform:)",
                "title": "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                "type": "method"
              },
              {
                "title": "Sending and receiving URLs",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/openurl",
                "title": "var openURL: OpenURLAction",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Creating the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/openurlaction/init(handler:)",
                    "title": "init(handler: (URL) -> OpenURLAction.Result)",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the results",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/openurlaction/result/discarded",
                        "title": "static let discarded: OpenURLAction.Result",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/openurlaction/result/handled",
                        "title": "static let handled: OpenURLAction.Result",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/openurlaction/result/systemaction",
                        "title": "static let systemAction: OpenURLAction.Result",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/openurlaction/result/systemaction(_:)",
                        "title": "static func systemAction(URL) -> OpenURLAction.Result",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/swiftui/openurlaction/result",
                    "title": "OpenURLAction.Result",
                    "type": "struct"
                  },
                  {
                    "title": "Calling the action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/openurlaction/callasfunction(_:)",
                    "title": "func callAsFunction(URL)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/openurlaction/callasfunction(_:completion:)",
                    "title": "func callAsFunction(URL, completion: (Bool) -> Void)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/openurlaction",
                "title": "OpenURLAction",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/onopenurl(perform:)",
                "title": "func onOpenURL(perform: (URL) -> ()) -> some View",
                "type": "method"
              },
              {
                "title": "Handling external events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/scene/handlesexternalevents(matching:)",
                "title": "func handlesExternalEvents(matching: Set<String>) -> some Scene",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/handlesexternalevents(preferring:allowing:)",
                "title": "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                "type": "method"
              },
              {
                "title": "Handling background tasks",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/scene/backgroundtask(_:action:)",
                "title": "func backgroundTask<D, R>(BackgroundTask<D, R>, action: (D) async -> R) -> some Scene",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Refreshing the app",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/backgroundtask/apprefresh",
                    "title": "static var appRefresh: BackgroundTask<String?, Void>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/backgroundtask/apprefresh(_:)",
                    "title": "static func appRefresh(String) -> BackgroundTask<Void, Void>",
                    "type": "method"
                  },
                  {
                    "title": "Preparing for a snapshot",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/backgroundtask/snapshot",
                    "title": "static var snapshot: BackgroundTask<SnapshotData, SnapshotResponse>",
                    "type": "property"
                  },
                  {
                    "title": "Receiving connectivity updates",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/backgroundtask/bluetoothalert",
                    "title": "static var bluetoothAlert: BackgroundTask<Void, Void>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/backgroundtask/watchconnectivity",
                    "title": "static var watchConnectivity: BackgroundTask<Void, Void>",
                    "type": "property"
                  },
                  {
                    "title": "Responding to URL sessions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/backgroundtask/urlsession",
                    "title": "static var urlSession: BackgroundTask<String, Void>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/backgroundtask/urlsession(_:)",
                    "title": "static func urlSession(String) -> BackgroundTask<Void, Void>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/backgroundtask/urlsession(matching:)",
                    "title": "static func urlSession(matching: (String) -> Bool) -> BackgroundTask<String, Void>",
                    "type": "method"
                  },
                  {
                    "title": "Updating intents and shortcuts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/backgroundtask/intentdidrun",
                    "title": "static var intentDidRun: BackgroundTask<Void, Void>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/backgroundtask/relevantshortcut",
                    "title": "static var relevantShortcut: BackgroundTask<Void, Void>",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/backgroundtask",
                "title": "BackgroundTask",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/snapshotdata/identifier",
                    "title": "let identifier: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/snapshotdata/reason",
                    "title": "let reason: SnapshotData.SnapshotReason",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the snapshot reasons",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/snapshotdata/snapshotreason/appbackgrounded",
                        "title": "case appBackgrounded",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/snapshotdata/snapshotreason/appscheduled",
                        "title": "case appScheduled",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/snapshotdata/snapshotreason/complicationupdate",
                        "title": "case complicationUpdate",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/snapshotdata/snapshotreason/prelaunch",
                        "title": "case prelaunch",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/snapshotdata/snapshotreason/returntodefaultstate",
                        "title": "case returnToDefaultState",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/snapshotdata/snapshotreason",
                    "title": "SnapshotData.SnapshotReason",
                    "type": "enum"
                  }
                ],
                "path": "/documentation/swiftui/snapshotdata",
                "title": "SnapshotData",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a response",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/snapshotresponse/init(restoreddefaultstate:estimatedsnapshotexpiration:identifier:)",
                    "title": "init(restoredDefaultState: Bool, estimatedSnapshotExpiration: Date?, identifier: String?)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/snapshotresponse",
                "title": "SnapshotResponse",
                "type": "struct"
              },
              {
                "title": "Importing and exporting transferable items",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/importablefromservices(for:action:)",
                "title": "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/exportabletoservices(_:)",
                "title": "func exportableToServices<T>(@autoclosure () -> [T]) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/exportabletoservices(_:onedit:)",
                "title": "func exportableToServices<T>(@autoclosure () -> [T], onEdit: ([T]) -> Bool) -> some View",
                "type": "method"
              },
              {
                "title": "Importing and exporting using item providers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/importsitemproviders(_:onimport:)",
                "title": "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/exportsitemproviders(_:onexport:)",
                "title": "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/exportsitemproviders(_:onexport:onedit:)",
                "title": "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/system-events",
            "title": "System events",
            "type": "collection"
          },
          {
            "title": "Accessibility",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/creating_accessible_views",
                "title": "Creating Accessible Views",
                "type": "sampleCode"
              },
              {
                "title": "Creating accessible elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityelement(children:)",
                "title": "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitychildren(children:)",
                "title": "func accessibilityChildren<V>(children: () -> V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityrepresentation(representation:)",
                "title": "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting behaviors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitychildbehavior/combine",
                    "title": "static let combine: AccessibilityChildBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitychildbehavior/contain",
                    "title": "static let contain: AccessibilityChildBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitychildbehavior/ignore",
                    "title": "static let ignore: AccessibilityChildBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/accessibilitychildbehavior",
                "title": "AccessibilityChildBehavior",
                "type": "struct"
              },
              {
                "title": "Identifying elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityidentifier(_:)",
                "title": "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityidentifier(_:isenabled:)",
                "title": "func accessibilityIdentifier(String, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "title": "Hiding elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityhidden(_:)",
                "title": "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityhidden(_:isenabled:)",
                "title": "func accessibilityHidden(Bool, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Getting technology types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytechnologies/switchcontrol",
                    "title": "static let switchControl: AccessibilityTechnologies",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytechnologies/voiceover",
                    "title": "static let voiceOver: AccessibilityTechnologies",
                    "type": "property"
                  },
                  {
                    "title": "Creating a technology type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytechnologies/init()",
                    "title": "init()",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/accessibilitytechnologies",
                "title": "AccessibilityTechnologies",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/accessibilityattachmentmodifier",
                "title": "AccessibilityAttachmentModifier",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/accessibility-fundamentals",
            "title": "Accessibility fundamentals",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Managing color",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityignoresinvertcolors(_:)",
                "title": "func accessibilityIgnoresInvertColors(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/accessibilityinvertcolors",
                "title": "var accessibilityInvertColors: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/accessibilitydifferentiatewithoutcolor",
                "title": "var accessibilityDifferentiateWithoutColor: Bool",
                "type": "property"
              },
              {
                "title": "Enlarging content",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityshowslargecontentviewer()",
                "title": "func accessibilityShowsLargeContentViewer() -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityshowslargecontentviewer(_:)",
                "title": "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/accessibilitylargecontentviewerenabled",
                "title": "var accessibilityLargeContentViewerEnabled: Bool",
                "type": "property"
              },
              {
                "title": "Improving legibility",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/accessibilityshowbuttonshapes",
                "title": "var accessibilityShowButtonShapes: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/accessibilityreducetransparency",
                "title": "var accessibilityReduceTransparency: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/legibilityweight",
                "title": "var legibilityWeight: LegibilityWeight?",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting weights",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/legibilityweight/regular",
                    "title": "case regular",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/legibilityweight/bold",
                    "title": "case bold",
                    "type": "case"
                  },
                  {
                    "title": "Creating a weight",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/legibilityweight/init(_:)",
                    "title": "init?(UILegibilityWeight)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/legibilityweight",
                "title": "LegibilityWeight",
                "type": "enum"
              },
              {
                "title": "Minimizing motion",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/accessibilitydimflashinglights",
                "title": "var accessibilityDimFlashingLights: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/accessibilityplayanimatedimages",
                "title": "var accessibilityPlayAnimatedImages: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/accessibilityreducemotion",
                "title": "var accessibilityReduceMotion: Bool",
                "type": "property"
              },
              {
                "title": "Using assistive access",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/accessibilityassistiveaccessenabled",
                "title": "var accessibilityAssistiveAccessEnabled: Bool",
                "type": "property"
              }
            ],
            "path": "/documentation/swiftui/accessible-appearance",
            "title": "Accessible appearance",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Adding actions to views",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityaction(_:_:)",
                "title": "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityactions(_:)",
                "title": "func accessibilityActions<Content>(() -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityaction(named:_:)",
                "title": "func accessibilityAction(named:_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityaction(action:label:)",
                "title": "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityaction(intent:label:)",
                "title": "func accessibilityAction<I, Label>(intent: I, label: () -> Label) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityaction(_:intent:)",
                "title": "func accessibilityAction<I>(AccessibilityActionKind, intent: I) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityaction(named:intent:)",
                "title": "func accessibilityAction(named:intent:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityadjustableaction(_:)",
                "title": "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityscrollaction(_:)",
                "title": "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityactions(category:_:)",
                "title": "func accessibilityActions<Content>(category: AccessibilityActionCategory, () -> Content) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the kind of action",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityactionkind/default",
                    "title": "static let `default`: AccessibilityActionKind",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityactionkind/delete",
                    "title": "static let delete: AccessibilityActionKind",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityactionkind/escape",
                    "title": "static let escape: AccessibilityActionKind",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityactionkind/magictap",
                    "title": "static let magicTap: AccessibilityActionKind",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityactionkind/showmenu",
                    "title": "static let showMenu: AccessibilityActionKind",
                    "type": "property"
                  },
                  {
                    "title": "Creating an action type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityactionkind/init(named:)",
                    "title": "init(named: Text)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/accessibilityactionkind",
                "title": "AccessibilityActionKind",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting an adjustment direction",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityadjustmentdirection/decrement",
                    "title": "case decrement",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityadjustmentdirection/increment",
                    "title": "case increment",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/accessibilityadjustmentdirection",
                "title": "AccessibilityAdjustmentDirection",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityactioncategory/init(_:)",
                    "title": "init(_:)",
                    "type": "init"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityactioncategory/default",
                    "title": "static let `default`: AccessibilityActionCategory",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityactioncategory/edit",
                    "title": "static let edit: AccessibilityActionCategory",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/accessibilityactioncategory",
                "title": "AccessibilityActionCategory",
                "type": "struct"
              },
              {
                "title": "Offering Quick Actions to people",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityquickaction(style:content:)",
                "title": "func accessibilityQuickAction<Style, Content>(style: Style, content: () -> Content) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityquickaction(style:isactive:content:)",
                "title": "func accessibilityQuickAction<Style, Content>(style: Style, isActive: Binding<Bool>, content: () -> Content) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting built-in menu styles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityquickactionstyle/outline",
                    "title": "static var outline: AccessibilityQuickActionOutlineStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityquickactionstyle/prompt",
                    "title": "static var prompt: AccessibilityQuickActionPromptStyle",
                    "type": "property"
                  },
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityquickactionoutlinestyle",
                    "title": "AccessibilityQuickActionOutlineStyle",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityquickactionpromptstyle",
                    "title": "AccessibilityQuickActionPromptStyle",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/accessibilityquickactionstyle",
                "title": "AccessibilityQuickActionStyle",
                "type": "protocol"
              },
              {
                "title": "Making gestures accessible",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityactivationpoint(_:)",
                "title": "func accessibilityActivationPoint(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityactivationpoint(_:isenabled:)",
                "title": "func accessibilityActivationPoint(_:isEnabled:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitydragpoint(_:description:)",
                "title": "func accessibilityDragPoint(_:description:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitydragpoint(_:description:isenabled:)",
                "title": "func accessibilityDragPoint(_:description:isEnabled:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitydroppoint(_:description:)",
                "title": "func accessibilityDropPoint(_:description:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitydroppoint(_:description:isenabled:)",
                "title": "func accessibilityDropPoint(_:description:isEnabled:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitydirecttouch(_:options:)",
                "title": "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityzoomaction(_:)",
                "title": "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitydirecttouchoptions/requiresactivation",
                    "title": "static let requiresActivation: AccessibilityDirectTouchOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitydirecttouchoptions/silentontouch",
                    "title": "static let silentOnTouch: AccessibilityDirectTouchOptions",
                    "type": "property"
                  },
                  {
                    "title": "Creating a set of options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitydirecttouchoptions/init(rawvalue:)",
                    "title": "init(rawValue: AccessibilityDirectTouchOptions.RawValue)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/accessibilitydirecttouchoptions",
                "title": "AccessibilityDirectTouchOptions",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Getting the action’s direction",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityzoomgestureaction/direction-swift.property",
                    "title": "let direction: AccessibilityZoomGestureAction.Direction",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the direction",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/accessibilityzoomgestureaction/direction-swift.enum/zoomin",
                        "title": "case zoomIn",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/swiftui/accessibilityzoomgestureaction/direction-swift.enum/zoomout",
                        "title": "case zoomOut",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/swiftui/accessibilityzoomgestureaction/direction-swift.enum",
                    "title": "AccessibilityZoomGestureAction.Direction",
                    "type": "enum"
                  },
                  {
                    "title": "Getting location information",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityzoomgestureaction/location",
                    "title": "let location: UnitPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityzoomgestureaction/point",
                    "title": "let point: CGPoint",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/accessibilityzoomgestureaction",
                "title": "AccessibilityZoomGestureAction",
                "type": "struct"
              },
              {
                "title": "Controlling focus",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityfocused(_:)",
                "title": "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityfocused(_:equals:)",
                "title": "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a focus state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityfocusstate/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityfocusstate/init(for:)",
                    "title": "init(for:)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityfocusstate/projectedvalue",
                    "title": "var projectedValue: AccessibilityFocusState<Value>.Binding",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityfocusstate/wrappedvalue",
                    "title": "var wrappedValue: Value",
                    "type": "property"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the state",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/swiftui/accessibilityfocusstate/binding/projectedvalue",
                        "title": "var projectedValue: AccessibilityFocusState<Value>.Binding",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/swiftui/accessibilityfocusstate/binding/wrappedvalue",
                        "title": "var wrappedValue: Value",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/swiftui/accessibilityfocusstate/binding",
                    "title": "AccessibilityFocusState.Binding",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/swiftui/accessibilityfocusstate",
                "title": "AccessibilityFocusState",
                "type": "struct"
              },
              {
                "title": "Managing interactivity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityrespondstouserinteraction(_:)",
                "title": "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityrespondstouserinteraction(_:isenabled:)",
                "title": "func accessibilityRespondsToUserInteraction(Bool, isEnabled: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/accessible-controls",
            "title": "Accessible controls",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Applying labels",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitylabel(_:)",
                "title": "func accessibilityLabel(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitylabel(_:isenabled:)",
                "title": "func accessibilityLabel(_:isEnabled:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitylabel(content:)",
                "title": "func accessibilityLabel<V>(content: (PlaceholderContentView<Self>) -> V) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityinputlabels(_:)",
                "title": "func accessibilityInputLabels(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityinputlabels(_:isenabled:)",
                "title": "func accessibilityInputLabels(_:isEnabled:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitylabeledpair(role:id:in:)",
                "title": "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting roles",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitylabeledpairrole/content",
                    "title": "case content",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitylabeledpairrole/label",
                    "title": "case label",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/accessibilitylabeledpairrole",
                "title": "AccessibilityLabeledPairRole",
                "type": "enum"
              },
              {
                "title": "Describing values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityvalue(_:)",
                "title": "func accessibilityValue(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityvalue(_:isenabled:)",
                "title": "func accessibilityValue(_:isEnabled:)",
                "type": "method"
              },
              {
                "title": "Describing content",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitytextcontenttype(_:)",
                "title": "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityheading(_:)",
                "title": "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting the heading level",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityheadinglevel/h1",
                    "title": "case h1",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityheadinglevel/h2",
                    "title": "case h2",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityheadinglevel/h3",
                    "title": "case h3",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityheadinglevel/h4",
                    "title": "case h4",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityheadinglevel/h5",
                    "title": "case h5",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityheadinglevel/h6",
                    "title": "case h6",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityheadinglevel/unspecified",
                    "title": "case unspecified",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/accessibilityheadinglevel",
                "title": "AccessibilityHeadingLevel",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Getting content types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytextcontenttype/console",
                    "title": "static let console: AccessibilityTextContentType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytextcontenttype/filesystem",
                    "title": "static let fileSystem: AccessibilityTextContentType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytextcontenttype/messaging",
                    "title": "static let messaging: AccessibilityTextContentType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytextcontenttype/narrative",
                    "title": "static let narrative: AccessibilityTextContentType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytextcontenttype/plain",
                    "title": "static let plain: AccessibilityTextContentType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytextcontenttype/sourcecode",
                    "title": "static let sourceCode: AccessibilityTextContentType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytextcontenttype/spreadsheet",
                    "title": "static let spreadsheet: AccessibilityTextContentType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytextcontenttype/wordprocessing",
                    "title": "static let wordProcessing: AccessibilityTextContentType",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/accessibilitytextcontenttype",
                "title": "AccessibilityTextContentType",
                "type": "struct"
              },
              {
                "title": "Describing charts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitychartdescriptor(_:)",
                "title": "func accessibilityChartDescriptor<R>(R) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Managing a descriptor",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/axchartdescriptorrepresentable/makechartdescriptor()",
                    "title": "func makeChartDescriptor() -> AXChartDescriptor",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/axchartdescriptorrepresentable/updatechartdescriptor(_:)",
                    "title": "func updateChartDescriptor(AXChartDescriptor)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/axchartdescriptorrepresentable",
                "title": "AXChartDescriptorRepresentable",
                "type": "protocol"
              },
              {
                "title": "Adding custom descriptions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitycustomcontent(_:_:importance:)",
                "title": "func accessibilityCustomContent(_:_:importance:)",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Creating a key",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitycustomcontentkey/init(_:)",
                    "title": "init(LocalizedStringKey)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitycustomcontentkey/init(_:id:)",
                    "title": "init(_:id:)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/accessibilitycustomcontentkey",
                "title": "AccessibilityCustomContentKey",
                "type": "struct"
              },
              {
                "title": "Assigning traits to content",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityaddtraits(_:)",
                "title": "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityremovetraits(_:)",
                "title": "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting traits",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/allowsdirectinteraction",
                    "title": "static let allowsDirectInteraction: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/causespageturn",
                    "title": "static let causesPageTurn: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/isbutton",
                    "title": "static let isButton: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/isheader",
                    "title": "static let isHeader: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/isimage",
                    "title": "static let isImage: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/iskeyboardkey",
                    "title": "static let isKeyboardKey: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/islink",
                    "title": "static let isLink: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/ismodal",
                    "title": "static let isModal: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/issearchfield",
                    "title": "static let isSearchField: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/isselected",
                    "title": "static let isSelected: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/isstatictext",
                    "title": "static let isStaticText: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/issummaryelement",
                    "title": "static let isSummaryElement: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/istoggle",
                    "title": "static let isToggle: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/playssound",
                    "title": "static let playsSound: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/startsmediasession",
                    "title": "static let startsMediaSession: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/updatesfrequently",
                    "title": "static let updatesFrequently: AccessibilityTraits",
                    "type": "property"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitytraits/istabbar",
                    "title": "static let isTabBar: AccessibilityTraits",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/accessibilitytraits",
                "title": "AccessibilityTraits",
                "type": "struct"
              },
              {
                "title": "Offering hints",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityhint(_:)",
                "title": "func accessibilityHint(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityhint(_:isenabled:)",
                "title": "func accessibilityHint(_:isEnabled:)",
                "type": "method"
              },
              {
                "title": "Configuring VoiceOver",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/speechadjustedpitch(_:)",
                "title": "func speechAdjustedPitch(Double) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/speechalwaysincludespunctuation(_:)",
                "title": "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/speechannouncementsqueued(_:)",
                "title": "func speechAnnouncementsQueued(Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/speechspellsoutcharacters(_:)",
                "title": "func speechSpellsOutCharacters(Bool) -> some View",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/accessible-descriptions",
            "title": "Accessible descriptions",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Working with rotors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityrotor(_:entries:)",
                "title": "func accessibilityRotor(_:entries:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityrotor(_:entries:entryid:entrylabel:)",
                "title": "func accessibilityRotor(_:entries:entryID:entryLabel:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityrotor(_:entries:entrylabel:)",
                "title": "func accessibilityRotor(_:entries:entryLabel:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityrotor(_:textranges:)",
                "title": "func accessibilityRotor(_:textRanges:)",
                "type": "method"
              },
              {
                "title": "Creating rotors",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Supporting types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontent/body-swift.property",
                    "title": "var body: Self.Body",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontent/body-swift.associatedtype",
                    "title": "Body",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/accessibilityrotorcontent",
                "title": "AccessibilityRotorContent",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Building navigation content",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:)",
                    "title": "static func buildBlock<Content>(Content) -> some AccessibilityRotorContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:)",
                    "title": "static func buildBlock<C0, C1>(C0, C1) -> some AccessibilityRotorContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2>(C0, C1, C2) -> some AccessibilityRotorContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> some AccessibilityRotorContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> some AccessibilityRotorContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> some AccessibilityRotorContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> some AccessibilityRotorContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> some AccessibilityRotorContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> some AccessibilityRotorContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontentbuilder/buildblock(_:_:_:_:_:_:_:_:_:_:)",
                    "title": "static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> some AccessibilityRotorContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontentbuilder/buildif(_:)",
                    "title": "static func buildIf<Content>(Content?) -> some AccessibilityRotorContent",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorcontentbuilder/buildexpression(_:)",
                    "title": "static func buildExpression<Content>(Content) -> Content",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/accessibilityrotorcontentbuilder",
                "title": "AccessibilityRotorContentBuilder",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating a rotor entry",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorentry/init(_:textrange:prepare:)",
                    "title": "init(_:textRange:prepare:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorentry/init(_:id:textrange:prepare:)",
                    "title": "init(_:id:textRange:prepare:)",
                    "type": "init"
                  },
                  {
                    "title": "Creating an identified rotor entry in a namespace",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorentry/init(_:id:in:textrange:prepare:)",
                    "title": "init(_:id:in:textRange:prepare:)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilityrotorentry/init(_:_:in:textrange:prepare:)",
                    "title": "init<L>(L, ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: () -> Void)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/swiftui/accessibilityrotorentry",
                "title": "AccessibilityRotorEntry",
                "type": "struct"
              },
              {
                "title": "Replacing system rotors",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Iterating through text",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/textfields",
                    "title": "static var textFields: AccessibilitySystemRotor",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/boldtext",
                    "title": "static var boldText: AccessibilitySystemRotor",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/italictext",
                    "title": "static var italicText: AccessibilitySystemRotor",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/underlinetext",
                    "title": "static var underlineText: AccessibilitySystemRotor",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/misspelledwords",
                    "title": "static var misspelledWords: AccessibilitySystemRotor",
                    "type": "property"
                  },
                  {
                    "title": "Iterating through headings",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/headings",
                    "title": "static var headings: AccessibilitySystemRotor",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/headings(level:)",
                    "title": "static func headings(level: AccessibilityHeadingLevel) -> AccessibilitySystemRotor",
                    "type": "method"
                  },
                  {
                    "title": "Iterating through links",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/links",
                    "title": "static var links: AccessibilitySystemRotor",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/links(visited:)",
                    "title": "static func links(visited: Bool) -> AccessibilitySystemRotor",
                    "type": "method"
                  },
                  {
                    "title": "Iterating through other elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/images",
                    "title": "static var images: AccessibilitySystemRotor",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/landmarks",
                    "title": "static var landmarks: AccessibilitySystemRotor",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/lists",
                    "title": "static var lists: AccessibilitySystemRotor",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/accessibilitysystemrotor/tables",
                    "title": "static var tables: AccessibilitySystemRotor",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/accessibilitysystemrotor",
                "title": "AccessibilitySystemRotor",
                "type": "struct"
              },
              {
                "title": "Configuring rotors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/accessibilityrotorentry(id:in:)",
                "title": "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitylinkedgroup(id:in:)",
                "title": "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/accessibilitysortpriority(_:)",
                "title": "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/accessible-navigation",
            "title": "Accessible navigation",
            "type": "collection"
          },
          {
            "title": "Framework integration",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Displaying SwiftUI views in AppKit",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/unifying-your-app-s-animations",
                "title": "Unifying your app’s animations",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Creating a hosting controller object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingcontroller/init(rootview:)",
                    "title": "init(rootView: Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingcontroller/init(coder:rootview:)",
                    "title": "init?(coder: NSCoder, rootView: Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingcontroller/init(coder:)",
                    "title": "init?(coder: NSCoder)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the root view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingcontroller/rootview",
                    "title": "var rootView: Content",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingcontroller/identifier",
                    "title": "var identifier: NSUserInterfaceItemIdentifier?",
                    "type": "property"
                  },
                  {
                    "title": "Configuring the controller",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingcontroller/sizethatfits(in:)",
                    "title": "func sizeThatFits(in: CGSize) -> CGSize",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingcontroller/preferredcontentsize",
                    "title": "var preferredContentSize: NSSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingcontroller/sizingoptions",
                    "title": "var sizingOptions: NSHostingSizingOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingcontroller/safearearegions",
                    "title": "var safeAreaRegions: SafeAreaRegions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingcontroller/scenebridgingoptions",
                    "title": "var sceneBridgingOptions: NSHostingSceneBridgingOptions",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/nshostingcontroller",
                "title": "NSHostingController",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Creating a hosting view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/init(rootview:)",
                    "title": "init(rootView: Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/init(coder:)",
                    "title": "init?(coder: NSCoder)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/prepareforreuse()",
                    "title": "func prepareForReuse()",
                    "type": "method"
                  },
                  {
                    "title": "Getting the root view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/rootview",
                    "title": "var rootView: Content",
                    "type": "property"
                  },
                  {
                    "title": "Configuring the view layout behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/requiresconstraintbasedlayout",
                    "title": "class var requiresConstraintBasedLayout: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/userinterfacelayoutdirection",
                    "title": "var userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/isflipped",
                    "title": "var isFlipped: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/layercontentsredrawpolicy",
                    "title": "var layerContentsRedrawPolicy: NSView.LayerContentsRedrawPolicy",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/updateconstraints()",
                    "title": "func updateConstraints()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/layout()",
                    "title": "func layout()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/safearearegions",
                    "title": "var safeAreaRegions: SafeAreaRegions",
                    "type": "property"
                  },
                  {
                    "title": "Managing keyboard interaction",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/keydown(with:)",
                    "title": "func keyDown(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/keyup(with:)",
                    "title": "func keyUp(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/performkeyequivalent(with:)",
                    "title": "func performKeyEquivalent(with: NSEvent) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/inserttext(_:)",
                    "title": "func insertText(Any)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/didchangevalue(forkey:)",
                    "title": "func didChangeValue(forKey: String)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/maketouchbar()",
                    "title": "func makeTouchBar() -> NSTouchBar?",
                    "type": "method"
                  },
                  {
                    "title": "Responding to mouse events",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/mousedown(with:)",
                    "title": "func mouseDown(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/mouseup(with:)",
                    "title": "func mouseUp(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/othermousedown(with:)",
                    "title": "func otherMouseDown(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/othermouseup(with:)",
                    "title": "func otherMouseUp(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/rightmousedown(with:)",
                    "title": "func rightMouseDown(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/rightmouseup(with:)",
                    "title": "func rightMouseUp(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/mouseentered(with:)",
                    "title": "func mouseEntered(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/mouseexited(with:)",
                    "title": "func mouseExited(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/mousedragged(with:)",
                    "title": "func mouseDragged(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/mousemoved(with:)",
                    "title": "func mouseMoved(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/othermousedragged(with:)",
                    "title": "func otherMouseDragged(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/rightmousedragged(with:)",
                    "title": "func rightMouseDragged(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/cursorupdate(with:)",
                    "title": "func cursorUpdate(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "title": "Responding to touch events",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/touchesbegan(with:)",
                    "title": "func touchesBegan(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/touchescancelled(with:)",
                    "title": "func touchesCancelled(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/touchesended(with:)",
                    "title": "func touchesEnded(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/touchesmoved(with:)",
                    "title": "func touchesMoved(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "title": "Responding to gestures",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/magnify(with:)",
                    "title": "func magnify(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/rotate(with:)",
                    "title": "func rotate(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/scrollwheel(with:)",
                    "title": "func scrollWheel(with: NSEvent)",
                    "type": "method"
                  },
                  {
                    "title": "Handling drag and drop",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/validrequestor(forsendtype:returntype:)",
                    "title": "func validRequestor(forSendType: NSPasteboard.PasteboardType?, returnType: NSPasteboard.PasteboardType?) -> Any?",
                    "type": "method"
                  },
                  {
                    "title": "Providing a context menu",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/menu(for:)",
                    "title": "func menu(for: NSEvent) -> NSMenu?",
                    "type": "method"
                  },
                  {
                    "title": "Responding to actions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/responds(to:)",
                    "title": "func responds(to: Selector!) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/forwardingtarget(for:)",
                    "title": "func forwardingTarget(for: Selector!) -> Any?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/docommand(by:)",
                    "title": "func doCommand(by: Selector)",
                    "type": "method"
                  },
                  {
                    "title": "Configuring the responder behavior",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/acceptsfirstresponder",
                    "title": "var acceptsFirstResponder: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/needspaneltobecomekey",
                    "title": "var needsPanelToBecomeKey: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Managing the view hierarchy",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/viewwillmove(towindow:)",
                    "title": "func viewWillMove(toWindow: NSWindow?)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/viewdidmovetowindow()",
                    "title": "func viewDidMoveToWindow()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/viewdidchangebackingproperties()",
                    "title": "func viewDidChangeBackingProperties()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/viewdidchangeeffectiveappearance()",
                    "title": "func viewDidChangeEffectiveAppearance()",
                    "type": "method"
                  },
                  {
                    "title": "Modifying the frame rectangle",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/intrinsiccontentsize",
                    "title": "var intrinsicContentSize: NSSize",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/setframesize(_:)",
                    "title": "func setFrameSize(NSSize)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/firstbaselineoffsetfromtop",
                    "title": "var firstBaselineOffsetFromTop: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/lastbaselineoffsetfrombottom",
                    "title": "var lastBaselineOffsetFromBottom: CGFloat",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/sizingoptions",
                    "title": "var sizingOptions: NSHostingSizingOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/firsttextlinecenter",
                    "title": "var firstTextLineCenter: CGFloat?",
                    "type": "property"
                  },
                  {
                    "title": "Testing for hits",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/hittest(_:)",
                    "title": "func hitTest(NSPoint) -> NSView?",
                    "type": "method"
                  },
                  {
                    "title": "Managing accessibility behaviors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/accessibilityfocuseduielement",
                    "title": "var accessibilityFocusedUIElement: Any?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/accessibilitychildren()",
                    "title": "func accessibilityChildren() -> [Any]?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/accessibilitychildreninnavigationorder()",
                    "title": "func accessibilityChildrenInNavigationOrder() -> [any NSAccessibilityElementProtocol]?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/accessibilityhittest(_:)",
                    "title": "func accessibilityHitTest(NSPoint) -> Any?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/accessibilityrole()",
                    "title": "func accessibilityRole() -> NSAccessibility.Role?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/accessibilitysubrole()",
                    "title": "func accessibilitySubrole() -> NSAccessibility.Subrole?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/isaccessibilityelement()",
                    "title": "func isAccessibilityElement() -> Bool",
                    "type": "method"
                  },
                  {
                    "title": "Bridging with SwiftUI",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/scenebridgingoptions",
                    "title": "var sceneBridgingOptions: NSHostingSceneBridgingOptions",
                    "type": "property"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "beta": true,
                    "path": "/documentation/swiftui/nshostingview/init(coder:rootview:)",
                    "title": "init?(coder: NSCoder, rootView: Content)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/clipstobounds",
                    "title": "var clipsToBounds: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/acceptsfirstmouse(for:)",
                    "title": "func acceptsFirstMouse(for: NSEvent?) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/didaddsubview(_:)",
                    "title": "func didAddSubview(NSView)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/observevalue(forkeypath:of:change:context:)",
                    "title": "func observeValue(forKeyPath: String?, of: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/shoulddelaywindowordering(for:)",
                    "title": "func shouldDelayWindowOrdering(for: NSEvent) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/showcontextmenuforselection(_:)",
                    "title": "func showContextMenuForSelection(Any?)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingview/willremovesubview(_:)",
                    "title": "func willRemoveSubview(NSView)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/nshostingview",
                "title": "NSHostingView",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingmenu/init(rootview:)",
                    "title": "init(rootView: Content)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingmenu/rootview",
                    "title": "var rootView: Content",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/nshostingmenu",
                "title": "NSHostingMenu",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Geting sizing options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingsizingoptions/intrinsiccontentsize",
                    "title": "static let intrinsicContentSize: NSHostingSizingOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingsizingoptions/maxsize",
                    "title": "static let maxSize: NSHostingSizingOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingsizingoptions/minsize",
                    "title": "static let minSize: NSHostingSizingOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingsizingoptions/preferredcontentsize",
                    "title": "static let preferredContentSize: NSHostingSizingOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingsizingoptions/standardbounds",
                    "title": "static let standardBounds: NSHostingSizingOptions",
                    "type": "property"
                  },
                  {
                    "title": "Creating a sizing option",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingsizingoptions/init(rawvalue:)",
                    "title": "init(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingsizingoptions/rawvalue",
                    "title": "let rawValue: Int",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/nshostingsizingoptions",
                "title": "NSHostingSizingOptions",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Geting bridging options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingscenebridgingoptions/all",
                    "title": "static let all: NSHostingSceneBridgingOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingscenebridgingoptions/title",
                    "title": "static let title: NSHostingSceneBridgingOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingscenebridgingoptions/toolbars",
                    "title": "static let toolbars: NSHostingSceneBridgingOptions",
                    "type": "property"
                  },
                  {
                    "title": "Creating a bridging options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingscenebridgingoptions/init(rawvalue:)",
                    "title": "init(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/nshostingscenebridgingoptions/rawvalue",
                    "title": "let rawValue: Int",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/nshostingscenebridgingoptions",
                "title": "NSHostingSceneBridgingOptions",
                "type": "struct"
              },
              {
                "title": "Adding AppKit views to SwiftUI view hierarchies",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating and updating the view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentable/makensview(context:)",
                    "title": "func makeNSView(context: Self.Context) -> Self.NSViewType",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentable/updatensview(_:context:)",
                    "title": "func updateNSView(Self.NSViewType, context: Self.Context)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentable/context",
                    "title": "NSViewRepresentable.Context",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentable/nsviewtype",
                    "title": "NSViewType",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Specifying a size",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentable/sizethatfits(_:nsview:context:)",
                    "title": "func sizeThatFits(ProposedViewSize, nsView: Self.NSViewType, context: Self.Context) -> CGSize?",
                    "type": "method"
                  },
                  {
                    "title": "Cleaning up the view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentable/dismantlensview(_:coordinator:)",
                    "title": "static func dismantleNSView(Self.NSViewType, coordinator: Self.Coordinator)",
                    "type": "method"
                  },
                  {
                    "title": "Providing a custom coordinator object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentable/makecoordinator()",
                    "title": "func makeCoordinator() -> Self.Coordinator",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentable/coordinator",
                    "title": "Coordinator",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Performing layout",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentable/layoutoptions",
                    "title": "NSViewRepresentable.LayoutOptions",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/swiftui/nsviewrepresentable",
                "title": "NSViewRepresentable",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Coordinating view-related interactions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentablecontext/coordinator",
                    "title": "let coordinator: View.Coordinator",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentablecontext/transaction",
                    "title": "var transaction: Transaction",
                    "type": "property"
                  },
                  {
                    "title": "Getting the current environment data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentablecontext/environment",
                    "title": "var environment: EnvironmentValues",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewrepresentablecontext/animate(changes:completion:)",
                    "title": "func animate(changes: () -> Void, completion: (() -> Void)?)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/nsviewrepresentablecontext",
                "title": "NSViewRepresentableContext",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating and updating the view controller",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentable/makensviewcontroller(context:)",
                    "title": "func makeNSViewController(context: Self.Context) -> Self.NSViewControllerType",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentable/updatensviewcontroller(_:context:)",
                    "title": "func updateNSViewController(Self.NSViewControllerType, context: Self.Context)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentable/context",
                    "title": "NSViewControllerRepresentable.Context",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentable/nsviewcontrollertype",
                    "title": "NSViewControllerType",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Specifying a size",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentable/sizethatfits(_:nsviewcontroller:context:)",
                    "title": "func sizeThatFits(ProposedViewSize, nsViewController: Self.NSViewControllerType, context: Self.Context) -> CGSize?",
                    "type": "method"
                  },
                  {
                    "title": "Cleaning up the view controller",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentable/dismantlensviewcontroller(_:coordinator:)",
                    "title": "static func dismantleNSViewController(Self.NSViewControllerType, coordinator: Self.Coordinator)",
                    "type": "method"
                  },
                  {
                    "title": "Providing a custom coordinator object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentable/makecoordinator()",
                    "title": "func makeCoordinator() -> Self.Coordinator",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentable/coordinator",
                    "title": "Coordinator",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Performing layout",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentable/layoutoptions",
                    "title": "NSViewControllerRepresentable.LayoutOptions",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/swiftui/nsviewcontrollerrepresentable",
                "title": "NSViewControllerRepresentable",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Coordinating view-related interactions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentablecontext/coordinator",
                    "title": "let coordinator: ViewController.Coordinator",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentablecontext/transaction",
                    "title": "var transaction: Transaction",
                    "type": "property"
                  },
                  {
                    "title": "Getting the current environment data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentablecontext/environment",
                    "title": "var environment: EnvironmentValues",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/nsviewcontrollerrepresentablecontext/animate(changes:completion:)",
                    "title": "func animate(changes: () -> Void, completion: (() -> Void)?)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/nsviewcontrollerrepresentablecontext",
                "title": "NSViewControllerRepresentableContext",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/appkit-integration",
            "title": "AppKit integration",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Displaying SwiftUI views in UIKit",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/uikit/using-swiftui-with-uikit",
                "title": "Using SwiftUI with UIKit",
                "type": "sampleCode"
              },
              {
                "path": "/documentation/swiftui/unifying-your-app-s-animations",
                "title": "Unifying your app’s animations",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Creating a hosting controller object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/init(rootview:)",
                    "title": "init(rootView: Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/init(coder:rootview:)",
                    "title": "init?(coder: NSCoder, rootView: Content)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/init(coder:)",
                    "title": "init?(coder: NSCoder)",
                    "type": "init"
                  },
                  {
                    "title": "Responding to view-related events",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/loadview()",
                    "title": "func loadView()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/viewwillappear(_:)",
                    "title": "func viewWillAppear(Bool)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/viewdidappear(_:)",
                    "title": "func viewDidAppear(Bool)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/viewwilldisappear(_:)",
                    "title": "func viewWillDisappear(Bool)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/viewdiddisappear(_:)",
                    "title": "func viewDidDisappear(Bool)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/willmove(toparent:)",
                    "title": "func willMove(toParent: UIViewController?)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/didmove(toparent:)",
                    "title": "func didMove(toParent: UIViewController?)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/viewwilltransition(to:with:)",
                    "title": "func viewWillTransition(to: CGSize, with: any UIViewControllerTransitionCoordinator)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/viewwilllayoutsubviews()",
                    "title": "func viewWillLayoutSubviews()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/target(foraction:withsender:)",
                    "title": "func target(forAction: Selector, withSender: Any?) -> Any?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/rootview",
                    "title": "var rootView: Content",
                    "type": "property"
                  },
                  {
                    "title": "Checking for modality",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/ismodalinpresentation",
                    "title": "var isModalInPresentation: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Managing the size",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/sizingoptions",
                    "title": "var sizingOptions: UIHostingControllerSizingOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/preferredcontentsizedidchange(forchildcontentcontainer:)",
                    "title": "func preferredContentSizeDidChange(forChildContentContainer: any UIContentContainer)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/sizethatfits(in:)",
                    "title": "func sizeThatFits(in: CGSize) -> CGSize",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/safearearegions",
                    "title": "var safeAreaRegions: SafeAreaRegions",
                    "type": "property"
                  },
                  {
                    "title": "Configuring the status bar",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/preferredstatusbarstyle",
                    "title": "var preferredStatusBarStyle: UIStatusBarStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/preferredstatusbarupdateanimation",
                    "title": "var preferredStatusBarUpdateAnimation: UIStatusBarAnimation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/prefersstatusbarhidden",
                    "title": "var prefersStatusBarHidden: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/childforstatusbarstyle",
                    "title": "var childForStatusBarStyle: UIViewController?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/childforstatusbarhidden",
                    "title": "var childForStatusBarHidden: UIViewController?",
                    "type": "property"
                  },
                  {
                    "title": "Configuring the home indicator",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/prefershomeindicatorautohidden",
                    "title": "var prefersHomeIndicatorAutoHidden: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/childforhomeindicatorautohidden",
                    "title": "var childForHomeIndicatorAutoHidden: UIViewController?",
                    "type": "property"
                  },
                  {
                    "title": "Configuring the interface appearance",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/preferreduserinterfacestyle",
                    "title": "var preferredUserInterfaceStyle: UIUserInterfaceStyle",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/preferredscreenedgesdeferringsystemgestures",
                    "title": "var preferredScreenEdgesDeferringSystemGestures: UIRectEdge",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/childforscreenedgesdeferringsystemgestures",
                    "title": "var childForScreenEdgesDeferringSystemGestures: UIViewController?",
                    "type": "property"
                  },
                  {
                    "title": "Accessing the available key commands",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/keycommands",
                    "title": "var keyCommands: [UIKeyCommand]?",
                    "type": "property"
                  },
                  {
                    "title": "Managing undo",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/undomanager",
                    "title": "var undoManager: UndoManager?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/childviewcontrollerforpreferredcontainerbackgroundstyle",
                    "title": "var childViewControllerForPreferredContainerBackgroundStyle: UIViewController?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/preferredcontainerbackgroundstyle",
                    "title": "var preferredContainerBackgroundStyle: UIContainerBackgroundStyle",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontroller/addchild(_:)",
                    "title": "func addChild(UIViewController)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/uihostingcontroller",
                "title": "UIHostingController",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Getting sizing options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontrollersizingoptions/intrinsiccontentsize",
                    "title": "static let intrinsicContentSize: UIHostingControllerSizingOptions",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontrollersizingoptions/preferredcontentsize",
                    "title": "static let preferredContentSize: UIHostingControllerSizingOptions",
                    "type": "property"
                  },
                  {
                    "title": "Creating a sizing option",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontrollersizingoptions/init(rawvalue:)",
                    "title": "init(rawValue: Int)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingcontrollersizingoptions/rawvalue",
                    "title": "let rawValue: Int",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/uihostingcontrollersizingoptions",
                "title": "UIHostingControllerSizingOptions",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating and updating a configuration",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingconfiguration/init(content:)",
                    "title": "init(content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "title": "Setting the background",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingconfiguration/background(_:)",
                    "title": "func background<S>(S) -> UIHostingConfiguration<Content, _UIHostingConfigurationBackgroundView<S>>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingconfiguration/background(content:)",
                    "title": "func background<B>(content: () -> B) -> UIHostingConfiguration<Content, B>",
                    "type": "method"
                  },
                  {
                    "title": "Setting margins",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingconfiguration/margins(_:_:)",
                    "title": "func margins(_:_:)",
                    "type": "method"
                  },
                  {
                    "title": "Setting a size",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingconfiguration/minsize(width:height:)",
                    "title": "func minSize(width: CGFloat?, height: CGFloat?) -> UIHostingConfiguration<Content, Background>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/swiftui/uihostingconfiguration/minsize()",
                    "title": "func minSize() -> UIHostingConfiguration<Content, Background>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/uihostingconfiguration",
                "title": "UIHostingConfiguration",
                "type": "struct"
              },
              {
                "title": "Adding UIKit views to SwiftUI view hierarchies",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating and updating the view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentable/makeuiview(context:)",
                    "title": "func makeUIView(context: Self.Context) -> Self.UIViewType",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentable/updateuiview(_:context:)",
                    "title": "func updateUIView(Self.UIViewType, context: Self.Context)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentable/context",
                    "title": "UIViewRepresentable.Context",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentable/uiviewtype",
                    "title": "UIViewType",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Specifying a size",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentable/sizethatfits(_:uiview:context:)",
                    "title": "func sizeThatFits(ProposedViewSize, uiView: Self.UIViewType, context: Self.Context) -> CGSize?",
                    "type": "method"
                  },
                  {
                    "title": "Cleaning up the view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentable/dismantleuiview(_:coordinator:)",
                    "title": "static func dismantleUIView(Self.UIViewType, coordinator: Self.Coordinator)",
                    "type": "method"
                  },
                  {
                    "title": "Providing a custom coordinator object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentable/makecoordinator()",
                    "title": "func makeCoordinator() -> Self.Coordinator",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentable/coordinator",
                    "title": "Coordinator",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Performing layout",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentable/layoutoptions",
                    "title": "UIViewRepresentable.LayoutOptions",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/swiftui/uiviewrepresentable",
                "title": "UIViewRepresentable",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Coordinating view-related interactions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentablecontext/coordinator",
                    "title": "let coordinator: Representable.Coordinator",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentablecontext/transaction",
                    "title": "var transaction: Transaction",
                    "type": "property"
                  },
                  {
                    "title": "Getting the current environment data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentablecontext/environment",
                    "title": "var environment: EnvironmentValues",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewrepresentablecontext/animate(changes:completion:)",
                    "title": "func animate(changes: () -> Void, completion: (() -> Void)?)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/uiviewrepresentablecontext",
                "title": "UIViewRepresentableContext",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Creating and updating the view controller",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentable/makeuiviewcontroller(context:)",
                    "title": "func makeUIViewController(context: Self.Context) -> Self.UIViewControllerType",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentable/updateuiviewcontroller(_:context:)",
                    "title": "func updateUIViewController(Self.UIViewControllerType, context: Self.Context)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentable/context",
                    "title": "UIViewControllerRepresentable.Context",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentable/uiviewcontrollertype",
                    "title": "UIViewControllerType",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Specifying a size",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentable/sizethatfits(_:uiviewcontroller:context:)",
                    "title": "func sizeThatFits(ProposedViewSize, uiViewController: Self.UIViewControllerType, context: Self.Context) -> CGSize?",
                    "type": "method"
                  },
                  {
                    "title": "Cleaning up the view controller",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentable/dismantleuiviewcontroller(_:coordinator:)",
                    "title": "static func dismantleUIViewController(Self.UIViewControllerType, coordinator: Self.Coordinator)",
                    "type": "method"
                  },
                  {
                    "title": "Providing a custom coordinator object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentable/makecoordinator()",
                    "title": "func makeCoordinator() -> Self.Coordinator",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentable/coordinator",
                    "title": "Coordinator",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Performing layout",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentable/layoutoptions",
                    "title": "UIViewControllerRepresentable.LayoutOptions",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/swiftui/uiviewcontrollerrepresentable",
                "title": "UIViewControllerRepresentable",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Coordinating view controller interactions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentablecontext/coordinator",
                    "title": "let coordinator: Representable.Coordinator",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentablecontext/transaction",
                    "title": "var transaction: Transaction",
                    "type": "property"
                  },
                  {
                    "title": "Getting the environment data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentablecontext/environment",
                    "title": "var environment: EnvironmentValues",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uiviewcontrollerrepresentablecontext/animate(changes:completion:)",
                    "title": "func animate(changes: () -> Void, completion: (() -> Void)?)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/uiviewcontrollerrepresentablecontext",
                "title": "UIViewControllerRepresentableContext",
                "type": "struct"
              },
              {
                "title": "Integrate gesture recognizer into SwiftUI view hierarchies",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Associated Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentable/coordinator",
                    "title": "Coordinator",
                    "type": "associatedtype"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentable/uigesturerecognizertype",
                    "title": "UIGestureRecognizerType",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentable/handleuigesturerecognizeraction(_:context:)",
                    "title": "func handleUIGestureRecognizerAction(Self.UIGestureRecognizerType, context: Self.Context)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentable/makecoordinator(converter:)",
                    "title": "func makeCoordinator(converter: Self.CoordinateSpaceConverter) -> Self.Coordinator",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentable/makeuigesturerecognizer(context:)",
                    "title": "func makeUIGestureRecognizer(context: Self.Context) -> Self.UIGestureRecognizerType",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentable/updateuigesturerecognizer(_:context:)",
                    "title": "func updateUIGestureRecognizer(Self.UIGestureRecognizerType, context: Self.Context)",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentable/context",
                    "title": "UIGestureRecognizerRepresentable.Context",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentable/coordinatespaceconverter",
                    "title": "UIGestureRecognizerRepresentable.CoordinateSpaceConverter",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/swiftui/uigesturerecognizerrepresentable",
                "title": "UIGestureRecognizerRepresentable",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentablecontext/converter",
                    "title": "let converter: UIGestureRecognizerRepresentableCoordinateSpaceConverter",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentablecontext/coordinator",
                    "title": "let coordinator: Representable.Coordinator",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/uigesturerecognizerrepresentablecontext",
                "title": "UIGestureRecognizerRepresentableContext",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentablecoordinatespaceconverter/locallocation",
                    "title": "var localLocation: CGPoint",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentablecoordinatespaceconverter/localtranslation",
                    "title": "var localTranslation: CGPoint?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentablecoordinatespaceconverter/localvelocity",
                    "title": "var localVelocity: CGPoint?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentablecoordinatespaceconverter/convert(globalpoint:to:)",
                    "title": "func convert(globalPoint: CGPoint, to: some CoordinateSpaceProtocol) -> CGPoint",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentablecoordinatespaceconverter/location(in:)",
                    "title": "func location(in: some CoordinateSpaceProtocol) -> CGPoint",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentablecoordinatespaceconverter/translation(in:)",
                    "title": "func translation(in: some CoordinateSpaceProtocol) -> CGPoint?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uigesturerecognizerrepresentablecoordinatespaceconverter/velocity(in:)",
                    "title": "func velocity(in: some CoordinateSpaceProtocol) -> CGPoint?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/uigesturerecognizerrepresentablecoordinatespaceconverter",
                "title": "UIGestureRecognizerRepresentableCoordinateSpaceConverter",
                "type": "struct"
              },
              {
                "title": "Sharing configuration information",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Managing the keys",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uitraitbridgedenvironmentkey/read(from:)",
                    "title": "static func read(from: UITraitCollection) -> Self.Value",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/uitraitbridgedenvironmentkey/write(to:value:)",
                    "title": "static func write(to: inout any UIMutableTraits, value: Self.Value)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/uitraitbridgedenvironmentkey",
                "title": "UITraitBridgedEnvironmentKey",
                "type": "protocol"
              },
              {
                "title": "Hosting an ornament in UIKit",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a hosting ornament",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingornament/rootview",
                    "title": "var rootView: Content",
                    "type": "property"
                  },
                  {
                    "title": "Setting the alignment",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingornament/contentalignment",
                    "title": "var contentAlignment: Alignment",
                    "type": "property"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingornament/init(sceneanchor:contentalignment:content:)",
                    "title": "init(sceneAnchor: UnitPoint, contentAlignment: Alignment, content: () -> Content)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/uihostingornament/sceneanchor",
                    "title": "var sceneAnchor: UnitPoint",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/uihostingornament",
                "title": "UIHostingOrnament",
                "type": "class"
              },
              {
                "path": "/documentation/swiftui/uiornament",
                "title": "UIOrnament",
                "type": "class"
              }
            ],
            "path": "/documentation/swiftui/uikit-integration",
            "title": "UIKit integration",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Displaying SwiftUI views in WatchKit",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a hosting controller object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkhostingcontroller/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Getting the root view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkhostingcontroller/body",
                    "title": "var body: Body",
                    "type": "property"
                  },
                  {
                    "title": "Updating the root view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkhostingcontroller/updatebodyifneeded()",
                    "title": "func updateBodyIfNeeded()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/wkhostingcontroller/setneedsbodyupdate()",
                    "title": "func setNeedsBodyUpdate()",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/wkhostingcontroller",
                "title": "WKHostingController",
                "type": "class"
              },
              {
                "children": [
                  {
                    "title": "Creating a hosting controller object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkusernotificationhostingcontroller/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Getting the root view",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkusernotificationhostingcontroller/body",
                    "title": "var body: Body",
                    "type": "property"
                  },
                  {
                    "title": "Configuring the notification",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkusernotificationhostingcontroller/coalesceddescriptionformat",
                    "title": "class var coalescedDescriptionFormat: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/wkusernotificationhostingcontroller/isinteractive",
                    "title": "class var isInteractive: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/wkusernotificationhostingcontroller/sashcolor",
                    "title": "class var sashColor: Color?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/wkusernotificationhostingcontroller/subtitlecolor",
                    "title": "class var subtitleColor: Color?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/wkusernotificationhostingcontroller/titlecolor",
                    "title": "class var titleColor: Color?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/wkusernotificationhostingcontroller/wantssashblur",
                    "title": "class var wantsSashBlur: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/wkusernotificationhostingcontroller",
                "title": "WKUserNotificationHostingController",
                "type": "class"
              },
              {
                "title": "Adding WatchKit views to SwiftUI view hierarchies",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating and updating the interface object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkinterfaceobjectrepresentable/makewkinterfaceobject(context:)",
                    "title": "func makeWKInterfaceObject(context: Self.Context) -> Self.WKInterfaceObjectType",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/wkinterfaceobjectrepresentable/updatewkinterfaceobject(_:context:)",
                    "title": "func updateWKInterfaceObject(Self.WKInterfaceObjectType, context: Self.Context)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/wkinterfaceobjectrepresentable/context",
                    "title": "WKInterfaceObjectRepresentable.Context",
                    "type": "typealias"
                  },
                  {
                    "title": "Cleaning up the interface object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkinterfaceobjectrepresentable/dismantlewkinterfaceobject(_:coordinator:)",
                    "title": "static func dismantleWKInterfaceObject(Self.WKInterfaceObjectType, coordinator: Self.Coordinator)",
                    "type": "method"
                  },
                  {
                    "title": "Providing a custom coordinator object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkinterfaceobjectrepresentable/makecoordinator()",
                    "title": "func makeCoordinator() -> Self.Coordinator",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/swiftui/wkinterfaceobjectrepresentable/coordinator",
                    "title": "Coordinator",
                    "type": "associatedtype"
                  },
                  {
                    "path": "/documentation/swiftui/wkinterfaceobjectrepresentable/wkinterfaceobjecttype",
                    "title": "WKInterfaceObjectType",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/wkinterfaceobjectrepresentable",
                "title": "WKInterfaceObjectRepresentable",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Coordinating interactions",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkinterfaceobjectrepresentablecontext/coordinator",
                    "title": "let coordinator: Representable.Coordinator",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/wkinterfaceobjectrepresentablecontext/transaction",
                    "title": "var transaction: Transaction",
                    "type": "property"
                  },
                  {
                    "title": "Getting the current environment data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/wkinterfaceobjectrepresentablecontext/environment",
                    "title": "var environment: EnvironmentValues",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/wkinterfaceobjectrepresentablecontext",
                "title": "WKInterfaceObjectRepresentableContext",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/watchkit-integration",
            "title": "WatchKit integration",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Accessing Apple Pay and Wallet",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/passkit/paywithapplepaybutton",
                "title": "PayWithApplePayButton",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/passkit/addpasstowalletbutton",
                "title": "AddPassToWalletButton",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/passkit/verifyidentitywithwalletbutton",
                "title": "VerifyIdentityWithWalletButton",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/addordertowalletbuttonstyle(_:)",
                "title": "func addOrderToWalletButtonStyle(AddOrderToWalletButtonStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/addpasstowalletbuttonstyle(_:)",
                "title": "func addPassToWalletButtonStyle(AddPassToWalletButtonStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onapplepaycouponcodechange(perform:)",
                "title": "func onApplePayCouponCodeChange(perform: (String) async -> PKPaymentRequestCouponCodeUpdate) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onapplepaypaymentmethodchange(perform:)",
                "title": "func onApplePayPaymentMethodChange(perform: (PKPaymentMethod) async -> PKPaymentRequestPaymentMethodUpdate) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onapplepayshippingcontactchange(perform:)",
                "title": "func onApplePayShippingContactChange(perform: (PKContact) async -> PKPaymentRequestShippingContactUpdate) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onapplepayshippingmethodchange(perform:)",
                "title": "func onApplePayShippingMethodChange(perform: (PKShippingMethod) async -> PKPaymentRequestShippingMethodUpdate) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/paylaterviewaction(_:)",
                "title": "func payLaterViewAction(PayLaterViewAction) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/paylaterviewdisplaystyle(_:)",
                "title": "func payLaterViewDisplayStyle(PayLaterViewDisplayStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/paywithapplepaybuttonstyle(_:)",
                "title": "func payWithApplePayButtonStyle(PayWithApplePayButtonStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/verifyidentitywithwalletbuttonstyle(_:)",
                "title": "func verifyIdentityWithWalletButtonStyle(VerifyIdentityWithWalletButtonStyle) -> some View",
                "type": "method"
              },
              {
                "external": true,
                "path": "/documentation/passkit/asyncshareablepassconfiguration",
                "title": "AsyncShareablePassConfiguration",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/transactiontask(_:action:)",
                "title": "func transactionTask(CredentialTransaction.Configuration?, action: (CredentialTransaction) async -> Void) -> some View",
                "type": "method"
              },
              {
                "title": "Authorizing and authenticating",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/localauthentication/localauthenticationview",
                "title": "LocalAuthenticationView",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/authenticationservices/signinwithapplebutton",
                "title": "SignInWithAppleButton",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/signinwithapplebuttonstyle(_:)",
                "title": "func signInWithAppleButtonStyle(SignInWithAppleButton.Style) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/authorizationcontroller",
                "title": "var authorizationController: AuthorizationController",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/webauthenticationsession",
                "title": "var webAuthenticationSession: WebAuthenticationSession",
                "type": "property"
              },
              {
                "title": "Configuring Family Sharing",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/familycontrols/familyactivitypicker",
                "title": "FamilyActivityPicker",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/familyactivitypicker(ispresented:selection:)",
                "title": "func familyActivityPicker(isPresented: Binding<Bool>, selection: Binding<FamilyActivitySelection>) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/familyactivitypicker(headertext:footertext:ispresented:selection:)",
                "title": "func familyActivityPicker(headerText: String?, footerText: String?, isPresented: Binding<Bool>, selection: Binding<FamilyActivitySelection>) -> some View",
                "type": "method"
              },
              {
                "title": "Reporting on device activity",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/deviceactivity/deviceactivityreport",
                "title": "DeviceActivityReport",
                "type": "struct"
              },
              {
                "title": "Working with managed devices",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/managedcontentstyle(_:)",
                "title": "func managedContentStyle(ManagedContentStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/automateddeviceenrollmentaddition(ispresented:)",
                "title": "func automatedDeviceEnrollmentAddition(isPresented: Binding<Bool>) -> some View",
                "type": "method"
              },
              {
                "title": "Creating graphics",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/charts/chart",
                "title": "Chart",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/scenekit/sceneview",
                "title": "SceneView",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/spritekit/spriteview",
                "title": "SpriteView",
                "type": "struct"
              },
              {
                "title": "Getting location information",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/corelocationui/locationbutton",
                "title": "LocationButton",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/mapkit/map",
                "title": "Map",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/mapstyle(_:)",
                "title": "func mapStyle(MapStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapscope(_:)",
                "title": "func mapScope(Namespace.ID) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapfeatureselectiondisabled(_:)",
                "title": "func mapFeatureSelectionDisabled((MapFeature) -> Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapfeatureselectionaccessory(_:)",
                "title": "func mapFeatureSelectionAccessory(MapItemDetailSelectionAccessoryStyle?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapfeatureselectioncontent(content:)",
                "title": "func mapFeatureSelectionContent(content: (MapFeature) -> some MapContent) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapcontrols(_:)",
                "title": "func mapControls(() -> some View) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapcontrolvisibility(_:)",
                "title": "func mapControlVisibility(Visibility) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapcamerakeyframeanimator(trigger:keyframes:)",
                "title": "func mapCameraKeyframeAnimator(trigger: some Equatable, keyframes: (MapCamera) -> some Keyframes<MapCamera>) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/lookaroundviewer(ispresented:scene:allowsnavigation:showsroadlabels:pointsofinterest:ondismiss:)",
                "title": "func lookAroundViewer(isPresented: Binding<Bool>, scene: Binding<MKLookAroundScene?>, allowsNavigation: Bool, showsRoadLabels: Bool, pointsOfInterest: PointOfInterestCategories, onDismiss: (() -> Void)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/lookaroundviewer(ispresented:initialscene:allowsnavigation:showsroadlabels:pointsofinterest:ondismiss:)",
                "title": "func lookAroundViewer(isPresented: Binding<Bool>, initialScene: MKLookAroundScene?, allowsNavigation: Bool, showsRoadLabels: Bool, pointsOfInterest: PointOfInterestCategories, onDismiss: (() -> Void)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/onmapcamerachange(frequency:_:)",
                "title": "func onMapCameraChange(frequency:_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapitemdetailpopover(ispresented:item:displaysmap:attachmentanchor:)",
                "title": "func mapItemDetailPopover(isPresented: Binding<Bool>, item: MKMapItem?, displaysMap: Bool, attachmentAnchor: PopoverAttachmentAnchor) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapitemdetailpopover(ispresented:item:displaysmap:attachmentanchor:arrowedge:)",
                "title": "func mapItemDetailPopover(isPresented: Binding<Bool>, item: MKMapItem?, displaysMap: Bool, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapitemdetailpopover(item:displaysmap:attachmentanchor:)",
                "title": "func mapItemDetailPopover(item: Binding<MKMapItem?>, displaysMap: Bool, attachmentAnchor: PopoverAttachmentAnchor) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapitemdetailpopover(item:displaysmap:attachmentanchor:arrowedge:)",
                "title": "func mapItemDetailPopover(item: Binding<MKMapItem?>, displaysMap: Bool, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapitemdetailsheet(ispresented:item:displaysmap:)",
                "title": "func mapItemDetailSheet(isPresented: Binding<Bool>, item: MKMapItem?, displaysMap: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/mapitemdetailsheet(item:displaysmap:)",
                "title": "func mapItemDetailSheet(item: Binding<MKMapItem?>, displaysMap: Bool) -> some View",
                "type": "method"
              },
              {
                "title": "Displaying media",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/homekit/cameraview",
                "title": "CameraView",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/watchkit/nowplayingview",
                "title": "NowPlayingView",
                "type": "struct"
              },
              {
                "external": true,
                "path": "/documentation/avkit/videoplayer",
                "title": "VideoPlayer",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/continuitydevicepicker(ispresented:ondidconnect:)",
                "title": "func continuityDevicePicker(isPresented: Binding<Bool>, onDidConnect: ((AVContinuityDevice?) -> Void)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/cameraanchor(isactive:)",
                "title": "func cameraAnchor(isActive: Bool) -> some View",
                "type": "method"
              },
              {
                "title": "Selecting photos",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/photosui/photospicker",
                "title": "PhotosPicker",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/photospicker(ispresented:selection:matching:preferreditemencoding:)",
                "title": "func photosPicker(isPresented: Binding<Bool>, selection: Binding<PhotosPickerItem?>, matching: PHPickerFilter?, preferredItemEncoding: PhotosPickerItem.EncodingDisambiguationPolicy) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/photospicker(ispresented:selection:matching:preferreditemencoding:photolibrary:)",
                "title": "func photosPicker(isPresented: Binding<Bool>, selection: Binding<PhotosPickerItem?>, matching: PHPickerFilter?, preferredItemEncoding: PhotosPickerItem.EncodingDisambiguationPolicy, photoLibrary: PHPhotoLibrary) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/photospicker(ispresented:selection:maxselectioncount:selectionbehavior:matching:preferreditemencoding:)",
                "title": "func photosPicker(isPresented: Binding<Bool>, selection: Binding<[PhotosPickerItem]>, maxSelectionCount: Int?, selectionBehavior: PhotosPickerSelectionBehavior, matching: PHPickerFilter?, preferredItemEncoding: PhotosPickerItem.EncodingDisambiguationPolicy) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/photospicker(ispresented:selection:maxselectioncount:selectionbehavior:matching:preferreditemencoding:photolibrary:)",
                "title": "func photosPicker(isPresented: Binding<Bool>, selection: Binding<[PhotosPickerItem]>, maxSelectionCount: Int?, selectionBehavior: PhotosPickerSelectionBehavior, matching: PHPickerFilter?, preferredItemEncoding: PhotosPickerItem.EncodingDisambiguationPolicy, photoLibrary: PHPhotoLibrary) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/photospickeraccessoryvisibility(_:edges:)",
                "title": "func photosPickerAccessoryVisibility(Visibility, edges: Edge.Set) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/photospickerdisabledcapabilities(_:)",
                "title": "func photosPickerDisabledCapabilities(PHPickerCapabilities) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/photospickerstyle(_:)",
                "title": "func photosPickerStyle(PhotosPickerStyle) -> some View",
                "type": "method"
              },
              {
                "title": "Previewing content",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/quicklookpreview(_:)",
                "title": "func quickLookPreview(Binding<URL?>) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/quicklookpreview(_:in:)",
                "title": "func quickLookPreview<Items>(Binding<Items.Element?>, in: Items) -> some View",
                "type": "method"
              },
              {
                "title": "Interacting with networked devices",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/devicediscoveryui/devicepicker",
                "title": "DevicePicker",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/devicepickersupports",
                "title": "var devicePickerSupports: DevicePickerSupportedAction",
                "type": "property"
              },
              {
                "title": "Configuring a Live Activity",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/activitysystemactionforegroundcolor(_:)",
                "title": "func activitySystemActionForegroundColor(Color?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/activitybackgroundtint(_:)",
                "title": "func activityBackgroundTint(Color?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/isactivityfullscreen",
                "title": "var isActivityFullscreen: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/activityfamily",
                "title": "var activityFamily: ActivityFamily",
                "type": "property"
              },
              {
                "title": "Interacting with the App Store and Apple Music",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/appstoreoverlay(ispresented:configuration:)",
                "title": "func appStoreOverlay(isPresented: Binding<Bool>, configuration: () -> SKOverlay.Configuration) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/managesubscriptionssheet(ispresented:)",
                "title": "func manageSubscriptionsSheet(isPresented: Binding<Bool>) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/refundrequestsheet(for:ispresented:ondismiss:)",
                "title": "func refundRequestSheet(for: Transaction.ID, isPresented: Binding<Bool>, onDismiss: ((Result<Transaction.RefundRequestStatus, Transaction.RefundRequestError>) -> ())?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/offercoderedemption(ispresented:oncompletion:)",
                "title": "func offerCodeRedemption(isPresented: Binding<Bool>, onCompletion: (Result<Void, any Error>) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/musicsubscriptionoffer(ispresented:options:onloadcompletion:)",
                "title": "func musicSubscriptionOffer(isPresented: Binding<Bool>, options: MusicSubscriptionOffer.Options, onLoadCompletion: ((any Error)?) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/currententitlementtask(for:priority:action:)",
                "title": "func currentEntitlementTask(for: String, priority: TaskPriority, action: (EntitlementTaskState<VerificationResult<Transaction>?>) async -> ()) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/inapppurchaseoptions(_:)",
                "title": "func inAppPurchaseOptions(((Product) async -> Set<Product.PurchaseOption>)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/managesubscriptionssheet(ispresented:subscriptiongroupid:)",
                "title": "func manageSubscriptionsSheet(isPresented: Binding<Bool>, subscriptionGroupID: String) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/oninapppurchasecompletion(perform:)",
                "title": "func onInAppPurchaseCompletion(perform: ((Product, Result<Product.PurchaseResult, any Error>) async -> ())?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/oninapppurchasestart(perform:)",
                "title": "func onInAppPurchaseStart(perform: ((Product) async -> ())?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/producticonborder()",
                "title": "func productIconBorder() -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/productviewstyle(_:)",
                "title": "func productViewStyle(some ProductViewStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/productdescription(_:)",
                "title": "func productDescription(Visibility) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/storebutton(_:for:)",
                "title": "func storeButton(Visibility, for: StoreButtonKind...) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/storeproducttask(for:priority:action:)",
                "title": "func storeProductTask(for: Product.ID, priority: TaskPriority, action: (Product.TaskState) async -> ()) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/storeproductstask(for:priority:action:)",
                "title": "func storeProductsTask(for: some Collection<String> & Equatable & Sendable, priority: TaskPriority, action: (Product.CollectionTaskState) async -> ()) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstatustask(for:priority:action:)",
                "title": "func subscriptionStatusTask(for: String, priority: TaskPriority, action: (EntitlementTaskState<[Product.SubscriptionInfo.Status]>) async -> ()) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstorebuttonlabel(_:)",
                "title": "func subscriptionStoreButtonLabel(SubscriptionStoreButtonLabel) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstorecontrolicon(icon:)",
                "title": "func subscriptionStoreControlIcon(icon: (Product, Product.SubscriptionInfo) -> some View) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstorecontrolstyle(_:)",
                "title": "func subscriptionStoreControlStyle(some SubscriptionStoreControlStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstorecontrolstyle(_:placement:)",
                "title": "func subscriptionStoreControlStyle<S>(S, placement: S.Placement) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstoreoptiongroupstyle(_:)",
                "title": "func subscriptionStoreOptionGroupStyle(some SubscriptionOptionGroupStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstorepickeritembackground(_:)",
                "title": "func subscriptionStorePickerItemBackground(some ShapeStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstorepickeritembackground(_:in:)",
                "title": "func subscriptionStorePickerItemBackground(some ShapeStyle, in: some Shape) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstorepolicydestination(for:destination:)",
                "title": "func subscriptionStorePolicyDestination(for: SubscriptionStorePolicyKind, destination: () -> some View) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstorepolicydestination(url:for:)",
                "title": "func subscriptionStorePolicyDestination(url: URL, for: SubscriptionStorePolicyKind) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstorepolicyforegroundstyle(_:)",
                "title": "func subscriptionStorePolicyForegroundStyle(some ShapeStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstorepolicyforegroundstyle(_:_:)",
                "title": "func subscriptionStorePolicyForegroundStyle(some ShapeStyle, some ShapeStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstoresigninaction(_:)",
                "title": "func subscriptionStoreSignInAction((() -> ())?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionstorecontrolbackground(_:)",
                "title": "func subscriptionStoreControlBackground(_:)",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/subscriptionpromotionaloffer(offer:signature:)",
                "title": "func subscriptionPromotionalOffer(offer: (Product, Product.SubscriptionInfo) -> Product.SubscriptionOffer?, signature: (Product, Product.SubscriptionInfo, Product.SubscriptionOffer) async throws -> Product.SubscriptionOffer.Signature) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/preferredsubscriptionoffer(_:)",
                "title": "func preferredSubscriptionOffer((Product, Product.SubscriptionInfo, [Product.SubscriptionOffer]) -> Product.SubscriptionOffer?) -> some View",
                "type": "method"
              },
              {
                "title": "Accessing health data",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/healthdataaccessrequest(store:objecttype:predicate:trigger:completion:)",
                "title": "func healthDataAccessRequest(store: HKHealthStore, objectType: HKObjectType, predicate: NSPredicate?, trigger: some Equatable, completion: (Result<Bool, any Error>) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/healthdataaccessrequest(store:readtypes:trigger:completion:)",
                "title": "func healthDataAccessRequest(store: HKHealthStore, readTypes: Set<HKObjectType>, trigger: some Equatable, completion: (Result<Bool, any Error>) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/healthdataaccessrequest(store:sharetypes:readtypes:trigger:completion:)",
                "title": "func healthDataAccessRequest(store: HKHealthStore, shareTypes: Set<HKSampleType>, readTypes: Set<HKObjectType>?, trigger: some Equatable, completion: (Result<Bool, any Error>) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/workoutpreview(_:ispresented:)",
                "title": "func workoutPreview(WorkoutPlan, isPresented: Binding<Bool>) -> some View",
                "type": "method"
              },
              {
                "title": "Providing tips",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/view/popovertip(_:arrowedge:action:)",
                "title": "func popoverTip((any Tip)?, arrowEdge: Edge?, action: (Tips.Action) -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/tipbackground(_:)",
                "title": "func tipBackground(some ShapeStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/tipcornerradius(_:antialiased:)",
                "title": "func tipCornerRadius(CGFloat, antialiased: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/tipimagesize(_:)",
                "title": "func tipImageSize(CGSize) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/tipviewstyle(_:)",
                "title": "func tipViewStyle(some TipViewStyle) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/tipimagestyle(_:)",
                "title": "func tipImageStyle<S>(S) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/tipimagestyle(_:_:)",
                "title": "func tipImageStyle<S1, S2>(S1, S2) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/tipimagestyle(_:_:_:)",
                "title": "func tipImageStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                "type": "method"
              },
              {
                "title": "Showing a translation",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/translationpresentation(ispresented:text:attachmentanchor:arrowedge:replacementaction:)",
                "title": "func translationPresentation(isPresented: Binding<Bool>, text: String, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, replacementAction: ((String) -> Void)?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/translationtask(_:action:)",
                "title": "func translationTask(TranslationSession.Configuration?, action: (TranslationSession) async -> Void) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/translationtask(source:target:action:)",
                "title": "func translationTask(source: Locale.Language?, target: Locale.Language?, action: (TranslationSession) async -> Void) -> some View",
                "type": "method"
              },
              {
                "title": "Presenting journaling suggestions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/journalingsuggestionspicker(ispresented:oncompletion:)",
                "title": "func journalingSuggestionsPicker(isPresented: Binding<Bool>, onCompletion: (JournalingSuggestion) async -> Void) -> some View",
                "type": "method"
              },
              {
                "title": "Managing contact access",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/contactaccessbuttoncaption(_:)",
                "title": "func contactAccessButtonCaption(ContactAccessButton.Caption) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/contactaccessbuttonstyle(_:)",
                "title": "func contactAccessButtonStyle(ContactAccessButton.Style) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/contactaccesspicker(ispresented:completionhandler:)",
                "title": "func contactAccessPicker(isPresented: Binding<Bool>, completionHandler: ([String]) -> ()) -> some View",
                "type": "method"
              },
              {
                "title": "Handling game controller events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/handlesgamecontrollerevents(matching:)",
                "title": "func handlesGameControllerEvents(matching: GCUIEventTypes) -> some View",
                "type": "method"
              },
              {
                "title": "Creating a tabletop game",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/tabletopgame(_:parent:automaticupdate:)",
                "title": "func tabletopGame(TabletopGame, parent: Entity, automaticUpdate: Bool) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/tabletopgame(_:parent:automaticupdate:interaction:)",
                "title": "func tabletopGame(TabletopGame, parent: Entity, automaticUpdate: Bool, interaction: (TabletopInteraction.Value) -> any TabletopInteraction.Delegate) -> some View",
                "type": "method"
              },
              {
                "title": "Configuring camera controls",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/environmentvalues/realityviewcameracontrols",
                "title": "var realityViewCameraControls: CameraControls",
                "type": "property"
              },
              {
                "path": "/documentation/swiftui/view/realityviewcameracontrols(_:)",
                "title": "func realityViewCameraControls(CameraControls) -> some View",
                "type": "method"
              },
              {
                "title": "Interacting with transactions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/transactionpicker(ispresented:selection:)",
                "title": "func transactionPicker(isPresented: Binding<Bool>, selection: Binding<[Transaction]>) -> some View",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/technology-specific-views",
            "title": "Technology-specific views",
            "type": "collection"
          },
          {
            "title": "Tool support",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/xcode/previewing-your-apps-interface-in-xcode",
                "title": "Previewing your app’s interface in Xcode",
                "type": "article"
              },
              {
                "title": "Creating a preview",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/preview(_:body:)",
                "title": "macro Preview(String?, body: () -> any View)",
                "type": "macro"
              },
              {
                "path": "/documentation/swiftui/preview(_:traits:_:body:)",
                "title": "macro Preview(String?, traits: PreviewTrait<Preview.ViewTraits>, PreviewTrait<Preview.ViewTraits>..., body: () -> any View)",
                "type": "macro"
              },
              {
                "path": "/documentation/swiftui/preview(_:traits:body:cameras:)",
                "title": "macro Preview(String?, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> any View, cameras: () -> [PreviewCamera])",
                "type": "macro"
              },
              {
                "title": "Creating a preview in the context of a scene",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/preview(_:immersionstyle:traits:body:)",
                "title": "macro Preview<Style>(String?, immersionStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> any View)",
                "type": "macro"
              },
              {
                "path": "/documentation/swiftui/preview(_:immersionstyle:traits:body:cameras:)",
                "title": "macro Preview<Style>(String?, immersionStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> any View, cameras: () -> [PreviewCamera])",
                "type": "macro"
              },
              {
                "path": "/documentation/swiftui/preview(_:windowstyle:traits:body:)",
                "title": "macro Preview<Style>(String?, windowStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> any View)",
                "type": "macro"
              },
              {
                "path": "/documentation/swiftui/preview(_:windowstyle:traits:body:cameras:)",
                "title": "macro Preview<Style>(String?, windowStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> any View, cameras: () -> [PreviewCamera])",
                "type": "macro"
              },
              {
                "title": "Defining a preview",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/previewable()",
                "title": "macro Previewable()",
                "type": "macro"
              },
              {
                "children": [
                  {
                    "title": "Creating a preview",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/previewprovider/previews-swift.type.property",
                    "title": "static var previews: Self.Previews",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/previewprovider/previews-swift.associatedtype",
                    "title": "Previews",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Specifying the platform",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/previewprovider/platform",
                    "title": "static var platform: PreviewPlatform?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/previewprovider",
                "title": "PreviewProvider",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Getting an operating system",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/previewplatform/ios",
                    "title": "case iOS",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/previewplatform/macos",
                    "title": "case macOS",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/previewplatform/tvos",
                    "title": "case tvOS",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/swiftui/previewplatform/watchos",
                    "title": "case watchOS",
                    "type": "case"
                  }
                ],
                "path": "/documentation/swiftui/previewplatform",
                "title": "PreviewPlatform",
                "type": "enum"
              },
              {
                "path": "/documentation/swiftui/view/previewdisplayname(_:)",
                "title": "func previewDisplayName(String?) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Associated Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/previewmodifier/body",
                    "title": "Body",
                    "type": "associatedtype"
                  },
                  {
                    "path": "/documentation/swiftui/previewmodifier/context",
                    "title": "Context",
                    "type": "associatedtype"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/previewmodifier/body(content:context:)",
                    "title": "func body(content: Self.Content, context: Self.Context) -> Self.Body",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/previewmodifier/content",
                    "title": "PreviewModifier.Content",
                    "type": "typealias"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/previewmodifier/makesharedcontext()",
                    "title": "static func makeSharedContext() async throws -> Self.Context",
                    "type": "method"
                  }
                ],
                "path": "/documentation/swiftui/previewmodifier",
                "title": "PreviewModifier",
                "type": "protocol"
              },
              {
                "path": "/documentation/swiftui/previewmodifiercontent",
                "title": "PreviewModifierContent",
                "type": "struct"
              },
              {
                "title": "Customizing a preview",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/previewdevice(_:)",
                "title": "func previewDevice(PreviewDevice?) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/previewdevice",
                "title": "PreviewDevice",
                "type": "struct"
              },
              {
                "path": "/documentation/swiftui/view/previewlayout(_:)",
                "title": "func previewLayout(PreviewLayout) -> some View",
                "type": "method"
              },
              {
                "path": "/documentation/swiftui/view/previewinterfaceorientation(_:)",
                "title": "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Getting an orientation",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/interfaceorientation/portrait",
                    "title": "static let portrait: InterfaceOrientation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/interfaceorientation/portraitupsidedown",
                    "title": "static let portraitUpsideDown: InterfaceOrientation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/interfaceorientation/landscapeleft",
                    "title": "static let landscapeLeft: InterfaceOrientation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/interfaceorientation/landscaperight",
                    "title": "static let landscapeRight: InterfaceOrientation",
                    "type": "property"
                  }
                ],
                "path": "/documentation/swiftui/interfaceorientation",
                "title": "InterfaceOrientation",
                "type": "struct"
              },
              {
                "title": "Setting a context",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/swiftui/view/previewcontext(_:)",
                "title": "func previewContext<C>(C) -> some View",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Accessing a preview context",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/previewcontext/subscript(_:)",
                    "title": "subscript<Key>(Key.Type) -> Key.Value",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/swiftui/previewcontext",
                "title": "PreviewContext",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Setting a default",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/swiftui/previewcontextkey/defaultvalue",
                    "title": "static var defaultValue: Self.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/swiftui/previewcontextkey/value",
                    "title": "Value",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/swiftui/previewcontextkey",
                "title": "PreviewContextKey",
                "type": "protocol"
              }
            ],
            "path": "/documentation/swiftui/previews-in-xcode",
            "title": "Previews in Xcode",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Creating library items",
                "type": "groupMarker"
              },
              {
                "external": true,
                "path": "/documentation/developertoolssupport/librarycontentprovider",
                "title": "LibraryContentProvider",
                "type": "protocol"
              },
              {
                "external": true,
                "path": "/documentation/developertoolssupport/libraryitem",
                "title": "LibraryItem",
                "type": "struct"
              }
            ],
            "path": "/documentation/swiftui/xcode-library-customization",
            "title": "Xcode library customization",
            "type": "collection"
          },
          {
            "title": "Protocols",
            "type": "groupMarker"
          },
          {
            "beta": true,
            "children": [
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/glassbackgroundeffect/body",
                "title": "Body",
                "type": "associatedtype"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/glassbackgroundeffect/makebody(configuration:)",
                "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/glassbackgroundeffect/configuration",
                "title": "GlassBackgroundEffect.Configuration",
                "type": "typealias"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/glassbackgroundeffect/automatic",
                "title": "static var automatic: AutomaticGlassBackgroundEffect",
                "type": "property"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/glassbackgroundeffect/feathered",
                "title": "static var feathered: FeatheredGlassBackgroundEffect",
                "type": "property"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/glassbackgroundeffect/plate",
                "title": "static var plate: PlateGlassBackgroundEffect",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/glassbackgroundeffect/feathered(padding:softedgeradius:)",
                "title": "static func feathered(padding: CGFloat, softEdgeRadius: CGFloat?) -> FeatheredGlassBackgroundEffect",
                "type": "method"
              }
            ],
            "path": "/documentation/swiftui/glassbackgroundeffect",
            "title": "GlassBackgroundEffect",
            "type": "protocol"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "beta": true,
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/automaticglassbackgroundeffect/init()",
                "title": "init()",
                "type": "init"
              }
            ],
            "path": "/documentation/swiftui/automaticglassbackgroundeffect",
            "title": "AutomaticGlassBackgroundEffect",
            "type": "struct"
          },
          {
            "beta": true,
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/contenttoolbarplacement/tabviewsidebar",
                "title": "static let tabViewSidebar: ContentToolbarPlacement",
                "type": "property"
              }
            ],
            "path": "/documentation/swiftui/contenttoolbarplacement",
            "title": "ContentToolbarPlacement",
            "type": "struct"
          },
          {
            "beta": true,
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/featheredglassbackgroundeffect/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/featheredglassbackgroundeffect/init(padding:softedgeradius:)",
                "title": "init(padding: CGFloat, softEdgeRadius: CGFloat?)",
                "type": "init"
              }
            ],
            "path": "/documentation/swiftui/featheredglassbackgroundeffect",
            "title": "FeatheredGlassBackgroundEffect",
            "type": "struct"
          },
          {
            "beta": true,
            "children": [
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/glassbackgroundeffectconfiguration/content-swift.struct",
                "title": "GlassBackgroundEffectConfiguration.Content",
                "type": "struct"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/glassbackgroundeffectconfiguration/content-swift.property",
                "title": "let content: GlassBackgroundEffectConfiguration.Content",
                "type": "property"
              }
            ],
            "path": "/documentation/swiftui/glassbackgroundeffectconfiguration",
            "title": "GlassBackgroundEffectConfiguration",
            "type": "struct"
          },
          {
            "beta": true,
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/plateglassbackgroundeffect/init()",
                "title": "init()",
                "type": "init"
              }
            ],
            "path": "/documentation/swiftui/plateglassbackgroundeffect",
            "title": "PlateGlassBackgroundEffect",
            "type": "struct"
          },
          {
            "beta": true,
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/scrolltargetbehaviorproperties/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/scrolltargetbehaviorproperties/limitsscrolls",
                "title": "var limitsScrolls: Bool",
                "type": "property"
              }
            ],
            "path": "/documentation/swiftui/scrolltargetbehaviorproperties",
            "title": "ScrollTargetBehaviorProperties",
            "type": "struct"
          },
          {
            "beta": true,
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/scrolltargetbehaviorpropertiescontext/axes",
                "title": "var axes: Axis.Set",
                "type": "property"
              },
              {
                "beta": true,
                "path": "/documentation/swiftui/scrolltargetbehaviorpropertiescontext/environment",
                "title": "var environment: EnvironmentValues",
                "type": "property"
              }
            ],
            "path": "/documentation/swiftui/scrolltargetbehaviorpropertiescontext",
            "title": "ScrollTargetBehaviorPropertiesContext",
            "type": "struct"
          }
        ],
        "path": "/documentation/swiftui",
        "title": "SwiftUI",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
