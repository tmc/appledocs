{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/updates/swiftcharts",
            "title": "Swift Charts updates",
            "type": "article"
          },
          {
            "title": "Charts",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/charts/creating-a-chart-using-swift-charts",
            "title": "Creating a chart using Swift Charts",
            "type": "article"
          },
          {
            "title": "Marks",
            "type": "groupMarker"
          },
          {
            "title": "Vectorized plots",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/charts/creating-a-data-visualization-dashboard-with-swift-charts",
            "title": "Creating a data visualization dashboard with Swift Charts",
            "type": "sampleCode"
          },
          {
            "title": "Mark configuration",
            "type": "groupMarker"
          },
          {
            "title": "Labeled data",
            "type": "groupMarker"
          },
          {
            "title": "Scales",
            "type": "groupMarker"
          },
          {
            "title": "Axes",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/charts/customizing-axes-in-swift-charts",
            "title": "Customizing axes in Swift Charts",
            "type": "article"
          },
          {
            "title": "Axis marks",
            "type": "groupMarker"
          },
          {
            "title": "Annotations",
            "type": "groupMarker"
          },
          {
            "title": "Data bins",
            "type": "groupMarker"
          },
          {
            "title": "Chart management",
            "type": "groupMarker"
          },
          {
            "title": "Scrolling",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/charts",
        "title": "Swift Charts",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/updates/swiftcharts",
            "title": "Swift Charts updates",
            "type": "article"
          },
          {
            "title": "Charts",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/charts/creating-a-chart-using-swift-charts",
            "title": "Creating a chart using Swift Charts",
            "type": "article"
          },
          {
            "title": "Marks",
            "type": "groupMarker"
          },
          {
            "title": "Vectorized plots",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/charts/creating-a-data-visualization-dashboard-with-swift-charts",
            "title": "Creating a data visualization dashboard with Swift Charts",
            "type": "sampleCode"
          },
          {
            "title": "Mark configuration",
            "type": "groupMarker"
          },
          {
            "title": "Labeled data",
            "type": "groupMarker"
          },
          {
            "title": "Scales",
            "type": "groupMarker"
          },
          {
            "title": "Axes",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/charts/customizing-axes-in-swift-charts",
            "title": "Customizing axes in Swift Charts",
            "type": "article"
          },
          {
            "title": "Axis marks",
            "type": "groupMarker"
          },
          {
            "title": "Annotations",
            "type": "groupMarker"
          },
          {
            "title": "Data bins",
            "type": "groupMarker"
          },
          {
            "title": "Chart management",
            "type": "groupMarker"
          },
          {
            "title": "Scrolling",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/charts",
        "title": "Swift Charts",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/updates/swiftcharts",
            "title": "Swift Charts updates",
            "type": "article"
          },
          {
            "title": "Charts",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/charts/creating-a-chart-using-swift-charts",
            "title": "Creating a chart using Swift Charts",
            "type": "article"
          },
          {
            "path": "/documentation/charts/visualizing_your_app_s_data",
            "title": "Visualizing your appâ€™s data",
            "type": "sampleCode"
          },
          {
            "children": [
              {
                "title": "Creating a chart",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chart/init(content:)",
                "title": "init(content: () -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/chart/init(_:content:)",
                "title": "init<Data, C>(Data, content: (Data.Element) -> C)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/chart/init(_:id:content:)",
                "title": "init<Data, ID, C>(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> C)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/chart",
            "title": "Chart",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Styling marks",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontent/foregroundstyle(_:)",
                "title": "func foregroundStyle<S>(S) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/opacity(_:)",
                "title": "func opacity(Double) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/cornerradius(_:style:)",
                "title": "func cornerRadius(CGFloat, style: RoundedCornerStyle) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/linestyle(_:)",
                "title": "func lineStyle(StrokeStyle) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/interpolationmethod(_:)",
                "title": "func interpolationMethod(InterpolationMethod) -> some ChartContent",
                "type": "method"
              },
              {
                "title": "Positioning marks",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontent/offset(_:)",
                "title": "func offset(CGSize) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/offset(x:y:)",
                "title": "func offset(x: CGFloat, y: CGFloat) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/offset(x:ystart:yend:)",
                "title": "func offset(x: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/offset(xstart:xend:y:)",
                "title": "func offset(xStart: CGFloat, xEnd: CGFloat, y: CGFloat) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/offset(xstart:xend:ystart:yend:)",
                "title": "func offset(xStart: CGFloat, xEnd: CGFloat, yStart: CGFloat, yEnd: CGFloat) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/alignsmarkstyleswithplotarea(_:)",
                "title": "func alignsMarkStylesWithPlotArea(Bool) -> some ChartContent",
                "type": "method"
              },
              {
                "title": "Setting symbol appearance",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontent/symbol(_:)",
                "title": "func symbol<S>(S) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/symbol(symbol:)",
                "title": "func symbol<V>(symbol: () -> V) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/symbolsize(_:)-7s0vk",
                "title": "func symbolSize(CGSize) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/symbolsize(_:)-8dtyt",
                "title": "func symbolSize(CGFloat) -> some ChartContent",
                "type": "method"
              },
              {
                "title": "Encoding data into mark characteristics",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontent/foregroundstyle(by:)",
                "title": "func foregroundStyle<D>(by: PlottableValue<D>) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/linestyle(by:)",
                "title": "func lineStyle<D>(by: PlottableValue<D>) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/position(by:axis:span:)",
                "title": "func position<P>(by: PlottableValue<P>, axis: Axis?, span: MarkDimension) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/symbol(by:)",
                "title": "func symbol<D>(by: PlottableValue<D>) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/symbolsize(by:)",
                "title": "func symbolSize<D>(by: PlottableValue<D>) -> some ChartContent",
                "type": "method"
              },
              {
                "title": "Annotating marks",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontent/annotation(position:alignment:spacing:content:)-65emh",
                "title": "func annotation<C>(position: AnnotationPosition, alignment: Alignment, spacing: CGFloat?, content: () -> C) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/annotation(position:alignment:spacing:content:)-26b2f",
                "title": "func annotation<C>(position: AnnotationPosition, alignment: Alignment, spacing: CGFloat?, content: (AnnotationContext) -> C) -> some ChartContent",
                "type": "method"
              },
              {
                "title": "Masking and clipping",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontent/mask(content:)",
                "title": "func mask<C>(content: () -> C) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/clipshape(_:style:)",
                "title": "func clipShape(some Shape, style: FillStyle) -> some ChartContent",
                "type": "method"
              },
              {
                "title": "Configuring accessibility",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontent/accessibilityhidden(_:)",
                "title": "func accessibilityHidden(Bool) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/accessibilityidentifier(_:)",
                "title": "func accessibilityIdentifier(String) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/accessibilitylabel(_:)-40zjp",
                "title": "func accessibilityLabel(LocalizedStringKey) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/accessibilitylabel(_:)-5gk8d",
                "title": "func accessibilityLabel<S>(S) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/accessibilitylabel(_:)-28985",
                "title": "func accessibilityLabel(Text) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/accessibilityvalue(_:)-33c0e",
                "title": "func accessibilityValue(LocalizedStringKey) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/accessibilityvalue(_:)-4k545",
                "title": "func accessibilityValue<S>(S) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/accessibilityvalue(_:)-5g7o4",
                "title": "func accessibilityValue(Text) -> some ChartContent",
                "type": "method"
              },
              {
                "title": "Implementing chart content",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontent/body-swift.property",
                "title": "var body: Self.Body",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartcontent/body-swift.associatedtype",
                "title": "Body",
                "type": "associatedtype"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/anychartcontent/init(_:)",
                    "title": "init(any ChartContent)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/charts/anychartcontent/init(erasing:)",
                    "title": "init(erasing: some ChartContent)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/charts/anychartcontent",
                "title": "AnyChartContent",
                "type": "struct"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontent/annotation(position:alignment:spacing:overflowresolution:content:)-1kiow",
                "title": "func annotation<C>(position: AnnotationPosition, alignment: Alignment, spacing: CGFloat?, overflowResolution: AnnotationOverflowResolution, content: () -> C) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/annotation(position:alignment:spacing:overflowresolution:content:)-6w4p3",
                "title": "func annotation<C>(position: AnnotationPosition, alignment: Alignment, spacing: CGFloat?, overflowResolution: AnnotationOverflowResolution, content: (AnnotationContext) -> C) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/blur(radius:)",
                "title": "func blur(radius: CGFloat) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/compositinglayer()",
                "title": "func compositingLayer() -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/compositinglayer(style:)",
                "title": "func compositingLayer<V>(style: (PlaceholderContentView<Self>) -> V) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/shadow(color:radius:x:y:)",
                "title": "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontent/zindex(_:)",
                "title": "func zIndex(Double) -> some ChartContent",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/chartcontent",
            "title": "ChartContent",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Building chart content",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontentbuilder/buildpartialblock(first:)",
                "title": "static func buildPartialBlock<T>(first: T) -> T",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontentbuilder/buildpartialblock(accumulated:next:)",
                "title": "static func buildPartialBlock(accumulated: some ChartContent, next: some ChartContent) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontentbuilder/buildblock()",
                "title": "static func buildBlock() -> some ChartContent",
                "type": "method"
              },
              {
                "title": "Building conditionally",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontentbuilder/buildif(_:)",
                "title": "static func buildIf<T>(T?) -> T?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontentbuilder/buildeither(first:)",
                "title": "static func buildEither<T1, T2>(first: T1) -> BuilderConditional<T1, T2>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontentbuilder/buildeither(second:)",
                "title": "static func buildEither<T1, T2>(second: T2) -> BuilderConditional<T1, T2>",
                "type": "method"
              },
              {
                "title": "Building with conditional availability",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontentbuilder/buildlimitedavailability(_:)",
                "title": "static func buildLimitedAvailability(some ChartContent) -> AnyChartContent",
                "type": "method"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/builderconditional",
                "title": "BuilderConditional",
                "type": "struct"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartcontentbuilder/buildblock(_:)-51ukk",
                "title": "static func buildBlock<each C>(repeat each C) -> some ChartContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontentbuilder/buildblock(_:)-797vj",
                "title": "static func buildBlock<C>(C) -> C",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartcontentbuilder/buildexpression(_:)",
                "title": "static func buildExpression<Content>(Content) -> Content",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/chartcontentbuilder",
            "title": "ChartContentBuilder",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/plot/init(content:)",
                "title": "init(content: () -> Content)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/plot",
            "title": "Plot",
            "type": "struct"
          },
          {
            "title": "Marks",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating an area mark",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/areamark/init(x:y:stacking:)",
                "title": "init<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areamark/init(x:y:series:stacking:)",
                "title": "init<X, Y, S>(x: PlottableValue<X>, y: PlottableValue<Y>, series: PlottableValue<S>, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "title": "Creating a range area chart",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/areamark/init(x:ystart:yend:)",
                "title": "init<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areamark/init(x:ystart:yend:series:)",
                "title": "init<X, Y, S>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, series: PlottableValue<S>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areamark/init(xstart:xend:y:)",
                "title": "init<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areamark/init(xstart:xend:y:series:)",
                "title": "init<X, Y, S>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, series: PlottableValue<S>)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/areamark",
            "title": "AreaMark",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a line mark",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/linemark/init(x:y:)",
                "title": "init<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/linemark/init(x:y:series:)",
                "title": "init<X, Y, S>(x: PlottableValue<X>, y: PlottableValue<Y>, series: PlottableValue<S>)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/linemark",
            "title": "LineMark",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a point mark",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/pointmark/init(x:y:)-44ke9",
                "title": "init<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>)",
                "type": "init"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/pointmark/init(x:y:)-9dswq",
                "title": "init<Y>(x: CGFloat?, y: PlottableValue<Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/pointmark/init(x:y:)-9hppd",
                "title": "init<X>(x: PlottableValue<X>, y: CGFloat?)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/pointmark",
            "title": "PointMark",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a rectangle mark",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/rectanglemark/init(x:ystart:yend:width:)-vh2x",
                "title": "init<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, width: MarkDimension)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectanglemark/init(xstart:xend:y:height:)-27222",
                "title": "init<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, height: MarkDimension)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectanglemark/init(xstart:xend:ystart:yend:)-1qbzg",
                "title": "init<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectanglemark/init(x:y:width:height:)",
                "title": "init<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension)",
                "type": "init"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/rectanglemark/init(x:ystart:yend:width:)-xhqp",
                "title": "init<X>(x: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?, width: MarkDimension)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectanglemark/init(xstart:xend:y:height:)-4x46i",
                "title": "init<Y>(xStart: CGFloat?, xEnd: CGFloat?, y: PlottableValue<Y>, height: MarkDimension)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectanglemark/init(xstart:xend:ystart:yend:)-5682c",
                "title": "init(xStart: CGFloat?, xEnd: CGFloat?, yStart: CGFloat?, yEnd: CGFloat?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectanglemark/init(xstart:xend:ystart:yend:)-5cbgh",
                "title": "init<Y>(xStart: CGFloat?, xEnd: CGFloat?, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectanglemark/init(xstart:xend:ystart:yend:)-6jeka",
                "title": "init<X>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/rectanglemark",
            "title": "RectangleMark",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/rulemark/init(x:ystart:yend:)-5gy50",
                "title": "init<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rulemark/init(x:ystart:yend:)-6zemd",
                "title": "init<X>(x: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rulemark/init(x:ystart:yend:)-8iusl",
                "title": "init<Y>(x: CGFloat?, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rulemark/init(xstart:xend:y:)-27yvc",
                "title": "init<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rulemark/init(xstart:xend:y:)-444cp",
                "title": "init<Y>(xStart: CGFloat?, xEnd: CGFloat?, y: PlottableValue<Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rulemark/init(xstart:xend:y:)-6jsoi",
                "title": "init<X>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: CGFloat?)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/rulemark",
            "title": "RuleMark",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a bar mark",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/barmark/init(x:ystart:yend:width:)",
                "title": "init<X, Y>(x: PlottableValue<X>, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>, width: MarkDimension)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barmark/init(xstart:xend:y:height:)",
                "title": "init<X, Y>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, y: PlottableValue<Y>, height: MarkDimension)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barmark/init(x:y:width:height:stacking:)",
                "title": "init<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barmark/init(x:y:width:height:stacking:)",
                "title": "init<X, Y>(x: PlottableValue<X>, y: PlottableValue<Y>, width: MarkDimension, height: MarkDimension, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barmark/init(x:ystart:yend:width:stacking:)",
                "title": "init<X>(x: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?, width: MarkDimension, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barmark/init(xstart:xend:y:height:stacking:)",
                "title": "init<Y>(xStart: CGFloat?, xEnd: CGFloat?, y: PlottableValue<Y>, height: MarkDimension, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/barmark/init(xstart:xend:ystart:yend:)-7541n",
                "title": "init<Y>(xStart: CGFloat?, xEnd: CGFloat?, yStart: PlottableValue<Y>, yEnd: PlottableValue<Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barmark/init(xstart:xend:ystart:yend:)-98wo9",
                "title": "init<X>(xStart: PlottableValue<X>, xEnd: PlottableValue<X>, yStart: CGFloat?, yEnd: CGFloat?)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/barmark",
            "title": "BarMark",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/sectormark/init(angle:innerradius:outerradius:angularinset:)",
                "title": "init(angle: PlottableValue<some Plottable>, innerRadius: MarkDimension, outerRadius: MarkDimension, angularInset: CGFloat?)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/sectormark",
            "title": "SectorMark",
            "type": "struct"
          },
          {
            "title": "Vectorized plots",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/charts/creating-a-data-visualization-dashboard-with-swift-charts",
            "title": "Creating a data visualization dashboard with Swift Charts",
            "type": "sampleCode"
          },
          {
            "children": [
              {
                "title": "Plotting areas from a collection",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/areaplot/init(_:x:y:stacking:)",
                "title": "init<Data>(Data, x: PlottableProjection<AreaPlot<Content>.DataElement, some Plottable>, y: PlottableProjection<AreaPlot<Content>.DataElement, some Plottable>, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areaplot/init(_:x:y:series:stacking:)",
                "title": "init<Data>(Data, x: PlottableProjection<AreaPlot<Content>.DataElement, some Plottable>, y: PlottableProjection<AreaPlot<Content>.DataElement, some Plottable>, series: PlottableProjection<AreaPlot<Content>.DataElement, some Plottable>, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areaplot/init(_:xstart:xend:y:)",
                "title": "init<Data, X>(Data, xStart: PlottableProjection<AreaPlot<Content>.DataElement, X>, xEnd: PlottableProjection<AreaPlot<Content>.DataElement, X>, y: PlottableProjection<AreaPlot<Content>.DataElement, some Plottable>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areaplot/init(_:xstart:xend:y:series:)",
                "title": "init<Data, X>(Data, xStart: PlottableProjection<AreaPlot<Content>.DataElement, X>, xEnd: PlottableProjection<AreaPlot<Content>.DataElement, X>, y: PlottableProjection<AreaPlot<Content>.DataElement, some Plottable>, series: PlottableProjection<AreaPlot<Content>.DataElement, some Plottable>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areaplot/init(_:x:ystart:yend:)",
                "title": "init<Data, Y>(Data, x: PlottableProjection<AreaPlot<Content>.DataElement, some Plottable>, yStart: PlottableProjection<AreaPlot<Content>.DataElement, Y>, yEnd: PlottableProjection<AreaPlot<Content>.DataElement, Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areaplot/init(_:x:ystart:yend:series:)",
                "title": "init<Data, Y>(Data, x: PlottableProjection<AreaPlot<Content>.DataElement, some Plottable>, yStart: PlottableProjection<AreaPlot<Content>.DataElement, Y>, yEnd: PlottableProjection<AreaPlot<Content>.DataElement, Y>, series: PlottableProjection<AreaPlot<Content>.DataElement, some Plottable>)",
                "type": "init"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedareaplotcontent",
                "title": "VectorizedAreaPlotContent",
                "type": "struct"
              },
              {
                "path": "/documentation/charts/functionareaplotcontent",
                "title": "FunctionAreaPlotContent",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/areaplot/init(x:y:domain:function:)-2fab1",
                "title": "init(x: Text, y: Text, domain: ClosedRange<Double>?, function: (Double) -> Double)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areaplot/init(x:y:domain:function:)-39eit",
                "title": "init<S1, S2>(x: S1, y: S2, domain: ClosedRange<Double>?, function: (Double) -> Double)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areaplot/init(x:y:domain:function:)-etud",
                "title": "init(x: LocalizedStringKey, y: LocalizedStringKey, domain: ClosedRange<Double>?, function: (Double) -> Double)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areaplot/init(x:ystart:yend:domain:function:)-23gxe",
                "title": "init<S1, S2, S3>(x: S1, yStart: S2, yEnd: S3, domain: ClosedRange<Double>?, function: (Double) -> (yStart: Double, yEnd: Double))",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areaplot/init(x:ystart:yend:domain:function:)-5akqm",
                "title": "init(x: LocalizedStringKey, yStart: LocalizedStringKey, yEnd: LocalizedStringKey, domain: ClosedRange<Double>?, function: (Double) -> (yStart: Double, yEnd: Double))",
                "type": "init"
              },
              {
                "path": "/documentation/charts/areaplot/init(x:ystart:yend:domain:function:)-etcn",
                "title": "init(x: Text, yStart: Text, yEnd: Text, domain: ClosedRange<Double>?, function: (Double) -> (yStart: Double, yEnd: Double))",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/areaplot",
            "title": "AreaPlot",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Plotting lines from a collection",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/lineplot/init(_:x:y:)",
                "title": "init<Data>(Data, x: PlottableProjection<LinePlot<Content>.DataElement, some Plottable>, y: PlottableProjection<LinePlot<Content>.DataElement, some Plottable>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/lineplot/init(_:x:y:series:)",
                "title": "init<Data>(Data, x: PlottableProjection<LinePlot<Content>.DataElement, some Plottable>, y: PlottableProjection<LinePlot<Content>.DataElement, some Plottable>, series: PlottableProjection<LinePlot<Content>.DataElement, some Plottable>)",
                "type": "init"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedlineplotcontent",
                "title": "VectorizedLinePlotContent",
                "type": "struct"
              },
              {
                "path": "/documentation/charts/functionlineplotcontent",
                "title": "FunctionLinePlotContent",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/lineplot/init(x:y:domain:function:)-1135f",
                "title": "init(x: LocalizedStringKey, y: LocalizedStringKey, domain: ClosedRange<Double>?, function: (Double) -> Double)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/lineplot/init(x:y:domain:function:)-6gv5v",
                "title": "init<S1, S2>(x: S1, y: S2, domain: ClosedRange<Double>?, function: (Double) -> Double)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/lineplot/init(x:y:domain:function:)-6m9gg",
                "title": "init(x: Text, y: Text, domain: ClosedRange<Double>?, function: (Double) -> Double)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/lineplot/init(x:y:t:domain:function:)-3mqls",
                "title": "init<S1, S2, S3>(x: S1, y: S2, t: S3, domain: ClosedRange<Double>, function: (Double) -> (x: Double, y: Double))",
                "type": "init"
              },
              {
                "path": "/documentation/charts/lineplot/init(x:y:t:domain:function:)-5c4bo",
                "title": "init(x: Text, y: Text, t: Text, domain: ClosedRange<Double>, function: (Double) -> (x: Double, y: Double))",
                "type": "init"
              },
              {
                "path": "/documentation/charts/lineplot/init(x:y:t:domain:function:)-7bvyi",
                "title": "init(x: LocalizedStringKey, y: LocalizedStringKey, t: LocalizedStringKey, domain: ClosedRange<Double>, function: (Double) -> (x: Double, y: Double))",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/lineplot",
            "title": "LinePlot",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Plotting points from a collection",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/pointplot/init(_:x:y:)-1a9af",
                "title": "init<Data>(Data, x: KeyPath<Data.Element, CGFloat>, y: PlottableProjection<PointPlot<Content>.DataElement, some Plottable>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/pointplot/init(_:x:y:)-1p6px",
                "title": "init<Data>(Data, x: CGFloat?, y: PlottableProjection<PointPlot<Content>.DataElement, some Plottable>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/pointplot/init(_:x:y:)-72pm2",
                "title": "init<Data>(Data, x: PlottableProjection<PointPlot<Content>.DataElement, some Plottable>, y: CGFloat?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/pointplot/init(_:x:y:)-7frpp",
                "title": "init<Data>(Data, x: PlottableProjection<PointPlot<Content>.DataElement, some Plottable>, y: PlottableProjection<PointPlot<Content>.DataElement, some Plottable>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/pointplot/init(_:x:y:)-9p3yg",
                "title": "init<Data>(Data, x: PlottableProjection<PointPlot<Content>.DataElement, some Plottable>, y: KeyPath<PointPlot<Content>.DataElement, CGFloat>)",
                "type": "init"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedpointplotcontent",
                "title": "VectorizedPointPlotContent",
                "type": "struct"
              }
            ],
            "path": "/documentation/charts/pointplot",
            "title": "PointPlot",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Plotting rectangles from a collection",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:x:y:width:height:)",
                "title": "init<Data>(Data, x: PlottableProjection<RectanglePlot<Content>.DataElement, some Plottable>, y: PlottableProjection<RectanglePlot<Content>.DataElement, some Plottable>, width: MarkDimensions<RectanglePlot<Content>.DataElement>, height: MarkDimensions<RectanglePlot<Content>.DataElement>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:x:ystart:yend:width:)-93op1",
                "title": "init<Data, Y>(Data, x: PlottableProjection<RectanglePlot<Content>.DataElement, some Plottable>, yStart: PlottableProjection<RectanglePlot<Content>.DataElement, Y>, yEnd: PlottableProjection<RectanglePlot<Content>.DataElement, Y>, width: MarkDimensions<RectanglePlot<Content>.DataElement>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:x:ystart:yend:width:)-nnvk",
                "title": "init<Data>(Data, x: PlottableProjection<RectanglePlot<Content>.DataElement, some Plottable>, yStart: KeyPath<RectanglePlot<Content>.DataElement, CGFloat>, yEnd: KeyPath<RectanglePlot<Content>.DataElement, CGFloat>, width: MarkDimensions<RectanglePlot<Content>.DataElement>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:x:ystart:yend:width:)-12u1b",
                "title": "init<Data>(Data, x: PlottableProjection<RectanglePlot<Content>.DataElement, some Plottable>, yStart: CGFloat?, yEnd: CGFloat?, width: MarkDimensions<RectanglePlot<Content>.DataElement>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:xstart:xend:y:height:)-51nra",
                "title": "init<Data>(Data, xStart: CGFloat?, xEnd: CGFloat?, y: PlottableProjection<RectanglePlot<Content>.DataElement, some Plottable>, height: MarkDimensions<RectanglePlot<Content>.DataElement>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:xstart:xend:y:height:)-8s17v",
                "title": "init<Data>(Data, xStart: KeyPath<RectanglePlot<Content>.DataElement, CGFloat>, xEnd: KeyPath<RectanglePlot<Content>.DataElement, CGFloat>, y: PlottableProjection<RectanglePlot<Content>.DataElement, some Plottable>, height: MarkDimensions<RectanglePlot<Content>.DataElement>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:xstart:xend:y:height:)-15ish",
                "title": "init<Data, X>(Data, xStart: PlottableProjection<RectanglePlot<Content>.DataElement, X>, xEnd: PlottableProjection<RectanglePlot<Content>.DataElement, X>, y: PlottableProjection<RectanglePlot<Content>.DataElement, some Plottable>, height: MarkDimensions<RectanglePlot<Content>.DataElement>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:xstart:xend:ystart:yend:)-46wi0",
                "title": "init<Data, X>(Data, xStart: PlottableProjection<RectanglePlot<Content>.DataElement, X>, xEnd: PlottableProjection<RectanglePlot<Content>.DataElement, X>, yStart: CGFloat?, yEnd: CGFloat?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:xstart:xend:ystart:yend:)-4g377",
                "title": "init<Data, X, Y>(Data, xStart: PlottableProjection<RectanglePlot<Content>.DataElement, X>, xEnd: PlottableProjection<RectanglePlot<Content>.DataElement, X>, yStart: PlottableProjection<RectanglePlot<Content>.DataElement, Y>, yEnd: PlottableProjection<RectanglePlot<Content>.DataElement, Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:xstart:xend:ystart:yend:)-6d8yb",
                "title": "init<Data, Y>(Data, xStart: CGFloat?, xEnd: CGFloat?, yStart: PlottableProjection<RectanglePlot<Content>.DataElement, Y>, yEnd: PlottableProjection<RectanglePlot<Content>.DataElement, Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:xstart:xend:ystart:yend:)-6uuk4",
                "title": "init<Data, X>(Data, xStart: PlottableProjection<RectanglePlot<Content>.DataElement, X>, xEnd: PlottableProjection<RectanglePlot<Content>.DataElement, X>, yStart: KeyPath<RectanglePlot<Content>.DataElement, CGFloat>, yEnd: KeyPath<RectanglePlot<Content>.DataElement, CGFloat>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:xstart:xend:ystart:yend:)-741lz",
                "title": "init<Data, Y>(Data, xStart: KeyPath<RectanglePlot<Content>.DataElement, CGFloat>, xEnd: KeyPath<RectanglePlot<Content>.DataElement, CGFloat>, yStart: PlottableProjection<RectanglePlot<Content>.DataElement, Y>, yEnd: PlottableProjection<RectanglePlot<Content>.DataElement, Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/rectangleplot/init(_:xstart:xend:ystart:yend:)-ir9o",
                "title": "init<Data>(Data, xStart: KeyPath<RectanglePlot<Content>.DataElement, CGFloat>, xEnd: KeyPath<RectanglePlot<Content>.DataElement, CGFloat>, yStart: KeyPath<RectanglePlot<Content>.DataElement, CGFloat>, yEnd: KeyPath<RectanglePlot<Content>.DataElement, CGFloat>)",
                "type": "init"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedrectangleplotcontent",
                "title": "VectorizedRectanglePlotContent",
                "type": "struct"
              }
            ],
            "path": "/documentation/charts/rectangleplot",
            "title": "RectanglePlot",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Plotting rules from a collection",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/ruleplot/init(_:x:ystart:yend:)-13wts",
                "title": "init<Data>(Data, x: PlottableProjection<RulePlot<Content>.DataElement, some Plottable>, yStart: CGFloat?, yEnd: CGFloat?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/ruleplot/init(_:x:ystart:yend:)-3fig9",
                "title": "init<Data, Y>(Data, x: KeyPath<RulePlot<Content>.DataElement, CGFloat>, yStart: PlottableProjection<RulePlot<Content>.DataElement, Y>, yEnd: PlottableProjection<RulePlot<Content>.DataElement, Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/ruleplot/init(_:x:ystart:yend:)-6ts7e",
                "title": "init<Data>(Data, x: PlottableProjection<RulePlot<Content>.DataElement, some Plottable>, yStart: KeyPath<RulePlot<Content>.DataElement, CGFloat>, yEnd: KeyPath<RulePlot<Content>.DataElement, CGFloat>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/ruleplot/init(_:x:ystart:yend:)-8b2lx",
                "title": "init<Data, Y>(Data, x: CGFloat?, yStart: PlottableProjection<RulePlot<Content>.DataElement, Y>, yEnd: PlottableProjection<RulePlot<Content>.DataElement, Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/ruleplot/init(_:x:ystart:yend:)-zxo0",
                "title": "init<Data, Y>(Data, x: PlottableProjection<RulePlot<Content>.DataElement, some Plottable>, yStart: PlottableProjection<RulePlot<Content>.DataElement, Y>, yEnd: PlottableProjection<RulePlot<Content>.DataElement, Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/ruleplot/init(_:xstart:xend:y:)-3dsvn",
                "title": "init<Data>(Data, xStart: KeyPath<RulePlot<Content>.DataElement, CGFloat>, xEnd: KeyPath<RulePlot<Content>.DataElement, CGFloat>, y: PlottableProjection<RulePlot<Content>.DataElement, some Plottable>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/ruleplot/init(_:xstart:xend:y:)-4yxo8",
                "title": "init<Data>(Data, xStart: CGFloat?, xEnd: CGFloat?, y: PlottableProjection<RulePlot<Content>.DataElement, some Plottable>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/ruleplot/init(_:xstart:xend:y:)-54gxx",
                "title": "init<Data, X>(Data, xStart: PlottableProjection<RulePlot<Content>.DataElement, X>, xEnd: PlottableProjection<RulePlot<Content>.DataElement, X>, y: KeyPath<RulePlot<Content>.DataElement, CGFloat>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/ruleplot/init(_:xstart:xend:y:)-8ehr7",
                "title": "init<Data, X>(Data, xStart: PlottableProjection<RulePlot<Content>.DataElement, X>, xEnd: PlottableProjection<RulePlot<Content>.DataElement, X>, y: PlottableProjection<RulePlot<Content>.DataElement, some Plottable>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/ruleplot/init(_:xstart:xend:y:)-hx5a",
                "title": "init<Data, X>(Data, xStart: PlottableProjection<RulePlot<Content>.DataElement, X>, xEnd: PlottableProjection<RulePlot<Content>.DataElement, X>, y: CGFloat?)",
                "type": "init"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedruleplotcontent",
                "title": "VectorizedRulePlotContent",
                "type": "struct"
              }
            ],
            "path": "/documentation/charts/ruleplot",
            "title": "RulePlot",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Plotting bars from a collection",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/barplot/init(_:x:y:width:height:stacking:)",
                "title": "init<Data>(Data, x: PlottableProjection<BarPlot<Content>.DataElement, some Plottable>, y: PlottableProjection<BarPlot<Content>.DataElement, some Plottable>, width: MarkDimensions<BarPlot<Content>.DataElement>, height: MarkDimensions<BarPlot<Content>.DataElement>, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barplot/init(_:x:ystart:yend:width:)",
                "title": "init<Data, Y>(Data, x: PlottableProjection<BarPlot<Content>.DataElement, some Plottable>, yStart: PlottableProjection<BarPlot<Content>.DataElement, Y>, yEnd: PlottableProjection<BarPlot<Content>.DataElement, Y>, width: MarkDimensions<BarPlot<Content>.DataElement>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barplot/init(_:x:ystart:yend:width:stacking:)-2mtih",
                "title": "init<Data>(Data, x: PlottableProjection<BarPlot<Content>.DataElement, some Plottable>, yStart: CGFloat?, yEnd: CGFloat?, width: MarkDimensions<BarPlot<Content>.DataElement>, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barplot/init(_:x:ystart:yend:width:stacking:)-680hw",
                "title": "init<Data>(Data, x: PlottableProjection<BarPlot<Content>.DataElement, some Plottable>, yStart: KeyPath<BarPlot<Content>.DataElement, CGFloat>, yEnd: KeyPath<BarPlot<Content>.DataElement, CGFloat>, width: MarkDimensions<BarPlot<Content>.DataElement>, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barplot/init(_:xstart:xend:y:height:stacking:)-16tou",
                "title": "init<Data>(Data, xStart: KeyPath<BarPlot<Content>.DataElement, CGFloat>, xEnd: KeyPath<BarPlot<Content>.DataElement, CGFloat>, y: PlottableProjection<BarPlot<Content>.DataElement, some Plottable>, height: MarkDimensions<BarPlot<Content>.DataElement>, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barplot/init(_:xstart:xend:y:height:stacking:)-2x0yx",
                "title": "init<Data>(Data, xStart: CGFloat?, xEnd: CGFloat?, y: PlottableProjection<BarPlot<Content>.DataElement, some Plottable>, height: MarkDimensions<BarPlot<Content>.DataElement>, stacking: MarkStackingMethod)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barplot/init(_:xstart:xend:y:height:)",
                "title": "init<Data, X>(Data, xStart: PlottableProjection<BarPlot<Content>.DataElement, X>, xEnd: PlottableProjection<BarPlot<Content>.DataElement, X>, y: PlottableProjection<BarPlot<Content>.DataElement, some Plottable>, height: MarkDimensions<BarPlot<Content>.DataElement>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barplot/init(_:xstart:xend:ystart:yend:)-48su5",
                "title": "init<Data, X>(Data, xStart: PlottableProjection<BarPlot<Content>.DataElement, X>, xEnd: PlottableProjection<BarPlot<Content>.DataElement, X>, yStart: CGFloat?, yEnd: CGFloat?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barplot/init(_:xstart:xend:ystart:yend:)-862wn",
                "title": "init<Data, Y>(Data, xStart: KeyPath<BarPlot<Content>.DataElement, CGFloat>, xEnd: KeyPath<BarPlot<Content>.DataElement, CGFloat>, yStart: PlottableProjection<BarPlot<Content>.DataElement, Y>, yEnd: PlottableProjection<BarPlot<Content>.DataElement, Y>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barplot/init(_:xstart:xend:ystart:yend:)-mtdv",
                "title": "init<Data, X>(Data, xStart: PlottableProjection<BarPlot<Content>.DataElement, X>, xEnd: PlottableProjection<BarPlot<Content>.DataElement, X>, yStart: KeyPath<BarPlot<Content>.DataElement, CGFloat>, yEnd: KeyPath<BarPlot<Content>.DataElement, CGFloat>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/barplot/init(_:xstart:xend:ystart:yend:)-raqh",
                "title": "init<Data, Y>(Data, xStart: CGFloat?, xEnd: CGFloat?, yStart: PlottableProjection<BarPlot<Content>.DataElement, Y>, yEnd: PlottableProjection<BarPlot<Content>.DataElement, Y>)",
                "type": "init"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedbarplotcontent",
                "title": "VectorizedBarPlotContent",
                "type": "struct"
              }
            ],
            "path": "/documentation/charts/barplot",
            "title": "BarPlot",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Plotting sectors from a collection",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/sectorplot/init(_:angle:innerradius:outerradius:angularinset:)-1ed01",
                "title": "init<Data>(Data, angle: PlottableProjection<SectorPlot<Content>.DataElement, some Plottable>, innerRadius: MarkDimensions<SectorPlot<Content>.DataElement>, outerRadius: MarkDimensions<SectorPlot<Content>.DataElement>, angularInset: CGFloat?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/sectorplot/init(_:angle:innerradius:outerradius:angularinset:)-9pmo7",
                "title": "init<Data>(Data, angle: PlottableProjection<SectorPlot<Content>.DataElement, some Plottable>, innerRadius: MarkDimensions<SectorPlot<Content>.DataElement>, outerRadius: MarkDimensions<SectorPlot<Content>.DataElement>, angularInset: KeyPath<SectorPlot<Content>.DataElement, CGFloat>)",
                "type": "init"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedsectorplotcontent",
                "title": "VectorizedSectorPlotContent",
                "type": "struct"
              }
            ],
            "path": "/documentation/charts/sectorplot",
            "title": "SectorPlot",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Styling marks",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/foregroundstyle(_:)",
                "title": "func foregroundStyle(KeyPath<Self.DataElement, some ShapeStyle>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/opacity(_:)",
                "title": "func opacity(KeyPath<Self.DataElement, CGFloat>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/linestyle(_:)",
                "title": "func lineStyle(KeyPath<Self.DataElement, StrokeStyle>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/position(by:axis:span:)",
                "title": "func position(by: PlottableProjection<Self.DataElement, some Plottable>, axis: Axis?, span: MarkDimension) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "title": "Setting symbol appearance",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/symbol(by:)",
                "title": "func symbol(by: PlottableProjection<Self.DataElement, some Plottable>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/symbolsize(_:)-12tl1",
                "title": "func symbolSize(KeyPath<Self.DataElement, CGSize>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/symbolsize(_:)-3nwop",
                "title": "func symbolSize(KeyPath<Self.DataElement, CGFloat>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "title": "Encoding data into mark characteristics",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/foregroundstyle(by:)",
                "title": "func foregroundStyle(by: PlottableProjection<Self.DataElement, some Plottable>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/linestyle(by:)",
                "title": "func lineStyle(by: PlottableProjection<Self.DataElement, some Plottable>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/symbol(by:)",
                "title": "func symbol(by: PlottableProjection<Self.DataElement, some Plottable>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/symbolsize(by:)",
                "title": "func symbolSize(by: PlottableProjection<Self.DataElement, some Plottable>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "title": "Configuring accessibility",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/accessibilityhidden(_:)",
                "title": "func accessibilityHidden(KeyPath<Self.DataElement, Bool>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/accessibilityidentifier(_:)",
                "title": "func accessibilityIdentifier(KeyPath<Self.DataElement, String>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/accessibilitylabel(_:)-8zoay",
                "title": "func accessibilityLabel(KeyPath<Self.DataElement, some StringProtocol>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/accessibilityvalue(_:)-2rv8b",
                "title": "func accessibilityValue(KeyPath<Self.DataElement, some StringProtocol>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:)-2t2pp",
                    "title": "static func value(LocalizedStringKey, DataValue) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:)-3d5wx",
                    "title": "static func value(LocalizedStringKey, KeyPath<DataElement, DataValue>) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:)-3u8ec",
                    "title": "static func value(some StringProtocol, DataValue) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:)-4gbm2",
                    "title": "static func value(some StringProtocol, KeyPath<DataElement, DataValue>) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:)-9xmzf",
                    "title": "static func value(Text, KeyPath<DataElement, DataValue>) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:)-p6jc",
                    "title": "static func value(Text, DataValue) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:_:)-2fxu2",
                    "title": "static func value(LocalizedStringKey, DataValue, DataValue) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:_:)-35uat",
                    "title": "static func value(some StringProtocol, DataValue, DataValue) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:_:)-5na80",
                    "title": "static func value(Text, DataValue, DataValue) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:_:)-6i57l",
                    "title": "static func value(Text, KeyPath<DataElement, DataValue>, KeyPath<DataElement, DataValue>) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:_:)-7lfga",
                    "title": "static func value(some StringProtocol, KeyPath<DataElement, DataValue>, KeyPath<DataElement, DataValue>) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:_:)-7s5uh",
                    "title": "static func value(LocalizedStringKey, KeyPath<DataElement, DataValue>, KeyPath<DataElement, DataValue>) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:unit:calendar:)-15mjw",
                    "title": "static func value(LocalizedStringKey, DataValue, unit: Calendar.Component, calendar: Calendar?) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:unit:calendar:)-1oys9",
                    "title": "static func value(Text, KeyPath<DataElement, DataValue>, unit: Calendar.Component, calendar: Calendar?) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:unit:calendar:)-6vkdw",
                    "title": "static func value(LocalizedStringKey, KeyPath<DataElement, DataValue>, unit: Calendar.Component, calendar: Calendar?) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:unit:calendar:)-77win",
                    "title": "static func value(some StringProtocol, DataValue, unit: Calendar.Component, calendar: Calendar?) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:unit:calendar:)-91ee9",
                    "title": "static func value(some StringProtocol, KeyPath<DataElement, DataValue>, unit: Calendar.Component, calendar: Calendar?) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/plottableprojection/value(_:_:unit:calendar:)-94p1r",
                    "title": "static func value(Text, DataValue, unit: Calendar.Component, calendar: Calendar?) -> PlottableProjection<DataElement, DataValue>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/charts/plottableprojection",
                "title": "PlottableProjection",
                "type": "struct"
              },
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/dataelement",
                "title": "DataElement",
                "type": "associatedtype"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/accessibilitylabel(_:)-46jbt",
                "title": "func accessibilityLabel(KeyPath<Self.DataElement, Text>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/accessibilitylabel(_:)-5r0pw",
                "title": "func accessibilityLabel(KeyPath<Self.DataElement, LocalizedStringKey>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/accessibilityvalue(_:)-3dei8",
                "title": "func accessibilityValue(KeyPath<Self.DataElement, LocalizedStringKey>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              },
              {
                "path": "/documentation/charts/vectorizedchartcontent/accessibilityvalue(_:)-pylk",
                "title": "func accessibilityValue(KeyPath<Self.DataElement, Text>) -> some VectorizedChartContent<Self.DataElement>\n",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/vectorizedchartcontent",
            "title": "VectorizedChartContent",
            "type": "protocol"
          },
          {
            "title": "Mark configuration",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/markstackingmethod/center",
                "title": "static var center: MarkStackingMethod",
                "type": "property"
              },
              {
                "path": "/documentation/charts/markstackingmethod/normalized",
                "title": "static var normalized: MarkStackingMethod",
                "type": "property"
              },
              {
                "path": "/documentation/charts/markstackingmethod/standard",
                "title": "static var standard: MarkStackingMethod",
                "type": "property"
              },
              {
                "path": "/documentation/charts/markstackingmethod/unstacked",
                "title": "static var unstacked: MarkStackingMethod",
                "type": "property"
              }
            ],
            "path": "/documentation/charts/markstackingmethod",
            "title": "MarkStackingMethod",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/markdimensions/init(floatliteral:)",
                    "title": "init(floatLiteral: Double)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/charts/markdimensions/init(integerliteral:)",
                    "title": "init(integerLiteral: Int)",
                    "type": "init"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/markdimensions/automatic",
                    "title": "static var automatic: MarkDimensions<DataElement>",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/markdimensions/fixed(_:)-14cur",
                    "title": "static func fixed(CGFloat) -> MarkDimensions<DataElement>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/markdimensions/fixed(_:)-7k7pv",
                    "title": "static func fixed(KeyPath<DataElement, CGFloat>) -> MarkDimensions<DataElement>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/markdimensions/inset(_:)-309e3",
                    "title": "static func inset(KeyPath<DataElement, CGFloat>) -> MarkDimensions<DataElement>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/markdimensions/inset(_:)-5nddx",
                    "title": "static func inset(CGFloat) -> MarkDimensions<DataElement>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/markdimensions/ratio(_:)-8ufgm",
                    "title": "static func ratio(CGFloat) -> MarkDimensions<DataElement>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/markdimensions/ratio(_:)-r23h",
                    "title": "static func ratio(KeyPath<DataElement, CGFloat>) -> MarkDimensions<DataElement>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/charts/markdimensions",
                "title": "MarkDimensions",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/markdimension/init(floatliteral:)",
                "title": "init(floatLiteral: Double)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/markdimension/init(integerliteral:)",
                "title": "init(integerLiteral: Int)",
                "type": "init"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/markdimension/automatic",
                "title": "static var automatic: MarkDimension",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/markdimension/fixed(_:)",
                "title": "static func fixed(CGFloat) -> MarkDimension",
                "type": "method"
              },
              {
                "path": "/documentation/charts/markdimension/inset(_:)",
                "title": "static func inset(CGFloat) -> MarkDimension",
                "type": "method"
              },
              {
                "path": "/documentation/charts/markdimension/ratio(_:)",
                "title": "static func ratio(CGFloat) -> MarkDimension",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/markdimension",
            "title": "MarkDimension",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/interpolationmethod/cardinal",
                "title": "static var cardinal: InterpolationMethod",
                "type": "property"
              },
              {
                "path": "/documentation/charts/interpolationmethod/catmullrom",
                "title": "static var catmullRom: InterpolationMethod",
                "type": "property"
              },
              {
                "path": "/documentation/charts/interpolationmethod/linear",
                "title": "static var linear: InterpolationMethod",
                "type": "property"
              },
              {
                "path": "/documentation/charts/interpolationmethod/monotone",
                "title": "static var monotone: InterpolationMethod",
                "type": "property"
              },
              {
                "path": "/documentation/charts/interpolationmethod/stepcenter",
                "title": "static var stepCenter: InterpolationMethod",
                "type": "property"
              },
              {
                "path": "/documentation/charts/interpolationmethod/stepend",
                "title": "static var stepEnd: InterpolationMethod",
                "type": "property"
              },
              {
                "path": "/documentation/charts/interpolationmethod/stepstart",
                "title": "static var stepStart: InterpolationMethod",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/interpolationmethod/cardinal(tension:)",
                "title": "static func cardinal(tension: CGFloat) -> InterpolationMethod",
                "type": "method"
              },
              {
                "path": "/documentation/charts/interpolationmethod/catmullrom(alpha:)",
                "title": "static func catmullRom(alpha: CGFloat) -> InterpolationMethod",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/interpolationmethod",
            "title": "InterpolationMethod",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/basicchartsymbolshape/strokeborder(linewidth:)",
                "title": "func strokeBorder(lineWidth: CGFloat) -> some ChartSymbolShape",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/basicchartsymbolshape",
            "title": "BasicChartSymbolShape",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartsymbolshape/perceptualunitrect",
                "title": "var perceptualUnitRect: CGRect",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartsymbolshape/strokeborder(linewidth:)",
                "title": "func strokeBorder(lineWidth: CGFloat) -> some ChartSymbolShape",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartsymbolshape/strokeborder(style:)",
                "title": "func strokeBorder(style: StrokeStyle) -> some ChartSymbolShape",
                "type": "method"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartsymbolshape/asterisk",
                "title": "static var asterisk: BasicChartSymbolShape",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartsymbolshape/circle",
                "title": "static var circle: BasicChartSymbolShape",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartsymbolshape/cross",
                "title": "static var cross: BasicChartSymbolShape",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartsymbolshape/diamond",
                "title": "static var diamond: BasicChartSymbolShape",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartsymbolshape/pentagon",
                "title": "static var pentagon: BasicChartSymbolShape",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartsymbolshape/plus",
                "title": "static var plus: BasicChartSymbolShape",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartsymbolshape/square",
                "title": "static var square: BasicChartSymbolShape",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartsymbolshape/triangle",
                "title": "static var triangle: BasicChartSymbolShape",
                "type": "property"
              }
            ],
            "path": "/documentation/charts/chartsymbolshape",
            "title": "ChartSymbolShape",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/anychartsymbolshape/init(_:)",
                "title": "init(any ChartSymbolShape)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/anychartsymbolshape",
            "title": "AnyChartSymbolShape",
            "type": "struct"
          },
          {
            "title": "Labeled data",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/plottablevalue/value(_:_:)-13lvv",
                "title": "static func value<S>(S, Value) -> PlottableValue<Value>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/plottablevalue/value(_:_:)-3sze5",
                "title": "static func value(LocalizedStringKey, Range<Value>) -> PlottableValue<Value>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/plottablevalue/value(_:_:)-4qa4d",
                "title": "static func value(Text, Range<Value>) -> PlottableValue<Value>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/plottablevalue/value(_:_:)-6jxfn",
                "title": "static func value<S>(S, ChartBinRange<Value>) -> PlottableValue<Value>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/plottablevalue/value(_:_:)-70xhu",
                "title": "static func value(LocalizedStringKey, Value) -> PlottableValue<Value>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/plottablevalue/value(_:_:)-7ed58",
                "title": "static func value(Text, Value) -> PlottableValue<Value>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/plottablevalue/value(_:_:)-7k0m0",
                "title": "static func value(LocalizedStringKey, ChartBinRange<Value>) -> PlottableValue<Value>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/plottablevalue/value(_:_:)-9bdsw",
                "title": "static func value(Text, ChartBinRange<Value>) -> PlottableValue<Value>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/plottablevalue/value(_:_:)-f1kk",
                "title": "static func value<S>(S, Range<Value>) -> PlottableValue<Value>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/plottablevalue/value(_:_:unit:calendar:)-2r0fo",
                "title": "static func value<S>(S, Date, unit: Calendar.Component, calendar: Calendar?) -> PlottableValue<Value>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/plottablevalue/value(_:_:unit:calendar:)-8f7fe",
                "title": "static func value(LocalizedStringKey, Date, unit: Calendar.Component, calendar: Calendar?) -> PlottableValue<Value>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/plottablevalue/value(_:_:unit:calendar:)-liyc",
                "title": "static func value(Text, Date, unit: Calendar.Component, calendar: Calendar?) -> PlottableValue<Value>",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/plottablevalue",
            "title": "PlottableValue",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/primitiveplottableprotocol",
                "title": "PrimitivePlottableProtocol",
                "type": "protocol"
              },
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/plottable/primitiveplottable-swift.associatedtype",
                "title": "PrimitivePlottable",
                "type": "associatedtype"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/plottable/init(primitiveplottable:)",
                "title": "init?(primitivePlottable: Self.PrimitivePlottable)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/plottable/primitiveplottable-xwx8",
                "title": "var primitivePlottable: Self.PrimitivePlottable",
                "type": "property"
              }
            ],
            "path": "/documentation/charts/plottable",
            "title": "Plottable",
            "type": "protocol"
          },
          {
            "title": "Scales",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/scalerange/visualvalue",
                "title": "VisualValue",
                "type": "associatedtype"
              }
            ],
            "path": "/documentation/charts/scalerange",
            "title": "ScaleRange",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/positionscalerange/plotdimension",
                "title": "static var plotDimension: PlotDimensionScaleRange",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/positionscalerange/plotdimension(padding:)",
                "title": "static func plotDimension(padding: CGFloat) -> PlotDimensionScaleRange",
                "type": "method"
              },
              {
                "path": "/documentation/charts/positionscalerange/plotdimension(startpadding:endpadding:)",
                "title": "static func plotDimension(startPadding: CGFloat, endPadding: CGFloat) -> PlotDimensionScaleRange",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/positionscalerange",
            "title": "PositionScaleRange",
            "type": "protocol"
          },
          {
            "path": "/documentation/charts/plotdimensionscalerange",
            "title": "PlotDimensionScaleRange",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/scaledomain/automatic",
                "title": "static var automatic: AutomaticScaleDomain",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/scaledomain/automatic(includeszero:reversed:)",
                "title": "static func automatic(includesZero: Bool?, reversed: Bool?) -> AutomaticScaleDomain",
                "type": "method"
              },
              {
                "path": "/documentation/charts/scaledomain/automatic(includeszero:reversed:datatype:modifyinferreddomain:)",
                "title": "static func automatic<DataValue>(includesZero: Bool?, reversed: Bool?, dataType: DataValue.Type, modifyInferredDomain: (inout [DataValue]) -> Void) -> AutomaticScaleDomain",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/scaledomain",
            "title": "ScaleDomain",
            "type": "protocol"
          },
          {
            "path": "/documentation/charts/automaticscaledomain",
            "title": "AutomaticScaleDomain",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/scaletype/category",
                "title": "static var category: ScaleType",
                "type": "property"
              },
              {
                "path": "/documentation/charts/scaletype/date",
                "title": "static var date: ScaleType",
                "type": "property"
              },
              {
                "path": "/documentation/charts/scaletype/linear",
                "title": "static var linear: ScaleType",
                "type": "property"
              },
              {
                "path": "/documentation/charts/scaletype/log",
                "title": "static var log: ScaleType",
                "type": "property"
              },
              {
                "path": "/documentation/charts/scaletype/squareroot",
                "title": "static var squareRoot: ScaleType",
                "type": "property"
              },
              {
                "path": "/documentation/charts/scaletype/symmetriclog",
                "title": "static var symmetricLog: ScaleType",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/scaletype/power(exponent:)",
                "title": "static func power(exponent: Double) -> ScaleType",
                "type": "method"
              },
              {
                "path": "/documentation/charts/scaletype/symmetriclog(slopeatzero:)",
                "title": "static func symmetricLog(slopeAtZero: Double) -> ScaleType",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/scaletype",
            "title": "ScaleType",
            "type": "struct"
          },
          {
            "title": "Axes",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/charts/customizing-axes-in-swift-charts",
            "title": "Customizing axes in Swift Charts",
            "type": "article"
          },
          {
            "path": "/documentation/charts/chartaxiscontent",
            "title": "ChartAxisContent",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/axiscontent/compositinglayer()",
                "title": "func compositingLayer() -> some AxisContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axiscontent/compositinglayer(style:)",
                "title": "func compositingLayer<V>(style: (PlaceholderContentView<Self>) -> V) -> some AxisContent",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/axiscontent",
            "title": "AxisContent",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/axismarkpreset/aligned",
                    "title": "static var aligned: AxisMarkPreset",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axismarkpreset/automatic",
                    "title": "static var automatic: AxisMarkPreset",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axismarkpreset/extended",
                    "title": "static var extended: AxisMarkPreset",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axismarkpreset/inset",
                    "title": "static var inset: AxisMarkPreset",
                    "type": "property"
                  }
                ],
                "path": "/documentation/charts/axismarkpreset",
                "title": "AxisMarkPreset",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/axismarkvalues/automatic",
                    "title": "static var automatic: AxisMarkValues",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/axismarkvalues/automatic(desiredcount:roundlowerbound:roundupperbound:)",
                    "title": "static func automatic(desiredCount: Int?, roundLowerBound: Bool?, roundUpperBound: Bool?) -> AxisMarkValues",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/axismarkvalues/automatic(minimumstride:desiredcount:roundlowerbound:roundupperbound:)",
                    "title": "static func automatic<P>(minimumStride: P, desiredCount: Int?, roundLowerBound: Bool?, roundUpperBound: Bool?) -> AxisMarkValues",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/axismarkvalues/stride(by:count:roundlowerbound:roundupperbound:calendar:)",
                    "title": "static func stride(by: Calendar.Component, count: Int, roundLowerBound: Bool?, roundUpperBound: Bool?, calendar: Calendar?) -> AxisMarkValues",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/axismarkvalues/stride(by:roundlowerbound:roundupperbound:)",
                    "title": "static func stride<P>(by: P, roundLowerBound: Bool?, roundUpperBound: Bool?) -> AxisMarkValues",
                    "type": "method"
                  }
                ],
                "path": "/documentation/charts/axismarkvalues",
                "title": "AxisMarkValues",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/axismarkposition/automatic",
                    "title": "static var automatic: AxisMarkPosition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axismarkposition/bottom",
                    "title": "static var bottom: AxisMarkPosition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axismarkposition/leading",
                    "title": "static var leading: AxisMarkPosition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axismarkposition/top",
                    "title": "static var top: AxisMarkPosition",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axismarkposition/trailing",
                    "title": "static var trailing: AxisMarkPosition",
                    "type": "property"
                  }
                ],
                "path": "/documentation/charts/axismarkposition",
                "title": "AxisMarkPosition",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/axismarks/init(format:preset:position:values:stroke:)-8fe1o",
                "title": "init<Format>(format: Format, preset: AxisMarkPreset, position: AxisMarkPosition, values: AxisMarkValues, stroke: StrokeStyle?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/axismarks/init(format:preset:position:values:stroke:)-98cpl",
                "title": "init<Value, Format>(format: Format, preset: AxisMarkPreset, position: AxisMarkPosition, values: [Value], stroke: StrokeStyle?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/axismarks/init(preset:position:values:content:)-1n9x7",
                "title": "init<Value>(preset: AxisMarkPreset, position: AxisMarkPosition, values: [Value], content: (AxisValue) -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/axismarks/init(preset:position:values:content:)-4a4x7",
                "title": "init<Value>(preset: AxisMarkPreset, position: AxisMarkPosition, values: [Value], content: () -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/axismarks/init(preset:position:values:content:)-6b1jq",
                "title": "init(preset: AxisMarkPreset, position: AxisMarkPosition, values: AxisMarkValues, content: () -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/axismarks/init(preset:position:values:content:)-7414i",
                "title": "init(preset: AxisMarkPreset, position: AxisMarkPosition, values: AxisMarkValues, content: (AxisValue) -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/axismarks/init(preset:position:values:stroke:)-8uk65",
                "title": "init(preset: AxisMarkPreset, position: AxisMarkPosition, values: AxisMarkValues, stroke: StrokeStyle?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/axismarks/init(preset:position:values:stroke:)-8xkl5",
                "title": "init<Value>(preset: AxisMarkPreset, position: AxisMarkPosition, values: [Value], stroke: StrokeStyle?)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/axismarks",
            "title": "AxisMarks",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/anyaxiscontent/init(_:)",
                "title": "init(any AxisContent)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/anyaxiscontent/init(erasing:)",
                "title": "init(erasing: some AxisContent)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/anyaxiscontent",
            "title": "AnyAxisContent",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/axiscontentbuilder/buildblock()",
                "title": "static func buildBlock() -> some AxisContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axiscontentbuilder/buildblock(_:)-27fku",
                "title": "static func buildBlock<T>(T) -> T",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axiscontentbuilder/buildblock(_:)-6p3cy",
                "title": "static func buildBlock<each T>(repeat each T) -> some AxisContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axiscontentbuilder/buildeither(first:)",
                "title": "static func buildEither<T1, T2>(first: T1) -> BuilderConditional<T1, T2>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axiscontentbuilder/buildeither(second:)",
                "title": "static func buildEither<T1, T2>(second: T2) -> BuilderConditional<T1, T2>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axiscontentbuilder/buildexpression(_:)",
                "title": "static func buildExpression<Content>(Content) -> Content",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axiscontentbuilder/buildif(_:)",
                "title": "static func buildIf<T>(T?) -> T?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axiscontentbuilder/buildlimitedavailability(_:)",
                "title": "static func buildLimitedAvailability<Content>(Content) -> AnyAxisContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axiscontentbuilder/buildpartialblock(accumulated:next:)",
                "title": "static func buildPartialBlock(accumulated: some AxisContent, next: some AxisContent) -> some AxisContent",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axiscontentbuilder/buildpartialblock(first:)",
                "title": "static func buildPartialBlock<T>(first: T) -> T",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/axiscontentbuilder",
            "title": "AxisContentBuilder",
            "type": "struct"
          },
          {
            "title": "Axis marks",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/axismark/font(_:)",
                "title": "func font(Font?) -> some AxisMark",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axismark/foregroundstyle(_:)",
                "title": "func foregroundStyle<S>(S) -> some AxisMark",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axismark/offset(_:)",
                "title": "func offset(CGSize) -> some AxisMark",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axismark/offset(x:y:)",
                "title": "func offset(x: CGFloat, y: CGFloat) -> some AxisMark",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/axismark",
            "title": "AxisMark",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/axistick/length/automatic",
                    "title": "static var automatic: AxisTick.Length",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axistick/length/label",
                    "title": "static var label: AxisTick.Length",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axistick/length/longestlabel",
                    "title": "static var longestLabel: AxisTick.Length",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/axistick/length/label(extendpastby:)",
                    "title": "static func label(extendPastBy: CGFloat) -> AxisTick.Length",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/axistick/length/longestlabel(extendpastby:)",
                    "title": "static func longestLabel(extendPastBy: CGFloat) -> AxisTick.Length",
                    "type": "method"
                  }
                ],
                "path": "/documentation/charts/axistick/length",
                "title": "AxisTick.Length",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/axistick/init(centered:length:stroke:)-7azpy",
                "title": "init(centered: Bool?, length: CGFloat, stroke: StrokeStyle?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/axistick/init(centered:length:stroke:)-93rvh",
                "title": "init(centered: Bool?, length: AxisTick.Length, stroke: StrokeStyle?)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/axistick",
            "title": "AxisTick",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/axisgridline/init(centered:stroke:)",
                "title": "init(centered: Bool?, stroke: StrokeStyle?)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/axisgridline",
            "title": "AxisGridLine",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/axisvaluelabelorientation/automatic",
                    "title": "static var automatic: AxisValueLabelOrientation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axisvaluelabelorientation/horizontal",
                    "title": "static var horizontal: AxisValueLabelOrientation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axisvaluelabelorientation/vertical",
                    "title": "static var vertical: AxisValueLabelOrientation",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axisvaluelabelorientation/verticalreversed",
                    "title": "static var verticalReversed: AxisValueLabelOrientation",
                    "type": "property"
                  }
                ],
                "path": "/documentation/charts/axisvaluelabelorientation",
                "title": "AxisValueLabelOrientation",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/axisvaluelabelcollisionresolution/automatic",
                    "title": "static var automatic: AxisValueLabelCollisionResolution",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axisvaluelabelcollisionresolution/disabled",
                    "title": "static var disabled: AxisValueLabelCollisionResolution",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axisvaluelabelcollisionresolution/greedy",
                    "title": "static var greedy: AxisValueLabelCollisionResolution",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/axisvaluelabelcollisionresolution/truncate",
                    "title": "static var truncate: AxisValueLabelCollisionResolution",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/axisvaluelabelcollisionresolution/greedy(priority:minimumspacing:)",
                    "title": "static func greedy(priority: Double, minimumSpacing: CGFloat?) -> AxisValueLabelCollisionResolution",
                    "type": "method"
                  }
                ],
                "path": "/documentation/charts/axisvaluelabelcollisionresolution",
                "title": "AxisValueLabelCollisionResolution",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/axisvaluelabel/init(_:centered:anchor:multilabelalignment:collisionresolution:offsetsmarks:orientation:horizontalspacing:verticalspacing:)-9202h",
                "title": "init(LocalizedStringKey, centered: Bool?, anchor: UnitPoint?, multiLabelAlignment: Alignment?, collisionResolution: AxisValueLabelCollisionResolution, offsetsMarks: Bool?, orientation: AxisValueLabelOrientation, horizontalSpacing: CGFloat?, verticalSpacing: CGFloat?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/axisvaluelabel/init(_:centered:anchor:multilabelalignment:collisionresolution:offsetsmarks:orientation:horizontalspacing:verticalspacing:)-9rytf",
                "title": "init<S>(S, centered: Bool?, anchor: UnitPoint?, multiLabelAlignment: Alignment?, collisionResolution: AxisValueLabelCollisionResolution, offsetsMarks: Bool?, orientation: AxisValueLabelOrientation, horizontalSpacing: CGFloat?, verticalSpacing: CGFloat?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/axisvaluelabel/init(centered:anchor:multilabelalignment:collisionresolution:offsetsmarks:orientation:horizontalspacing:verticalspacing:)",
                "title": "init(centered: Bool?, anchor: UnitPoint?, multiLabelAlignment: Alignment?, collisionResolution: AxisValueLabelCollisionResolution, offsetsMarks: Bool?, orientation: AxisValueLabelOrientation, horizontalSpacing: CGFloat?, verticalSpacing: CGFloat?)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/axisvaluelabel/init(centered:anchor:multilabelalignment:collisionresolution:offsetsmarks:orientation:horizontalspacing:verticalspacing:content:)",
                "title": "init(centered: Bool?, anchor: UnitPoint?, multiLabelAlignment: Alignment?, collisionResolution: AxisValueLabelCollisionResolution, offsetsMarks: Bool?, orientation: AxisValueLabelOrientation, horizontalSpacing: CGFloat?, verticalSpacing: CGFloat?, content: () -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/axisvaluelabel/init(format:centered:anchor:multilabelalignment:collisionresolution:offsetsmarks:orientation:horizontalspacing:verticalspacing:)",
                "title": "init<Format>(format: Format, centered: Bool?, anchor: UnitPoint?, multiLabelAlignment: Alignment?, collisionResolution: AxisValueLabelCollisionResolution, offsetsMarks: Bool?, orientation: AxisValueLabelOrientation, horizontalSpacing: CGFloat?, verticalSpacing: CGFloat?)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/axisvaluelabel",
            "title": "AxisValueLabel",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/axisvalue/count",
                "title": "var count: Int",
                "type": "property"
              },
              {
                "path": "/documentation/charts/axisvalue/index",
                "title": "var index: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/axisvalue/as(_:)",
                "title": "func `as`<P>(P.Type) -> P?",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/axisvalue",
            "title": "AxisValue",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/anyaxismark/init(_:)",
                "title": "init(any AxisMark)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/anyaxismark/init(erasing:)",
                "title": "init(erasing: some AxisMark)",
                "type": "init"
              }
            ],
            "path": "/documentation/charts/anyaxismark",
            "title": "AnyAxisMark",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/axismarkbuilder/buildblock()",
                "title": "static func buildBlock() -> some AxisMark",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axismarkbuilder/buildblock(_:)-5kk19",
                "title": "static func buildBlock<T>(T) -> T",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axismarkbuilder/buildblock(_:)-97cxo",
                "title": "static func buildBlock<each T>(repeat each T) -> some AxisMark",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axismarkbuilder/buildeither(first:)",
                "title": "static func buildEither<T1, T2>(first: T1) -> BuilderConditional<T1, T2>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axismarkbuilder/buildeither(second:)",
                "title": "static func buildEither<T1, T2>(second: T2) -> BuilderConditional<T1, T2>",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axismarkbuilder/buildexpression(_:)",
                "title": "static func buildExpression<Content>(Content) -> Content",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axismarkbuilder/buildif(_:)",
                "title": "static func buildIf<T>(T?) -> T?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axismarkbuilder/buildlimitedavailability(_:)",
                "title": "static func buildLimitedAvailability<Content>(Content) -> AnyAxisMark",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axismarkbuilder/buildpartialblock(accumulated:next:)",
                "title": "static func buildPartialBlock(accumulated: some AxisMark, next: some AxisMark) -> some AxisMark",
                "type": "method"
              },
              {
                "path": "/documentation/charts/axismarkbuilder/buildpartialblock(first:)",
                "title": "static func buildPartialBlock<T>(first: T) -> T",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/axismarkbuilder",
            "title": "AxisMarkBuilder",
            "type": "struct"
          },
          {
            "title": "Annotations",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/annotationcontext/targetsize",
                "title": "let targetSize: CGSize",
                "type": "property"
              }
            ],
            "path": "/documentation/charts/annotationcontext",
            "title": "AnnotationContext",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/annotationposition/automatic",
                "title": "static let automatic: AnnotationPosition",
                "type": "property"
              },
              {
                "path": "/documentation/charts/annotationposition/bottom",
                "title": "static let bottom: AnnotationPosition",
                "type": "property"
              },
              {
                "path": "/documentation/charts/annotationposition/bottomleading",
                "title": "static let bottomLeading: AnnotationPosition",
                "type": "property"
              },
              {
                "path": "/documentation/charts/annotationposition/bottomtrailing",
                "title": "static let bottomTrailing: AnnotationPosition",
                "type": "property"
              },
              {
                "path": "/documentation/charts/annotationposition/leading",
                "title": "static let leading: AnnotationPosition",
                "type": "property"
              },
              {
                "path": "/documentation/charts/annotationposition/overlay",
                "title": "static let overlay: AnnotationPosition",
                "type": "property"
              },
              {
                "path": "/documentation/charts/annotationposition/top",
                "title": "static let top: AnnotationPosition",
                "type": "property"
              },
              {
                "path": "/documentation/charts/annotationposition/topleading",
                "title": "static let topLeading: AnnotationPosition",
                "type": "property"
              },
              {
                "path": "/documentation/charts/annotationposition/toptrailing",
                "title": "static let topTrailing: AnnotationPosition",
                "type": "property"
              },
              {
                "path": "/documentation/charts/annotationposition/trailing",
                "title": "static let trailing: AnnotationPosition",
                "type": "property"
              }
            ],
            "path": "/documentation/charts/annotationposition",
            "title": "AnnotationPosition",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/annotationoverflowresolution/boundary/automatic",
                    "title": "static let automatic: AnnotationOverflowResolution.Boundary",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/annotationoverflowresolution/boundary/chart",
                    "title": "static let chart: AnnotationOverflowResolution.Boundary",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/annotationoverflowresolution/boundary/plot",
                    "title": "static let plot: AnnotationOverflowResolution.Boundary",
                    "type": "property"
                  }
                ],
                "path": "/documentation/charts/annotationoverflowresolution/boundary",
                "title": "AnnotationOverflowResolution.Boundary",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/annotationoverflowresolution/strategy/automatic",
                    "title": "static let automatic: AnnotationOverflowResolution.Strategy",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/annotationoverflowresolution/strategy/disabled",
                    "title": "static let disabled: AnnotationOverflowResolution.Strategy",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/annotationoverflowresolution/strategy/fit",
                    "title": "static let fit: AnnotationOverflowResolution.Strategy",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/annotationoverflowresolution/strategy/padscale",
                    "title": "static let padScale: AnnotationOverflowResolution.Strategy",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/annotationoverflowresolution/strategy/fit(to:)",
                    "title": "static func fit(to: AnnotationOverflowResolution.Boundary) -> AnnotationOverflowResolution.Strategy",
                    "type": "method"
                  }
                ],
                "path": "/documentation/charts/annotationoverflowresolution/strategy",
                "title": "AnnotationOverflowResolution.Strategy",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/annotationoverflowresolution/init(x:y:)",
                "title": "init(x: AnnotationOverflowResolution.Strategy, y: AnnotationOverflowResolution.Strategy)",
                "type": "init"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/annotationoverflowresolution/automatic",
                "title": "static let automatic: AnnotationOverflowResolution",
                "type": "property"
              }
            ],
            "path": "/documentation/charts/annotationoverflowresolution",
            "title": "AnnotationOverflowResolution",
            "type": "struct"
          },
          {
            "title": "Data bins",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/numberbins/init(data:desiredcount:minimumstride:)-3txi5",
                "title": "init(data: [Value], desiredCount: Int?, minimumStride: Value)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/numberbins/init(data:desiredcount:minimumstride:)-8pvv7",
                "title": "init(data: [Value], desiredCount: Int?, minimumStride: Value)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/numberbins/init(range:count:)-6hip8",
                "title": "init(range: ClosedRange<Value>, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/numberbins/init(range:count:)-7975l",
                "title": "init(range: ClosedRange<Value>, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/numberbins/init(range:desiredcount:minimumstride:)-32ok2",
                "title": "init(range: ClosedRange<Value>, desiredCount: Int, minimumStride: Value)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/numberbins/init(range:desiredcount:minimumstride:)-4qxfa",
                "title": "init(range: ClosedRange<Value>, desiredCount: Int, minimumStride: Value)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/numberbins/init(size:range:)-3ach2",
                "title": "init(size: Value, range: ClosedRange<Value>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/numberbins/init(size:range:)-5me6y",
                "title": "init(size: Value, range: ClosedRange<Value>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/numberbins/init(thresholds:)",
                "title": "init(thresholds: [Value])",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/numberbins/thresholds",
                "title": "var thresholds: [Value]",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/numberbins/index(for:)",
                "title": "func index(for: Value) -> Int",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/numberbins",
            "title": "NumberBins",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/datebins/init(data:desiredcount:calendar:)",
                "title": "init(data: [Date], desiredCount: Int?, calendar: Calendar)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/datebins/init(range:desiredcount:calendar:)",
                "title": "init(range: ClosedRange<Date>, desiredCount: Int, calendar: Calendar)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/datebins/init(thresholds:)",
                "title": "init(thresholds: [Date])",
                "type": "init"
              },
              {
                "path": "/documentation/charts/datebins/init(timeinterval:range:)",
                "title": "init(timeInterval: TimeInterval, range: ClosedRange<Date>)",
                "type": "init"
              },
              {
                "path": "/documentation/charts/datebins/init(unit:by:range:calendar:)",
                "title": "init(unit: Calendar.Component, by: Int, range: ClosedRange<Date>, calendar: Calendar)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/datebins/thresholds",
                "title": "var thresholds: [Date]",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/datebins/index(for:)",
                "title": "func index(for: Date) -> Int",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/datebins",
            "title": "DateBins",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartbinrange/lowerbound",
                "title": "let lowerBound: Bound",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartbinrange/upperbound",
                "title": "let upperBound: Bound",
                "type": "property"
              }
            ],
            "path": "/documentation/charts/chartbinrange",
            "title": "ChartBinRange",
            "type": "struct"
          },
          {
            "title": "Chart management",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/charts/chartplotcontent",
            "title": "ChartPlotContent",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartproxy/plotareaframe",
                "title": "var plotAreaFrame: Anchor<CGRect>",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartproxy/plotareasize",
                "title": "var plotAreaSize: CGSize",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartproxy/plotcontainerframe",
                "title": "var plotContainerFrame: Anchor<CGRect>?",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartproxy/plotframe",
                "title": "var plotFrame: Anchor<CGRect>?",
                "type": "property"
              },
              {
                "path": "/documentation/charts/chartproxy/plotsize",
                "title": "var plotSize: CGSize",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartproxy/angle(at:)",
                "title": "func angle(at: CGPoint) -> Angle",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/foregroundstyle(for:)",
                "title": "func foregroundStyle<P>(for: P) -> AnyShapeStyle?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/foregroundstyledomain(datatype:)",
                "title": "func foregroundStyleDomain<P>(dataType: P.Type) -> [P]",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/linestyle(for:)",
                "title": "func lineStyle<P>(for: P) -> StrokeStyle?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/linestyledomain(datatype:)",
                "title": "func lineStyleDomain<P>(dataType: P.Type) -> [P]",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/position(for:)",
                "title": "func position<X, Y>(for: (x: X, y: Y)) -> CGPoint?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/position(forx:)",
                "title": "func position<P>(forX: P) -> CGFloat?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/position(fory:)",
                "title": "func position<P>(forY: P) -> CGFloat?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/positionrange(for:)",
                "title": "func positionRange<X, Y>(for: (x: X, y: Y)) -> CGRect?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/positionrange(forx:)",
                "title": "func positionRange<P>(forX: P) -> ClosedRange<CGFloat>?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/positionrange(fory:)",
                "title": "func positionRange<P>(forY: P) -> ClosedRange<CGFloat>?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/selectanglevalue(at:)",
                "title": "func selectAngleValue(at: Angle)",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/selectxrange(from:to:)",
                "title": "func selectXRange(from: CGFloat, to: CGFloat)",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/selectxvalue(at:)",
                "title": "func selectXValue(at: CGFloat)",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/selectyrange(from:to:)",
                "title": "func selectYRange(from: CGFloat, to: CGFloat)",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/selectyvalue(at:)",
                "title": "func selectYValue(at: CGFloat)",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/symbol(for:)",
                "title": "func symbol<P>(for: P) -> AnyChartSymbolShape?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/symboldomain(datatype:)",
                "title": "func symbolDomain<P>(dataType: P.Type) -> [P]",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/symbolsize(for:)",
                "title": "func symbolSize<P>(for: P) -> CGFloat?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/symbolsizedomain(datatype:)",
                "title": "func symbolSizeDomain<P>(dataType: P.Type) -> [P]",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/value(at:as:)",
                "title": "func value<X, Y>(at: CGPoint, as: (X, Y).Type) -> (X, Y)?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/value(atangle:as:)",
                "title": "func value<P>(atAngle: Angle, as: P.Type) -> P?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/value(atx:as:)",
                "title": "func value<P>(atX: CGFloat, as: P.Type) -> P?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/value(aty:as:)",
                "title": "func value<P>(atY: CGFloat, as: P.Type) -> P?",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/xdomain(datatype:)",
                "title": "func xDomain<P>(dataType: P.Type) -> [P]",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartproxy/ydomain(datatype:)",
                "title": "func yDomain<P>(dataType: P.Type) -> [P]",
                "type": "method"
              }
            ],
            "path": "/documentation/charts/chartproxy",
            "title": "ChartProxy",
            "type": "struct"
          },
          {
            "title": "Scrolling",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/majorvaluealignment/page",
                    "title": "static var page: MajorValueAlignment<Value>",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/majorvaluealignment/matching(_:)",
                    "title": "static func matching(DateComponents) -> MajorValueAlignment<Value>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/charts/majorvaluealignment/unit(_:)",
                    "title": "static func unit(Value) -> MajorValueAlignment<Value>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/charts/majorvaluealignment",
                "title": "MajorValueAlignment",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/valuealignedlimitbehavior/always",
                    "title": "static var always: ValueAlignedLimitBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/valuealignedlimitbehavior/automatic",
                    "title": "static var automatic: ValueAlignedLimitBehavior",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/charts/valuealignedlimitbehavior/never",
                    "title": "static var never: ValueAlignedLimitBehavior",
                    "type": "property"
                  }
                ],
                "path": "/documentation/charts/valuealignedlimitbehavior",
                "title": "ValueAlignedLimitBehavior",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/valuealignedchartscrolltargetbehavior/init(matching:majoralignment:limitbehavior:)",
                    "title": "init(matching: DateComponents, majorAlignment: MajorValueAlignment<Date>?, limitBehavior: ValueAlignedLimitBehavior)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/charts/valuealignedchartscrolltargetbehavior/init(unit:majoralignment:limitbehavior:)",
                    "title": "init<T>(unit: T, majorAlignment: MajorValueAlignment<T>?, limitBehavior: ValueAlignedLimitBehavior)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/charts/valuealignedchartscrolltargetbehavior/init(xmatching:ymatching:xmajoralignment:ymajoralignment:limitbehavior:)",
                    "title": "init(xMatching: DateComponents, yMatching: DateComponents, xMajorAlignment: MajorValueAlignment<Date>?, yMajorAlignment: MajorValueAlignment<Date>?, limitBehavior: ValueAlignedLimitBehavior)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/charts/valuealignedchartscrolltargetbehavior/init(xmatching:yunit:xmajoralignment:ymajoralignment:limitbehavior:)",
                    "title": "init<Y>(xMatching: DateComponents, yUnit: Y, xMajorAlignment: MajorValueAlignment<Date>?, yMajorAlignment: MajorValueAlignment<Y>?, limitBehavior: ValueAlignedLimitBehavior)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/charts/valuealignedchartscrolltargetbehavior/init(xunit:ymatching:xmajoralignment:ymajoralignment:limitbehavior:)",
                    "title": "init<X>(xUnit: X, yMatching: DateComponents, xMajorAlignment: MajorValueAlignment<X>?, yMajorAlignment: MajorValueAlignment<Date>?, limitBehavior: ValueAlignedLimitBehavior)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/charts/valuealignedchartscrolltargetbehavior/init(xunit:yunit:xmajoralignment:ymajoralignment:limitbehavior:)",
                    "title": "init<X, Y>(xUnit: X, yUnit: Y, xMajorAlignment: MajorValueAlignment<X>?, yMajorAlignment: MajorValueAlignment<Y>?, limitBehavior: ValueAlignedLimitBehavior)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/charts/valuealignedchartscrolltargetbehavior",
                "title": "ValueAlignedChartScrollTargetBehavior",
                "type": "struct"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartscrolltargetbehavior/updatetarget(_:context:)",
                "title": "func updateTarget(inout ScrollTarget, context: ChartScrollTargetBehaviorContext)",
                "type": "method"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartscrolltargetbehavior/valuealigned(matching:majoralignment:limitbehavior:)",
                "title": "static func valueAligned(matching: DateComponents, majorAlignment: MajorValueAlignment<Date>?, limitBehavior: ValueAlignedLimitBehavior) -> ValueAlignedChartScrollTargetBehavior",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartscrolltargetbehavior/valuealigned(unit:majoralignment:limitbehavior:)",
                "title": "static func valueAligned<P>(unit: P, majorAlignment: MajorValueAlignment<P>?, limitBehavior: ValueAlignedLimitBehavior) -> ValueAlignedChartScrollTargetBehavior",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartscrolltargetbehavior/valuealigned(xmatching:ymatching:xmajoralignment:ymajoralignment:limitbehavior:)",
                "title": "static func valueAligned(xMatching: DateComponents, yMatching: DateComponents, xMajorAlignment: MajorValueAlignment<Date>?, yMajorAlignment: MajorValueAlignment<Date>?, limitBehavior: ValueAlignedLimitBehavior) -> ValueAlignedChartScrollTargetBehavior",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartscrolltargetbehavior/valuealigned(xmatching:yunit:xmajoralignment:ymajoralignment:limitbehavior:)",
                "title": "static func valueAligned<Y>(xMatching: DateComponents, yUnit: Y, xMajorAlignment: MajorValueAlignment<Date>?, yMajorAlignment: MajorValueAlignment<Y>?, limitBehavior: ValueAlignedLimitBehavior) -> ValueAlignedChartScrollTargetBehavior",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartscrolltargetbehavior/valuealigned(xunit:ymatching:xmajoralignment:ymajoralignment:limitbehavior:)",
                "title": "static func valueAligned<X>(xUnit: X, yMatching: DateComponents, xMajorAlignment: MajorValueAlignment<X>?, yMajorAlignment: MajorValueAlignment<Date>?, limitBehavior: ValueAlignedLimitBehavior) -> ValueAlignedChartScrollTargetBehavior",
                "type": "method"
              },
              {
                "path": "/documentation/charts/chartscrolltargetbehavior/valuealigned(xunit:yunit:xmajoralignment:ymajoralignment:limitbehavior:)",
                "title": "static func valueAligned<X, Y>(xUnit: X, yUnit: Y, xMajorAlignment: MajorValueAlignment<X>?, yMajorAlignment: MajorValueAlignment<Y>?, limitBehavior: ValueAlignedLimitBehavior) -> ValueAlignedChartScrollTargetBehavior",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/charts/chartscrolltargetbehavior/updatetarget(_:context:)-8j5z4",
                    "title": "func updateTarget(inout ScrollTarget, context: ScrollTargetBehaviorContext)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/charts/chartscrolltargetbehavior/scrolltargetbehavior-implementations",
                "title": "ScrollTargetBehavior Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/charts/chartscrolltargetbehavior",
            "title": "ChartScrollTargetBehavior",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartscrolltargetbehaviorcontext/chartproxy",
                "title": "var chartProxy: ChartProxy",
                "type": "property"
              },
              {
                "title": "Subscripts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/charts/chartscrolltargetbehaviorcontext/subscript(dynamicmember:)",
                "title": "subscript<T>(dynamicMember _: KeyPath<ScrollTargetBehaviorContext, T>) -> T",
                "type": "subscript"
              }
            ],
            "path": "/documentation/charts/chartscrolltargetbehaviorcontext",
            "title": "ChartScrollTargetBehaviorContext",
            "type": "struct"
          }
        ],
        "path": "/documentation/charts",
        "title": "Swift Charts",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
