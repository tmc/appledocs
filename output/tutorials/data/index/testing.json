{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testing/definingtests",
            "title": "Defining test functions",
            "type": "article"
          },
          {
            "path": "/documentation/testing/organizingtests",
            "title": "Organizing test functions with suite types",
            "type": "article"
          },
          {
            "path": "/documentation/testing/migratingfromxctest",
            "title": "Migrating a test from XCTest",
            "type": "article"
          },
          {
            "title": "Test parameterization",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testing/parameterizedtesting",
            "title": "Implementing parameterized tests",
            "type": "article"
          },
          {
            "title": "Behavior validation",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Checking expectations",
                "type": "groupMarker"
              },
              {
                "title": "Checking that errors are thrown",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/testing-for-errors-in-swift-code",
                "title": "Testing for errors in Swift code",
                "type": "article"
              },
              {
                "title": "Confirming that asynchronous events occur",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/testing-asynchronous-code",
                "title": "Testing asynchronous code",
                "type": "article"
              },
              {
                "title": "Retrieving information about checked expectations",
                "type": "groupMarker"
              },
              {
                "title": "Representing source locations",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/testing/expectations",
            "title": "Expectations and confirmations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Recording known issues in tests",
                "type": "groupMarker"
              },
              {
                "title": "Describing a failure or warning",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/testing/known-issues",
            "title": "Known issues",
            "type": "collection"
          },
          {
            "title": "Test customization",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Customizing runtime behaviors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/enablinganddisabling",
                "title": "Enabling and disabling tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/limitingexecutiontime",
                "title": "Limiting the running time of tests",
                "type": "article"
              },
              {
                "title": "Running tests serially or in parallel",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/parallelization",
                "title": "Running tests serially or in parallel",
                "type": "article"
              },
              {
                "title": "Annotating tests",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/addingtags",
                "title": "Adding tags to tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/addingcomments",
                "title": "Adding comments to tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/associatingbugs",
                "title": "Associating bugs with tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/bugidentifiers",
                "title": "Interpreting bug identifiers",
                "type": "article"
              },
              {
                "title": "Creating custom traits",
                "type": "groupMarker"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/testing/traits",
            "title": "Traits",
            "type": "collection"
          }
        ],
        "path": "/documentation/testing",
        "title": "Swift Testing",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testing/definingtests",
            "title": "Defining test functions",
            "type": "article"
          },
          {
            "path": "/documentation/testing/organizingtests",
            "title": "Organizing test functions with suite types",
            "type": "article"
          },
          {
            "path": "/documentation/testing/migratingfromxctest",
            "title": "Migrating a test from XCTest",
            "type": "article"
          },
          {
            "title": "Test parameterization",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testing/parameterizedtesting",
            "title": "Implementing parameterized tests",
            "type": "article"
          },
          {
            "title": "Behavior validation",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Checking expectations",
                "type": "groupMarker"
              },
              {
                "title": "Checking that errors are thrown",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/testing-for-errors-in-swift-code",
                "title": "Testing for errors in Swift code",
                "type": "article"
              },
              {
                "title": "Confirming that asynchronous events occur",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/testing-asynchronous-code",
                "title": "Testing asynchronous code",
                "type": "article"
              },
              {
                "title": "Retrieving information about checked expectations",
                "type": "groupMarker"
              },
              {
                "title": "Representing source locations",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/testing/expectations",
            "title": "Expectations and confirmations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Recording known issues in tests",
                "type": "groupMarker"
              },
              {
                "title": "Describing a failure or warning",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/testing/known-issues",
            "title": "Known issues",
            "type": "collection"
          },
          {
            "title": "Test customization",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Customizing runtime behaviors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/enablinganddisabling",
                "title": "Enabling and disabling tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/limitingexecutiontime",
                "title": "Limiting the running time of tests",
                "type": "article"
              },
              {
                "title": "Running tests serially or in parallel",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/parallelization",
                "title": "Running tests serially or in parallel",
                "type": "article"
              },
              {
                "title": "Annotating tests",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/addingtags",
                "title": "Adding tags to tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/addingcomments",
                "title": "Adding comments to tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/associatingbugs",
                "title": "Associating bugs with tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/bugidentifiers",
                "title": "Interpreting bug identifiers",
                "type": "article"
              },
              {
                "title": "Creating custom traits",
                "type": "groupMarker"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/testing/traits",
            "title": "Traits",
            "type": "collection"
          }
        ],
        "path": "/documentation/testing",
        "title": "Swift Testing",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testing/definingtests",
            "title": "Defining test functions",
            "type": "article"
          },
          {
            "path": "/documentation/testing/organizingtests",
            "title": "Organizing test functions with suite types",
            "type": "article"
          },
          {
            "path": "/documentation/testing/migratingfromxctest",
            "title": "Migrating a test from XCTest",
            "type": "article"
          },
          {
            "path": "/documentation/testing/test(_:_:)",
            "title": "macro Test(String?, any TestTrait...)",
            "type": "macro"
          },
          {
            "children": [
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/test/case/isparameterized",
                    "title": "var isParameterized: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/test/case/current",
                    "title": "static var current: Test.Case?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/testing/test/case",
                "title": "Test.Case",
                "type": "struct"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/test/associatedbugs",
                "title": "var associatedBugs: [Bug]",
                "type": "property"
              },
              {
                "path": "/documentation/testing/test/comments",
                "title": "var comments: [Comment]",
                "type": "property"
              },
              {
                "path": "/documentation/testing/test/displayname",
                "title": "var displayName: String?",
                "type": "property"
              },
              {
                "path": "/documentation/testing/test/isparameterized",
                "title": "var isParameterized: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/testing/test/issuite",
                "title": "var isSuite: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/testing/test/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "path": "/documentation/testing/test/sourcelocation",
                "title": "var sourceLocation: SourceLocation",
                "type": "property"
              },
              {
                "path": "/documentation/testing/test/tags",
                "title": "var tags: Set<Tag>",
                "type": "property"
              },
              {
                "path": "/documentation/testing/test/timelimit",
                "title": "var timeLimit: Duration?",
                "type": "property"
              },
              {
                "path": "/documentation/testing/test/traits",
                "title": "var traits: [any Trait]",
                "type": "property"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/test/current",
                "title": "static var current: Test?",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/test/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/testing/test/==(_:_:)",
                    "title": "static func == (Test, Test) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/testing/test/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/test/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/test/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/testing/test/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/test/id-swift.struct/==(_:_:)",
                        "title": "static func == (Test.ID, Test.ID) -> Bool",
                        "type": "op"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/test/id-swift.struct/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/testing/test/id-swift.struct/modulename",
                        "title": "var moduleName: String",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/testing/test/id-swift.struct/namecomponents",
                        "title": "var nameComponents: [String]",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/testing/test/id-swift.struct/parent",
                        "title": "var parent: Test.ID?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/testing/test/id-swift.struct/sourcelocation",
                        "title": "var sourceLocation: SourceLocation?",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/test/id-swift.struct/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/test/id-swift.struct/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/testing/test/id-swift.struct/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Initializers",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/test/id-swift.struct/init(from:)",
                            "title": "init(from: any Decoder) throws",
                            "type": "init"
                          }
                        ],
                        "path": "/documentation/testing/test/id-swift.struct/decodable-implementations",
                        "title": "Decodable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/test/id-swift.struct/encode(to:)",
                            "title": "func encode(to: any Encoder) throws",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/testing/test/id-swift.struct/encodable-implementations",
                        "title": "Encodable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/test/id-swift.struct/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/testing/test/id-swift.struct/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/testing/test/id-swift.struct",
                    "title": "Test.ID",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/test/id-swift.property",
                    "title": "var id: Test.ID",
                    "type": "property"
                  }
                ],
                "path": "/documentation/testing/test/identifiable-implementations",
                "title": "Identifiable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/testing/test",
            "title": "Test",
            "type": "struct"
          },
          {
            "path": "/documentation/testing/suite(_:_:)",
            "title": "macro Suite(String?, any SuiteTrait...)",
            "type": "macro"
          },
          {
            "title": "Test parameterization",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testing/parameterizedtesting",
            "title": "Implementing parameterized tests",
            "type": "article"
          },
          {
            "path": "/documentation/testing/test(_:_:arguments:)-8kn7a",
            "title": "macro Test<C>(String?, any TestTrait..., arguments: C)",
            "type": "macro"
          },
          {
            "path": "/documentation/testing/test(_:_:arguments:_:)",
            "title": "macro Test<C1, C2>(String?, any TestTrait..., arguments: C1, C2)",
            "type": "macro"
          },
          {
            "path": "/documentation/testing/test(_:_:arguments:)-3rzok",
            "title": "macro Test<C1, C2>(String?, any TestTrait..., arguments: Zip2Sequence<C1, C2>)",
            "type": "macro"
          },
          {
            "children": [
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/customtestargumentencodable/encodetestargument(to:)",
                "title": "func encodeTestArgument(to: some Encoder) throws",
                "type": "method"
              }
            ],
            "path": "/documentation/testing/customtestargumentencodable",
            "title": "CustomTestArgumentEncodable",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/test/case/isparameterized",
                "title": "var isParameterized: Bool",
                "type": "property"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/test/case/current",
                "title": "static var current: Test.Case?",
                "type": "property"
              }
            ],
            "path": "/documentation/testing/test/case",
            "title": "Test.Case",
            "type": "struct"
          },
          {
            "title": "Behavior validation",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Checking expectations",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/expect(_:_:sourcelocation:)",
                "title": "macro expect(Bool, @autoclosure () -> Comment?, sourceLocation: SourceLocation)",
                "type": "macro"
              },
              {
                "path": "/documentation/testing/require(_:_:sourcelocation:)-5l63q",
                "title": "macro require(Bool, @autoclosure () -> Comment?, sourceLocation: SourceLocation)",
                "type": "macro"
              },
              {
                "path": "/documentation/testing/require(_:_:sourcelocation:)-6w9oo",
                "title": "macro require<T>(T?, @autoclosure () -> Comment?, sourceLocation: SourceLocation) -> T",
                "type": "macro"
              },
              {
                "title": "Checking that errors are thrown",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/testing-for-errors-in-swift-code",
                "title": "Testing for errors in Swift code",
                "type": "article"
              },
              {
                "path": "/documentation/testing/expect(throws:_:sourcelocation:performing:)-1hfms",
                "title": "macro expect<E, R>(throws: E.Type, @autoclosure () -> Comment?, sourceLocation: SourceLocation, performing: () async throws -> R) -> E?",
                "type": "macro"
              },
              {
                "path": "/documentation/testing/expect(throws:_:sourcelocation:performing:)-7du1h",
                "title": "macro expect<E, R>(throws: E, @autoclosure () -> Comment?, sourceLocation: SourceLocation, performing: () async throws -> R) -> E?",
                "type": "macro"
              },
              {
                "deprecated": true,
                "path": "/documentation/testing/expect(_:sourcelocation:performing:throws:)",
                "title": "macro expect<R>(@autoclosure () -> Comment?, sourceLocation: SourceLocation, performing: () async throws -> R, throws: (any Error) async throws -> Bool) -> (any Error)?",
                "type": "macro"
              },
              {
                "path": "/documentation/testing/require(throws:_:sourcelocation:performing:)-7n34r",
                "title": "macro require<E, R>(throws: E.Type, @autoclosure () -> Comment?, sourceLocation: SourceLocation, performing: () async throws -> R) -> E",
                "type": "macro"
              },
              {
                "path": "/documentation/testing/require(throws:_:sourcelocation:performing:)-4djuw",
                "title": "macro require<E, R>(throws: E, @autoclosure () -> Comment?, sourceLocation: SourceLocation, performing: () async throws -> R) -> E",
                "type": "macro"
              },
              {
                "deprecated": true,
                "path": "/documentation/testing/require(_:sourcelocation:performing:throws:)",
                "title": "macro require<R>(@autoclosure () -> Comment?, sourceLocation: SourceLocation, performing: () async throws -> R, throws: (any Error) async throws -> Bool) -> any Error",
                "type": "macro"
              },
              {
                "title": "Confirming that asynchronous events occur",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/testing-asynchronous-code",
                "title": "Testing asynchronous code",
                "type": "article"
              },
              {
                "path": "/documentation/testing/confirmation(_:expectedcount:isolation:sourcelocation:_:)-5mqz2",
                "title": "func confirmation<R>(Comment?, expectedCount: Int, isolation: isolated (any Actor)?, sourceLocation: SourceLocation, (Confirmation) async throws -> sending R) async rethrows -> R",
                "type": "func"
              },
              {
                "path": "/documentation/testing/confirmation(_:expectedcount:isolation:sourcelocation:_:)-l3il",
                "title": "func confirmation<R>(Comment?, expectedCount: some RangeExpression<Int> & Sendable & Sequence<Int>, isolation: isolated (any Actor)?, sourceLocation: SourceLocation, (Confirmation) async throws -> sending R) async rethrows -> R",
                "type": "func"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/confirmation/callasfunction(count:)",
                    "title": "func callAsFunction(count: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/testing/confirmation/confirm(count:)",
                    "title": "func confirm(count: Int)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/testing/confirmation",
                "title": "Confirmation",
                "type": "struct"
              },
              {
                "title": "Retrieving information about checked expectations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/expectation/ispassing",
                    "title": "var isPassing: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/expectation/isrequired",
                    "title": "var isRequired: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/expectation/sourcelocation",
                    "title": "var sourceLocation: SourceLocation",
                    "type": "property"
                  }
                ],
                "path": "/documentation/testing/expectation",
                "title": "Expectation",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/expectationfailederror/expectation",
                    "title": "var expectation: Expectation",
                    "type": "property"
                  }
                ],
                "path": "/documentation/testing/expectationfailederror",
                "title": "ExpectationFailedError",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/customteststringconvertible/testdescription",
                    "title": "var testDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/testing/customteststringconvertible",
                "title": "CustomTestStringConvertible",
                "type": "protocol"
              },
              {
                "title": "Representing source locations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/sourcelocation/init(fileid:filepath:line:column:)",
                    "title": "init(fileID: String, filePath: String, line: Int, column: Int)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/sourcelocation/column",
                    "title": "var column: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/sourcelocation/fileid",
                    "title": "var fileID: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/sourcelocation/filename",
                    "title": "var fileName: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/sourcelocation/line",
                    "title": "var line: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/sourcelocation/modulename",
                    "title": "var moduleName: String",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/'...(_:)-4s3iq",
                        "title": "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/'...(_:)-7f4yi",
                        "title": "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/'...(_:_:)",
                        "title": "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/'.._(_:)",
                        "title": "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/'.._(_:_:)",
                        "title": "static func ..< (Self, Self) -> Range<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/_(_:_:)",
                        "title": "static func < (SourceLocation, SourceLocation) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/_(_:_:)-7mger",
                        "title": "static func > (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/_=(_:_:)-1xwia",
                        "title": "static func <= (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/_=(_:_:)-7adpb",
                        "title": "static func >= (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/testing/sourcelocation/comparable-implementations",
                    "title": "Comparable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/testing/sourcelocation/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/testing/sourcelocation/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/testing/sourcelocation/decodable-implementations",
                    "title": "Decodable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/sourcelocation/encodable-implementations",
                    "title": "Encodable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/==(_:_:)",
                        "title": "static func == (SourceLocation, SourceLocation) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/testing/sourcelocation/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/sourcelocation/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/sourcelocation/hashable-implementations",
                    "title": "Hashable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/testing/sourcelocation",
                "title": "SourceLocation",
                "type": "struct"
              }
            ],
            "path": "/documentation/testing/expectations",
            "title": "Expectations and confirmations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Recording known issues in tests",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/withknownissue(_:isintermittent:sourcelocation:_:)",
                "title": "func withKnownIssue(Comment?, isIntermittent: Bool, sourceLocation: SourceLocation, () throws -> Void)",
                "type": "func"
              },
              {
                "path": "/documentation/testing/withknownissue(_:isintermittent:isolation:sourcelocation:_:)",
                "title": "func withKnownIssue(Comment?, isIntermittent: Bool, isolation: isolated (any Actor)?, sourceLocation: SourceLocation, () async throws -> Void) async",
                "type": "func"
              },
              {
                "path": "/documentation/testing/withknownissue(_:isintermittent:sourcelocation:_:when:matching:)",
                "title": "func withKnownIssue(Comment?, isIntermittent: Bool, sourceLocation: SourceLocation, () throws -> Void, when: () -> Bool, matching: KnownIssueMatcher) rethrows",
                "type": "func"
              },
              {
                "path": "/documentation/testing/withknownissue(_:isintermittent:isolation:sourcelocation:_:when:matching:)",
                "title": "func withKnownIssue(Comment?, isIntermittent: Bool, isolation: isolated (any Actor)?, sourceLocation: SourceLocation, () async throws -> Void, when: () async -> Bool, matching: KnownIssueMatcher) async rethrows",
                "type": "func"
              },
              {
                "path": "/documentation/testing/knownissuematcher",
                "title": "KnownIssueMatcher",
                "type": "typealias"
              },
              {
                "title": "Describing a failure or warning",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/issue/comments",
                    "title": "var comments: [Comment]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/issue/error",
                    "title": "var error: (any Error)?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/issue/kind-swift.property",
                    "title": "var kind: Issue.Kind",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/issue/sourcelocation",
                    "title": "var sourceLocation: SourceLocation?",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/issue/record(_:_:sourcelocation:)",
                    "title": "static func record(any Error, Comment?, sourceLocation: SourceLocation) -> Issue",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/testing/issue/record(_:sourcelocation:)",
                    "title": "static func record(Comment?, sourceLocation: SourceLocation) -> Issue",
                    "type": "method"
                  },
                  {
                    "title": "Enumerations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/issue/kind-swift.enum/apimisused",
                        "title": "case apiMisused",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/testing/issue/kind-swift.enum/confirmationmiscounted(actual:expected:)",
                        "title": "case confirmationMiscounted(actual: Int, expected: any RangeExpression & Sendable)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/testing/issue/kind-swift.enum/errorcaught(_:)",
                        "title": "case errorCaught(any Error)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/testing/issue/kind-swift.enum/expectationfailed(_:)",
                        "title": "case expectationFailed(Expectation)",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/testing/issue/kind-swift.enum/knownissuenotrecorded",
                        "title": "case knownIssueNotRecorded",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/testing/issue/kind-swift.enum/system",
                        "title": "case system",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/testing/issue/kind-swift.enum/timelimitexceeded(timelimitcomponents:)",
                        "title": "case timeLimitExceeded(timeLimitComponents: (seconds: Int64, attoseconds: Int64))",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/testing/issue/kind-swift.enum/unconditional",
                        "title": "case unconditional",
                        "type": "case"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/issue/kind-swift.enum/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/testing/issue/kind-swift.enum/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/testing/issue/kind-swift.enum",
                    "title": "Issue.Kind",
                    "type": "enum"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/issue/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/testing/issue/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/issue/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/testing/issue/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/testing/issue",
                "title": "Issue",
                "type": "struct"
              }
            ],
            "path": "/documentation/testing/known-issues",
            "title": "Known issues",
            "type": "collection"
          },
          {
            "title": "Test customization",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Customizing runtime behaviors",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/enablinganddisabling",
                "title": "Enabling and disabling tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/limitingexecutiontime",
                "title": "Limiting the running time of tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/trait/enabled(if:_:sourcelocation:)",
                "title": "static func enabled(if: @autoclosure () throws -> Bool, Comment?, sourceLocation: SourceLocation) -> Self",
                "type": "method"
              },
              {
                "path": "/documentation/testing/trait/enabled(_:sourcelocation:_:)",
                "title": "static func enabled(Comment?, sourceLocation: SourceLocation, () async throws -> Bool) -> Self",
                "type": "method"
              },
              {
                "path": "/documentation/testing/trait/disabled(_:sourcelocation:)",
                "title": "static func disabled(Comment?, sourceLocation: SourceLocation) -> Self",
                "type": "method"
              },
              {
                "path": "/documentation/testing/trait/disabled(if:_:sourcelocation:)",
                "title": "static func disabled(if: @autoclosure () throws -> Bool, Comment?, sourceLocation: SourceLocation) -> Self",
                "type": "method"
              },
              {
                "path": "/documentation/testing/trait/disabled(_:sourcelocation:_:)",
                "title": "static func disabled(Comment?, sourceLocation: SourceLocation, () async throws -> Bool) -> Self",
                "type": "method"
              },
              {
                "path": "/documentation/testing/trait/timelimit(_:)",
                "title": "static func timeLimit(TimeLimitTrait.Duration) -> Self",
                "type": "method"
              },
              {
                "title": "Running tests serially or in parallel",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/parallelization",
                "title": "Running tests serially or in parallel",
                "type": "article"
              },
              {
                "path": "/documentation/testing/trait/serialized",
                "title": "static var serialized: ParallelizationTrait",
                "type": "property"
              },
              {
                "title": "Annotating tests",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testing/addingtags",
                "title": "Adding tags to tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/addingcomments",
                "title": "Adding comments to tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/associatingbugs",
                "title": "Associating bugs with tests",
                "type": "article"
              },
              {
                "path": "/documentation/testing/bugidentifiers",
                "title": "Interpreting bug identifiers",
                "type": "article"
              },
              {
                "path": "/documentation/testing/tag()",
                "title": "macro Tag()",
                "type": "macro"
              },
              {
                "path": "/documentation/testing/trait/bug(_:_:)",
                "title": "static func bug(String, Comment?) -> Self",
                "type": "method"
              },
              {
                "path": "/documentation/testing/trait/bug(_:id:_:)-10yf5",
                "title": "static func bug(String?, id: String, Comment?) -> Self",
                "type": "method"
              },
              {
                "path": "/documentation/testing/trait/bug(_:id:_:)-3vtpl",
                "title": "static func bug(String?, id: some Numeric, Comment?) -> Self",
                "type": "method"
              },
              {
                "title": "Creating custom traits",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Enabling and disabling tests",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/trait/enabled(if:_:sourcelocation:)",
                    "title": "static func enabled(if: @autoclosure () throws -> Bool, Comment?, sourceLocation: SourceLocation) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/testing/trait/enabled(_:sourcelocation:_:)",
                    "title": "static func enabled(Comment?, sourceLocation: SourceLocation, () async throws -> Bool) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/testing/trait/disabled(_:sourcelocation:)",
                    "title": "static func disabled(Comment?, sourceLocation: SourceLocation) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/testing/trait/disabled(if:_:sourcelocation:)",
                    "title": "static func disabled(if: @autoclosure () throws -> Bool, Comment?, sourceLocation: SourceLocation) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/testing/trait/disabled(_:sourcelocation:_:)",
                    "title": "static func disabled(Comment?, sourceLocation: SourceLocation, () async throws -> Bool) -> Self",
                    "type": "method"
                  },
                  {
                    "title": "Limiting the running time of tests",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/trait/timelimit(_:)",
                    "title": "static func timeLimit(TimeLimitTrait.Duration) -> Self",
                    "type": "method"
                  },
                  {
                    "title": "Running tests serially or in parallel",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/trait/serialized",
                    "title": "static var serialized: ParallelizationTrait",
                    "type": "property"
                  },
                  {
                    "title": "Categorizing tests",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/trait/tags(_:)",
                    "title": "static func tags(Tag...) -> Self",
                    "type": "method"
                  },
                  {
                    "title": "Associating bugs",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/trait/bug(_:_:)",
                    "title": "static func bug(String, Comment?) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/testing/trait/bug(_:id:_:)-10yf5",
                    "title": "static func bug(String?, id: String, Comment?) -> Self",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/testing/trait/bug(_:id:_:)-3vtpl",
                    "title": "static func bug(String?, id: some Numeric, Comment?) -> Self",
                    "type": "method"
                  },
                  {
                    "title": "Adding information to tests",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/trait/comments",
                    "title": "var comments: [Comment]",
                    "type": "property"
                  },
                  {
                    "title": "Preparing internal state",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/trait/prepare(for:)",
                    "title": "func prepare(for: Test) async throws",
                    "type": "method"
                  },
                  {
                    "title": "Providing custom execution scope for tests",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/testscoping/providescope(for:testcase:performing:)",
                        "title": "func provideScope(for: Test, testCase: Test.Case?, performing: () async throws -> Void) async throws",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/testscoping",
                    "title": "TestScoping",
                    "type": "protocol"
                  },
                  {
                    "path": "/documentation/testing/trait/scopeprovider(for:testcase:)",
                    "title": "func scopeProvider(for: Test, testCase: Test.Case?) -> Self.TestScopeProvider?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/testing/trait/testscopeprovider",
                    "title": "TestScopeProvider",
                    "type": "associatedtype"
                  }
                ],
                "path": "/documentation/testing/trait",
                "title": "Trait",
                "type": "protocol"
              },
              {
                "path": "/documentation/testing/testtrait",
                "title": "TestTrait",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/suitetrait/isrecursive",
                    "title": "var isRecursive: Bool",
                    "type": "property"
                  }
                ],
                "path": "/documentation/testing/suitetrait",
                "title": "SuiteTrait",
                "type": "protocol"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/testscoping/providescope(for:testcase:performing:)",
                    "title": "func provideScope(for: Test, testCase: Test.Case?, performing: () async throws -> Void) async throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/testing/testscoping",
                "title": "TestScoping",
                "type": "protocol"
              },
              {
                "title": "Supporting types",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/bug/id",
                    "title": "var id: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/bug/title",
                    "title": "var title: Comment?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/bug/url",
                    "title": "var url: String?",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/bug/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/testing/bug/decodable-implementations",
                    "title": "Decodable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/bug/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/bug/encodable-implementations",
                    "title": "Encodable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/bug/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/bug/==(_:_:)",
                        "title": "static func == (Bug, Bug) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/testing/bug/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/bug/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/bug/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/bug/hashable-implementations",
                    "title": "Hashable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/bug/isrecursive",
                        "title": "var isRecursive: Bool",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/testing/bug/suitetrait-implementations",
                    "title": "SuiteTrait Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/bug/comments",
                        "title": "var comments: [Comment]",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/bug/prepare(for:)",
                        "title": "func prepare(for: Test) async throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testing/bug/scopeprovider(for:testcase:)",
                        "title": "func scopeProvider(for: Test, testCase: Test.Case?) -> Never?",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/bug/testscopeprovider",
                        "title": "Bug.TestScopeProvider",
                        "type": "typealias"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/bug/bug(_:_:)",
                        "title": "static func bug(String, Comment?) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testing/bug/bug(_:id:_:)-5uinv",
                        "title": "static func bug(String?, id: String, Comment?) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testing/bug/bug(_:id:_:)-9jvpc",
                        "title": "static func bug(String?, id: some Numeric, Comment?) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/bug/trait-implementations",
                    "title": "Trait Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/testing/bug",
                "title": "Bug",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/comment/init(rawvalue:)",
                    "title": "init(rawValue: String)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/comment/rawvalue-swift.property",
                    "title": "var rawValue: String",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/comment/rawvalue-swift.typealias",
                    "title": "Comment.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/testing/comment/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/testing/comment/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/init(unicodescalarliteral:)",
                        "title": "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                        "type": "init"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/extendedgraphemeclusterliteraltype",
                        "title": "Comment.ExtendedGraphemeClusterLiteralType",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/testing/comment/expressiblebyextendedgraphemeclusterliteral-implementations",
                    "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/init(stringinterpolation:)",
                        "title": "init(stringInterpolation: DefaultStringInterpolation)",
                        "type": "init"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/stringinterpolation",
                        "title": "Comment.StringInterpolation",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/testing/comment/expressiblebystringinterpolation-implementations",
                    "title": "ExpressibleByStringInterpolation Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/init(extendedgraphemeclusterliteral:)",
                        "title": "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/testing/comment/init(stringliteral:)",
                        "title": "init(stringLiteral: String)",
                        "type": "init"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/stringliteraltype",
                        "title": "Comment.StringLiteralType",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/testing/comment/expressiblebystringliteral-implementations",
                    "title": "ExpressibleByStringLiteral Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/unicodescalarliteraltype",
                        "title": "Comment.UnicodeScalarLiteralType",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/testing/comment/expressiblebyunicodescalarliteral-implementations",
                    "title": "ExpressibleByUnicodeScalarLiteral Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testing/comment/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/comment/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/isrecursive",
                        "title": "var isRecursive: Bool",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/testing/comment/suitetrait-implementations",
                    "title": "SuiteTrait Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/comments",
                        "title": "var comments: [Comment]",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/prepare(for:)",
                        "title": "func prepare(for: Test) async throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testing/comment/scopeprovider(for:testcase:)",
                        "title": "func scopeProvider(for: Test, testCase: Test.Case?) -> Never?",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/comment/testscopeprovider",
                        "title": "Comment.TestScopeProvider",
                        "type": "typealias"
                      }
                    ],
                    "path": "/documentation/testing/comment/trait-implementations",
                    "title": "Trait Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/testing/comment",
                "title": "Comment",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/conditiontrait/comments",
                    "title": "var comments: [Comment]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/conditiontrait/isrecursive",
                    "title": "var isRecursive: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/conditiontrait/sourcelocation",
                    "title": "var sourceLocation: SourceLocation",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/conditiontrait/prepare(for:)",
                    "title": "func prepare(for: Test) async throws",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/conditiontrait/testscopeprovider",
                    "title": "ConditionTrait.TestScopeProvider",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/conditiontrait/scopeprovider(for:testcase:)",
                        "title": "func scopeProvider(for: Test, testCase: Test.Case?) -> Never?",
                        "type": "method"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/conditiontrait/disabled(_:sourcelocation:)",
                        "title": "static func disabled(Comment?, sourceLocation: SourceLocation) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testing/conditiontrait/disabled(_:sourcelocation:_:)",
                        "title": "static func disabled(Comment?, sourceLocation: SourceLocation, () async throws -> Bool) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testing/conditiontrait/disabled(if:_:sourcelocation:)",
                        "title": "static func disabled(if: @autoclosure () throws -> Bool, Comment?, sourceLocation: SourceLocation) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testing/conditiontrait/enabled(_:sourcelocation:_:)",
                        "title": "static func enabled(Comment?, sourceLocation: SourceLocation, () async throws -> Bool) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testing/conditiontrait/enabled(if:_:sourcelocation:)",
                        "title": "static func enabled(if: @autoclosure () throws -> Bool, Comment?, sourceLocation: SourceLocation) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/conditiontrait/trait-implementations",
                    "title": "Trait Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/testing/conditiontrait",
                "title": "ConditionTrait",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/parallelizationtrait/isrecursive",
                    "title": "var isRecursive: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/parallelizationtrait/testscopeprovider",
                    "title": "ParallelizationTrait.TestScopeProvider",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/parallelizationtrait/comments",
                        "title": "var comments: [Comment]",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/parallelizationtrait/prepare(for:)",
                        "title": "func prepare(for: Test) async throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testing/parallelizationtrait/scopeprovider(for:testcase:)",
                        "title": "func scopeProvider(for: Test, testCase: Test.Case?) -> Never?",
                        "type": "method"
                      },
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/parallelizationtrait/serialized",
                        "title": "static var serialized: ParallelizationTrait",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/testing/parallelizationtrait/trait-implementations",
                    "title": "Trait Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/testing/parallelizationtrait",
                "title": "ParallelizationTrait",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/list/tags",
                        "title": "var tags: [Tag]",
                        "type": "property"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/tag/list/description",
                            "title": "var description: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/testing/tag/list/customstringconvertible-implementations",
                        "title": "CustomStringConvertible Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Operators",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/tag/list/!=(_:_:)",
                            "title": "static func != (Self, Self) -> Bool",
                            "type": "op"
                          },
                          {
                            "path": "/documentation/testing/tag/list/==(_:_:)",
                            "title": "static func == (Tag.List, Tag.List) -> Bool",
                            "type": "op"
                          }
                        ],
                        "path": "/documentation/testing/tag/list/equatable-implementations",
                        "title": "Equatable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/tag/list/hashvalue",
                            "title": "var hashValue: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/tag/list/hash(into:)",
                            "title": "func hash(into: inout Hasher)",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/testing/tag/list/hashable-implementations",
                        "title": "Hashable Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/tag/list/isrecursive",
                            "title": "var isRecursive: Bool",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/testing/tag/list/suitetrait-implementations",
                        "title": "SuiteTrait Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/tag/list/comments",
                            "title": "var comments: [Comment]",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/tag/list/prepare(for:)",
                            "title": "func prepare(for: Test) async throws",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/testing/tag/list/scopeprovider(for:testcase:)",
                            "title": "func scopeProvider(for: Test, testCase: Test.Case?) -> Never?",
                            "type": "method"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/tag/list/testscopeprovider",
                            "title": "Tag.List.TestScopeProvider",
                            "type": "typealias"
                          },
                          {
                            "title": "Type Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/testing/tag/list/tags(_:)",
                            "title": "static func tags(Tag...) -> Self",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/testing/tag/list/trait-implementations",
                        "title": "Trait Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/testing/tag/list",
                    "title": "Tag.List",
                    "type": "struct"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/init(codingkey:)",
                        "title": "init?<T>(codingKey: T)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/codingkey",
                        "title": "var codingKey: any CodingKey",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/testing/tag/codingkeyrepresentable-implementations",
                    "title": "CodingKeyRepresentable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/'...(_:)-4w7v",
                        "title": "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/tag/'...(_:)-77j2m",
                        "title": "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/tag/'...(_:_:)",
                        "title": "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/tag/'.._(_:)",
                        "title": "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/tag/'.._(_:_:)",
                        "title": "static func ..< (Self, Self) -> Range<Self>",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/tag/_(_:_:)",
                        "title": "static func < (Tag, Tag) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/tag/_(_:_:)-1ynzg",
                        "title": "static func > (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/tag/_=(_:_:)-39yni",
                        "title": "static func >= (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/tag/_=(_:_:)-3wog1",
                        "title": "static func <= (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/testing/tag/comparable-implementations",
                    "title": "Comparable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/testing/tag/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      }
                    ],
                    "path": "/documentation/testing/tag/decodable-implementations",
                    "title": "Decodable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/tag/encodable-implementations",
                    "title": "Encodable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/tag/==(_:_:)",
                        "title": "static func == (Tag, Tag) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/testing/tag/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/tag/hashable-implementations",
                    "title": "Hashable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/testing/tag",
                "title": "Tag",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/tag/list/tags",
                    "title": "var tags: [Tag]",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/list/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/testing/tag/list/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/list/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/testing/tag/list/==(_:_:)",
                        "title": "static func == (Tag.List, Tag.List) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/testing/tag/list/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/list/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/list/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/tag/list/hashable-implementations",
                    "title": "Hashable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/list/isrecursive",
                        "title": "var isRecursive: Bool",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/testing/tag/list/suitetrait-implementations",
                    "title": "SuiteTrait Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/list/comments",
                        "title": "var comments: [Comment]",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/list/prepare(for:)",
                        "title": "func prepare(for: Test) async throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testing/tag/list/scopeprovider(for:testcase:)",
                        "title": "func scopeProvider(for: Test, testCase: Test.Case?) -> Never?",
                        "type": "method"
                      },
                      {
                        "title": "Type Aliases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/list/testscopeprovider",
                        "title": "Tag.List.TestScopeProvider",
                        "type": "typealias"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/tag/list/tags(_:)",
                        "title": "static func tags(Tag...) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/tag/list/trait-implementations",
                    "title": "Trait Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/testing/tag/list",
                "title": "Tag.List",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/timelimittrait/duration/minutes(_:)",
                        "title": "static func minutes(some BinaryInteger) -> TimeLimitTrait.Duration",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/timelimittrait/duration",
                    "title": "TimeLimitTrait.Duration",
                    "type": "struct"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/timelimittrait/isrecursive",
                    "title": "var isRecursive: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/testing/timelimittrait/timelimit",
                    "title": "var timeLimit: Duration",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testing/timelimittrait/testscopeprovider",
                    "title": "TimeLimitTrait.TestScopeProvider",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/timelimittrait/comments",
                        "title": "var comments: [Comment]",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/timelimittrait/prepare(for:)",
                        "title": "func prepare(for: Test) async throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testing/timelimittrait/scopeprovider(for:testcase:)",
                        "title": "func scopeProvider(for: Test, testCase: Test.Case?) -> Never?",
                        "type": "method"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/testing/timelimittrait/timelimit(_:)",
                        "title": "static func timeLimit(TimeLimitTrait.Duration) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/testing/timelimittrait/trait-implementations",
                    "title": "Trait Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/testing/timelimittrait",
                "title": "TimeLimitTrait",
                "type": "struct"
              }
            ],
            "path": "/documentation/testing/traits",
            "title": "Traits",
            "type": "collection"
          }
        ],
        "path": "/documentation/testing",
        "title": "Swift Testing",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
