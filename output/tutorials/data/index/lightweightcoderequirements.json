{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Checking code requirements for running processes",
            "type": "groupMarker"
          },
          {
            "title": "Checking code requirements for launching processes",
            "type": "groupMarker"
          },
          {
            "title": "Checking code requirements for code files on disk",
            "type": "groupMarker"
          },
          {
            "title": "Testing properties of executable code",
            "type": "groupMarker"
          },
          {
            "title": "Handling errors",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/lightweightcoderequirements",
        "title": "LightweightCodeRequirements",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Checking code requirements for running processes",
            "type": "groupMarker"
          },
          {
            "title": "Checking code requirements for launching processes",
            "type": "groupMarker"
          },
          {
            "title": "Checking code requirements for code files on disk",
            "type": "groupMarker"
          },
          {
            "title": "Testing properties of executable code",
            "type": "groupMarker"
          },
          {
            "title": "Handling errors",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/lightweightcoderequirements",
        "title": "LightweightCodeRequirements",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Checking code requirements for running processes",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/lightweightcoderequirements/sectaskvalidateforrequirement(task:requirement:)",
            "title": "func SecTaskValidateForRequirement(task: SecTask, requirement: ProcessCodeRequirement) throws -> Bool",
            "type": "func"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processcoderequirement/init(_:)-1va02",
                "title": "init(OnDiskCodeRequirement) throws",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processcoderequirement/init(_:)-4gkz2",
                "title": "init(LaunchCodeRequirement) throws",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processcoderequirement/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processcoderequirement/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processcoderequirement/allof(requirement:)",
                "title": "static func allOf(requirement: () -> [any ProcessConstraint]) throws -> ProcessCodeRequirement",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processcoderequirement/anyof(requirement:)",
                "title": "static func anyOf(requirement: () -> [any ProcessConstraint]) throws -> ProcessCodeRequirement",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcoderequirement/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcoderequirement/==(_:_:)",
                    "title": "static func == (ProcessCodeRequirement, ProcessCodeRequirement) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/lightweightcoderequirements/processcoderequirement/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/processcoderequirement",
            "title": "ProcessCodeRequirement",
            "type": "struct"
          },
          {
            "path": "/documentation/lightweightcoderequirements/allof(requirement:)-4k3ay",
            "title": "func allOf(requirement: () -> [any ProcessConstraint]) -> any ProcessConstraint",
            "type": "func"
          },
          {
            "path": "/documentation/lightweightcoderequirements/anyof(requirement:)-vwhn",
            "title": "func anyOf(requirement: () -> [any ProcessConstraint]) -> any ProcessConstraint",
            "type": "func"
          },
          {
            "path": "/documentation/lightweightcoderequirements/processconstraint",
            "title": "ProcessConstraint",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/init(rawvalue:)",
                    "title": "init(rawValue: Int64)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/rawvalue-swift.property",
                    "title": "let rawValue: Int64",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/arrayliteralelement",
                    "title": "ProcessCodeSigningFlags.ValueSet.ArrayLiteralElement",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/element",
                    "title": "ProcessCodeSigningFlags.ValueSet.Element",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/rawvalue-swift.typealias",
                    "title": "ProcessCodeSigningFlags.ValueSet.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/isadhocsigned",
                    "title": "static let isAdhocSigned: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/iscertificateexpirationenforced",
                    "title": "static let isCertificateExpirationEnforced: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/iscodesignaturerequiredforallexecutablecode",
                    "title": "static let isCodeSignatureRequiredForAllExecutableCode: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/isdebuggable",
                    "title": "static let isDebuggable: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/isdebugged",
                    "title": "static let isDebugged: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/isdynamiclinkerpolicyhardened",
                    "title": "static let isDynamicLinkerPolicyHardened: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/isdynamicallyvalid",
                    "title": "static let isDynamicallyValid: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/ishardenedruntimeenforced",
                    "title": "static let isHardenedRuntimeEnforced: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/islibraryvalidationrequired",
                    "title": "static let isLibraryValidationRequired: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/isplatformsigned",
                    "title": "static let isPlatformSigned: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/issigned",
                    "title": "static let isSigned: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/issignedbylinker",
                    "title": "static let isSignedByLinker: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/signalsbuserroroncodesigningfailure",
                    "title": "static let signalsBusErrorOnCodeSigningFailure: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/terminatesoncodesigningfailure",
                    "title": "static let terminatesOnCodeSigningFailure: ProcessCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/optionset-implementations",
                    "title": "OptionSet Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset/setalgebra-implementations",
                    "title": "SetAlgebra Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/lightweightcoderequirements/processcodesigningflags/valueset",
                "title": "ProcessCodeSigningFlags.ValueSet",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processcodesigningflags/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processcodesigningflags/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processcodesigningflags/datatype",
                "title": "ProcessCodeSigningFlags.DataType",
                "type": "typealias"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processcodesigningflags/outtype",
                "title": "ProcessCodeSigningFlags.OutType",
                "type": "typealias"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processcodesigningflags/issuperset(of:)",
                "title": "static func isSuperset(of: ProcessCodeSigningFlags.DataType) -> ProcessCodeSigningFlags.OutType",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/processcodesigningflags",
            "title": "ProcessCodeSigningFlags",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processconstraintbuilder/buildblock(_:)",
                "title": "static func buildBlock([any ProcessConstraint]...) -> [any ProcessConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processconstraintbuilder/buildeither(first:)",
                "title": "static func buildEither(first: [any ProcessConstraint]) -> [any ProcessConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processconstraintbuilder/buildeither(second:)",
                "title": "static func buildEither(second: [any ProcessConstraint]) -> [any ProcessConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processconstraintbuilder/buildexpression(_:)-6zrmh",
                "title": "static func buildExpression([any ProcessConstraint]) -> [any ProcessConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processconstraintbuilder/buildexpression(_:)-7rglu",
                "title": "static func buildExpression(any ProcessConstraint) -> [any ProcessConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/processconstraintbuilder/buildoptional(_:)",
                "title": "static func buildOptional([any ProcessConstraint]?) -> [any ProcessConstraint]",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/processconstraintbuilder",
            "title": "ProcessConstraintBuilder",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/teamidentifiermatchescurrentprocess/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/teamidentifiermatchescurrentprocess/init(_:)",
                "title": "init(Bool)",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/teamidentifiermatchescurrentprocess/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/teamidentifiermatchescurrentprocess/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/teamidentifiermatchescurrentprocess",
            "title": "TeamIdentifierMatchesCurrentProcess",
            "type": "struct"
          },
          {
            "title": "Checking code requirements for launching processes",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/lightweightcoderequirements/seccodecheckvaliditywithprocessrequirement(code:flags:requirement:)",
            "title": "func SecCodeCheckValidityWithProcessRequirement(code: SecCode, flags: SecCSFlags, requirement: ProcessCodeRequirement) -> ValidationResult",
            "type": "func"
          },
          {
            "external": true,
            "path": "/documentation/foundation/process/4322522-launchrequirement",
            "title": "var launchRequirement: LaunchCodeRequirement?",
            "type": "property"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/launchcoderequirement/init(_:)-5fh0u",
                "title": "init(ProcessCodeRequirement) throws",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/launchcoderequirement/init(_:)-6hixy",
                "title": "init(OnDiskCodeRequirement) throws",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/launchcoderequirement/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/launchcoderequirement/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/launchcoderequirement/allof(requirement:)",
                "title": "static func allOf(requirement: () -> [any LaunchConstraint]) throws -> LaunchCodeRequirement",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/launchcoderequirement/anyof(requirement:)",
                "title": "static func anyOf(requirement: () -> [any LaunchConstraint]) throws -> LaunchCodeRequirement",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/launchcoderequirement/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/launchcoderequirement/==(_:_:)",
                    "title": "static func == (LaunchCodeRequirement, LaunchCodeRequirement) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/lightweightcoderequirements/launchcoderequirement/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/launchcoderequirement",
            "title": "LaunchCodeRequirement",
            "type": "struct"
          },
          {
            "path": "/documentation/lightweightcoderequirements/allof(requirement:)-4gf5f",
            "title": "func allOf(requirement: () -> [any LaunchConstraint]) -> any LaunchConstraint",
            "type": "func"
          },
          {
            "path": "/documentation/lightweightcoderequirements/anyof(requirement:)-6nicx",
            "title": "func anyOf(requirement: () -> [any LaunchConstraint]) -> any LaunchConstraint",
            "type": "func"
          },
          {
            "path": "/documentation/lightweightcoderequirements/launchconstraint",
            "title": "LaunchConstraint",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/launchconstraintbuilder/buildblock(_:)",
                "title": "static func buildBlock([any LaunchConstraint]...) -> [any LaunchConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/launchconstraintbuilder/buildeither(first:)",
                "title": "static func buildEither(first: [any LaunchConstraint]) -> [any LaunchConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/launchconstraintbuilder/buildeither(second:)",
                "title": "static func buildEither(second: [any LaunchConstraint]) -> [any LaunchConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/launchconstraintbuilder/buildexpression(_:)-5tl61",
                "title": "static func buildExpression(any LaunchConstraint) -> [any LaunchConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/launchconstraintbuilder/buildexpression(_:)-6l0k6",
                "title": "static func buildExpression([any LaunchConstraint]) -> [any LaunchConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/launchconstraintbuilder/buildoptional(_:)",
                "title": "static func buildOptional([any LaunchConstraint]?) -> [any LaunchConstraint]",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/launchconstraintbuilder",
            "title": "LaunchConstraintBuilder",
            "type": "struct"
          },
          {
            "title": "Checking code requirements for code files on disk",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/lightweightcoderequirements/secstaticcodecheckvaliditywithondiskrequirement(code:flags:requirement:)",
            "title": "func SecStaticCodeCheckValidityWithOnDiskRequirement(code: SecStaticCode, flags: SecCSFlags, requirement: OnDiskCodeRequirement) -> ValidationResult",
            "type": "func"
          },
          {
            "path": "/documentation/lightweightcoderequirements/seccodecheckvaliditywithondiskrequirement(code:flags:requirement:)",
            "title": "func SecCodeCheckValidityWithOnDiskRequirement(code: SecCode, flags: SecCSFlags, requirement: OnDiskCodeRequirement) -> ValidationResult",
            "type": "func"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/validationresult/failurereason",
                "title": "let failureReason: OSStatus",
                "type": "property"
              },
              {
                "path": "/documentation/lightweightcoderequirements/validationresult/requirementmatched",
                "title": "let requirementMatched: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/lightweightcoderequirements/validationresult/signatureisvalid",
                "title": "let signatureIsValid: Bool",
                "type": "property"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/validationresult",
            "title": "ValidationResult",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskcoderequirement/init(_:)-2lfey",
                "title": "init(LaunchCodeRequirement) throws",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskcoderequirement/init(_:)-9imtm",
                "title": "init(ProcessCodeRequirement) throws",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskcoderequirement/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskcoderequirement/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskcoderequirement/allof(requirement:)",
                "title": "static func allOf(requirement: () -> [any OnDiskConstraint]) throws -> OnDiskCodeRequirement",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskcoderequirement/anyof(requirement:)",
                "title": "static func anyOf(requirement: () -> [any OnDiskConstraint]) throws -> OnDiskCodeRequirement",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcoderequirement/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcoderequirement/==(_:_:)",
                    "title": "static func == (OnDiskCodeRequirement, OnDiskCodeRequirement) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/lightweightcoderequirements/ondiskcoderequirement/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/ondiskcoderequirement",
            "title": "OnDiskCodeRequirement",
            "type": "struct"
          },
          {
            "path": "/documentation/lightweightcoderequirements/allof(requirement:)-2ocwl",
            "title": "func allOf(requirement: () -> [any OnDiskConstraint]) -> any OnDiskConstraint",
            "type": "func"
          },
          {
            "path": "/documentation/lightweightcoderequirements/anyof(requirement:)-71pff",
            "title": "func anyOf(requirement: () -> [any OnDiskConstraint]) -> any OnDiskConstraint",
            "type": "func"
          },
          {
            "path": "/documentation/lightweightcoderequirements/ondiskconstraint",
            "title": "OnDiskConstraint",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/init(rawvalue:)",
                    "title": "init(rawValue: Int64)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/rawvalue-swift.property",
                    "title": "let rawValue: Int64",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/arrayliteralelement",
                    "title": "OnDiskCodeSigningFlags.ValueSet.ArrayLiteralElement",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/element",
                    "title": "OnDiskCodeSigningFlags.ValueSet.Element",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/rawvalue-swift.typealias",
                    "title": "OnDiskCodeSigningFlags.ValueSet.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/isadhocsigned",
                    "title": "static let isAdhocSigned: OnDiskCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/iscertificateexpirationenforced",
                    "title": "static let isCertificateExpirationEnforced: OnDiskCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/iscodesignaturerequiredforallexecutablecode",
                    "title": "static let isCodeSignatureRequiredForAllExecutableCode: OnDiskCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/isdynamiclinkerpolicyhardened",
                    "title": "static let isDynamicLinkerPolicyHardened: OnDiskCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/ishardenedruntimeenforced",
                    "title": "static let isHardenedRuntimeEnforced: OnDiskCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/islibraryvalidationrequired",
                    "title": "static let isLibraryValidationRequired: OnDiskCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/issignedbylinker",
                    "title": "static let isSignedByLinker: OnDiskCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/signalsbuserroroncodesigningfailure",
                    "title": "static let signalsBusErrorOnCodeSigningFailure: OnDiskCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/terminatesoncodesigningfailure",
                    "title": "static let terminatesOnCodeSigningFailure: OnDiskCodeSigningFlags.ValueSet",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/init()",
                        "title": "init()",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/contains(_:)",
                        "title": "func contains(Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/formintersection(_:)",
                        "title": "func formIntersection(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/formsymmetricdifference(_:)",
                        "title": "func formSymmetricDifference(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/formunion(_:)",
                        "title": "func formUnion(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/insert(_:)",
                        "title": "func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/intersection(_:)",
                        "title": "func intersection(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/remove(_:)",
                        "title": "func remove(Self.Element) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/symmetricdifference(_:)",
                        "title": "func symmetricDifference(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/union(_:)",
                        "title": "func union(Self) -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/update(with:)",
                        "title": "func update(with: Self.Element) -> Self.Element?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/optionset-implementations",
                    "title": "OptionSet Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/init(_:)",
                        "title": "init<S>(S)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/init(arrayliteral:)",
                        "title": "init(arrayLiteral: Self.Element...)",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/isdisjoint(with:)",
                        "title": "func isDisjoint(with: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/isstrictsubset(of:)",
                        "title": "func isStrictSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/isstrictsuperset(of:)",
                        "title": "func isStrictSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/issubset(of:)",
                        "title": "func isSubset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/issuperset(of:)",
                        "title": "func isSuperset(of: Self) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/subtract(_:)",
                        "title": "func subtract(Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/subtracting(_:)",
                        "title": "func subtracting(Self) -> Self",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset/setalgebra-implementations",
                    "title": "SetAlgebra Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/valueset",
                "title": "OnDiskCodeSigningFlags.ValueSet",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/datatype",
                "title": "OnDiskCodeSigningFlags.DataType",
                "type": "typealias"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/outtype",
                "title": "OnDiskCodeSigningFlags.OutType",
                "type": "typealias"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags/issuperset(of:)",
                "title": "static func isSuperset(of: OnDiskCodeSigningFlags.DataType) -> OnDiskCodeSigningFlags.OutType",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/ondiskcodesigningflags",
            "title": "OnDiskCodeSigningFlags",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskconstraintbuilder/buildblock(_:)",
                "title": "static func buildBlock([any OnDiskConstraint]...) -> [any OnDiskConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskconstraintbuilder/buildeither(first:)",
                "title": "static func buildEither(first: [any OnDiskConstraint]) -> [any OnDiskConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskconstraintbuilder/buildeither(second:)",
                "title": "static func buildEither(second: [any OnDiskConstraint]) -> [any OnDiskConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskconstraintbuilder/buildexpression(_:)-1qla",
                "title": "static func buildExpression(any OnDiskConstraint) -> [any OnDiskConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskconstraintbuilder/buildexpression(_:)-3uyy8",
                "title": "static func buildExpression([any OnDiskConstraint]) -> [any OnDiskConstraint]",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ondiskconstraintbuilder/buildoptional(_:)",
                "title": "static func buildOptional([any OnDiskConstraint]?) -> [any OnDiskConstraint]",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/ondiskconstraintbuilder",
            "title": "OnDiskConstraintBuilder",
            "type": "struct"
          },
          {
            "title": "Testing properties of executable code",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/codedirectoryhash/init(_:)",
                "title": "init(Data)",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/codedirectoryhash/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/codedirectoryhash/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/codedirectoryhash/datatype",
                "title": "CodeDirectoryHash.DataType",
                "type": "typealias"
              },
              {
                "path": "/documentation/lightweightcoderequirements/codedirectoryhash/outtype",
                "title": "CodeDirectoryHash.OutType",
                "type": "typealias"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/codedirectoryhash/in(_:)-1kiuo",
                "title": "static func `in`([CodeDirectoryHash.DataType]) -> CodeDirectoryHash.OutType",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/codedirectoryhash/in(_:)-912dv",
                "title": "static func `in`(CodeDirectoryHash.DataType...) -> CodeDirectoryHash.OutType",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/codedirectoryhash",
            "title": "CodeDirectoryHash",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/elementatindex(_:)",
                "title": "func elementAtIndex(Int64) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/key(_:)-swift.method",
                "title": "func key(String) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/keyprefix(_:)-swift.method",
                "title": "func keyPrefix(String) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/match(_:)-5cqvy",
                "title": "func match(String) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/match(_:)-5cw98",
                "title": "func match(Bool) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/match(_:)-6msza",
                "title": "func match(Int64) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/matchprefix(_:)",
                "title": "func matchPrefix(String) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/matchprefixsingle(_:)",
                "title": "func matchPrefixSingle(String) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/matchsingle(_:)-49kv7",
                "title": "func matchSingle(Int64) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/matchsingle(_:)-8ggh1",
                "title": "func matchSingle(String) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/matchtype(_:)",
                "title": "func matchType(EntitlementsQuery.DataType) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/key(_:)-swift.type.method",
                "title": "static func key(String) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/keyprefix(_:)-swift.type.method",
                "title": "static func keyPrefix(String) -> EntitlementsQuery",
                "type": "method"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/array",
                    "title": "case array",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/boolean",
                    "title": "case boolean",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/dictionary",
                    "title": "case dictionary",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/integer",
                    "title": "case integer",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/string",
                    "title": "case string",
                    "type": "case"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/init(rawvalue:)",
                    "title": "init?(rawValue: Int64)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/rawvalue-swift.property",
                    "title": "var rawValue: Int64",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/rawvalue-swift.typealias",
                    "title": "EntitlementsQuery.DataType.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/lightweightcoderequirements/entitlementsquery/datatype",
                "title": "EntitlementsQuery.DataType",
                "type": "enum"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/entitlementsquery",
            "title": "EntitlementsQuery",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/infoplisthash/init(_:)",
                "title": "init(Data)",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/infoplisthash/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/infoplisthash/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/infoplisthash/datatype",
                "title": "InfoPlistHash.DataType",
                "type": "typealias"
              },
              {
                "path": "/documentation/lightweightcoderequirements/infoplisthash/outtype",
                "title": "InfoPlistHash.OutType",
                "type": "typealias"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/infoplisthash/in(_:)-18amo",
                "title": "static func `in`(InfoPlistHash.DataType...) -> InfoPlistHash.OutType",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/infoplisthash/in(_:)-1rwy8",
                "title": "static func `in`([InfoPlistHash.DataType]) -> InfoPlistHash.OutType",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/infoplisthash",
            "title": "InfoPlistHash",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/isinitprocess/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/isinitprocess/init(_:)",
                "title": "init(Bool)",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/isinitprocess/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/isinitprocess/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/isinitprocess",
            "title": "IsInitProcess",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ismainbinary/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ismainbinary/init(_:)",
                "title": "init(Bool)",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ismainbinary/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/ismainbinary/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/ismainbinary",
            "title": "IsMainBinary",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/issipprotected/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/issipprotected/init(_:)",
                "title": "init(Bool)",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/issipprotected/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/issipprotected/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/issipprotected",
            "title": "IsSIPProtected",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/init(rawvalue:)",
                    "title": "init?(rawValue: Int64)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/rawvalue-swift.property",
                    "title": "let rawValue: Int64",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/rawvalue-swift.typealias",
                    "title": "PlatformType.Value.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/driverkit",
                    "title": "static let driverKit: PlatformType.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/ios",
                    "title": "static let iOS: PlatformType.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/iossimulator",
                    "title": "static let iOSSimulator: PlatformType.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/maccatalyst",
                    "title": "static let macCatalyst: PlatformType.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/macos",
                    "title": "static let macOS: PlatformType.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/tvos",
                    "title": "static let tvOS: PlatformType.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/tvossimulator",
                    "title": "static let tvOSSimulator: PlatformType.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/visionos",
                    "title": "static let visionOS: PlatformType.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/visionossimulator",
                    "title": "static let visionOSSimulator: PlatformType.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/watchos",
                    "title": "static let watchOS: PlatformType.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/watchossimulator",
                    "title": "static let watchOSSimulator: PlatformType.Value",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/platformtype/value/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/platformtype/value/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/platformtype/value/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/platformtype/value/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/platformtype/value/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/platformtype/value/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/lightweightcoderequirements/platformtype/value",
                "title": "PlatformType.Value",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/platformtype/init(_:)",
                "title": "init(PlatformType.Value)",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/platformtype/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/platformtype/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/platformtype/datatype",
                "title": "PlatformType.DataType",
                "type": "typealias"
              },
              {
                "path": "/documentation/lightweightcoderequirements/platformtype/outtype",
                "title": "PlatformType.OutType",
                "type": "typealias"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/platformtype/in(_:)-1ndmu",
                "title": "static func `in`(PlatformType.DataType...) -> PlatformType.OutType",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/platformtype/in(_:)-44pc3",
                "title": "static func `in`([PlatformType.DataType]) -> PlatformType.OutType",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/platformtype",
            "title": "PlatformType",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/signingidentifier/init(_:)",
                "title": "init(String)",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/signingidentifier/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/signingidentifier/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/signingidentifier/datatype",
                "title": "SigningIdentifier.DataType",
                "type": "typealias"
              },
              {
                "path": "/documentation/lightweightcoderequirements/signingidentifier/outtype",
                "title": "SigningIdentifier.OutType",
                "type": "typealias"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/signingidentifier/in(_:)-57h8m",
                "title": "static func `in`(SigningIdentifier.DataType...) -> SigningIdentifier.OutType",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/signingidentifier/in(_:)-57qq8",
                "title": "static func `in`([SigningIdentifier.DataType]) -> SigningIdentifier.OutType",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/signingidentifier",
            "title": "SigningIdentifier",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/teamidentifier/init(_:)",
                "title": "init(String)",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/teamidentifier/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/teamidentifier/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/teamidentifier/datatype",
                "title": "TeamIdentifier.DataType",
                "type": "typealias"
              },
              {
                "path": "/documentation/lightweightcoderequirements/teamidentifier/outtype",
                "title": "TeamIdentifier.OutType",
                "type": "typealias"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/teamidentifier/in(_:)-1z4vz",
                "title": "static func `in`([TeamIdentifier.DataType]) -> TeamIdentifier.OutType",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/teamidentifier/in(_:)-9x3l9",
                "title": "static func `in`(TeamIdentifier.DataType...) -> TeamIdentifier.OutType",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/teamidentifier",
            "title": "TeamIdentifier",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/validationcategory/value/init(rawvalue:)",
                    "title": "init?(rawValue: Int64)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/validationcategory/value/rawvalue-swift.property",
                    "title": "let rawValue: Int64",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/validationcategory/value/rawvalue-swift.typealias",
                    "title": "ValidationCategory.Value.RawValue",
                    "type": "typealias"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/validationcategory/value/appstore",
                    "title": "static let appStore: ValidationCategory.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/validationcategory/value/developerid",
                    "title": "static let developerID: ValidationCategory.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/validationcategory/value/development",
                    "title": "static let development: ValidationCategory.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/validationcategory/value/enterprise",
                    "title": "static let enterprise: ValidationCategory.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/validationcategory/value/none",
                    "title": "static let none: ValidationCategory.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/validationcategory/value/platform",
                    "title": "static let platform: ValidationCategory.Value",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/validationcategory/value/testflight",
                    "title": "static let testflight: ValidationCategory.Value",
                    "type": "property"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/validationcategory/value/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/validationcategory/value/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Initializers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/validationcategory/value/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/validationcategory/value/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/validationcategory/value/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/lightweightcoderequirements/validationcategory/value/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/lightweightcoderequirements/validationcategory/value/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/lightweightcoderequirements/validationcategory/value",
                "title": "ValidationCategory.Value",
                "type": "struct"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/validationcategory/init(_:)",
                "title": "init(ValidationCategory.Value)",
                "type": "init"
              },
              {
                "path": "/documentation/lightweightcoderequirements/validationcategory/init(from:)",
                "title": "init(from: any Decoder) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/validationcategory/encode(to:)",
                "title": "func encode(to: any Encoder) throws",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/validationcategory/datatype",
                "title": "ValidationCategory.DataType",
                "type": "typealias"
              },
              {
                "path": "/documentation/lightweightcoderequirements/validationcategory/outtype",
                "title": "ValidationCategory.OutType",
                "type": "typealias"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/validationcategory/in(_:)-1skt4",
                "title": "static func `in`([ValidationCategory.DataType]) -> ValidationCategory.OutType",
                "type": "method"
              },
              {
                "path": "/documentation/lightweightcoderequirements/validationcategory/in(_:)-94p2z",
                "title": "static func `in`(ValidationCategory.DataType...) -> ValidationCategory.OutType",
                "type": "method"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/validationcategory",
            "title": "ValidationCategory",
            "type": "struct"
          },
          {
            "title": "Handling errors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/constrainterror/==(_:_:)",
                "title": "static func == (ConstraintError, ConstraintError) -> Bool",
                "type": "op"
              },
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/constrainterror/duplicatekey",
                "title": "case duplicateKey",
                "type": "case"
              },
              {
                "path": "/documentation/lightweightcoderequirements/constrainterror/malformedconstraint",
                "title": "case malformedConstraint",
                "type": "case"
              },
              {
                "path": "/documentation/lightweightcoderequirements/constrainterror/taskisnolongervalid",
                "title": "case taskIsNoLongerValid",
                "type": "case"
              },
              {
                "path": "/documentation/lightweightcoderequirements/constrainterror/unsupportedconstraintforrequirementtype",
                "title": "case unsupportedConstraintForRequirementType",
                "type": "case"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/constrainterror/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/lightweightcoderequirements/constrainterror/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/constrainterror/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/lightweightcoderequirements/constrainterror/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/lightweightcoderequirements/constrainterror/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/lightweightcoderequirements/constrainterror/error-implementations",
                "title": "Error Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/lightweightcoderequirements/constrainterror",
            "title": "ConstraintError",
            "type": "enum"
          }
        ],
        "path": "/documentation/lightweightcoderequirements",
        "title": "LightweightCodeRequirements",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
