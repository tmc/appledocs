{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/cfnetwork/error-dictionary-keys",
            "title": "Error Dictionary Keys",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/cfnetwork/error-domains",
            "title": "Error Domains",
            "type": "collection"
          },
          {
            "title": "Hosts",
            "type": "groupMarker"
          },
          {
            "title": "Global Proxy Configuration",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/cfnetwork/property-keys",
            "title": "Property Keys",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/cfnetwork/proxy-types",
            "title": "Proxy Types",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/cfnetwork/global-proxy-settings-constants",
            "title": "Global Proxy Settings Constants",
            "type": "collection"
          },
          {
            "title": "HTTP Authentication",
            "type": "groupMarker"
          },
          {
            "title": "HTTP Messages",
            "type": "groupMarker"
          },
          {
            "title": "FTP",
            "type": "groupMarker"
          },
          {
            "title": "Network Diagnostics",
            "type": "groupMarker"
          },
          {
            "title": "Network Services",
            "type": "groupMarker"
          },
          {
            "title": "Streams",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/cfnetwork/1518266-secure-sockets-socks-errors",
            "title": "Secure Sockets (SOCKS) Errors",
            "type": "collection"
          },
          {
            "title": "Reference",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Data Types",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetwork-data-types",
            "title": "CFNetwork Data Types",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Constants",
                    "type": "groupMarker"
                  }
                ],
                "path": "/documentation/cfnetwork/1518287-anonymous",
                "title": "Anonymous",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Constants",
                    "type": "groupMarker"
                  }
                ],
                "path": "/documentation/cfnetwork/1518276-anonymous",
                "title": "Anonymous",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Constants",
                    "type": "groupMarker"
                  }
                ],
                "path": "/documentation/cfnetwork/1518284-anonymous",
                "title": "Anonymous",
                "type": "collection"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetwork-enumerations",
            "title": "CFNetwork Enumerations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetwork-constants",
            "title": "CFNetwork Constants",
            "type": "collection"
          }
        ],
        "path": "/documentation/cfnetwork",
        "title": "CFNetwork",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfhosterrorhostnotfound",
                "title": "kCFHostErrorHostNotFound",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfhosterrorunknown",
                "title": "kCFHostErrorUnknown",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsockserrorunknownclientversion",
                "title": "kCFSOCKSErrorUnknownClientVersion",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsockserrorunsupportedserverversion",
                "title": "kCFSOCKSErrorUnsupportedServerVersion",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks4errorrequestfailed",
                "title": "kCFSOCKS4ErrorRequestFailed",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks4erroridentdfailed",
                "title": "kCFSOCKS4ErrorIdentdFailed",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks4erroridconflict",
                "title": "kCFSOCKS4ErrorIdConflict",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks4errorunknownstatuscode",
                "title": "kCFSOCKS4ErrorUnknownStatusCode",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks5errorbadstate",
                "title": "kCFSOCKS5ErrorBadState",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks5errorbadresponseaddr",
                "title": "kCFSOCKS5ErrorBadResponseAddr",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks5errorbadcredentials",
                "title": "kCFSOCKS5ErrorBadCredentials",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks5errorunsupportednegotiationmethod",
                "title": "kCFSOCKS5ErrorUnsupportedNegotiationMethod",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks5errornoacceptablemethod",
                "title": "kCFSOCKS5ErrorNoAcceptableMethod",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfftperrorunexpectedstatuscode",
                "title": "kCFFTPErrorUnexpectedStatusCode",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpauthenticationtypeunsupported",
                "title": "kCFErrorHTTPAuthenticationTypeUnsupported",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpbadcredentials",
                "title": "kCFErrorHTTPBadCredentials",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpconnectionlost",
                "title": "kCFErrorHTTPConnectionLost",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpparsefailure",
                "title": "kCFErrorHTTPParseFailure",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpredirectionloopdetected",
                "title": "kCFErrorHTTPRedirectionLoopDetected",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpbadurl",
                "title": "kCFErrorHTTPBadURL",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpproxyconnectionfailure",
                "title": "kCFErrorHTTPProxyConnectionFailure",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpbadproxycredentials",
                "title": "kCFErrorHTTPBadProxyCredentials",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorpacfileerror",
                "title": "kCFErrorPACFileError",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorpacfileauth",
                "title": "kCFErrorPACFileAuth",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpsproxyconnectionfailure",
                "title": "kCFErrorHTTPSProxyConnectionFailure",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfstreamerrorhttpsproxyfailureunexpectedresponsetoconnectmethod",
                "title": "kCFStreamErrorHTTPSProxyFailureUnexpectedResponseToCONNECTMethod",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorunknown",
                "title": "kCFURLErrorUnknown",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcancelled",
                "title": "kCFURLErrorCancelled",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorbadurl",
                "title": "kCFURLErrorBadURL",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrortimedout",
                "title": "kCFURLErrorTimedOut",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorunsupportedurl",
                "title": "kCFURLErrorUnsupportedURL",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotfindhost",
                "title": "kCFURLErrorCannotFindHost",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotconnecttohost",
                "title": "kCFURLErrorCannotConnectToHost",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrornetworkconnectionlost",
                "title": "kCFURLErrorNetworkConnectionLost",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrordnslookupfailed",
                "title": "kCFURLErrorDNSLookupFailed",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorhttptoomanyredirects",
                "title": "kCFURLErrorHTTPTooManyRedirects",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorresourceunavailable",
                "title": "kCFURLErrorResourceUnavailable",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrornotconnectedtointernet",
                "title": "kCFURLErrorNotConnectedToInternet",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorredirecttononexistentlocation",
                "title": "kCFURLErrorRedirectToNonExistentLocation",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorbadserverresponse",
                "title": "kCFURLErrorBadServerResponse",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorusercancelledauthentication",
                "title": "kCFURLErrorUserCancelledAuthentication",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerroruserauthenticationrequired",
                "title": "kCFURLErrorUserAuthenticationRequired",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorzerobyteresource",
                "title": "kCFURLErrorZeroByteResource",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotdecoderawdata",
                "title": "kCFURLErrorCannotDecodeRawData",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotdecodecontentdata",
                "title": "kCFURLErrorCannotDecodeContentData",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotparseresponse",
                "title": "kCFURLErrorCannotParseResponse",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorinternationalroamingoff",
                "title": "kCFURLErrorInternationalRoamingOff",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcallisactive",
                "title": "kCFURLErrorCallIsActive",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrordatanotallowed",
                "title": "kCFURLErrorDataNotAllowed",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorrequestbodystreamexhausted",
                "title": "kCFURLErrorRequestBodyStreamExhausted",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorfiledoesnotexist",
                "title": "kCFURLErrorFileDoesNotExist",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorfileisdirectory",
                "title": "kCFURLErrorFileIsDirectory",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrornopermissionstoreadfile",
                "title": "kCFURLErrorNoPermissionsToReadFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrordatalengthexceedsmaximum",
                "title": "kCFURLErrorDataLengthExceedsMaximum",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorsecureconnectionfailed",
                "title": "kCFURLErrorSecureConnectionFailed",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorservercertificatehasbaddate",
                "title": "kCFURLErrorServerCertificateHasBadDate",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorservercertificateuntrusted",
                "title": "kCFURLErrorServerCertificateUntrusted",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorservercertificatehasunknownroot",
                "title": "kCFURLErrorServerCertificateHasUnknownRoot",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorservercertificatenotyetvalid",
                "title": "kCFURLErrorServerCertificateNotYetValid",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorclientcertificaterejected",
                "title": "kCFURLErrorClientCertificateRejected",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorclientcertificaterequired",
                "title": "kCFURLErrorClientCertificateRequired",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotloadfromnetwork",
                "title": "kCFURLErrorCannotLoadFromNetwork",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotcreatefile",
                "title": "kCFURLErrorCannotCreateFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotopenfile",
                "title": "kCFURLErrorCannotOpenFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotclosefile",
                "title": "kCFURLErrorCannotCloseFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotwritetofile",
                "title": "kCFURLErrorCannotWriteToFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotremovefile",
                "title": "kCFURLErrorCannotRemoveFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotmovefile",
                "title": "kCFURLErrorCannotMoveFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrordownloaddecodingfailedmidstream",
                "title": "kCFURLErrorDownloadDecodingFailedMidStream",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrordownloaddecodingfailedtocomplete",
                "title": "kCFURLErrorDownloadDecodingFailedToComplete",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfhttpcookiecannotparsecookiefile",
                "title": "kCFHTTPCookieCannotParseCookieFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrorunknown",
                "title": "kCFNetServiceErrorUnknown",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrorcollision",
                "title": "kCFNetServiceErrorCollision",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrornotfound",
                "title": "kCFNetServiceErrorNotFound",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrorinprogress",
                "title": "kCFNetServiceErrorInProgress",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrorbadargument",
                "title": "kCFNetServiceErrorBadArgument",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrorcancel",
                "title": "kCFNetServiceErrorCancel",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrorinvalid",
                "title": "kCFNetServiceErrorInvalid",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrortimeout",
                "title": "kCFNetServiceErrorTimeout",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrordnsservicefailure",
                "title": "kCFNetServiceErrorDNSServiceFailure",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorapptransportsecurityrequiressecureconnection",
                "title": "kCFURLErrorAppTransportSecurityRequiresSecureConnection",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorbackgroundsessioninusebyanotherprocess",
                "title": "kCFURLErrorBackgroundSessionInUseByAnotherProcess",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorbackgroundsessionwasdisconnected",
                "title": "kCFURLErrorBackgroundSessionWasDisconnected",
                "type": "case"
              },
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorfileoutsidesafearea",
                "title": "kCFURLErrorFileOutsideSafeArea",
                "type": "case"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetworkerrors",
            "title": "CFNetworkErrors",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcfurlerrorfailingurlerrorkey",
                "title": "kCFURLErrorFailingURLErrorKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfurlerrorfailingurlstringerrorkey",
                "title": "kCFURLErrorFailingURLStringErrorKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfgetaddrinfofailurekey",
                "title": "kCFGetAddrInfoFailureKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfsocksstatuscodekey",
                "title": "kCFSOCKSStatusCodeKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfsocksversionkey",
                "title": "kCFSOCKSVersionKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfsocksnegotiationmethodkey",
                "title": "kCFSOCKSNegotiationMethodKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfdnsservicefailurekey",
                "title": "kCFDNSServiceFailureKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfftpstatuscodekey",
                "title": "kCFFTPStatusCodeKey",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/error-dictionary-keys",
            "title": "Error Dictionary Keys",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcferrordomaincfnetwork",
                "title": "kCFErrorDomainCFNetwork",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcferrordomainwinsock",
                "title": "kCFErrorDomainWinSock",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/error-domains",
            "title": "Error Domains",
            "type": "collection"
          },
          {
            "title": "Hosts",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cfnetwork/cfhost",
            "title": "CFHostRef",
            "type": "typealias"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfhostinfotype/addresses",
                "title": "kCFHostAddresses",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfhostinfotype/names",
                "title": "kCFHostNames",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfhostinfotype/reachability",
                "title": "kCFHostReachability",
                "type": "case"
              }
            ],
            "path": "/documentation/cfnetwork/cfhostinfotype",
            "title": "CFHostInfoType",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcontext/copydescription",
                "title": "copyDescription",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcontext/info",
                "title": "info",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcontext/release",
                "title": "release",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcontext/retain",
                "title": "retain",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcontext/version",
                "title": "version",
                "type": "property"
              }
            ],
            "path": "/documentation/cfnetwork/cfhostclientcontext",
            "title": "CFHostClientContext",
            "type": "struct"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostcancelinforesolution(_:_:)",
            "title": "CFHostCancelInfoResolution",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostcreatecopy(_:_:)",
            "title": "CFHostCreateCopy",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostcreatewithaddress(_:_:)",
            "title": "CFHostCreateWithAddress",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostcreatewithname(_:_:)",
            "title": "CFHostCreateWithName",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostgetaddressing(_:_:)",
            "title": "CFHostGetAddressing",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostgetnames(_:_:)",
            "title": "CFHostGetNames",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostgetreachability(_:_:)",
            "title": "CFHostGetReachability",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostgettypeid()",
            "title": "CFHostGetTypeID",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostschedulewithrunloop(_:_:_:)",
            "title": "CFHostScheduleWithRunLoop",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostsetclient(_:_:_:)",
            "title": "CFHostSetClient",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhoststartinforesolution(_:_:_:)",
            "title": "CFHostStartInfoResolution",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostunschedulefromrunloop(_:_:_:)",
            "title": "CFHostUnscheduleFromRunLoop",
            "type": "func"
          },
          {
            "title": "Global Proxy Configuration",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cfnetwork/cfnetworkcopyproxiesforurl(_:_:)",
            "title": "CFNetworkCopyProxiesForURL",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfnetworkcopyproxiesforautoconfigurationscript(_:_:_:)",
            "title": "CFNetworkCopyProxiesForAutoConfigurationScript",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfnetworkexecuteproxyautoconfigurationscript(_:_:_:_:)",
            "title": "CFNetworkExecuteProxyAutoConfigurationScript",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfnetworkexecuteproxyautoconfigurationurl(_:_:_:_:)",
            "title": "CFNetworkExecuteProxyAutoConfigurationURL",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfnetworkcopysystemproxysettings()",
            "title": "CFNetworkCopySystemProxySettings",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfproxyautoconfigurationresultcallback",
            "title": "CFProxyAutoConfigurationResultCallback",
            "type": "typealias"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxyautoconfigurationhttpresponsekey",
                "title": "kCFProxyAutoConfigurationHTTPResponseKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxyautoconfigurationjavascriptkey",
                "title": "kCFProxyAutoConfigurationJavaScriptKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxyautoconfigurationurlkey",
                "title": "kCFProxyAutoConfigurationURLKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxyhostnamekey",
                "title": "kCFProxyHostNameKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxypasswordkey",
                "title": "kCFProxyPasswordKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxyportnumberkey",
                "title": "kCFProxyPortNumberKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypekey",
                "title": "kCFProxyTypeKey",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxyusernamekey",
                "title": "kCFProxyUsernameKey",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/property-keys",
            "title": "Property Keys",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypenone",
                "title": "kCFProxyTypeNone",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypeautoconfigurationurl",
                "title": "kCFProxyTypeAutoConfigurationURL",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypeautoconfigurationjavascript",
                "title": "kCFProxyTypeAutoConfigurationJavaScript",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypeftp",
                "title": "kCFProxyTypeFTP",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypehttp",
                "title": "kCFProxyTypeHTTP",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypehttps",
                "title": "kCFProxyTypeHTTPS",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypesocks",
                "title": "kCFProxyTypeSOCKS",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/proxy-types",
            "title": "Proxy Types",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesexceptionslist",
                "title": "kCFNetworkProxiesExceptionsList",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesexcludesimplehostnames",
                "title": "kCFNetworkProxiesExcludeSimpleHostnames",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesftpenable",
                "title": "kCFNetworkProxiesFTPEnable",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesftppassive",
                "title": "kCFNetworkProxiesFTPPassive",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesftpport",
                "title": "kCFNetworkProxiesFTPPort",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesftpproxy",
                "title": "kCFNetworkProxiesFTPProxy",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesgopherenable",
                "title": "kCFNetworkProxiesGopherEnable",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesgopherport",
                "title": "kCFNetworkProxiesGopherPort",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesgopherproxy",
                "title": "kCFNetworkProxiesGopherProxy",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxieshttpenable",
                "title": "kCFNetworkProxiesHTTPEnable",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxieshttpport",
                "title": "kCFNetworkProxiesHTTPPort",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxieshttpproxy",
                "title": "kCFNetworkProxiesHTTPProxy",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxieshttpsenable",
                "title": "kCFNetworkProxiesHTTPSEnable",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxieshttpsport",
                "title": "kCFNetworkProxiesHTTPSPort",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxieshttpsproxy",
                "title": "kCFNetworkProxiesHTTPSProxy",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesrtspenable",
                "title": "kCFNetworkProxiesRTSPEnable",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesrtspport",
                "title": "kCFNetworkProxiesRTSPPort",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesrtspproxy",
                "title": "kCFNetworkProxiesRTSPProxy",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiessocksenable",
                "title": "kCFNetworkProxiesSOCKSEnable",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiessocksport",
                "title": "kCFNetworkProxiesSOCKSPort",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiessocksproxy",
                "title": "kCFNetworkProxiesSOCKSProxy",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesproxyautoconfigenable",
                "title": "kCFNetworkProxiesProxyAutoConfigEnable",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesproxyautoconfigjavascript",
                "title": "kCFNetworkProxiesProxyAutoConfigJavaScript",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesproxyautoconfigurlstring",
                "title": "kCFNetworkProxiesProxyAutoConfigURLString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesproxyautodiscoveryenable",
                "title": "kCFNetworkProxiesProxyAutoDiscoveryEnable",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/global-proxy-settings-constants",
            "title": "Global Proxy Settings Constants",
            "type": "collection"
          },
          {
            "title": "HTTP Authentication",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthentication",
            "title": "CFHTTPAuthenticationRef",
            "type": "typealias"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationappliestorequest(_:_:)",
            "title": "CFHTTPAuthenticationAppliesToRequest",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationcopydomains(_:)",
            "title": "CFHTTPAuthenticationCopyDomains",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationcopymethod(_:)",
            "title": "CFHTTPAuthenticationCopyMethod",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationcopyrealm(_:)",
            "title": "CFHTTPAuthenticationCopyRealm",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationcreatefromresponse(_:_:)",
            "title": "CFHTTPAuthenticationCreateFromResponse",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationgettypeid()",
            "title": "CFHTTPAuthenticationGetTypeID",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationisvalid(_:_:)",
            "title": "CFHTTPAuthenticationIsValid",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationrequiresaccountdomain(_:)",
            "title": "CFHTTPAuthenticationRequiresAccountDomain",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationrequiresorderedrequests(_:)",
            "title": "CFHTTPAuthenticationRequiresOrderedRequests",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationrequiresusernameandpassword(_:)",
            "title": "CFHTTPAuthenticationRequiresUserNameAndPassword",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationaccountdomain",
            "title": "kCFHTTPAuthenticationAccountDomain",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationpassword",
            "title": "kCFHTTPAuthenticationPassword",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschemebasic",
            "title": "kCFHTTPAuthenticationSchemeBasic",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschemedigest",
            "title": "kCFHTTPAuthenticationSchemeDigest",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschemekerberos",
            "title": "kCFHTTPAuthenticationSchemeKerberos",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschementlm",
            "title": "kCFHTTPAuthenticationSchemeNTLM",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschemenegotiate",
            "title": "kCFHTTPAuthenticationSchemeNegotiate",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschemenegotiate2",
            "title": "kCFHTTPAuthenticationSchemeNegotiate2",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschemexmobilemeauthtoken",
            "title": "kCFHTTPAuthenticationSchemeXMobileMeAuthToken",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationusername",
            "title": "kCFHTTPAuthenticationUsername",
            "type": "var"
          },
          {
            "title": "HTTP Messages",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessage",
            "title": "CFHTTPMessageRef",
            "type": "typealias"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessageaddauthentication(_:_:_:_:_:_:)",
            "title": "CFHTTPMessageAddAuthentication",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessageappendbytes(_:_:_:)",
            "title": "CFHTTPMessageAppendBytes",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessageapplycredentialdictionary(_:_:_:_:)",
            "title": "CFHTTPMessageApplyCredentialDictionary",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessageapplycredentials(_:_:_:_:_:)",
            "title": "CFHTTPMessageApplyCredentials",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyallheaderfields(_:)",
            "title": "CFHTTPMessageCopyAllHeaderFields",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopybody(_:)",
            "title": "CFHTTPMessageCopyBody",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyheaderfieldvalue(_:_:)",
            "title": "CFHTTPMessageCopyHeaderFieldValue",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyrequestmethod(_:)",
            "title": "CFHTTPMessageCopyRequestMethod",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyrequesturl(_:)",
            "title": "CFHTTPMessageCopyRequestURL",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyresponsestatusline(_:)",
            "title": "CFHTTPMessageCopyResponseStatusLine",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyserializedmessage(_:)",
            "title": "CFHTTPMessageCopySerializedMessage",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyversion(_:)",
            "title": "CFHTTPMessageCopyVersion",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecreatecopy(_:_:)",
            "title": "CFHTTPMessageCreateCopy",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecreateempty(_:_:)",
            "title": "CFHTTPMessageCreateEmpty",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecreaterequest(_:_:_:_:)",
            "title": "CFHTTPMessageCreateRequest",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecreateresponse(_:_:_:_:)",
            "title": "CFHTTPMessageCreateResponse",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagegetresponsestatuscode(_:)",
            "title": "CFHTTPMessageGetResponseStatusCode",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagegettypeid()",
            "title": "CFHTTPMessageGetTypeID",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessageisheadercomplete(_:)",
            "title": "CFHTTPMessageIsHeaderComplete",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessageisrequest(_:)",
            "title": "CFHTTPMessageIsRequest",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagesetbody(_:_:)",
            "title": "CFHTTPMessageSetBody",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagesetheaderfieldvalue(_:_:_:)",
            "title": "CFHTTPMessageSetHeaderFieldValue",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpversion1_0",
            "title": "kCFHTTPVersion1_0",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpversion1_1",
            "title": "kCFHTTPVersion1_1",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpversion2_0",
            "title": "kCFHTTPVersion2_0",
            "type": "var"
          },
          {
            "title": "FTP",
            "type": "groupMarker"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfftpcreateparsedresourcelisting(_:_:_:_:)",
            "title": "CFFTPCreateParsedResourceListing",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcegroup",
            "title": "kCFFTPResourceGroup",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcelink",
            "title": "kCFFTPResourceLink",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcemoddate",
            "title": "kCFFTPResourceModDate",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcemode",
            "title": "kCFFTPResourceMode",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcename",
            "title": "kCFFTPResourceName",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourceowner",
            "title": "kCFFTPResourceOwner",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcesize",
            "title": "kCFFTPResourceSize",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcetype",
            "title": "kCFFTPResourceType",
            "type": "var"
          },
          {
            "title": "Network Diagnostics",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cfnetwork/cfnetdiagnostic",
            "title": "CFNetDiagnosticRef",
            "type": "typealias"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues/noerr",
                "title": "kCFNetDiagnosticNoErr",
                "type": "case"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues/err",
                "title": "kCFNetDiagnosticErr",
                "type": "case"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues/connectionup",
                "title": "kCFNetDiagnosticConnectionUp",
                "type": "case"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues/connectionindeterminate",
                "title": "kCFNetDiagnosticConnectionIndeterminate",
                "type": "case"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues/connectiondown",
                "title": "kCFNetDiagnosticConnectionDown",
                "type": "case"
              }
            ],
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues",
            "title": "CFNetDiagnosticStatusValues",
            "type": "enum"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetdiagnosticcopynetworkstatuspassively(_:_:)",
            "title": "CFNetDiagnosticCopyNetworkStatusPassively",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetdiagnosticcreatewithstreams(_:_:_:)",
            "title": "CFNetDiagnosticCreateWithStreams",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetdiagnosticcreatewithurl(_:_:)",
            "title": "CFNetDiagnosticCreateWithURL",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetdiagnosticdiagnoseprobleminteractively(_:)",
            "title": "CFNetDiagnosticDiagnoseProblemInteractively",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetdiagnosticsetname(_:_:)",
            "title": "CFNetDiagnosticSetName",
            "type": "func"
          },
          {
            "title": "Network Services",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cfnetwork/cfnetservice",
            "title": "CFNetServiceRef",
            "type": "typealias"
          },
          {
            "path": "/documentation/cfnetwork/cfnetservicebrowser",
            "title": "CFNetServiceBrowserRef",
            "type": "typealias"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/isdefault",
                "title": "kCFNetServiceFlagIsDefault",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/isdomain",
                "title": "kCFNetServiceFlagIsDomain",
                "type": "case"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/isregistrationdomain",
                "title": "kCFNetServiceFlagIsRegistrationDomain",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/morecoming",
                "title": "kCFNetServiceFlagMoreComing",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/remove",
                "title": "kCFNetServiceFlagRemove",
                "type": "case"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/isregistrationdomain",
                "title": "kCFNetServiceFlagIsRegistrationDomain",
                "type": "case"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetservicebrowserflags",
            "title": "CFNetServiceBrowserFlags",
            "type": "enum"
          },
          {
            "path": "/documentation/cfnetwork/cfnetservicemonitor",
            "title": "CFNetServiceMonitorRef",
            "type": "typealias"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicemonitortype/txt",
                "title": "kCFNetServiceMonitorTXT",
                "type": "case"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetservicemonitortype",
            "title": "CFNetServiceMonitorType",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcontext/copydescription",
                "title": "copyDescription",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcontext/info",
                "title": "info",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcontext/release",
                "title": "release",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcontext/retain",
                "title": "retain",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcontext/version",
                "title": "version",
                "type": "property"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetserviceclientcontext",
            "title": "CFNetServiceClientContext",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceregisterflags/noautorename",
                "title": "kCFNetServiceFlagNoAutoRename",
                "type": "case"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetserviceregisterflags",
            "title": "CFNetServiceRegisterFlags",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/unknown",
                "title": "kCFNetServicesErrorUnknown",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/collision",
                "title": "kCFNetServicesErrorCollision",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/notfound",
                "title": "kCFNetServicesErrorNotFound",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/inprogress",
                "title": "kCFNetServicesErrorInProgress",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/badargument",
                "title": "kCFNetServicesErrorBadArgument",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/cancel",
                "title": "kCFNetServicesErrorCancel",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/invalid",
                "title": "kCFNetServicesErrorInvalid",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/timeout",
                "title": "kCFNetServicesErrorTimeout",
                "type": "case"
              },
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/missingrequiredconfiguration",
                "title": "kCFNetServicesErrorMissingRequiredConfiguration",
                "type": "case"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetserviceserror",
            "title": "CFNetServicesError",
            "type": "enum"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowserinvalidate(_:)",
            "title": "CFNetServiceBrowserInvalidate",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowserschedulewithrunloop(_:_:_:)",
            "title": "CFNetServiceBrowserScheduleWithRunLoop",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowsercreate(_:_:_:)",
            "title": "CFNetServiceBrowserCreate",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowsergettypeid()",
            "title": "CFNetServiceBrowserGetTypeID",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowsersearchfordomains(_:_:_:)",
            "title": "CFNetServiceBrowserSearchForDomains",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowsersearchforservices(_:_:_:_:)",
            "title": "CFNetServiceBrowserSearchForServices",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowserstopsearch(_:_:)",
            "title": "CFNetServiceBrowserStopSearch",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowserunschedulefromrunloop(_:_:_:)",
            "title": "CFNetServiceBrowserUnscheduleFromRunLoop",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicecancel(_:)",
            "title": "CFNetServiceCancel",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicecreate(_:_:_:_:_:)",
            "title": "CFNetServiceCreate",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicecreatecopy(_:_:)",
            "title": "CFNetServiceCreateCopy",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicecreatedictionarywithtxtdata(_:_:)",
            "title": "CFNetServiceCreateDictionaryWithTXTData",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicecreatetxtdatawithdictionary(_:_:)",
            "title": "CFNetServiceCreateTXTDataWithDictionary",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegetaddressing(_:)",
            "title": "CFNetServiceGetAddressing",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegetdomain(_:)",
            "title": "CFNetServiceGetDomain",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegetname(_:)",
            "title": "CFNetServiceGetName",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegetportnumber(_:)",
            "title": "CFNetServiceGetPortNumber",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegettxtdata(_:)",
            "title": "CFNetServiceGetTXTData",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegettargethost(_:)",
            "title": "CFNetServiceGetTargetHost",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegettype(_:)",
            "title": "CFNetServiceGetType",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegettypeid()",
            "title": "CFNetServiceGetTypeID",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorcreate(_:_:_:_:)",
            "title": "CFNetServiceMonitorCreate",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorgettypeid()",
            "title": "CFNetServiceMonitorGetTypeID",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorinvalidate(_:)",
            "title": "CFNetServiceMonitorInvalidate",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorschedulewithrunloop(_:_:_:)",
            "title": "CFNetServiceMonitorScheduleWithRunLoop",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorstart(_:_:_:)",
            "title": "CFNetServiceMonitorStart",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorstop(_:_:)",
            "title": "CFNetServiceMonitorStop",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorunschedulefromrunloop(_:_:_:)",
            "title": "CFNetServiceMonitorUnscheduleFromRunLoop",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetserviceregisterwithoptions(_:_:_:)",
            "title": "CFNetServiceRegisterWithOptions",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetserviceresolvewithtimeout(_:_:_:)",
            "title": "CFNetServiceResolveWithTimeout",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicesetclient(_:_:_:)",
            "title": "CFNetServiceSetClient",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicesettxtdata(_:_:)",
            "title": "CFNetServiceSetTXTData",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetserviceunschedulefromrunloop(_:_:_:)",
            "title": "CFNetServiceUnscheduleFromRunLoop",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetserviceschedulewithrunloop(_:_:_:)",
            "title": "CFNetServiceScheduleWithRunLoop",
            "type": "func"
          },
          {
            "title": "Streams",
            "type": "groupMarker"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfreadstreamcreateforhttprequest(_:_:)",
            "title": "CFReadStreamCreateForHTTPRequest",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfreadstreamcreateforstreamedhttprequest(_:_:_:)",
            "title": "CFReadStreamCreateForStreamedHTTPRequest",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpattemptpersistentconnection",
            "title": "kCFStreamPropertyHTTPAttemptPersistentConnection",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpfinalrequest",
            "title": "kCFStreamPropertyHTTPFinalRequest",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpfinalurl",
            "title": "kCFStreamPropertyHTTPFinalURL",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpproxy",
            "title": "kCFStreamPropertyHTTPProxy",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpproxyhost",
            "title": "kCFStreamPropertyHTTPProxyHost",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpproxyport",
            "title": "kCFStreamPropertyHTTPProxyPort",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttprequestbyteswrittencount",
            "title": "kCFStreamPropertyHTTPRequestBytesWrittenCount",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpresponseheader",
            "title": "kCFStreamPropertyHTTPResponseHeader",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpsproxyhost",
            "title": "kCFStreamPropertyHTTPSProxyHost",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpsproxyport",
            "title": "kCFStreamPropertyHTTPSProxyPort",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpshouldautoredirect",
            "title": "kCFStreamPropertyHTTPShouldAutoredirect",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfwritestreamcreatewithftpurl(_:_:)",
            "title": "CFWriteStreamCreateWithFTPURL",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfreadstreamcreatewithftpurl(_:_:)",
            "title": "CFReadStreamCreateWithFTPURL",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpattemptpersistentconnection",
            "title": "kCFStreamPropertyFTPAttemptPersistentConnection",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpfetchresourceinfo",
            "title": "kCFStreamPropertyFTPFetchResourceInfo",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpfiletransferoffset",
            "title": "kCFStreamPropertyFTPFileTransferOffset",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftppassword",
            "title": "kCFStreamPropertyFTPPassword",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpproxy",
            "title": "kCFStreamPropertyFTPProxy",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpproxyhost",
            "title": "kCFStreamPropertyFTPProxyHost",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpproxypassword",
            "title": "kCFStreamPropertyFTPProxyPassword",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpproxyport",
            "title": "kCFStreamPropertyFTPProxyPort",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpproxyuser",
            "title": "kCFStreamPropertyFTPProxyUser",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpresourcesize",
            "title": "kCFStreamPropertyFTPResourceSize",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpusepassivemode",
            "title": "kCFStreamPropertyFTPUsePassiveMode",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpusername",
            "title": "kCFStreamPropertyFTPUserName",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/cfsocketstreamsocksgeterror(_:)",
            "title": "CFSocketStreamSOCKSGetError",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfsocketstreamsocksgeterrorsubdomain(_:)",
            "title": "CFSocketStreamSOCKSGetErrorSubdomain",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfstreamcreatepairwithsockettocfhost(_:_:_:_:_:)",
            "title": "CFStreamCreatePairWithSocketToCFHost",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfstreamcreatepairwithsockettonetservice(_:_:_:_:)",
            "title": "CFStreamCreatePairWithSocketToNetService",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamnetworkservicetype",
            "title": "kCFStreamNetworkServiceType",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamnetworkservicetypebackground",
            "title": "kCFStreamNetworkServiceTypeBackground",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamnetworkservicetypecallsignaling",
            "title": "kCFStreamNetworkServiceTypeCallSignaling",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamnetworkservicetypevideo",
            "title": "kCFStreamNetworkServiceTypeVideo",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreamnetworkservicetypevoip",
            "title": "kCFStreamNetworkServiceTypeVoIP",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamnetworkservicetypevoice",
            "title": "kCFStreamNetworkServiceTypeVoice",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainftp",
            "title": "kCFStreamErrorDomainFTP",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainhttp",
            "title": "kCFStreamErrorDomainHTTP",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainmach",
            "title": "kCFStreamErrorDomainMach",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainnetdb",
            "title": "kCFStreamErrorDomainNetDB",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainnetservices",
            "title": "kCFStreamErrorDomainNetServices",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamerrordomainsocks",
            "title": "kCFStreamErrorDomainSOCKS",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamerrordomainssl",
            "title": "kCFStreamErrorDomainSSL",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainsystemconfiguration",
            "title": "kCFStreamErrorDomainSystemConfiguration",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainwinsock",
            "title": "kCFStreamErrorDomainWinSock",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertyconnectioniscellular",
            "title": "kCFStreamPropertyConnectionIsCellular",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertynocellular",
            "title": "kCFStreamPropertyNoCellular",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertyproxylocalbypass",
            "title": "kCFStreamPropertyProxyLocalBypass",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysockspassword",
            "title": "kCFStreamPropertySOCKSPassword",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysocksproxy",
            "title": "kCFStreamPropertySOCKSProxy",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysocksproxyhost",
            "title": "kCFStreamPropertySOCKSProxyHost",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysocksproxyport",
            "title": "kCFStreamPropertySOCKSProxyPort",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysocksuser",
            "title": "kCFStreamPropertySOCKSUser",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysocksversion",
            "title": "kCFStreamPropertySOCKSVersion",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysslcontext",
            "title": "kCFStreamPropertySSLContext",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysslpeercertificates",
            "title": "kCFStreamPropertySSLPeerCertificates",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysslpeertrust",
            "title": "kCFStreamPropertySSLPeerTrust",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysslsettings",
            "title": "kCFStreamPropertySSLSettings",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertyshouldclosenativesocket",
            "title": "kCFStreamPropertyShouldCloseNativeSocket",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysocketextendedbackgroundidlemode",
            "title": "kCFStreamPropertySocketExtendedBackgroundIdleMode",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysocketremotehost",
            "title": "kCFStreamPropertySocketRemoteHost",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysocketremotenetservice",
            "title": "kCFStreamPropertySocketRemoteNetService",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysocketsecuritylevel",
            "title": "kCFStreamPropertySocketSecurityLevel",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslallowsanyroot",
            "title": "kCFStreamSSLAllowsAnyRoot",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslallowsexpiredcertificates",
            "title": "kCFStreamSSLAllowsExpiredCertificates",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslallowsexpiredroots",
            "title": "kCFStreamSSLAllowsExpiredRoots",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslcertificates",
            "title": "kCFStreamSSLCertificates",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslisserver",
            "title": "kCFStreamSSLIsServer",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamssllevel",
            "title": "kCFStreamSSLLevel",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslpeername",
            "title": "kCFStreamSSLPeerName",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslvalidatescertificatechain",
            "title": "kCFStreamSSLValidatesCertificateChain",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsocksversion4",
            "title": "kCFStreamSocketSOCKSVersion4",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsocksversion5",
            "title": "kCFStreamSocketSOCKSVersion5",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsecuritylevelnegotiatedssl",
            "title": "kCFStreamSocketSecurityLevelNegotiatedSSL",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsecuritylevelnone",
            "title": "kCFStreamSocketSecurityLevelNone",
            "type": "var"
          },
          {
            "deprecated": true,
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsecuritylevelsslv2",
            "title": "kCFStreamSocketSecurityLevelSSLv2",
            "type": "var"
          },
          {
            "deprecated": true,
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsecuritylevelsslv3",
            "title": "kCFStreamSocketSecurityLevelSSLv3",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsecurityleveltlsv1",
            "title": "kCFStreamSocketSecurityLevelTLSv1",
            "type": "var"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttp/parsefailure",
                "title": "kCFStreamErrorHTTPParseFailure",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttp/redirectionloop",
                "title": "kCFStreamErrorHTTPRedirectionLoop",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttp/badurl",
                "title": "kCFStreamErrorHTTPBadURL",
                "type": "case"
              }
            ],
            "path": "/documentation/cfnetwork/cfstreamerrorhttp",
            "title": "CFStreamErrorHTTP",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttpauthentication/typeunsupported",
                "title": "kCFStreamErrorHTTPAuthenticationTypeUnsupported",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttpauthentication/badusername",
                "title": "kCFStreamErrorHTTPAuthenticationBadUserName",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttpauthentication/badpassword",
                "title": "kCFStreamErrorHTTPAuthenticationBadPassword",
                "type": "case"
              }
            ],
            "path": "/documentation/cfnetwork/cfstreamerrorhttpauthentication",
            "title": "CFStreamErrorHTTPAuthentication",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks4idconflict",
                "title": "kCFStreamErrorSOCKS4IdConflict",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks4identdfailed",
                "title": "kCFStreamErrorSOCKS4IdentdFailed",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks4requestfailed",
                "title": "kCFStreamErrorSOCKS4RequestFailed",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks4subdomainresponse",
                "title": "kCFStreamErrorSOCKS4SubDomainResponse",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks5subdomainmethod",
                "title": "kCFStreamErrorSOCKS5SubDomainMethod",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks5subdomainresponse",
                "title": "kCFStreamErrorSOCKS5SubDomainResponse",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks5subdomainuserpass",
                "title": "kCFStreamErrorSOCKS5SubDomainUserPass",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsockssubdomainnone",
                "title": "kCFStreamErrorSOCKSSubDomainNone",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsockssubdomainversioncode",
                "title": "kCFStreamErrorSOCKSSubDomainVersionCode",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/ksocks5noacceptablemethod",
                "title": "kSOCKS5NoAcceptableMethod",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks5badresponseaddr",
                "title": "kCFStreamErrorSOCKS5BadResponseAddr",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks5badstate",
                "title": "kCFStreamErrorSOCKS5BadState",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocksunknownclientversion",
                "title": "kCFStreamErrorSOCKSUnknownClientVersion",
                "type": "case"
              }
            ],
            "path": "/documentation/cfnetwork/1518266-secure-sockets-socks-errors",
            "title": "Secure Sockets (SOCKS) Errors",
            "type": "collection"
          },
          {
            "title": "Reference",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Data Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcallback",
                "title": "CFHostClientCallBack",
                "type": "typealias"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicebrowserclientcallback",
                "title": "CFNetServiceBrowserClientCallBack",
                "type": "typealias"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcallback",
                "title": "CFNetServiceClientCallBack",
                "type": "typealias"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicemonitorclientcallback",
                "title": "CFNetServiceMonitorClientCallBack",
                "type": "typealias"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatus",
                "title": "CFNetDiagnosticStatus",
                "type": "typealias"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetwork-data-types",
            "title": "CFNetwork Data Types",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Constants",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks4subdomainresponse",
                    "title": "kCFStreamErrorSOCKS4SubDomainResponse",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks5subdomainmethod",
                    "title": "kCFStreamErrorSOCKS5SubDomainMethod",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks5subdomainresponse",
                    "title": "kCFStreamErrorSOCKS5SubDomainResponse",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks5subdomainuserpass",
                    "title": "kCFStreamErrorSOCKS5SubDomainUserPass",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsockssubdomainnone",
                    "title": "kCFStreamErrorSOCKSSubDomainNone",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsockssubdomainversioncode",
                    "title": "kCFStreamErrorSOCKSSubDomainVersionCode",
                    "type": "case"
                  }
                ],
                "path": "/documentation/cfnetwork/1518287-anonymous",
                "title": "Anonymous",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Constants",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cfnetwork/ksocks5noacceptablemethod",
                    "title": "kSOCKS5NoAcceptableMethod",
                    "type": "case"
                  }
                ],
                "path": "/documentation/cfnetwork/1518276-anonymous",
                "title": "Anonymous",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Constants",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks4idconflict",
                    "title": "kCFStreamErrorSOCKS4IdConflict",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks4identdfailed",
                    "title": "kCFStreamErrorSOCKS4IdentdFailed",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks4requestfailed",
                    "title": "kCFStreamErrorSOCKS4RequestFailed",
                    "type": "case"
                  }
                ],
                "path": "/documentation/cfnetwork/1518284-anonymous",
                "title": "Anonymous",
                "type": "collection"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetwork-enumerations",
            "title": "CFNetwork Enumerations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcfhttpversion3_0",
                "title": "kCFHTTPVersion3_0",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamnetworkservicetypeavstreaming",
                "title": "kCFStreamNetworkServiceTypeAVStreaming",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamnetworkservicetyperesponsiveav",
                "title": "kCFStreamNetworkServiceTypeResponsiveAV",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamnetworkservicetyperesponsivedata",
                "title": "kCFStreamNetworkServiceTypeResponsiveData",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreampropertyallowconstrainednetworkaccess",
                "title": "kCFStreamPropertyAllowConstrainedNetworkAccess",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreampropertyallowexpensivenetworkaccess",
                "title": "kCFStreamPropertyAllowExpensiveNetworkAccess",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreampropertyconnectionisexpensive",
                "title": "kCFStreamPropertyConnectionIsExpensive",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetwork-constants",
            "title": "CFNetwork Constants",
            "type": "collection"
          }
        ],
        "path": "/documentation/cfnetwork",
        "title": "CFNetwork",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfhosterrorhostnotfound",
                "title": "case cfHostErrorHostNotFound",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfhosterrorunknown",
                "title": "case cfHostErrorUnknown",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsockserrorunknownclientversion",
                "title": "case cfsocksErrorUnknownClientVersion",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsockserrorunsupportedserverversion",
                "title": "case cfsocksErrorUnsupportedServerVersion",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks4errorrequestfailed",
                "title": "case cfsocks4ErrorRequestFailed",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks4erroridentdfailed",
                "title": "case cfsocks4ErrorIdentdFailed",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks4erroridconflict",
                "title": "case cfsocks4ErrorIdConflict",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks4errorunknownstatuscode",
                "title": "case cfsocks4ErrorUnknownStatusCode",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks5errorbadstate",
                "title": "case cfsocks5ErrorBadState",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks5errorbadresponseaddr",
                "title": "case cfsocks5ErrorBadResponseAddr",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks5errorbadcredentials",
                "title": "case cfsocks5ErrorBadCredentials",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks5errorunsupportednegotiationmethod",
                "title": "case cfsocks5ErrorUnsupportedNegotiationMethod",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfsocks5errornoacceptablemethod",
                "title": "case cfsocks5ErrorNoAcceptableMethod",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfftperrorunexpectedstatuscode",
                "title": "case cfftpErrorUnexpectedStatusCode",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpauthenticationtypeunsupported",
                "title": "case cfErrorHTTPAuthenticationTypeUnsupported",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpbadcredentials",
                "title": "case cfErrorHTTPBadCredentials",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpconnectionlost",
                "title": "case cfErrorHTTPConnectionLost",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpparsefailure",
                "title": "case cfErrorHTTPParseFailure",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpredirectionloopdetected",
                "title": "case cfErrorHTTPRedirectionLoopDetected",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpbadurl",
                "title": "case cfErrorHTTPBadURL",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpproxyconnectionfailure",
                "title": "case cfErrorHTTPProxyConnectionFailure",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpbadproxycredentials",
                "title": "case cfErrorHTTPBadProxyCredentials",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorpacfileerror",
                "title": "case cfErrorPACFileError",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorpacfileauth",
                "title": "case cfErrorPACFileAuth",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cferrorhttpsproxyconnectionfailure",
                "title": "case cfErrorHTTPSProxyConnectionFailure",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfstreamerrorhttpsproxyfailureunexpectedresponsetoconnectmethod",
                "title": "case cfStreamErrorHTTPSProxyFailureUnexpectedResponseToCONNECTMethod",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorunknown",
                "title": "case cfurlErrorUnknown",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcancelled",
                "title": "case cfurlErrorCancelled",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorbadurl",
                "title": "case cfurlErrorBadURL",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrortimedout",
                "title": "case cfurlErrorTimedOut",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorunsupportedurl",
                "title": "case cfurlErrorUnsupportedURL",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotfindhost",
                "title": "case cfurlErrorCannotFindHost",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotconnecttohost",
                "title": "case cfurlErrorCannotConnectToHost",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrornetworkconnectionlost",
                "title": "case cfurlErrorNetworkConnectionLost",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrordnslookupfailed",
                "title": "case cfurlErrorDNSLookupFailed",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorhttptoomanyredirects",
                "title": "case cfurlErrorHTTPTooManyRedirects",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorresourceunavailable",
                "title": "case cfurlErrorResourceUnavailable",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrornotconnectedtointernet",
                "title": "case cfurlErrorNotConnectedToInternet",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorredirecttononexistentlocation",
                "title": "case cfurlErrorRedirectToNonExistentLocation",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorbadserverresponse",
                "title": "case cfurlErrorBadServerResponse",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorusercancelledauthentication",
                "title": "case cfurlErrorUserCancelledAuthentication",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerroruserauthenticationrequired",
                "title": "case cfurlErrorUserAuthenticationRequired",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorzerobyteresource",
                "title": "case cfurlErrorZeroByteResource",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotdecoderawdata",
                "title": "case cfurlErrorCannotDecodeRawData",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotdecodecontentdata",
                "title": "case cfurlErrorCannotDecodeContentData",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotparseresponse",
                "title": "case cfurlErrorCannotParseResponse",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorinternationalroamingoff",
                "title": "case cfurlErrorInternationalRoamingOff",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcallisactive",
                "title": "case cfurlErrorCallIsActive",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrordatanotallowed",
                "title": "case cfurlErrorDataNotAllowed",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorrequestbodystreamexhausted",
                "title": "case cfurlErrorRequestBodyStreamExhausted",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorfiledoesnotexist",
                "title": "case cfurlErrorFileDoesNotExist",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorfileisdirectory",
                "title": "case cfurlErrorFileIsDirectory",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrornopermissionstoreadfile",
                "title": "case cfurlErrorNoPermissionsToReadFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrordatalengthexceedsmaximum",
                "title": "case cfurlErrorDataLengthExceedsMaximum",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorsecureconnectionfailed",
                "title": "case cfurlErrorSecureConnectionFailed",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorservercertificatehasbaddate",
                "title": "case cfurlErrorServerCertificateHasBadDate",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorservercertificateuntrusted",
                "title": "case cfurlErrorServerCertificateUntrusted",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorservercertificatehasunknownroot",
                "title": "case cfurlErrorServerCertificateHasUnknownRoot",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorservercertificatenotyetvalid",
                "title": "case cfurlErrorServerCertificateNotYetValid",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorclientcertificaterejected",
                "title": "case cfurlErrorClientCertificateRejected",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorclientcertificaterequired",
                "title": "case cfurlErrorClientCertificateRequired",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotloadfromnetwork",
                "title": "case cfurlErrorCannotLoadFromNetwork",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotcreatefile",
                "title": "case cfurlErrorCannotCreateFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotopenfile",
                "title": "case cfurlErrorCannotOpenFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotclosefile",
                "title": "case cfurlErrorCannotCloseFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotwritetofile",
                "title": "case cfurlErrorCannotWriteToFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotremovefile",
                "title": "case cfurlErrorCannotRemoveFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorcannotmovefile",
                "title": "case cfurlErrorCannotMoveFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrordownloaddecodingfailedmidstream",
                "title": "case cfurlErrorDownloadDecodingFailedMidStream",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrordownloaddecodingfailedtocomplete",
                "title": "case cfurlErrorDownloadDecodingFailedToComplete",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfhttpcookiecannotparsecookiefile",
                "title": "case cfhttpCookieCannotParseCookieFile",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrorunknown",
                "title": "case cfNetServiceErrorUnknown",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrorcollision",
                "title": "case cfNetServiceErrorCollision",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrornotfound",
                "title": "case cfNetServiceErrorNotFound",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrorinprogress",
                "title": "case cfNetServiceErrorInProgress",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrorbadargument",
                "title": "case cfNetServiceErrorBadArgument",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrorcancel",
                "title": "case cfNetServiceErrorCancel",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrorinvalid",
                "title": "case cfNetServiceErrorInvalid",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrortimeout",
                "title": "case cfNetServiceErrorTimeout",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfnetserviceerrordnsservicefailure",
                "title": "case cfNetServiceErrorDNSServiceFailure",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorapptransportsecurityrequiressecureconnection",
                "title": "case cfurlErrorAppTransportSecurityRequiresSecureConnection",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorbackgroundsessioninusebyanotherprocess",
                "title": "case cfurlErrorBackgroundSessionInUseByAnotherProcess",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorbackgroundsessionwasdisconnected",
                "title": "case cfurlErrorBackgroundSessionWasDisconnected",
                "type": "case"
              },
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/cfurlerrorfileoutsidesafearea",
                "title": "case cfurlErrorFileOutsideSafeArea",
                "type": "case"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetworkerrors/init(rawvalue:)",
                "title": "init?(rawValue: Int32)",
                "type": "init"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetworkerrors",
            "title": "CFNetworkErrors",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcfurlerrorfailingurlerrorkey",
                "title": "let kCFURLErrorFailingURLErrorKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfurlerrorfailingurlstringerrorkey",
                "title": "let kCFURLErrorFailingURLStringErrorKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfgetaddrinfofailurekey",
                "title": "let kCFGetAddrInfoFailureKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfsocksstatuscodekey",
                "title": "let kCFSOCKSStatusCodeKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfsocksversionkey",
                "title": "let kCFSOCKSVersionKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfsocksnegotiationmethodkey",
                "title": "let kCFSOCKSNegotiationMethodKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfdnsservicefailurekey",
                "title": "let kCFDNSServiceFailureKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfftpstatuscodekey",
                "title": "let kCFFTPStatusCodeKey: CFString",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/error-dictionary-keys",
            "title": "Error Dictionary Keys",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcferrordomaincfnetwork",
                "title": "let kCFErrorDomainCFNetwork: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcferrordomainwinsock",
                "title": "let kCFErrorDomainWinSock: CFString",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/error-domains",
            "title": "Error Domains",
            "type": "collection"
          },
          {
            "title": "Hosts",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cfnetwork/cfhost",
            "title": "CFHost",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfhostinfotype/addresses",
                "title": "case addresses",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfhostinfotype/names",
                "title": "case names",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfhostinfotype/reachability",
                "title": "case reachability",
                "type": "case"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfhostinfotype/init(rawvalue:)",
                "title": "init?(rawValue: Int32)",
                "type": "init"
              }
            ],
            "path": "/documentation/cfnetwork/cfhostinfotype",
            "title": "CFHostInfoType",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcontext/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcontext/init(version:info:retain:release:copydescription:)",
                "title": "init(version: CFIndex, info: UnsafeMutableRawPointer?, retain: CFAllocatorRetainCallBack?, release: CFAllocatorReleaseCallBack?, copyDescription: CFAllocatorCopyDescriptionCallBack?)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcontext/copydescription",
                "title": "var copyDescription: CFAllocatorCopyDescriptionCallBack?",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcontext/info",
                "title": "var info: UnsafeMutableRawPointer?",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcontext/release",
                "title": "var release: CFAllocatorReleaseCallBack?",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcontext/retain",
                "title": "var retain: CFAllocatorRetainCallBack?",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcontext/version",
                "title": "var version: CFIndex",
                "type": "property"
              }
            ],
            "path": "/documentation/cfnetwork/cfhostclientcontext",
            "title": "CFHostClientContext",
            "type": "struct"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostcancelinforesolution(_:_:)",
            "title": "func CFHostCancelInfoResolution(CFHost, CFHostInfoType)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostcreatecopy(_:_:)",
            "title": "func CFHostCreateCopy(CFAllocator?, CFHost) -> Unmanaged<CFHost>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostcreatewithaddress(_:_:)",
            "title": "func CFHostCreateWithAddress(CFAllocator?, CFData) -> Unmanaged<CFHost>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostcreatewithname(_:_:)",
            "title": "func CFHostCreateWithName(CFAllocator?, CFString) -> Unmanaged<CFHost>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostgetaddressing(_:_:)",
            "title": "func CFHostGetAddressing(CFHost, UnsafeMutablePointer<DarwinBoolean>?) -> Unmanaged<CFArray>?",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostgetnames(_:_:)",
            "title": "func CFHostGetNames(CFHost, UnsafeMutablePointer<DarwinBoolean>?) -> Unmanaged<CFArray>?",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostgetreachability(_:_:)",
            "title": "func CFHostGetReachability(CFHost, UnsafeMutablePointer<DarwinBoolean>?) -> Unmanaged<CFData>?",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostgettypeid()",
            "title": "func CFHostGetTypeID() -> CFTypeID",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostschedulewithrunloop(_:_:_:)",
            "title": "func CFHostScheduleWithRunLoop(CFHost, CFRunLoop, CFString)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostsetclient(_:_:_:)",
            "title": "func CFHostSetClient(CFHost, CFHostClientCallBack?, UnsafeMutablePointer<CFHostClientContext>?) -> Bool",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhoststartinforesolution(_:_:_:)",
            "title": "func CFHostStartInfoResolution(CFHost, CFHostInfoType, UnsafeMutablePointer<CFStreamError>?) -> Bool",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfhostunschedulefromrunloop(_:_:_:)",
            "title": "func CFHostUnscheduleFromRunLoop(CFHost, CFRunLoop, CFString)",
            "type": "func"
          },
          {
            "title": "Global Proxy Configuration",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cfnetwork/cfnetworkcopyproxiesforurl(_:_:)",
            "title": "func CFNetworkCopyProxiesForURL(CFURL, CFDictionary) -> Unmanaged<CFArray>",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfnetworkcopyproxiesforautoconfigurationscript(_:_:_:)",
            "title": "func CFNetworkCopyProxiesForAutoConfigurationScript(CFString, CFURL, UnsafeMutablePointer<Unmanaged<CFError>?>?) -> Unmanaged<CFArray>?",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfnetworkexecuteproxyautoconfigurationscript(_:_:_:_:)",
            "title": "func CFNetworkExecuteProxyAutoConfigurationScript(CFString, CFURL, CFProxyAutoConfigurationResultCallback, UnsafeMutablePointer<CFStreamClientContext>) -> CFRunLoopSource",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfnetworkexecuteproxyautoconfigurationurl(_:_:_:_:)",
            "title": "func CFNetworkExecuteProxyAutoConfigurationURL(CFURL, CFURL, CFProxyAutoConfigurationResultCallback, UnsafeMutablePointer<CFStreamClientContext>) -> CFRunLoopSource",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfnetworkcopysystemproxysettings()",
            "title": "func CFNetworkCopySystemProxySettings() -> Unmanaged<CFDictionary>?",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfproxyautoconfigurationresultcallback",
            "title": "CFProxyAutoConfigurationResultCallback",
            "type": "typealias"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxyautoconfigurationhttpresponsekey",
                "title": "let kCFProxyAutoConfigurationHTTPResponseKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxyautoconfigurationjavascriptkey",
                "title": "let kCFProxyAutoConfigurationJavaScriptKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxyautoconfigurationurlkey",
                "title": "let kCFProxyAutoConfigurationURLKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxyhostnamekey",
                "title": "let kCFProxyHostNameKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxypasswordkey",
                "title": "let kCFProxyPasswordKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxyportnumberkey",
                "title": "let kCFProxyPortNumberKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypekey",
                "title": "let kCFProxyTypeKey: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxyusernamekey",
                "title": "let kCFProxyUsernameKey: CFString",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/property-keys",
            "title": "Property Keys",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypenone",
                "title": "let kCFProxyTypeNone: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypeautoconfigurationurl",
                "title": "let kCFProxyTypeAutoConfigurationURL: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypeautoconfigurationjavascript",
                "title": "let kCFProxyTypeAutoConfigurationJavaScript: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypeftp",
                "title": "let kCFProxyTypeFTP: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypehttp",
                "title": "let kCFProxyTypeHTTP: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypehttps",
                "title": "let kCFProxyTypeHTTPS: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfproxytypesocks",
                "title": "let kCFProxyTypeSOCKS: CFString",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/proxy-types",
            "title": "Proxy Types",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesexceptionslist",
                "title": "let kCFNetworkProxiesExceptionsList: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesexcludesimplehostnames",
                "title": "let kCFNetworkProxiesExcludeSimpleHostnames: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesftpenable",
                "title": "let kCFNetworkProxiesFTPEnable: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesftppassive",
                "title": "let kCFNetworkProxiesFTPPassive: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesftpport",
                "title": "let kCFNetworkProxiesFTPPort: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesftpproxy",
                "title": "let kCFNetworkProxiesFTPProxy: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesgopherenable",
                "title": "let kCFNetworkProxiesGopherEnable: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesgopherport",
                "title": "let kCFNetworkProxiesGopherPort: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesgopherproxy",
                "title": "let kCFNetworkProxiesGopherProxy: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxieshttpenable",
                "title": "let kCFNetworkProxiesHTTPEnable: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxieshttpport",
                "title": "let kCFNetworkProxiesHTTPPort: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxieshttpproxy",
                "title": "let kCFNetworkProxiesHTTPProxy: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxieshttpsenable",
                "title": "let kCFNetworkProxiesHTTPSEnable: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxieshttpsport",
                "title": "let kCFNetworkProxiesHTTPSPort: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxieshttpsproxy",
                "title": "let kCFNetworkProxiesHTTPSProxy: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesrtspenable",
                "title": "let kCFNetworkProxiesRTSPEnable: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesrtspport",
                "title": "let kCFNetworkProxiesRTSPPort: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesrtspproxy",
                "title": "let kCFNetworkProxiesRTSPProxy: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiessocksenable",
                "title": "let kCFNetworkProxiesSOCKSEnable: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiessocksport",
                "title": "let kCFNetworkProxiesSOCKSPort: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiessocksproxy",
                "title": "let kCFNetworkProxiesSOCKSProxy: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesproxyautoconfigenable",
                "title": "let kCFNetworkProxiesProxyAutoConfigEnable: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesproxyautoconfigjavascript",
                "title": "let kCFNetworkProxiesProxyAutoConfigJavaScript: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesproxyautoconfigurlstring",
                "title": "let kCFNetworkProxiesProxyAutoConfigURLString: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfnetworkproxiesproxyautodiscoveryenable",
                "title": "let kCFNetworkProxiesProxyAutoDiscoveryEnable: CFString",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/global-proxy-settings-constants",
            "title": "Global Proxy Settings Constants",
            "type": "collection"
          },
          {
            "title": "HTTP Authentication",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthentication",
            "title": "CFHTTPAuthentication",
            "type": "class"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationappliestorequest(_:_:)",
            "title": "func CFHTTPAuthenticationAppliesToRequest(CFHTTPAuthentication, CFHTTPMessage) -> Bool",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationcopydomains(_:)",
            "title": "func CFHTTPAuthenticationCopyDomains(CFHTTPAuthentication) -> Unmanaged<CFArray>",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationcopymethod(_:)",
            "title": "func CFHTTPAuthenticationCopyMethod(CFHTTPAuthentication) -> Unmanaged<CFString>",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationcopyrealm(_:)",
            "title": "func CFHTTPAuthenticationCopyRealm(CFHTTPAuthentication) -> Unmanaged<CFString>",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationcreatefromresponse(_:_:)",
            "title": "func CFHTTPAuthenticationCreateFromResponse(CFAllocator?, CFHTTPMessage) -> Unmanaged<CFHTTPAuthentication>",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationgettypeid()",
            "title": "func CFHTTPAuthenticationGetTypeID() -> CFTypeID",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationisvalid(_:_:)",
            "title": "func CFHTTPAuthenticationIsValid(CFHTTPAuthentication, UnsafeMutablePointer<CFStreamError>?) -> Bool",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationrequiresaccountdomain(_:)",
            "title": "func CFHTTPAuthenticationRequiresAccountDomain(CFHTTPAuthentication) -> Bool",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationrequiresorderedrequests(_:)",
            "title": "func CFHTTPAuthenticationRequiresOrderedRequests(CFHTTPAuthentication) -> Bool",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpauthenticationrequiresusernameandpassword(_:)",
            "title": "func CFHTTPAuthenticationRequiresUserNameAndPassword(CFHTTPAuthentication) -> Bool",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationaccountdomain",
            "title": "let kCFHTTPAuthenticationAccountDomain: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationpassword",
            "title": "let kCFHTTPAuthenticationPassword: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschemebasic",
            "title": "let kCFHTTPAuthenticationSchemeBasic: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschemedigest",
            "title": "let kCFHTTPAuthenticationSchemeDigest: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschemekerberos",
            "title": "let kCFHTTPAuthenticationSchemeKerberos: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschementlm",
            "title": "let kCFHTTPAuthenticationSchemeNTLM: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschemenegotiate",
            "title": "let kCFHTTPAuthenticationSchemeNegotiate: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschemenegotiate2",
            "title": "let kCFHTTPAuthenticationSchemeNegotiate2: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationschemexmobilemeauthtoken",
            "title": "let kCFHTTPAuthenticationSchemeXMobileMeAuthToken: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpauthenticationusername",
            "title": "let kCFHTTPAuthenticationUsername: CFString",
            "type": "var"
          },
          {
            "title": "HTTP Messages",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessage",
            "title": "CFHTTPMessage",
            "type": "class"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessageaddauthentication(_:_:_:_:_:_:)",
            "title": "func CFHTTPMessageAddAuthentication(CFHTTPMessage, CFHTTPMessage?, CFString, CFString, CFString?, Bool) -> Bool",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessageappendbytes(_:_:_:)",
            "title": "func CFHTTPMessageAppendBytes(CFHTTPMessage, UnsafePointer<UInt8>, CFIndex) -> Bool",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessageapplycredentialdictionary(_:_:_:_:)",
            "title": "func CFHTTPMessageApplyCredentialDictionary(CFHTTPMessage, CFHTTPAuthentication, CFDictionary, UnsafeMutablePointer<CFStreamError>?) -> Bool",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessageapplycredentials(_:_:_:_:_:)",
            "title": "func CFHTTPMessageApplyCredentials(CFHTTPMessage, CFHTTPAuthentication, CFString?, CFString?, UnsafeMutablePointer<CFStreamError>?) -> Bool",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyallheaderfields(_:)",
            "title": "func CFHTTPMessageCopyAllHeaderFields(CFHTTPMessage) -> Unmanaged<CFDictionary>?",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopybody(_:)",
            "title": "func CFHTTPMessageCopyBody(CFHTTPMessage) -> Unmanaged<CFData>?",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyheaderfieldvalue(_:_:)",
            "title": "func CFHTTPMessageCopyHeaderFieldValue(CFHTTPMessage, CFString) -> Unmanaged<CFString>?",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyrequestmethod(_:)",
            "title": "func CFHTTPMessageCopyRequestMethod(CFHTTPMessage) -> Unmanaged<CFString>?",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyrequesturl(_:)",
            "title": "func CFHTTPMessageCopyRequestURL(CFHTTPMessage) -> Unmanaged<CFURL>?",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyresponsestatusline(_:)",
            "title": "func CFHTTPMessageCopyResponseStatusLine(CFHTTPMessage) -> Unmanaged<CFString>?",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyserializedmessage(_:)",
            "title": "func CFHTTPMessageCopySerializedMessage(CFHTTPMessage) -> Unmanaged<CFData>?",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecopyversion(_:)",
            "title": "func CFHTTPMessageCopyVersion(CFHTTPMessage) -> Unmanaged<CFString>",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecreatecopy(_:_:)",
            "title": "func CFHTTPMessageCreateCopy(CFAllocator?, CFHTTPMessage) -> Unmanaged<CFHTTPMessage>",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecreateempty(_:_:)",
            "title": "func CFHTTPMessageCreateEmpty(CFAllocator?, Bool) -> Unmanaged<CFHTTPMessage>",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecreaterequest(_:_:_:_:)",
            "title": "func CFHTTPMessageCreateRequest(CFAllocator?, CFString, CFURL, CFString) -> Unmanaged<CFHTTPMessage>",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagecreateresponse(_:_:_:_:)",
            "title": "func CFHTTPMessageCreateResponse(CFAllocator?, CFIndex, CFString?, CFString) -> Unmanaged<CFHTTPMessage>",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagegetresponsestatuscode(_:)",
            "title": "func CFHTTPMessageGetResponseStatusCode(CFHTTPMessage) -> CFIndex",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagegettypeid()",
            "title": "func CFHTTPMessageGetTypeID() -> CFTypeID",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessageisheadercomplete(_:)",
            "title": "func CFHTTPMessageIsHeaderComplete(CFHTTPMessage) -> Bool",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessageisrequest(_:)",
            "title": "func CFHTTPMessageIsRequest(CFHTTPMessage) -> Bool",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagesetbody(_:_:)",
            "title": "func CFHTTPMessageSetBody(CFHTTPMessage, CFData)",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfhttpmessagesetheaderfieldvalue(_:_:_:)",
            "title": "func CFHTTPMessageSetHeaderFieldValue(CFHTTPMessage, CFString, CFString?)",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpversion1_0",
            "title": "let kCFHTTPVersion1_0: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpversion1_1",
            "title": "let kCFHTTPVersion1_1: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfhttpversion2_0",
            "title": "let kCFHTTPVersion2_0: CFString",
            "type": "var"
          },
          {
            "title": "FTP",
            "type": "groupMarker"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfftpcreateparsedresourcelisting(_:_:_:_:)",
            "title": "func CFFTPCreateParsedResourceListing(CFAllocator?, UnsafePointer<UInt8>, CFIndex, UnsafeMutablePointer<Unmanaged<CFDictionary>?>?) -> CFIndex",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcegroup",
            "title": "let kCFFTPResourceGroup: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcelink",
            "title": "let kCFFTPResourceLink: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcemoddate",
            "title": "let kCFFTPResourceModDate: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcemode",
            "title": "let kCFFTPResourceMode: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcename",
            "title": "let kCFFTPResourceName: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourceowner",
            "title": "let kCFFTPResourceOwner: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcesize",
            "title": "let kCFFTPResourceSize: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfftpresourcetype",
            "title": "let kCFFTPResourceType: CFString",
            "type": "var"
          },
          {
            "title": "Network Diagnostics",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cfnetwork/cfnetdiagnostic",
            "title": "CFNetDiagnostic",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues/noerr",
                "title": "case noErr",
                "type": "case"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues/err",
                "title": "case err",
                "type": "case"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues/connectionup",
                "title": "case connectionUp",
                "type": "case"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues/connectionindeterminate",
                "title": "case connectionIndeterminate",
                "type": "case"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues/connectiondown",
                "title": "case connectionDown",
                "type": "case"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues/init(rawvalue:)",
                "title": "init?(rawValue: Int32)",
                "type": "init"
              }
            ],
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetdiagnosticstatusvalues",
            "title": "CFNetDiagnosticStatusValues",
            "type": "enum"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetdiagnosticcopynetworkstatuspassively(_:_:)",
            "title": "func CFNetDiagnosticCopyNetworkStatusPassively(CFNetDiagnostic, UnsafeMutablePointer<Unmanaged<CFString>?>?) -> CFNetDiagnosticStatus",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetdiagnosticcreatewithstreams(_:_:_:)",
            "title": "func CFNetDiagnosticCreateWithStreams(CFAllocator?, CFReadStream?, CFWriteStream?) -> Unmanaged<CFNetDiagnostic>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetdiagnosticcreatewithurl(_:_:)",
            "title": "func CFNetDiagnosticCreateWithURL(CFAllocator, CFURL) -> Unmanaged<CFNetDiagnostic>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetdiagnosticdiagnoseprobleminteractively(_:)",
            "title": "func CFNetDiagnosticDiagnoseProblemInteractively(CFNetDiagnostic) -> CFNetDiagnosticStatus",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetdiagnosticsetname(_:_:)",
            "title": "func CFNetDiagnosticSetName(CFNetDiagnostic, CFString)",
            "type": "func"
          },
          {
            "title": "Network Services",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/cfnetwork/cfnetservice",
            "title": "CFNetService",
            "type": "class"
          },
          {
            "path": "/documentation/cfnetwork/cfnetservicebrowser",
            "title": "CFNetServiceBrowser",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/init(rawvalue:)",
                "title": "init(rawValue: CFOptionFlags)",
                "type": "init"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/isdefault",
                "title": "static var isDefault: CFNetServiceBrowserFlags",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/isdomain",
                "title": "static var isDomain: CFNetServiceBrowserFlags",
                "type": "property"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/isregistrationdomain",
                "title": "static var isRegistrationDomain: CFNetServiceBrowserFlags",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/morecoming",
                "title": "static var moreComing: CFNetServiceBrowserFlags",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/remove",
                "title": "static var remove: CFNetServiceBrowserFlags",
                "type": "property"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetservicebrowserflags/isregistrationdomain",
                "title": "static var isRegistrationDomain: CFNetServiceBrowserFlags",
                "type": "property"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetservicebrowserflags",
            "title": "CFNetServiceBrowserFlags",
            "type": "struct"
          },
          {
            "path": "/documentation/cfnetwork/cfnetservicemonitor",
            "title": "CFNetServiceMonitor",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicemonitortype/txt",
                "title": "case TXT",
                "type": "case"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicemonitortype/init(rawvalue:)",
                "title": "init?(rawValue: Int32)",
                "type": "init"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetservicemonitortype",
            "title": "CFNetServiceMonitorType",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcontext/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcontext/init(version:info:retain:release:copydescription:)",
                "title": "init(version: CFIndex, info: UnsafeMutableRawPointer?, retain: CFAllocatorRetainCallBack?, release: CFAllocatorReleaseCallBack?, copyDescription: CFAllocatorCopyDescriptionCallBack?)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcontext/copydescription",
                "title": "var copyDescription: CFAllocatorCopyDescriptionCallBack?",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcontext/info",
                "title": "var info: UnsafeMutableRawPointer?",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcontext/release",
                "title": "var release: CFAllocatorReleaseCallBack?",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcontext/retain",
                "title": "var retain: CFAllocatorRetainCallBack?",
                "type": "property"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcontext/version",
                "title": "var version: CFIndex",
                "type": "property"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetserviceclientcontext",
            "title": "CFNetServiceClientContext",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating Register Flags",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceregisterflags/init(rawvalue:)",
                "title": "init(rawValue: CFOptionFlags)",
                "type": "init"
              },
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceregisterflags/noautorename",
                "title": "static var noAutoRename: CFNetServiceRegisterFlags",
                "type": "property"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetserviceregisterflags",
            "title": "CFNetServiceRegisterFlags",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/unknown",
                "title": "case unknown",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/collision",
                "title": "case collision",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/notfound",
                "title": "case notFound",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/inprogress",
                "title": "case inProgress",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/badargument",
                "title": "case badArgument",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/cancel",
                "title": "case cancel",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/invalid",
                "title": "case invalid",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/timeout",
                "title": "case timeout",
                "type": "case"
              },
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/missingrequiredconfiguration",
                "title": "case missingRequiredConfiguration",
                "type": "case"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceserror/init(rawvalue:)",
                "title": "init?(rawValue: Int32)",
                "type": "init"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetserviceserror",
            "title": "CFNetServicesError",
            "type": "enum"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowserinvalidate(_:)",
            "title": "func CFNetServiceBrowserInvalidate(CFNetServiceBrowser)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowserschedulewithrunloop(_:_:_:)",
            "title": "func CFNetServiceBrowserScheduleWithRunLoop(CFNetServiceBrowser, CFRunLoop, CFString)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowsercreate(_:_:_:)",
            "title": "func CFNetServiceBrowserCreate(CFAllocator?, CFNetServiceBrowserClientCallBack, UnsafeMutablePointer<CFNetServiceClientContext>) -> Unmanaged<CFNetServiceBrowser>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowsergettypeid()",
            "title": "func CFNetServiceBrowserGetTypeID() -> CFTypeID",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowsersearchfordomains(_:_:_:)",
            "title": "func CFNetServiceBrowserSearchForDomains(CFNetServiceBrowser, Bool, UnsafeMutablePointer<CFStreamError>?) -> Bool",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowsersearchforservices(_:_:_:_:)",
            "title": "func CFNetServiceBrowserSearchForServices(CFNetServiceBrowser, CFString, CFString, UnsafeMutablePointer<CFStreamError>?) -> Bool",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowserstopsearch(_:_:)",
            "title": "func CFNetServiceBrowserStopSearch(CFNetServiceBrowser, UnsafeMutablePointer<CFStreamError>?)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicebrowserunschedulefromrunloop(_:_:_:)",
            "title": "func CFNetServiceBrowserUnscheduleFromRunLoop(CFNetServiceBrowser, CFRunLoop, CFString)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicecancel(_:)",
            "title": "func CFNetServiceCancel(CFNetService)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicecreate(_:_:_:_:_:)",
            "title": "func CFNetServiceCreate(CFAllocator?, CFString, CFString, CFString, Int32) -> Unmanaged<CFNetService>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicecreatecopy(_:_:)",
            "title": "func CFNetServiceCreateCopy(CFAllocator?, CFNetService) -> Unmanaged<CFNetService>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicecreatedictionarywithtxtdata(_:_:)",
            "title": "func CFNetServiceCreateDictionaryWithTXTData(CFAllocator?, CFData) -> Unmanaged<CFDictionary>?",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicecreatetxtdatawithdictionary(_:_:)",
            "title": "func CFNetServiceCreateTXTDataWithDictionary(CFAllocator?, CFDictionary) -> Unmanaged<CFData>?",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegetaddressing(_:)",
            "title": "func CFNetServiceGetAddressing(CFNetService) -> Unmanaged<CFArray>?",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegetdomain(_:)",
            "title": "func CFNetServiceGetDomain(CFNetService) -> Unmanaged<CFString>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegetname(_:)",
            "title": "func CFNetServiceGetName(CFNetService) -> Unmanaged<CFString>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegetportnumber(_:)",
            "title": "func CFNetServiceGetPortNumber(CFNetService) -> Int32",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegettxtdata(_:)",
            "title": "func CFNetServiceGetTXTData(CFNetService) -> Unmanaged<CFData>?",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegettargethost(_:)",
            "title": "func CFNetServiceGetTargetHost(CFNetService) -> Unmanaged<CFString>?",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegettype(_:)",
            "title": "func CFNetServiceGetType(CFNetService) -> Unmanaged<CFString>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicegettypeid()",
            "title": "func CFNetServiceGetTypeID() -> CFTypeID",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorcreate(_:_:_:_:)",
            "title": "func CFNetServiceMonitorCreate(CFAllocator?, CFNetService, CFNetServiceMonitorClientCallBack, UnsafeMutablePointer<CFNetServiceClientContext>) -> Unmanaged<CFNetServiceMonitor>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorgettypeid()",
            "title": "func CFNetServiceMonitorGetTypeID() -> CFTypeID",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorinvalidate(_:)",
            "title": "func CFNetServiceMonitorInvalidate(CFNetServiceMonitor)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorschedulewithrunloop(_:_:_:)",
            "title": "func CFNetServiceMonitorScheduleWithRunLoop(CFNetServiceMonitor, CFRunLoop, CFString)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorstart(_:_:_:)",
            "title": "func CFNetServiceMonitorStart(CFNetServiceMonitor, CFNetServiceMonitorType, UnsafeMutablePointer<CFStreamError>?) -> Bool",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorstop(_:_:)",
            "title": "func CFNetServiceMonitorStop(CFNetServiceMonitor, UnsafeMutablePointer<CFStreamError>?)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicemonitorunschedulefromrunloop(_:_:_:)",
            "title": "func CFNetServiceMonitorUnscheduleFromRunLoop(CFNetServiceMonitor, CFRunLoop, CFString)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetserviceregisterwithoptions(_:_:_:)",
            "title": "func CFNetServiceRegisterWithOptions(CFNetService, CFOptionFlags, UnsafeMutablePointer<CFStreamError>?) -> Bool",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetserviceresolvewithtimeout(_:_:_:)",
            "title": "func CFNetServiceResolveWithTimeout(CFNetService, CFTimeInterval, UnsafeMutablePointer<CFStreamError>?) -> Bool",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicesetclient(_:_:_:)",
            "title": "func CFNetServiceSetClient(CFNetService, CFNetServiceClientCallBack?, UnsafeMutablePointer<CFNetServiceClientContext>?) -> Bool",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetservicesettxtdata(_:_:)",
            "title": "func CFNetServiceSetTXTData(CFNetService, CFData) -> Bool",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetserviceunschedulefromrunloop(_:_:_:)",
            "title": "func CFNetServiceUnscheduleFromRunLoop(CFNetService, CFRunLoop, CFString)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfnetserviceschedulewithrunloop(_:_:_:)",
            "title": "func CFNetServiceScheduleWithRunLoop(CFNetService, CFRunLoop, CFString)",
            "type": "func"
          },
          {
            "title": "Streams",
            "type": "groupMarker"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfreadstreamcreateforhttprequest(_:_:)",
            "title": "func CFReadStreamCreateForHTTPRequest(CFAllocator?, CFHTTPMessage) -> Unmanaged<CFReadStream>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfreadstreamcreateforstreamedhttprequest(_:_:_:)",
            "title": "func CFReadStreamCreateForStreamedHTTPRequest(CFAllocator?, CFHTTPMessage, CFReadStream) -> Unmanaged<CFReadStream>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpattemptpersistentconnection",
            "title": "let kCFStreamPropertyHTTPAttemptPersistentConnection: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpfinalrequest",
            "title": "let kCFStreamPropertyHTTPFinalRequest: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpfinalurl",
            "title": "let kCFStreamPropertyHTTPFinalURL: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpproxy",
            "title": "let kCFStreamPropertyHTTPProxy: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpproxyhost",
            "title": "let kCFStreamPropertyHTTPProxyHost: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpproxyport",
            "title": "let kCFStreamPropertyHTTPProxyPort: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttprequestbyteswrittencount",
            "title": "let kCFStreamPropertyHTTPRequestBytesWrittenCount: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpresponseheader",
            "title": "let kCFStreamPropertyHTTPResponseHeader: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpsproxyhost",
            "title": "let kCFStreamPropertyHTTPSProxyHost: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpsproxyport",
            "title": "let kCFStreamPropertyHTTPSProxyPort: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyhttpshouldautoredirect",
            "title": "let kCFStreamPropertyHTTPShouldAutoredirect: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfwritestreamcreatewithftpurl(_:_:)",
            "title": "func CFWriteStreamCreateWithFTPURL(CFAllocator?, CFURL) -> Unmanaged<CFWriteStream>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfreadstreamcreatewithftpurl(_:_:)",
            "title": "func CFReadStreamCreateWithFTPURL(CFAllocator?, CFURL) -> Unmanaged<CFReadStream>",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpattemptpersistentconnection",
            "title": "let kCFStreamPropertyFTPAttemptPersistentConnection: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpfetchresourceinfo",
            "title": "let kCFStreamPropertyFTPFetchResourceInfo: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpfiletransferoffset",
            "title": "let kCFStreamPropertyFTPFileTransferOffset: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftppassword",
            "title": "let kCFStreamPropertyFTPPassword: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpproxy",
            "title": "let kCFStreamPropertyFTPProxy: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpproxyhost",
            "title": "let kCFStreamPropertyFTPProxyHost: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpproxypassword",
            "title": "let kCFStreamPropertyFTPProxyPassword: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpproxyport",
            "title": "let kCFStreamPropertyFTPProxyPort: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpproxyuser",
            "title": "let kCFStreamPropertyFTPProxyUser: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpresourcesize",
            "title": "let kCFStreamPropertyFTPResourceSize: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpusepassivemode",
            "title": "let kCFStreamPropertyFTPUsePassiveMode: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreampropertyftpusername",
            "title": "let kCFStreamPropertyFTPUserName: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/cfsocketstreamsocksgeterror(_:)",
            "title": "func CFSocketStreamSOCKSGetError(UnsafePointer<CFStreamError>) -> Int32",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/cfsocketstreamsocksgeterrorsubdomain(_:)",
            "title": "func CFSocketStreamSOCKSGetErrorSubdomain(UnsafePointer<CFStreamError>) -> Int32",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfstreamcreatepairwithsockettocfhost(_:_:_:_:_:)",
            "title": "func CFStreamCreatePairWithSocketToCFHost(CFAllocator?, CFHost, Int32, UnsafeMutablePointer<Unmanaged<CFReadStream>?>?, UnsafeMutablePointer<Unmanaged<CFWriteStream>?>?)",
            "type": "func"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/cfstreamcreatepairwithsockettonetservice(_:_:_:_:)",
            "title": "func CFStreamCreatePairWithSocketToNetService(CFAllocator?, CFNetService, UnsafeMutablePointer<Unmanaged<CFReadStream>?>?, UnsafeMutablePointer<Unmanaged<CFWriteStream>?>?)",
            "type": "func"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamnetworkservicetype",
            "title": "let kCFStreamNetworkServiceType: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamnetworkservicetypebackground",
            "title": "let kCFStreamNetworkServiceTypeBackground: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamnetworkservicetypecallsignaling",
            "title": "let kCFStreamNetworkServiceTypeCallSignaling: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamnetworkservicetypevideo",
            "title": "let kCFStreamNetworkServiceTypeVideo: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "path": "/documentation/cfnetwork/kcfstreamnetworkservicetypevoip",
            "title": "let kCFStreamNetworkServiceTypeVoIP: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamnetworkservicetypevoice",
            "title": "let kCFStreamNetworkServiceTypeVoice: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainftp",
            "title": "let kCFStreamErrorDomainFTP: Int32",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainhttp",
            "title": "let kCFStreamErrorDomainHTTP: Int32",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainmach",
            "title": "let kCFStreamErrorDomainMach: Int32",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainnetdb",
            "title": "let kCFStreamErrorDomainNetDB: Int32",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainnetservices",
            "title": "let kCFStreamErrorDomainNetServices: Int32",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamerrordomainsocks",
            "title": "let kCFStreamErrorDomainSOCKS: Int32",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamerrordomainssl",
            "title": "let kCFStreamErrorDomainSSL: Int32",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainsystemconfiguration",
            "title": "let kCFStreamErrorDomainSystemConfiguration: Int32",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamerrordomainwinsock",
            "title": "let kCFStreamErrorDomainWinSock: CFIndex",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertyconnectioniscellular",
            "title": "let kCFStreamPropertyConnectionIsCellular: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertynocellular",
            "title": "let kCFStreamPropertyNoCellular: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertyproxylocalbypass",
            "title": "let kCFStreamPropertyProxyLocalBypass: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysockspassword",
            "title": "let kCFStreamPropertySOCKSPassword: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysocksproxy",
            "title": "let kCFStreamPropertySOCKSProxy: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysocksproxyhost",
            "title": "let kCFStreamPropertySOCKSProxyHost: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysocksproxyport",
            "title": "let kCFStreamPropertySOCKSProxyPort: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysocksuser",
            "title": "let kCFStreamPropertySOCKSUser: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysocksversion",
            "title": "let kCFStreamPropertySOCKSVersion: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysslcontext",
            "title": "let kCFStreamPropertySSLContext: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysslpeercertificates",
            "title": "let kCFStreamPropertySSLPeerCertificates: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysslpeertrust",
            "title": "let kCFStreamPropertySSLPeerTrust: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysslsettings",
            "title": "let kCFStreamPropertySSLSettings: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertyshouldclosenativesocket",
            "title": "let kCFStreamPropertyShouldCloseNativeSocket: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysocketextendedbackgroundidlemode",
            "title": "let kCFStreamPropertySocketExtendedBackgroundIdleMode: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysocketremotehost",
            "title": "let kCFStreamPropertySocketRemoteHost: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreampropertysocketremotenetservice",
            "title": "let kCFStreamPropertySocketRemoteNetService: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreampropertysocketsecuritylevel",
            "title": "let kCFStreamPropertySocketSecurityLevel: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslallowsanyroot",
            "title": "let kCFStreamSSLAllowsAnyRoot: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslallowsexpiredcertificates",
            "title": "let kCFStreamSSLAllowsExpiredCertificates: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslallowsexpiredroots",
            "title": "let kCFStreamSSLAllowsExpiredRoots: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslcertificates",
            "title": "let kCFStreamSSLCertificates: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslisserver",
            "title": "let kCFStreamSSLIsServer: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamssllevel",
            "title": "let kCFStreamSSLLevel: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslpeername",
            "title": "let kCFStreamSSLPeerName: CFString",
            "type": "var"
          },
          {
            "path": "/documentation/cfnetwork/kcfstreamsslvalidatescertificatechain",
            "title": "let kCFStreamSSLValidatesCertificateChain: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsocksversion4",
            "title": "let kCFStreamSocketSOCKSVersion4: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsocksversion5",
            "title": "let kCFStreamSocketSOCKSVersion5: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsecuritylevelnegotiatedssl",
            "title": "let kCFStreamSocketSecurityLevelNegotiatedSSL: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsecuritylevelnone",
            "title": "let kCFStreamSocketSecurityLevelNone: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsecuritylevelsslv2",
            "title": "let kCFStreamSocketSecurityLevelSSLv2: CFString",
            "type": "var"
          },
          {
            "deprecated": true,
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsecuritylevelsslv3",
            "title": "let kCFStreamSocketSecurityLevelSSLv3: CFString",
            "type": "var"
          },
          {
            "external": true,
            "path": "/documentation/corefoundation/kcfstreamsocketsecurityleveltlsv1",
            "title": "let kCFStreamSocketSecurityLevelTLSv1: CFString",
            "type": "var"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttp/parsefailure",
                "title": "case parseFailure",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttp/redirectionloop",
                "title": "case redirectionLoop",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttp/badurl",
                "title": "case badURL",
                "type": "case"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttp/init(rawvalue:)",
                "title": "init?(rawValue: Int32)",
                "type": "init"
              }
            ],
            "path": "/documentation/cfnetwork/cfstreamerrorhttp",
            "title": "CFStreamErrorHTTP",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttpauthentication/typeunsupported",
                "title": "case typeUnsupported",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttpauthentication/badusername",
                "title": "case badUserName",
                "type": "case"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttpauthentication/badpassword",
                "title": "case badPassword",
                "type": "case"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfstreamerrorhttpauthentication/init(rawvalue:)",
                "title": "init?(rawValue: Int32)",
                "type": "init"
              }
            ],
            "path": "/documentation/cfnetwork/cfstreamerrorhttpauthentication",
            "title": "CFStreamErrorHTTPAuthentication",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks4idconflict",
                "title": "var kCFStreamErrorSOCKS4IdConflict: Int",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks4identdfailed",
                "title": "var kCFStreamErrorSOCKS4IdentdFailed: Int",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks4requestfailed",
                "title": "var kCFStreamErrorSOCKS4RequestFailed: Int",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks4subdomainresponse",
                "title": "var kCFStreamErrorSOCKS4SubDomainResponse: Int",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks5subdomainmethod",
                "title": "var kCFStreamErrorSOCKS5SubDomainMethod: Int",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks5subdomainresponse",
                "title": "var kCFStreamErrorSOCKS5SubDomainResponse: Int",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks5subdomainuserpass",
                "title": "var kCFStreamErrorSOCKS5SubDomainUserPass: Int",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsockssubdomainnone",
                "title": "var kCFStreamErrorSOCKSSubDomainNone: Int",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsockssubdomainversioncode",
                "title": "var kCFStreamErrorSOCKSSubDomainVersionCode: Int",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/ksocks5noacceptablemethod",
                "title": "var kSOCKS5NoAcceptableMethod: Int",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks5badresponseaddr",
                "title": "var kCFStreamErrorSOCKS5BadResponseAddr: Int",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocks5badstate",
                "title": "var kCFStreamErrorSOCKS5BadState: Int",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamerrorsocksunknownclientversion",
                "title": "var kCFStreamErrorSOCKSUnknownClientVersion: Int",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/1518266-secure-sockets-socks-errors",
            "title": "Secure Sockets (SOCKS) Errors",
            "type": "collection"
          },
          {
            "title": "Reference",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Data Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/cfhostclientcallback",
                "title": "CFHostClientCallBack",
                "type": "typealias"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicebrowserclientcallback",
                "title": "CFNetServiceBrowserClientCallBack",
                "type": "typealias"
              },
              {
                "path": "/documentation/cfnetwork/cfnetserviceclientcallback",
                "title": "CFNetServiceClientCallBack",
                "type": "typealias"
              },
              {
                "path": "/documentation/cfnetwork/cfnetservicemonitorclientcallback",
                "title": "CFNetServiceMonitorClientCallBack",
                "type": "typealias"
              },
              {
                "deprecated": true,
                "path": "/documentation/cfnetwork/cfnetdiagnosticstatus",
                "title": "CFNetDiagnosticStatus",
                "type": "typealias"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetwork-data-types",
            "title": "CFNetwork Data Types",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Constants",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks4subdomainresponse",
                    "title": "var kCFStreamErrorSOCKS4SubDomainResponse: Int",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks5subdomainmethod",
                    "title": "var kCFStreamErrorSOCKS5SubDomainMethod: Int",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks5subdomainresponse",
                    "title": "var kCFStreamErrorSOCKS5SubDomainResponse: Int",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks5subdomainuserpass",
                    "title": "var kCFStreamErrorSOCKS5SubDomainUserPass: Int",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsockssubdomainnone",
                    "title": "var kCFStreamErrorSOCKSSubDomainNone: Int",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsockssubdomainversioncode",
                    "title": "var kCFStreamErrorSOCKSSubDomainVersionCode: Int",
                    "type": "var"
                  }
                ],
                "path": "/documentation/cfnetwork/1518287-anonymous",
                "title": "Anonymous",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Constants",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cfnetwork/ksocks5noacceptablemethod",
                    "title": "var kSOCKS5NoAcceptableMethod: Int",
                    "type": "var"
                  }
                ],
                "path": "/documentation/cfnetwork/1518276-anonymous",
                "title": "Anonymous",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Constants",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks4idconflict",
                    "title": "var kCFStreamErrorSOCKS4IdConflict: Int",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks4identdfailed",
                    "title": "var kCFStreamErrorSOCKS4IdentdFailed: Int",
                    "type": "var"
                  },
                  {
                    "path": "/documentation/cfnetwork/kcfstreamerrorsocks4requestfailed",
                    "title": "var kCFStreamErrorSOCKS4RequestFailed: Int",
                    "type": "var"
                  }
                ],
                "path": "/documentation/cfnetwork/1518284-anonymous",
                "title": "Anonymous",
                "type": "collection"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetwork-enumerations",
            "title": "CFNetwork Enumerations",
            "type": "collection"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/cfnetwork/kcfhttpversion3_0",
                "title": "let kCFHTTPVersion3_0: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamnetworkservicetypeavstreaming",
                "title": "let kCFStreamNetworkServiceTypeAVStreaming: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamnetworkservicetyperesponsiveav",
                "title": "let kCFStreamNetworkServiceTypeResponsiveAV: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreamnetworkservicetyperesponsivedata",
                "title": "let kCFStreamNetworkServiceTypeResponsiveData: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreampropertyallowconstrainednetworkaccess",
                "title": "let kCFStreamPropertyAllowConstrainedNetworkAccess: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreampropertyallowexpensivenetworkaccess",
                "title": "let kCFStreamPropertyAllowExpensiveNetworkAccess: CFString",
                "type": "var"
              },
              {
                "path": "/documentation/cfnetwork/kcfstreampropertyconnectionisexpensive",
                "title": "let kCFStreamPropertyConnectionIsExpensive: CFString",
                "type": "var"
              }
            ],
            "path": "/documentation/cfnetwork/cfnetwork-constants",
            "title": "CFNetwork Constants",
            "type": "collection"
          }
        ],
        "path": "/documentation/cfnetwork",
        "title": "CFNetwork",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
