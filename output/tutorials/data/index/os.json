{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/os/reading-unix-manual-pages",
            "title": "Reading UNIX Manual Pages",
            "type": "article"
          },
          {
            "title": "Logs",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/os/generating-log-messages-from-your-code",
                "title": "Generating Log Messages from Your Code",
                "type": "article"
              },
              {
                "path": "/documentation/os/viewing-log-messages",
                "title": "Viewing Log Messages",
                "type": "article"
              },
              {
                "path": "/documentation/os/customizing-logging-behavior-while-debugging",
                "title": "Customizing Logging Behavior While Debugging",
                "type": "article"
              },
              {
                "title": "Log Messages",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Privacy Options",
                    "type": "groupMarker"
                  },
                  {
                    "title": "Value Formatters",
                    "type": "groupMarker"
                  },
                  {
                    "title": "Value Interpolation",
                    "type": "groupMarker"
                  },
                  {
                    "title": "String Alignment",
                    "type": "groupMarker"
                  }
                ],
                "path": "/documentation/os/message-argument-formatters",
                "title": "Message Argument Formatters",
                "type": "collection"
              },
              {
                "title": "Measure Events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/os/recording-performance-data",
                "title": "Recording Performance Data",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Measure Events",
                    "type": "groupMarker"
                  }
                ],
                "path": "/documentation/os/legacy-signpost-symbols",
                "title": "Legacy Signpost Symbols",
                "type": "collection"
              }
            ],
            "path": "/documentation/os/logging",
            "title": "Logging",
            "type": "collection"
          },
          {
            "title": "Task Management",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Swift Wrappers",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/os/synchronization",
            "title": "Synchronization",
            "type": "collection"
          },
          {
            "title": "Deprecated",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Deprecated Functions",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated Macros",
                "type": "groupMarker"
              },
              {
                "title": "Deprecated Type Aliases",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/os/deprecated-symbols",
            "title": "Deprecated Symbols",
            "type": "collection"
          },
          {
            "title": "Reference",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/os/os-constants",
            "title": "os Constants",
            "type": "collection"
          }
        ],
        "path": "/documentation/os",
        "title": "os",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/os/reading-unix-manual-pages",
            "title": "Reading UNIX Manual Pages",
            "type": "article"
          },
          {
            "title": "Logs",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/os/generating-log-messages-from-your-code",
                "title": "Generating Log Messages from Your Code",
                "type": "article"
              },
              {
                "path": "/documentation/os/viewing-log-messages",
                "title": "Viewing Log Messages",
                "type": "article"
              },
              {
                "path": "/documentation/os/customizing-logging-behavior-while-debugging",
                "title": "Customizing Logging Behavior While Debugging",
                "type": "article"
              },
              {
                "title": "Log Messages",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Privacy Options",
                    "type": "groupMarker"
                  },
                  {
                    "title": "Value Formatters",
                    "type": "groupMarker"
                  },
                  {
                    "title": "Value Interpolation",
                    "type": "groupMarker"
                  },
                  {
                    "title": "String Alignment",
                    "type": "groupMarker"
                  }
                ],
                "path": "/documentation/os/message-argument-formatters",
                "title": "Message Argument Formatters",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/os_log_type_t/os_log_type_debug",
                    "title": "OS_LOG_TYPE_DEBUG",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/os/os_log_type_t/os_log_type_default",
                    "title": "OS_LOG_TYPE_DEFAULT",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/os/os_log_type_t/os_log_type_error",
                    "title": "OS_LOG_TYPE_ERROR",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/os/os_log_type_t/os_log_type_fault",
                    "title": "OS_LOG_TYPE_FAULT",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/os/os_log_type_t/os_log_type_info",
                    "title": "OS_LOG_TYPE_INFO",
                    "type": "case"
                  }
                ],
                "path": "/documentation/os/oslogtype",
                "title": "os_log_type_t",
                "type": "enum"
              },
              {
                "title": "Measure Events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/os/recording-performance-data",
                "title": "Recording Performance Data",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Measure Events",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/os_signpost_type_t/os_signpost_event",
                        "title": "OS_SIGNPOST_EVENT",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/os_signpost_type_t/os_signpost_interval_begin",
                        "title": "OS_SIGNPOST_INTERVAL_BEGIN",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/os_signpost_type_t/os_signpost_interval_end",
                        "title": "OS_SIGNPOST_INTERVAL_END",
                        "type": "case"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/os/ossignposttype",
                    "title": "os_signpost_type_t",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a Signpost Identifier",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/os_signpost_id_generate",
                        "title": "os_signpost_id_generate",
                        "type": "func"
                      },
                      {
                        "path": "/documentation/os/os_signpost_id_make_with_pointer",
                        "title": "os_signpost_id_make_with_pointer",
                        "type": "func"
                      },
                      {
                        "title": "Using Built-in Signpost Identifiers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/os_signpost_id_exclusive",
                        "title": "OS_SIGNPOST_ID_EXCLUSIVE",
                        "type": "macro"
                      },
                      {
                        "path": "/documentation/os/os_signpost_id_invalid",
                        "title": "OS_SIGNPOST_ID_INVALID",
                        "type": "macro"
                      },
                      {
                        "path": "/documentation/os/os_signpost_id_null",
                        "title": "OS_SIGNPOST_ID_NULL",
                        "type": "macro"
                      },
                      {
                        "title": "Supporting Types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/os_signpost_type_mask",
                        "title": "OS_SIGNPOST_TYPE_MASK",
                        "type": "macro"
                      }
                    ],
                    "path": "/documentation/os/os_signpost_id_t",
                    "title": "os_signpost_id_t",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/os/legacy-signpost-symbols",
                "title": "Legacy Signpost Symbols",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/os_signpost_type_t/os_signpost_event",
                    "title": "OS_SIGNPOST_EVENT",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/os/os_signpost_type_t/os_signpost_interval_begin",
                    "title": "OS_SIGNPOST_INTERVAL_BEGIN",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/os/os_signpost_type_t/os_signpost_interval_end",
                    "title": "OS_SIGNPOST_INTERVAL_END",
                    "type": "case"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/os/ossignposttype",
                "title": "os_signpost_type_t",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Creating a Signpost Identifier",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/os_signpost_id_generate",
                    "title": "os_signpost_id_generate",
                    "type": "func"
                  },
                  {
                    "path": "/documentation/os/os_signpost_id_make_with_pointer",
                    "title": "os_signpost_id_make_with_pointer",
                    "type": "func"
                  },
                  {
                    "title": "Using Built-in Signpost Identifiers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/os_signpost_id_exclusive",
                    "title": "OS_SIGNPOST_ID_EXCLUSIVE",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/os/os_signpost_id_invalid",
                    "title": "OS_SIGNPOST_ID_INVALID",
                    "type": "macro"
                  },
                  {
                    "path": "/documentation/os/os_signpost_id_null",
                    "title": "OS_SIGNPOST_ID_NULL",
                    "type": "macro"
                  },
                  {
                    "title": "Supporting Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/os_signpost_type_mask",
                    "title": "OS_SIGNPOST_TYPE_MASK",
                    "type": "macro"
                  }
                ],
                "path": "/documentation/os/os_signpost_id_t",
                "title": "os_signpost_id_t",
                "type": "typealias"
              }
            ],
            "path": "/documentation/os/logging",
            "title": "Logging",
            "type": "collection"
          },
          {
            "title": "Task Management",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Swift Wrappers",
                "type": "groupMarker"
              }
            ],
            "path": "/documentation/os/synchronization",
            "title": "Synchronization",
            "type": "collection"
          },
          {
            "title": "Deprecated",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Deprecated Functions",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_debug_enabled()",
                "title": "os_trace_debug_enabled",
                "type": "func"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_info_enabled()",
                "title": "os_trace_info_enabled",
                "type": "func"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_type_enabled(_:)",
                "title": "os_trace_type_enabled",
                "type": "func"
              },
              {
                "title": "Deprecated Macros",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_type_debug",
                "title": "OS_TRACE_TYPE_DEBUG",
                "type": "macro"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_type_info",
                "title": "OS_TRACE_TYPE_INFO",
                "type": "macro"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_type_release",
                "title": "OS_TRACE_TYPE_RELEASE",
                "type": "macro"
              },
              {
                "title": "Deprecated Type Aliases",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_payload_object_t",
                "title": "os_trace_payload_object_t",
                "type": "typealias"
              }
            ],
            "path": "/documentation/os/deprecated-symbols",
            "title": "Deprecated Symbols",
            "type": "collection"
          },
          {
            "title": "Reference",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/os/os_atomic_uses_cxx",
                "title": "OS_ATOMIC_USES_CXX",
                "type": "macro"
              },
              {
                "path": "/documentation/os/os_log_target_has_10_12_features",
                "title": "OS_LOG_TARGET_HAS_10_12_FEATURES",
                "type": "macro"
              },
              {
                "path": "/documentation/os/os_log_target_has_10_13_features",
                "title": "OS_LOG_TARGET_HAS_10_13_FEATURES",
                "type": "macro"
              },
              {
                "path": "/documentation/os/os_log_target_has_10_14_features",
                "title": "OS_LOG_TARGET_HAS_10_14_FEATURES",
                "type": "macro"
              },
              {
                "path": "/documentation/os/os_log_target_has_10_15_features",
                "title": "OS_LOG_TARGET_HAS_10_15_FEATURES",
                "type": "macro"
              }
            ],
            "path": "/documentation/os/os-constants",
            "title": "os Constants",
            "type": "collection"
          }
        ],
        "path": "/documentation/os",
        "title": "os",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/os/reading-unix-manual-pages",
            "title": "Reading UNIX Manual Pages",
            "type": "article"
          },
          {
            "title": "Logs",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Essentials",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/os/generating-log-messages-from-your-code",
                "title": "Generating Log Messages from Your Code",
                "type": "article"
              },
              {
                "path": "/documentation/os/viewing-log-messages",
                "title": "Viewing Log Messages",
                "type": "article"
              },
              {
                "path": "/documentation/os/customizing-logging-behavior-while-debugging",
                "title": "Customizing Logging Behavior While Debugging",
                "type": "article"
              },
              {
                "title": "Log Messages",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a Logger",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/logger/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/os/logger/init(subsystem:category:)",
                    "title": "init(subsystem: String, category: String)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/os/logger/init(_:)",
                    "title": "init(OSLog)",
                    "type": "init"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a Log",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslog/init(subsystem:category:)-17gyy",
                        "title": "convenience init(subsystem: String, category: String)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/os/oslog/init(subsystem:category:)-72ghw",
                        "title": "convenience init(subsystem: String, category: OSLog.Category)",
                        "type": "init"
                      },
                      {
                        "children": [
                          {
                            "title": "Logging Signposts",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/os/oslog/category/pointsofinterest",
                            "title": "static let pointsOfInterest: OSLog.Category",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/os/oslog/category/dynamicstacktracing",
                            "title": "static let dynamicStackTracing: OSLog.Category",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/os/oslog/category/dynamictracing",
                            "title": "static let dynamicTracing: OSLog.Category",
                            "type": "property"
                          },
                          {
                            "title": "Inspecting Log Categories",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/os/oslog/category/rawvalue",
                            "title": "let rawValue: String",
                            "type": "property"
                          }
                        ],
                        "path": "/documentation/os/oslog/category",
                        "title": "OSLog.Category",
                        "type": "struct"
                      },
                      {
                        "title": "Getting the Shared Logs",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslog/default",
                        "title": "static let `default`: OSLog",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslog/disabled",
                        "title": "static let disabled: OSLog",
                        "type": "property"
                      },
                      {
                        "title": "Getting Log Configuration",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslog/isenabled(type:)",
                        "title": "func isEnabled(type: OSLogType) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslog/signpostsenabled",
                        "title": "var signpostsEnabled: Bool",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/os/oslog",
                    "title": "OSLog",
                    "type": "class"
                  },
                  {
                    "title": "Logging a Message",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/logger/log(_:)",
                    "title": "func log(OSLogMessage)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/logger/log(level:_:)",
                    "title": "func log(level: OSLogType, OSLogMessage)",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting Log Types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogtype/debug",
                        "title": "static let debug: OSLogType",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogtype/info",
                        "title": "static let info: OSLogType",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogtype/default",
                        "title": "static let `default`: OSLogType",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogtype/error",
                        "title": "static let error: OSLogType",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogtype/fault",
                        "title": "static let fault: OSLogType",
                        "type": "property"
                      },
                      {
                        "title": "Creating a Log Type",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogtype/init(_:)",
                        "title": "init(UInt8)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/os/oslogtype/init(rawvalue:)",
                        "title": "init(rawValue: UInt8)",
                        "type": "init"
                      },
                      {
                        "title": "Getting the Raw Value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogtype/rawvalue",
                        "title": "var rawValue: UInt8",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/os/oslogtype",
                    "title": "OSLogType",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the Message Details",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogmessage/buffersize",
                        "title": "var bufferSize: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogmessage/interpolation",
                        "title": "let interpolation: OSLogInterpolation",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/maxoslogargumentcount",
                        "title": "var maxOSLogArgumentCount: UInt8",
                        "type": "var"
                      }
                    ],
                    "path": "/documentation/os/oslogmessage",
                    "title": "OSLogMessage",
                    "type": "struct"
                  },
                  {
                    "title": "Logging a Scoped Message",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/logger/notice(_:)",
                    "title": "func notice(OSLogMessage)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/logger/debug(_:)",
                    "title": "func debug(OSLogMessage)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/logger/trace(_:)",
                    "title": "func trace(OSLogMessage)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/logger/info(_:)",
                    "title": "func info(OSLogMessage)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/logger/error(_:)",
                    "title": "func error(OSLogMessage)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/logger/warning(_:)",
                    "title": "func warning(OSLogMessage)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/logger/fault(_:)",
                    "title": "func fault(OSLogMessage)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/logger/critical(_:)",
                    "title": "func critical(OSLogMessage)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/os/logger",
                "title": "Logger",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Privacy Options",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the Privacy Options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogprivacy/auto",
                        "title": "static var auto: OSLogPrivacy",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogprivacy/private",
                        "title": "static var `private`: OSLogPrivacy",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogprivacy/public",
                        "title": "static var `public`: OSLogPrivacy",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogprivacy/sensitive",
                        "title": "static var sensitive: OSLogPrivacy",
                        "type": "property"
                      },
                      {
                        "title": "Creating a Custom Privacy Mask",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogprivacy/auto(mask:)",
                        "title": "static func auto(mask: OSLogPrivacy.Mask) -> OSLogPrivacy",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogprivacy/private(mask:)",
                        "title": "static func `private`(mask: OSLogPrivacy.Mask) -> OSLogPrivacy",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogprivacy/sensitive(mask:)",
                        "title": "static func sensitive(mask: OSLogPrivacy.Mask) -> OSLogPrivacy",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Privacy Mask Options",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/os/oslogprivacy/mask/hash",
                            "title": "case hash",
                            "type": "case"
                          },
                          {
                            "path": "/documentation/os/oslogprivacy/mask/none",
                            "title": "case none",
                            "type": "case"
                          }
                        ],
                        "path": "/documentation/os/oslogprivacy/mask",
                        "title": "OSLogPrivacy.Mask",
                        "type": "enum"
                      }
                    ],
                    "path": "/documentation/os/oslogprivacy",
                    "title": "OSLogPrivacy",
                    "type": "struct"
                  },
                  {
                    "title": "Value Formatters",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the Boolean Format Options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogboolformat/truth",
                        "title": "case truth",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogboolformat/answer",
                        "title": "case answer",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/os/oslogboolformat",
                    "title": "OSLogBoolFormat",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the Standard Formats",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogintegerformatting/decimal",
                        "title": "static var decimal: OSLogIntegerFormatting",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogintegerformatting/hex",
                        "title": "static var hex: OSLogIntegerFormatting",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogintegerformatting/octal",
                        "title": "static var octal: OSLogIntegerFormatting",
                        "type": "property"
                      },
                      {
                        "title": "Creating a Custom Integer Format",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogintegerformatting/decimal(explicitpositivesign:)",
                        "title": "static func decimal(explicitPositiveSign: Bool) -> OSLogIntegerFormatting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogintegerformatting/decimal(explicitpositivesign:mindigits:)",
                        "title": "static func decimal(explicitPositiveSign: Bool, minDigits: @autoclosure () -> Int) -> OSLogIntegerFormatting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogintegerformatting/hex(explicitpositivesign:includeprefix:uppercase:)",
                        "title": "static func hex(explicitPositiveSign: Bool, includePrefix: Bool, uppercase: Bool) -> OSLogIntegerFormatting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogintegerformatting/hex(explicitpositivesign:includeprefix:uppercase:mindigits:)",
                        "title": "static func hex(explicitPositiveSign: Bool, includePrefix: Bool, uppercase: Bool, minDigits: @autoclosure () -> Int) -> OSLogIntegerFormatting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogintegerformatting/octal(explicitpositivesign:includeprefix:uppercase:)",
                        "title": "static func octal(explicitPositiveSign: Bool, includePrefix: Bool, uppercase: Bool) -> OSLogIntegerFormatting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogintegerformatting/octal(explicitpositivesign:includeprefix:uppercase:mindigits:)",
                        "title": "static func octal(explicitPositiveSign: Bool, includePrefix: Bool, uppercase: Bool, minDigits: @autoclosure () -> Int) -> OSLogIntegerFormatting",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/os/oslogintegerformatting",
                    "title": "OSLogIntegerFormatting",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the Formats",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogint32extendedformat/ipv4address",
                        "title": "case ipv4Address",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogint32extendedformat/secondssince1970",
                        "title": "case secondsSince1970",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogint32extendedformat/darwinerrno",
                        "title": "case darwinErrno",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogint32extendedformat/darwinmode",
                        "title": "case darwinMode",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogint32extendedformat/darwinsignal",
                        "title": "case darwinSignal",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogint32extendedformat/bitrate",
                        "title": "case bitrate",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogint32extendedformat/bitrateiec",
                        "title": "case bitrateIEC",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogint32extendedformat/bytecount",
                        "title": "case byteCount",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogint32extendedformat/bytecountiec",
                        "title": "case byteCountIEC",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogint32extendedformat/truth",
                        "title": "case truth",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogint32extendedformat/answer",
                        "title": "case answer",
                        "type": "case"
                      },
                      {
                        "title": "Enumeration Cases",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogint32extendedformat/macherrno",
                        "title": "case machErrno",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/os/oslogint32extendedformat",
                    "title": "OSLogInt32ExtendedFormat",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the Standard Formats",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogfloatformatting/fixed",
                        "title": "static var fixed: OSLogFloatFormatting",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogfloatformatting/hex",
                        "title": "static var hex: OSLogFloatFormatting",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogfloatformatting/exponential",
                        "title": "static var exponential: OSLogFloatFormatting",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/oslogfloatformatting/hybrid",
                        "title": "static var hybrid: OSLogFloatFormatting",
                        "type": "property"
                      },
                      {
                        "title": "Creating a Custom Formatting Object",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogfloatformatting/exponential(explicitpositivesign:uppercase:)",
                        "title": "static func exponential(explicitPositiveSign: Bool, uppercase: Bool) -> OSLogFloatFormatting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogfloatformatting/exponential(precision:explicitpositivesign:uppercase:)",
                        "title": "static func exponential(precision: @autoclosure () -> Int, explicitPositiveSign: Bool, uppercase: Bool) -> OSLogFloatFormatting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogfloatformatting/fixed(explicitpositivesign:uppercase:)",
                        "title": "static func fixed(explicitPositiveSign: Bool, uppercase: Bool) -> OSLogFloatFormatting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogfloatformatting/fixed(precision:explicitpositivesign:uppercase:)",
                        "title": "static func fixed(precision: @autoclosure () -> Int, explicitPositiveSign: Bool, uppercase: Bool) -> OSLogFloatFormatting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogfloatformatting/hex(explicitpositivesign:uppercase:)",
                        "title": "static func hex(explicitPositiveSign: Bool, uppercase: Bool) -> OSLogFloatFormatting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogfloatformatting/hybrid(explicitpositivesign:uppercase:)",
                        "title": "static func hybrid(explicitPositiveSign: Bool, uppercase: Bool) -> OSLogFloatFormatting",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogfloatformatting/hybrid(precision:explicitpositivesign:uppercase:)",
                        "title": "static func hybrid(precision: @autoclosure () -> Int, explicitPositiveSign: Bool, uppercase: Bool) -> OSLogFloatFormatting",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/os/oslogfloatformatting",
                    "title": "OSLogFloatFormatting",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the Format Options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogpointerformat/none",
                        "title": "case none",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogpointerformat/ipv6address",
                        "title": "case ipv6Address",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogpointerformat/sockaddr",
                        "title": "case sockaddr",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogpointerformat/timespec",
                        "title": "case timespec",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogpointerformat/timeval",
                        "title": "case timeval",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogpointerformat/uuid",
                        "title": "case uuid",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/os/oslogpointerformat",
                    "title": "OSLogPointerFormat",
                    "type": "enum"
                  },
                  {
                    "title": "Value Interpolation",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Appending Strings",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:align:privacy:)-6tazr",
                        "title": "func appendInterpolation(@autoclosure () -> String, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:align:privacy:attributes:)-7g68v",
                        "title": "func appendInterpolation(@autoclosure () -> String, align: OSLogStringAlignment, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "title": "Appending Signed Integers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:)-8kli1",
                        "title": "func appendInterpolation(@autoclosure () -> Int, format: OSLogIntegerFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:)-5ihzf",
                        "title": "func appendInterpolation(@autoclosure () -> Int8, format: OSLogIntegerFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:)-190d0",
                        "title": "func appendInterpolation(@autoclosure () -> Int16, format: OSLogIntegerFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:privacy:)-3ji02",
                        "title": "func appendInterpolation(@autoclosure () -> Int32, format: OSLogInt32ExtendedFormat, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:privacy:attributes:)-4i2ir",
                        "title": "func appendInterpolation(@autoclosure () -> Int32, format: OSLogInt32ExtendedFormat, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:)-2sb1i",
                        "title": "func appendInterpolation(@autoclosure () -> Int32, format: OSLogIntegerFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:)-802m9",
                        "title": "func appendInterpolation(@autoclosure () -> Int64, format: OSLogIntegerFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "title": "Appending Unsigned Integers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:)-20jin",
                        "title": "func appendInterpolation(@autoclosure () -> UInt, format: OSLogIntegerFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:)-4qvu9",
                        "title": "func appendInterpolation(@autoclosure () -> UInt8, format: OSLogIntegerFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:)-7k91g",
                        "title": "func appendInterpolation(@autoclosure () -> UInt16, format: OSLogIntegerFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:)-2i3qh",
                        "title": "func appendInterpolation(@autoclosure () -> UInt32, format: OSLogIntegerFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:)-81jbm",
                        "title": "func appendInterpolation(@autoclosure () -> UInt64, format: OSLogIntegerFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "title": "Appending Doubles",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:)-6mu00",
                        "title": "func appendInterpolation(@autoclosure () -> Double, format: OSLogFloatFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:attributes:)-8bi90",
                        "title": "func appendInterpolation(@autoclosure () -> Double, format: OSLogFloatFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "title": "Appending Floats",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:)-7z1jd",
                        "title": "func appendInterpolation(@autoclosure () -> Float, format: OSLogFloatFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:attributes:)-78sek",
                        "title": "func appendInterpolation(@autoclosure () -> Float, format: OSLogFloatFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "title": "Appending Boolean Values",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:privacy:)-686xc",
                        "title": "func appendInterpolation(@autoclosure () -> Bool, format: OSLogBoolFormat, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "title": "Appending Generic Types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:align:privacy:)-84m60",
                        "title": "func appendInterpolation<T>(@autoclosure () -> T, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:align:privacy:attributes:)-xyum",
                        "title": "func appendInterpolation<T>(@autoclosure () -> T, align: OSLogStringAlignment, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:align:privacy:attributes:)-8107a",
                        "title": "func appendInterpolation<T>(@autoclosure () -> T, format: OSLogIntegerFormatting, align: OSLogStringAlignment, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:align:privacy:)-8hwmt",
                        "title": "func appendInterpolation(@autoclosure () -> any Any.Type, align: OSLogStringAlignment, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:align:privacy:attributes:)-9hehv",
                        "title": "func appendInterpolation(@autoclosure () -> any Any.Type, align: OSLogStringAlignment, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "title": "Appending Pointer Data",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:bytes:format:privacy:)",
                        "title": "func appendInterpolation(@autoclosure () -> UnsafeRawPointer, bytes: @autoclosure () -> Int, format: OSLogPointerFormat, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:bytes:format:privacy:attributes:)",
                        "title": "func appendInterpolation(@autoclosure () -> UnsafeRawPointer, bytes: @autoclosure () -> Int, format: OSLogPointerFormat, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:privacy:)-5qaau",
                        "title": "func appendInterpolation(@autoclosure () -> UnsafeRawBufferPointer, format: OSLogPointerFormat, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:privacy:attributes:)-93lbs",
                        "title": "func appendInterpolation(@autoclosure () -> UnsafeRawBufferPointer, format: OSLogPointerFormat, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "title": "Appending Objects",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:privacy:)",
                        "title": "func appendInterpolation(@autoclosure () -> NSObject, privacy: OSLogPrivacy)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:privacy:attributes:)-3czd2",
                        "title": "func appendInterpolation(@autoclosure () -> NSObject, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:format:privacy:attributes:)-6le5w",
                        "title": "func appendInterpolation(@autoclosure () -> Int, format: OSLogIntExtendedFormat, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:privacy:attributes:)-4o74h",
                        "title": "func appendInterpolation(@autoclosure () -> any Error, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:privacy:attributes:)-6vtcc",
                        "title": "func appendInterpolation(@autoclosure () -> (any Error)?, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/osloginterpolation/appendinterpolation(_:privacy:attributes:)-9eafm",
                        "title": "func appendInterpolation(@autoclosure () -> NSObject?, privacy: OSLogPrivacy, attributes: String)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/os/osloginterpolation",
                    "title": "OSLogInterpolation",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Expansion Options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogintextendedformat/bitrate",
                        "title": "case bitrate",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogintextendedformat/bitrateiec",
                        "title": "case bitrateIEC",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogintextendedformat/bytecount",
                        "title": "case byteCount",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/oslogintextendedformat/bytecountiec",
                        "title": "case byteCountIEC",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/os/oslogintextendedformat",
                    "title": "OSLogIntExtendedFormat",
                    "type": "enum"
                  },
                  {
                    "title": "String Alignment",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the Standard Alignment",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogstringalignment/none",
                        "title": "static var none: OSLogStringAlignment",
                        "type": "property"
                      },
                      {
                        "title": "Getting a Custom String Alignment",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/oslogstringalignment/left(columns:)",
                        "title": "static func left(columns: @autoclosure () -> Int) -> OSLogStringAlignment",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/os/oslogstringalignment/right(columns:)",
                        "title": "static func right(columns: @autoclosure () -> Int) -> OSLogStringAlignment",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/os/oslogstringalignment",
                    "title": "OSLogStringAlignment",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/os/message-argument-formatters",
                "title": "Message Argument Formatters",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Getting Log Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/oslogtype/debug",
                    "title": "static let debug: OSLogType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/os/oslogtype/info",
                    "title": "static let info: OSLogType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/os/oslogtype/default",
                    "title": "static let `default`: OSLogType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/os/oslogtype/error",
                    "title": "static let error: OSLogType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/os/oslogtype/fault",
                    "title": "static let fault: OSLogType",
                    "type": "property"
                  },
                  {
                    "title": "Creating a Log Type",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/oslogtype/init(_:)",
                    "title": "init(UInt8)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/os/oslogtype/init(rawvalue:)",
                    "title": "init(rawValue: UInt8)",
                    "type": "init"
                  },
                  {
                    "title": "Getting the Raw Value",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/oslogtype/rawvalue",
                    "title": "var rawValue: UInt8",
                    "type": "property"
                  }
                ],
                "path": "/documentation/os/oslogtype",
                "title": "OSLogType",
                "type": "struct"
              },
              {
                "title": "Measure Events",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/os/recording-performance-data",
                "title": "Recording Performance Data",
                "type": "article"
              },
              {
                "children": [
                  {
                    "title": "Creating a Signposter",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/ossignposter/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/os/ossignposter/init(subsystem:category:)-94xpb",
                    "title": "init(subsystem: String, category: String)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/os/ossignposter/init(subsystem:category:)-4vdri",
                    "title": "init(subsystem: String, category: OSLog.Category)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/os/ossignposter/init(logger:)",
                    "title": "init(logger: Logger)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/os/ossignposter/init(loghandle:)",
                    "title": "init(logHandle: OSLog)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/os/ossignposter/disabled",
                    "title": "static var disabled: OSSignposter",
                    "type": "property"
                  },
                  {
                    "title": "Getting State",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/ossignposter/isenabled",
                    "title": "var isEnabled: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Generating Signpost IDs",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/ossignposter/makesignpostid()",
                    "title": "func makeSignpostID() -> OSSignpostID",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/ossignposter/makesignpostid(from:)",
                    "title": "func makeSignpostID(from: AnyObject) -> OSSignpostID",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting Signpost Identifiers",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/ossignpostid/exclusive",
                        "title": "static let exclusive: OSSignpostID",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/ossignpostid/invalid",
                        "title": "static let invalid: OSSignpostID",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/ossignpostid/null",
                        "title": "static let null: OSSignpostID",
                        "type": "property"
                      },
                      {
                        "title": "Creating a Signpost Identifier",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/ossignpostid/init(_:)",
                        "title": "init(UInt64)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/os/ossignpostid/init(log:)",
                        "title": "init(log: OSLog)",
                        "type": "init"
                      },
                      {
                        "deprecated": true,
                        "path": "/documentation/os/ossignpostid/init(log:object:)",
                        "title": "init(log: OSLog, object: AnyObject)",
                        "type": "init"
                      },
                      {
                        "title": "Getting an Identifier’s Raw Value",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/ossignpostid/rawvalue",
                        "title": "let rawValue: os_signpost_id_t",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/os/ossignpostid",
                    "title": "OSSignpostID",
                    "type": "struct"
                  },
                  {
                    "title": "Starting a Signposted Interval",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/ossignposter/begininterval(_:id:)",
                    "title": "func beginInterval(StaticString, id: OSSignpostID) -> OSSignpostIntervalState",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/ossignposter/begininterval(_:id:_:)",
                    "title": "func beginInterval(StaticString, id: OSSignpostID, SignpostMetadata) -> OSSignpostIntervalState",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/ossignposter/beginanimationinterval(_:id:)",
                    "title": "func beginAnimationInterval(StaticString, id: OSSignpostID) -> OSSignpostIntervalState",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/ossignposter/beginanimationinterval(_:id:_:)",
                    "title": "func beginAnimationInterval(StaticString, id: OSSignpostID, SignpostMetadata) -> OSSignpostIntervalState",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating Interval State",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/ossignpostintervalstate/init(from:)",
                        "title": "init(from: any Decoder) throws",
                        "type": "init"
                      },
                      {
                        "title": "Recreating Interval State",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/ossignpostintervalstate/beginstate(id:)",
                        "title": "static func beginState(id: OSSignpostID) -> OSSignpostIntervalState",
                        "type": "method"
                      },
                      {
                        "title": "Encoding Interval State",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/ossignpostintervalstate/encode(to:)",
                        "title": "func encode(to: any Encoder) throws",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/os/ossignpostintervalstate",
                    "title": "OSSignpostIntervalState",
                    "type": "class"
                  },
                  {
                    "path": "/documentation/os/signpostmetadata",
                    "title": "SignpostMetadata",
                    "type": "typealias"
                  },
                  {
                    "title": "Stopping a Signposted Interval",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/ossignposter/endinterval(_:_:)",
                    "title": "func endInterval(StaticString, OSSignpostIntervalState)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/ossignposter/endinterval(_:_:_:)",
                    "title": "func endInterval(StaticString, OSSignpostIntervalState, SignpostMetadata)",
                    "type": "method"
                  },
                  {
                    "title": "Measuring a Closure",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/ossignposter/withintervalsignpost(_:id:around:)",
                    "title": "func withIntervalSignpost<T>(StaticString, id: OSSignpostID, around: () throws -> T) rethrows -> T",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/ossignposter/withintervalsignpost(_:id:_:around:)",
                    "title": "func withIntervalSignpost<T>(StaticString, id: OSSignpostID, SignpostMetadata, around: () throws -> T) rethrows -> T",
                    "type": "method"
                  },
                  {
                    "title": "Emitting Individual Signposts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/ossignposter/emitevent(_:id:)",
                    "title": "func emitEvent(StaticString, id: OSSignpostID)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/ossignposter/emitevent(_:id:_:)",
                    "title": "func emitEvent(StaticString, id: OSSignpostID, SignpostMetadata)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/os/ossignposter",
                "title": "OSSignposter",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Measure Events",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/os/os_signpost(_:dso:log:name:signpostid:)-2oz8u",
                    "title": "func os_signpost(OSSignpostType, dso: UnsafeRawPointer, log: OSLog, name: StaticString, signpostID: OSSignpostID)",
                    "type": "func"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/os/os_signpost(_:dso:log:name:signpostid:_:_:)-2om9b",
                    "title": "func os_signpost(OSSignpostType, dso: UnsafeRawPointer, log: OSLog, name: StaticString, signpostID: OSSignpostID, StaticString, any CVarArg...)",
                    "type": "func"
                  },
                  {
                    "children": [
                      {
                        "title": "Specifying Signpost Types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/ossignposttype/begin",
                        "title": "static let begin: OSSignpostType",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/ossignposttype/end",
                        "title": "static let end: OSSignpostType",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/os/ossignposttype/event",
                        "title": "static let event: OSSignpostType",
                        "type": "property"
                      },
                      {
                        "title": "Creating Signpost Types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/ossignposttype/init(rawvalue:)",
                        "title": "init(rawValue: UInt8)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/os/ossignposttype/init(_:)",
                        "title": "init(UInt8)",
                        "type": "init"
                      },
                      {
                        "title": "Inspecting Signpost Types",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/ossignposttype/rawvalue",
                        "title": "var rawValue: UInt8",
                        "type": "property"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/os/ossignposttype",
                    "title": "OSSignpostType",
                    "type": "struct"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/os/os_signpost(_:dso:log:name:signpostid:)-12m3v",
                    "title": "func os_signpost(OSSignpostAnimationBegin, dso: UnsafeRawPointer, log: OSLog, name: StaticString, signpostID: OSSignpostID)",
                    "type": "func"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/os/os_signpost(_:dso:log:name:signpostid:_:_:)-nez5",
                    "title": "func os_signpost(OSSignpostAnimationBegin, dso: UnsafeRawPointer, log: OSLog, name: StaticString, signpostID: OSSignpostID, AnimationFormatString.OSLogMessage, any CVarArg...)",
                    "type": "func"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting the Animation Options",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/ossignpostanimationbegin/animationbegin",
                        "title": "case animationBegin",
                        "type": "case"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/os/ossignpostanimationbegin",
                    "title": "OSSignpostAnimationBegin",
                    "type": "enum"
                  },
                  {
                    "children": [
                      {
                        "title": "Getting an Animation-Related Log Message",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Creating a Format String",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/os/animationformatstring/oslogmessage/init(stringliteral:)",
                            "title": "init(stringLiteral: String)",
                            "type": "init"
                          }
                        ],
                        "path": "/documentation/os/animationformatstring/oslogmessage",
                        "title": "AnimationFormatString.OSLogMessage",
                        "type": "struct"
                      }
                    ],
                    "deprecated": true,
                    "path": "/documentation/os/animationformatstring",
                    "title": "AnimationFormatString",
                    "type": "enum"
                  },
                  {
                    "path": "/documentation/os/os_signpost_id_t",
                    "title": "os_signpost_id_t",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/os/legacy-signpost-symbols",
                "title": "Legacy Signpost Symbols",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Specifying Signpost Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/ossignposttype/begin",
                    "title": "static let begin: OSSignpostType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/os/ossignposttype/end",
                    "title": "static let end: OSSignpostType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/os/ossignposttype/event",
                    "title": "static let event: OSSignpostType",
                    "type": "property"
                  },
                  {
                    "title": "Creating Signpost Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/ossignposttype/init(rawvalue:)",
                    "title": "init(rawValue: UInt8)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/os/ossignposttype/init(_:)",
                    "title": "init(UInt8)",
                    "type": "init"
                  },
                  {
                    "title": "Inspecting Signpost Types",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/ossignposttype/rawvalue",
                    "title": "var rawValue: UInt8",
                    "type": "property"
                  }
                ],
                "deprecated": true,
                "path": "/documentation/os/ossignposttype",
                "title": "OSSignpostType",
                "type": "struct"
              },
              {
                "path": "/documentation/os/os_signpost_id_t",
                "title": "os_signpost_id_t",
                "type": "typealias"
              }
            ],
            "path": "/documentation/os/logging",
            "title": "Logging",
            "type": "collection"
          },
          {
            "title": "Task Management",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Swift Wrappers",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Creating a lock object",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/init(initialstate:)",
                    "title": "init(initialState: State)",
                    "type": "init"
                  },
                  {
                    "title": "Using locks",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/lock()",
                    "title": "func lock()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/lockifavailable()",
                    "title": "func lockIfAvailable() -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/unlock()",
                    "title": "func unlock()",
                    "type": "method"
                  },
                  {
                    "title": "Determining lock ownership",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Specifying ownership",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/os/osallocatedunfairlock/ownership/owner",
                        "title": "case owner",
                        "type": "case"
                      },
                      {
                        "path": "/documentation/os/osallocatedunfairlock/ownership/notowner",
                        "title": "case notOwner",
                        "type": "case"
                      }
                    ],
                    "path": "/documentation/os/osallocatedunfairlock/ownership",
                    "title": "OSAllocatedUnfairLock.Ownership",
                    "type": "enum"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/precondition(_:)",
                    "title": "func precondition(OSAllocatedUnfairLock<State>.Ownership)",
                    "type": "method"
                  },
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/init(uncheckedstate:)",
                    "title": "init(uncheckedState: State)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/lock(flags:)",
                    "title": "func lock(flags: OSAllocatedUnfairLockFlags)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/withlock(_:)-1uy7m",
                    "title": "func withLock<R>((inout State) throws -> R) rethrows -> R",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/withlock(_:)-hple",
                    "title": "func withLock<R>(() throws -> R) rethrows -> R",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/withlock(flags:_:)-1ub4c",
                    "title": "func withLock<R>(flags: OSAllocatedUnfairLockFlags, (inout State) throws -> R) rethrows -> R",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/withlock(flags:_:)-u2xj",
                    "title": "func withLock<R>(flags: OSAllocatedUnfairLockFlags, () throws -> R) rethrows -> R",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/withlockifavailable(_:)-1rp3w",
                    "title": "func withLockIfAvailable<R>(() throws -> R) rethrows -> R?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/withlockifavailable(_:)-3kw0o",
                    "title": "func withLockIfAvailable<R>((inout State) throws -> R) rethrows -> R?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/withlockifavailableunchecked(_:)-15q0y",
                    "title": "func withLockIfAvailableUnchecked<R>((inout State) throws -> R) rethrows -> R?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/withlockifavailableunchecked(_:)-6gji7",
                    "title": "func withLockIfAvailableUnchecked<R>(() throws -> R) rethrows -> R?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/withlockunchecked(_:)-7qywq",
                    "title": "func withLockUnchecked<R>((inout State) throws -> R) rethrows -> R",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/withlockunchecked(_:)-9v03m",
                    "title": "func withLockUnchecked<R>(() throws -> R) rethrows -> R",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/withlockunchecked(flags:_:)-8cv64",
                    "title": "func withLockUnchecked<R>(flags: OSAllocatedUnfairLockFlags, (inout State) throws -> R) rethrows -> R",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlock/withlockunchecked(flags:_:)-9iq8s",
                    "title": "func withLockUnchecked<R>(flags: OSAllocatedUnfairLockFlags, () throws -> R) rethrows -> R",
                    "type": "method"
                  }
                ],
                "path": "/documentation/os/osallocatedunfairlock",
                "title": "OSAllocatedUnfairLock",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/os/osallocatedunfairlockflags/adaptivespin",
                    "title": "static let adaptiveSpin: OSAllocatedUnfairLockFlags",
                    "type": "property"
                  }
                ],
                "path": "/documentation/os/osallocatedunfairlockflags",
                "title": "OSAllocatedUnfairLockFlags",
                "type": "struct"
              }
            ],
            "path": "/documentation/os/synchronization",
            "title": "Synchronization",
            "type": "collection"
          },
          {
            "title": "Deprecated",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Deprecated Functions",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_debug_enabled()",
                "title": "func os_trace_debug_enabled() -> Bool",
                "type": "func"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_info_enabled()",
                "title": "func os_trace_info_enabled() -> Bool",
                "type": "func"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_type_enabled(_:)",
                "title": "func os_trace_type_enabled(UInt8) -> Bool",
                "type": "func"
              },
              {
                "title": "Deprecated Macros",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_type_debug",
                "title": "var OS_TRACE_TYPE_DEBUG: UInt32",
                "type": "var"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_type_info",
                "title": "var OS_TRACE_TYPE_INFO: UInt32",
                "type": "var"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_type_release",
                "title": "var OS_TRACE_TYPE_RELEASE: UInt32",
                "type": "var"
              },
              {
                "title": "Deprecated Type Aliases",
                "type": "groupMarker"
              },
              {
                "deprecated": true,
                "path": "/documentation/os/os_trace_payload_object_t",
                "title": "os_trace_payload_object_t",
                "type": "typealias"
              }
            ],
            "path": "/documentation/os/deprecated-symbols",
            "title": "Deprecated Symbols",
            "type": "collection"
          },
          {
            "title": "Reference",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Constants",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/os/os_atomic_uses_cxx",
                "title": "var OS_ATOMIC_USES_CXX: Int32",
                "type": "var"
              },
              {
                "path": "/documentation/os/os_log_target_has_10_12_features",
                "title": "var OS_LOG_TARGET_HAS_10_12_FEATURES: Int32",
                "type": "var"
              },
              {
                "path": "/documentation/os/os_log_target_has_10_13_features",
                "title": "var OS_LOG_TARGET_HAS_10_13_FEATURES: Int32",
                "type": "var"
              },
              {
                "path": "/documentation/os/os_log_target_has_10_14_features",
                "title": "var OS_LOG_TARGET_HAS_10_14_FEATURES: Int32",
                "type": "var"
              },
              {
                "path": "/documentation/os/os_log_target_has_10_15_features",
                "title": "var OS_LOG_TARGET_HAS_10_15_FEATURES: Int32",
                "type": "var"
              }
            ],
            "path": "/documentation/os/os-constants",
            "title": "os Constants",
            "type": "collection"
          }
        ],
        "path": "/documentation/os",
        "title": "os",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
