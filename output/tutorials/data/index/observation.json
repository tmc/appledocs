{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Observable conformance",
            "type": "groupMarker"
          },
          {
            "title": "Change tracking",
            "type": "groupMarker"
          },
          {
            "title": "Observation in SwiftUI",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/managing-model-data-in-your-app",
            "title": "Managing model data in your app",
            "type": "sampleCode"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro",
            "title": "Migrating from the Observable Object protocol to the Observable macro",
            "type": "sampleCode"
          },
          {
            "title": "Macros",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/observation",
        "title": "Observation",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Observable conformance",
            "type": "groupMarker"
          },
          {
            "title": "Change tracking",
            "type": "groupMarker"
          },
          {
            "title": "Observation in SwiftUI",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/managing-model-data-in-your-app",
            "title": "Managing model data in your app",
            "type": "sampleCode"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro",
            "title": "Migrating from the Observable Object protocol to the Observable macro",
            "type": "sampleCode"
          },
          {
            "title": "Macros",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/observation",
        "title": "Observation",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Observable conformance",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/observation/observable()",
            "title": "macro Observable()",
            "type": "macro"
          },
          {
            "path": "/documentation/observation/observable",
            "title": "Observable",
            "type": "protocol"
          },
          {
            "title": "Change tracking",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/observation/withobservationtracking(_:onchange:)",
            "title": "func withObservationTracking<T>(() -> T, onChange: @autoclosure () -> () -> Void) -> T",
            "type": "func"
          },
          {
            "children": [
              {
                "title": "Creating an observation registrar",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/observation/observationregistrar/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "title": "Receiving change notifications",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/observation/observationregistrar/willset(_:keypath:)",
                "title": "func willSet<Subject, Member>(Subject, keyPath: KeyPath<Subject, Member>)",
                "type": "method"
              },
              {
                "path": "/documentation/observation/observationregistrar/didset(_:keypath:)",
                "title": "func didSet<Subject, Member>(Subject, keyPath: KeyPath<Subject, Member>)",
                "type": "method"
              },
              {
                "title": "Identifying transactional access",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/observation/observationregistrar/access(_:keypath:)",
                "title": "func access<Subject, Member>(Subject, keyPath: KeyPath<Subject, Member>)",
                "type": "method"
              },
              {
                "path": "/documentation/observation/observationregistrar/withmutation(of:keypath:_:)",
                "title": "func withMutation<Subject, Member, T>(of: Subject, keyPath: KeyPath<Subject, Member>, () throws -> T) rethrows -> T",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/observation/observationregistrar/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/observation/observationregistrar/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/observation/observationregistrar/encode(to:)",
                    "title": "func encode(to: any Encoder)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/observation/observationregistrar/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/observation/observationregistrar/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/observation/observationregistrar/==(_:_:)",
                    "title": "static func == (ObservationRegistrar, ObservationRegistrar) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/observation/observationregistrar/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/observation/observationregistrar/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/observation/observationregistrar/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/observation/observationregistrar/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/observation/observationregistrar",
            "title": "ObservationRegistrar",
            "type": "struct"
          },
          {
            "title": "Observation in SwiftUI",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/managing-model-data-in-your-app",
            "title": "Managing model data in your app",
            "type": "sampleCode"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro",
            "title": "Migrating from the Observable Object protocol to the Observable macro",
            "type": "sampleCode"
          },
          {
            "title": "Macros",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/observation/observationignored()",
            "title": "macro ObservationIgnored()",
            "type": "macro"
          },
          {
            "path": "/documentation/observation/observationtracked()",
            "title": "macro ObservationTracked()",
            "type": "macro"
          }
        ],
        "path": "/documentation/observation",
        "title": "Observation",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
