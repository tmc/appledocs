{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Components",
            "type": "groupMarker"
          },
          {
            "title": "Quantifiers",
            "type": "groupMarker"
          },
          {
            "title": "Captures",
            "type": "groupMarker"
          },
          {
            "title": "Builders",
            "type": "groupMarker"
          },
          {
            "title": "Operators",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/regexbuilder",
        "title": "RegexBuilder",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Components",
            "type": "groupMarker"
          },
          {
            "title": "Quantifiers",
            "type": "groupMarker"
          },
          {
            "title": "Captures",
            "type": "groupMarker"
          },
          {
            "title": "Builders",
            "type": "groupMarker"
          },
          {
            "title": "Operators",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/regexbuilder",
        "title": "RegexBuilder",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Components",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/characterclass/inverted",
                "title": "var inverted: CharacterClass",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/characterclass/intersection(_:)",
                "title": "func intersection(CharacterClass) -> CharacterClass",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/characterclass/subtracting(_:)",
                "title": "func subtracting(CharacterClass) -> CharacterClass",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/characterclass/symmetricdifference(_:)",
                "title": "func symmetricDifference(CharacterClass) -> CharacterClass",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/characterclass/union(_:)",
                "title": "func union(CharacterClass) -> CharacterClass",
                "type": "method"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/characterclass/generalcategory(_:)",
                "title": "static func generalCategory(Unicode.GeneralCategory) -> CharacterClass",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/init(_:_:)",
                    "title": "init(CharacterClass, CharacterClass...)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/regex",
                    "title": "var regex: Regex<Substring>",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/regexoutput",
                    "title": "CharacterClass.RegexOutput",
                    "type": "typealias"
                  },
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/any",
                    "title": "static var any: CharacterClass",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/anygraphemecluster",
                    "title": "static var anyGraphemeCluster: CharacterClass",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/anynonnewline",
                    "title": "static var anyNonNewline: CharacterClass",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/digit",
                    "title": "static var digit: CharacterClass",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/hexdigit",
                    "title": "static var hexDigit: CharacterClass",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/horizontalwhitespace",
                    "title": "static var horizontalWhitespace: CharacterClass",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/newlinesequence",
                    "title": "static var newlineSequence: CharacterClass",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/verticalwhitespace",
                    "title": "static var verticalWhitespace: CharacterClass",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/whitespace",
                    "title": "static var whitespace: CharacterClass",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/word",
                    "title": "static var word: CharacterClass",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/anyof(_:)-1s0kt",
                    "title": "static func anyOf<S>(S) -> CharacterClass",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/regexbuilder/characterclass/anyof(_:)-zvpp",
                    "title": "static func anyOf<S>(S) -> CharacterClass",
                    "type": "method"
                  }
                ],
                "path": "/documentation/regexbuilder/characterclass/regexcomponent-implementations",
                "title": "RegexComponent Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/regexbuilder/characterclass",
            "title": "CharacterClass",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/anchor/inverted",
                "title": "var inverted: Anchor",
                "type": "property"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/anchor/endofline",
                "title": "static var endOfLine: Anchor",
                "type": "property"
              },
              {
                "path": "/documentation/regexbuilder/anchor/endofsubject",
                "title": "static var endOfSubject: Anchor",
                "type": "property"
              },
              {
                "path": "/documentation/regexbuilder/anchor/endofsubjectbeforenewline",
                "title": "static var endOfSubjectBeforeNewline: Anchor",
                "type": "property"
              },
              {
                "path": "/documentation/regexbuilder/anchor/firstmatchingpositioninsubject",
                "title": "static var firstMatchingPositionInSubject: Anchor",
                "type": "property"
              },
              {
                "path": "/documentation/regexbuilder/anchor/startofline",
                "title": "static var startOfLine: Anchor",
                "type": "property"
              },
              {
                "path": "/documentation/regexbuilder/anchor/startofsubject",
                "title": "static var startOfSubject: Anchor",
                "type": "property"
              },
              {
                "path": "/documentation/regexbuilder/anchor/textsegmentboundary",
                "title": "static var textSegmentBoundary: Anchor",
                "type": "property"
              },
              {
                "path": "/documentation/regexbuilder/anchor/wordboundary",
                "title": "static var wordBoundary: Anchor",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/regexbuilder/anchor/regex",
                    "title": "var regex: Regex<Substring>",
                    "type": "property"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/regexbuilder/anchor/regexoutput",
                    "title": "Anchor.RegexOutput",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/regexbuilder/anchor/regexcomponent-implementations",
                "title": "RegexComponent Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/regexbuilder/anchor",
            "title": "Anchor",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/lookahead/init(_:)-2yv8x",
                "title": "init<R>(() -> R)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/lookahead/init(_:)-4s5w2",
                "title": "init<R>(R)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/lookahead/regex",
                "title": "var regex: Regex<Output>",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/lookahead/regexoutput",
                "title": "Lookahead.RegexOutput",
                "type": "typealias"
              }
            ],
            "path": "/documentation/regexbuilder/lookahead",
            "title": "Lookahead",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/negativelookahead/init(_:)-3fsnx",
                "title": "init<R>(R)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/negativelookahead/init(_:)-4fh1d",
                "title": "init<R>(() -> R)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/negativelookahead/regex",
                "title": "var regex: Regex<Output>",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/negativelookahead/regexoutput",
                "title": "NegativeLookahead.RegexOutput",
                "type": "typealias"
              }
            ],
            "path": "/documentation/regexbuilder/negativelookahead",
            "title": "NegativeLookahead",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/choiceof/init(_:)",
                "title": "init(() -> ChoiceOf<Output>)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/choiceof/regex",
                "title": "var regex: Regex<Output>",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/choiceof/regexoutput",
                "title": "ChoiceOf.RegexOutput",
                "type": "typealias"
              }
            ],
            "path": "/documentation/regexbuilder/choiceof",
            "title": "ChoiceOf",
            "type": "struct"
          },
          {
            "title": "Quantifiers",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/one/init(_:)",
                "title": "init(some RegexComponent<Output>)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/one/regex",
                "title": "var regex: Regex<Output>",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/one/regexoutput",
                "title": "One.RegexOutput",
                "type": "typealias"
              }
            ],
            "path": "/documentation/regexbuilder/one",
            "title": "One",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-12hxo",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-2jtrp",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-2zdez",
                "title": "init(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-4230v",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-44oku",
                "title": "init<W, C1, C2, C3>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-4kz5l",
                "title": "init<W, C1, C2, C3, C4, C5>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-5azqh",
                "title": "init<W, C1, C2, C3>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-6j92l",
                "title": "init<W, C1>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-6v0ti",
                "title": "init<W, C1, C2>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-7f3n1",
                "title": "init<W, C1, C2>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-7te1p",
                "title": "init<W, C1, C2, C3, C4>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-83pgy",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-84fcd",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-8j8dz",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-8kdq8",
                "title": "init(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-8l2ha",
                "title": "init<W, C1, C2, C3, C4>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-96725",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-9pgy7",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-9picp",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-9wu1h",
                "title": "init<W, C1>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-bak6",
                "title": "init<W, C1, C2, C3, C4, C5>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/optionally/init(_:_:)-frqi",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/optionally/regex",
                "title": "var regex: Regex<Output>",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/optionally/regexoutput",
                "title": "Optionally.RegexOutput",
                "type": "typealias"
              }
            ],
            "path": "/documentation/regexbuilder/optionally",
            "title": "Optionally",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-15cm9",
                "title": "init<W, C1, C2, C3, C4>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-1a2tp",
                "title": "init<W, C1>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-1ac85",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-1d98s",
                "title": "init<W, C1, C2>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-1s6e5",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-254sw",
                "title": "init<W, C1, C2, C3, C4>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-2aen2",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-2l3tj",
                "title": "init<W, C1>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-39ch7",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-3npxt",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-3wvrs",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-3xl6h",
                "title": "init(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-4lxf6",
                "title": "init<W, C1, C2, C3, C4, C5>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-5xlw2",
                "title": "init<W, C1, C2, C3>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-6hnso",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-7oux0",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-7tdrp",
                "title": "init<W, C1, C2, C3>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-8f9h4",
                "title": "init<W, C1, C2>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-8ovis",
                "title": "init<W, C1, C2, C3, C4, C5>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-8tfqv",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-9tazs",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/init(_:_:)-9uicg",
                "title": "init(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/regex",
                "title": "var regex: Regex<Output>",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/zeroormore/regexoutput",
                "title": "ZeroOrMore.RegexOutput",
                "type": "typealias"
              }
            ],
            "path": "/documentation/regexbuilder/zeroormore",
            "title": "ZeroOrMore",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-17cwr",
                "title": "init<W, C1, C2, C3>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-1bnur",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-1fq85",
                "title": "init<W, C1, C2>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-21xfx",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-2o52m",
                "title": "init<W, C1, C2>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-2odtm",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-32m10",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-3flos",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-3tvh3",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-4qbv9",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-5helk",
                "title": "init<W, C1, C2, C3, C4>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-68oxd",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-6fm8e",
                "title": "init<W, C1, C2, C3, C4, C5>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-6mkp4",
                "title": "init<W, C1>(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-6pzxz",
                "title": "init<W, C1>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-7o7ll",
                "title": "init(RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-82w2k",
                "title": "init(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-84ep2",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-9eoi5",
                "title": "init<W, C1, C2, C3, C4, C5>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-9f4e8",
                "title": "init<W, C1, C2, C3>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-9qi4l",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/init(_:_:)-yc32",
                "title": "init<W, C1, C2, C3, C4>(some RegexComponent, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/regex",
                "title": "var regex: Regex<Output>",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/oneormore/regexoutput",
                "title": "OneOrMore.RegexOutput",
                "type": "typealias"
              }
            ],
            "path": "/documentation/regexbuilder/oneormore",
            "title": "OneOrMore",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-1bcjh",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(some RangeExpression<Int>, RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-1qgnj",
                "title": "init<W, C1, C2, C3, C4, C5>(some RangeExpression<Int>, RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-24n0n",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(some RangeExpression<Int>, RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-2ev8z",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(some RegexComponent, some RangeExpression<Int>, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-3ghwd",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(some RegexComponent, some RangeExpression<Int>, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-3mo6",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(some RegexComponent, some RangeExpression<Int>, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-545c4",
                "title": "init<W, C1, C2, C3>(some RegexComponent, some RangeExpression<Int>, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-76l8q",
                "title": "init<W, C1, C2, C3>(some RangeExpression<Int>, RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-7adwb",
                "title": "init<W, C1, C2>(some RangeExpression<Int>, RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-7lskd",
                "title": "init<W, C1>(some RangeExpression<Int>, RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-7qz0e",
                "title": "init<W, C1, C2, C3, C4>(some RegexComponent, some RangeExpression<Int>, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-7sn7t",
                "title": "init<W, C1>(some RegexComponent, some RangeExpression<Int>, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-80rd3",
                "title": "init<W, C1, C2>(some RegexComponent, some RangeExpression<Int>, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-83kcm",
                "title": "init<W, C1, C2, C3, C4, C5>(some RegexComponent, some RangeExpression<Int>, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-8574u",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(some RegexComponent, some RangeExpression<Int>, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-891vb",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(some RangeExpression<Int>, RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-8cwmc",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(some RangeExpression<Int>, RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-8zx0q",
                "title": "init<W, C1, C2, C3, C4>(some RangeExpression<Int>, RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-947au",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(some RangeExpression<Int>, RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-9h724",
                "title": "init(some RegexComponent, some RangeExpression<Int>, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-9tzos",
                "title": "init(some RangeExpression<Int>, RegexRepetitionBehavior?, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:_:_:)-rxdn",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(some RegexComponent, some RangeExpression<Int>, RegexRepetitionBehavior?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:count:)-1qk17",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(some RegexComponent, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:count:)-21lm6",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(some RegexComponent, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:count:)-2domp",
                "title": "init<W, C1, C2, C3, C4, C5>(some RegexComponent, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:count:)-2q199",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(some RegexComponent, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:count:)-4dhzv",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(some RegexComponent, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:count:)-56csz",
                "title": "init<W, C1, C2>(some RegexComponent, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:count:)-62ivb",
                "title": "init<W, C1>(some RegexComponent, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:count:)-82evl",
                "title": "init(some RegexComponent, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:count:)-8cqm4",
                "title": "init<W, C1, C2, C3, C4>(some RegexComponent, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:count:)-9b88v",
                "title": "init<W, C1, C2, C3>(some RegexComponent, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(_:count:)-9racn",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(some RegexComponent, count: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(count:_:)-1g72m",
                "title": "init<W, C1>(count: Int, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(count:_:)-1lb2y",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(count: Int, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(count:_:)-5tyx7",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(count: Int, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(count:_:)-7kfzx",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(count: Int, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(count:_:)-7ueje",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(count: Int, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(count:_:)-80zg2",
                "title": "init<W, C1, C2, C3>(count: Int, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(count:_:)-8n0o0",
                "title": "init(count: Int, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(count:_:)-8z2mq",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(count: Int, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(count:_:)-96dkt",
                "title": "init<W, C1, C2>(count: Int, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(count:_:)-9nywm",
                "title": "init<W, C1, C2, C3, C4>(count: Int, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/repeat/init(count:_:)-9snpn",
                "title": "init<W, C1, C2, C3, C4, C5>(count: Int, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/repeat/regex",
                "title": "var regex: Regex<Output>",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/repeat/regexoutput",
                "title": "Repeat.RegexOutput",
                "type": "typealias"
              }
            ],
            "path": "/documentation/regexbuilder/repeat",
            "title": "Repeat",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-190tm",
                "title": "init(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-1pqmw",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-1z8ep",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-2682m",
                "title": "init<W, C1, C2, C3, C4>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-3bh2x",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-3igqu",
                "title": "init<W, C1, C2, C3>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-3s7fi",
                "title": "init<W, C1, C2, C3, C4, C5>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-53gbl",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-54x6o",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-5xekw",
                "title": "init<W, C1>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-6dp02",
                "title": "init<W, C1, C2, C3, C4, C5>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-75o5i",
                "title": "init(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-7an8x",
                "title": "init<W, C1, C2>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-7b0cb",
                "title": "init<W, C1, C2, C3, C4>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-7c8wv",
                "title": "init<W, C1, C2, C3>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-7o3al",
                "title": "init<W, C1>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-8bmi6",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-8hppy",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-8i5e6",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-8nf0w",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-8xd9f",
                "title": "init<W, C1, C2>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/local/init(_:)-anqj",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(some RegexComponent)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/local/regex",
                "title": "var regex: Regex<Output>",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/local/regexoutput",
                "title": "Local.RegexOutput",
                "type": "typealias"
              }
            ],
            "path": "/documentation/regexbuilder/local",
            "title": "Local",
            "type": "struct"
          },
          {
            "title": "Captures",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-1tmsz",
                "title": "init<W, C1>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-2f52u",
                "title": "init<W, C1, C2, C3, C4>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-3fgv4",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-3iklm",
                "title": "init<W, C1, C2, C3, C4, C5>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-3o4p2",
                "title": "init<W>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-46rdv",
                "title": "init<W, C1, C2>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-4guoe",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-53k6l",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-5wvbp",
                "title": "init<W, C1, C2>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-6972d",
                "title": "init<W, C1, C2, C3, C4>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-6gd4p",
                "title": "init<W, C1, C2, C3, C4, C5>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-6w2zh",
                "title": "init<W, C1, C2, C3>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-751s0",
                "title": "init<W>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-7adb5",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-7gbb2",
                "title": "init<W, C1>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-7o3nk",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-8e156",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-8hde2",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-9a7se",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-9u8yf",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-dm5i",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(() -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:)-zp0c",
                "title": "init<W, C1, C2, C3>(some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:)-1ugzr",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(some RegexComponent, as: Reference<W>)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:)-25etj",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(some RegexComponent, as: Reference<W>)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:)-3466q",
                "title": "init<W, C1, C2, C3, C4, C5>(some RegexComponent, as: Reference<W>)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:)-5mhxe",
                "title": "init<W, C1, C2>(some RegexComponent, as: Reference<W>)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:)-5xnic",
                "title": "init<W, C1>(some RegexComponent, as: Reference<W>)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:)-6w075",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(some RegexComponent, as: Reference<W>)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:)-7rcvh",
                "title": "init<W, C1, C2, C3, C4>(some RegexComponent, as: Reference<W>)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:)-82c2j",
                "title": "init<W>(some RegexComponent, as: Reference<W>)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:)-8zsdh",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(some RegexComponent, as: Reference<W>)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:)-9f35e",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(some RegexComponent, as: Reference<W>)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:)-sg1w",
                "title": "init<W, C1, C2, C3>(some RegexComponent, as: Reference<W>)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:transform:)-14ci9",
                "title": "init<W, C1, C2, C3, C4, C5, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:transform:)-1k7ca",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:transform:)-2h2hm",
                "title": "init<W, C1, C2, C3, C4, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:transform:)-50rsk",
                "title": "init<W, C1, C2, C3, C4, C5, C6, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:transform:)-57wgq",
                "title": "init<W, C1, C2, C3, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:transform:)-7pm1",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:transform:)-8qyac",
                "title": "init<W, C1, C2, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:transform:)-8yapk",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:transform:)-9j2it",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:transform:)-i2lv",
                "title": "init<W, C1, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:as:transform:)-kflo",
                "title": "init<W, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-186es",
                "title": "init<W, C1, C2, C3, C4, C5, C6, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-18ik6",
                "title": "init<W, C1, C2, C3, C4, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-1kfgs",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-1ns5b",
                "title": "init<W, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-1t85c",
                "title": "init<W, C1, C2, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-1vbtc",
                "title": "init<W, C1, C2, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-2fsxr",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-36nfu",
                "title": "init<W, C1, C2, C3, C4, C5, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-36y0i",
                "title": "init<W, C1, C2, C3, C4, C5, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-4bhm9",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-54rby",
                "title": "init<W, C1, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-58e84",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-5loer",
                "title": "init<W, C1, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-5nqht",
                "title": "init<W, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-5qnr",
                "title": "init<W, C1, C2, C3, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-69jbe",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-6u44c",
                "title": "init<W, C1, C2, C3, C4, C5, C6, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-7ndmv",
                "title": "init<W, C1, C2, C3, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-8l6vq",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-98vy5",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-9yayx",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(_:transform:)-qygd",
                "title": "init<W, C1, C2, C3, C4, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:)-3d6el",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8>(as: Reference<W>, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:)-3vlcx",
                "title": "init<W, C1, C2>(as: Reference<W>, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:)-4l8eh",
                "title": "init<W, C1>(as: Reference<W>, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:)-51as9",
                "title": "init<W, C1, C2, C3, C4>(as: Reference<W>, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:)-56h1c",
                "title": "init<W>(as: Reference<W>, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:)-6esnr",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(as: Reference<W>, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:)-7fs07",
                "title": "init<W, C1, C2, C3>(as: Reference<W>, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:)-7rh88",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7>(as: Reference<W>, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:)-8s7ds",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(as: Reference<W>, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:)-9isum",
                "title": "init<W, C1, C2, C3, C4, C5, C6>(as: Reference<W>, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:)-9y6av",
                "title": "init<W, C1, C2, C3, C4, C5>(as: Reference<W>, () -> some RegexComponent)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:transform:)-15sg2",
                "title": "init<W, C1, C2, C3, C4, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:transform:)-1cz24",
                "title": "init<W, C1, C2, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:transform:)-1e5w2",
                "title": "init<W, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:transform:)-4elzn",
                "title": "init<W, C1, C2, C3, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:transform:)-617oo",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:transform:)-68hzv",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:transform:)-6h4i",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:transform:)-6tdp8",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:transform:)-82pi",
                "title": "init<W, C1, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:transform:)-c8qs",
                "title": "init<W, C1, C2, C3, C4, C5, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/capture/init(as:_:transform:)-jvkx",
                "title": "init<W, C1, C2, C3, C4, C5, C6, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/capture/regex",
                "title": "var regex: Regex<Output>",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/capture/regexoutput",
                "title": "Capture.RegexOutput",
                "type": "typealias"
              }
            ],
            "path": "/documentation/regexbuilder/capture",
            "title": "Capture",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:as:transform:)-2a4o2",
                "title": "init<W, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:as:transform:)-2bjbf",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:as:transform:)-41r67",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:as:transform:)-4kzw6",
                "title": "init<W, C1, C2, C3, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:as:transform:)-674ml",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:as:transform:)-7tqt7",
                "title": "init<W, C1, C2, C3, C4, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:as:transform:)-88lf1",
                "title": "init<W, C1, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:as:transform:)-89xrg",
                "title": "init<W, C1, C2, C3, C4, C5, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:as:transform:)-8m89r",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:as:transform:)-9p9ig",
                "title": "init<W, C1, C2, C3, C4, C5, C6, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:as:transform:)-z449",
                "title": "init<W, C1, C2, NewCapture>(some RegexComponent, as: Reference<NewCapture>, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-18te8",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-1oiex",
                "title": "init<W, C1, C2, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-1q8tj",
                "title": "init<W, C1, C2, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-2akes",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-2cmjm",
                "title": "init<W, C1, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-2o3dd",
                "title": "init<W, C1, C2, C3, C4, C5, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-35erc",
                "title": "init<W, C1, C2, C3, C4, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-49jj",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-4ctec",
                "title": "init<W, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-4fb8m",
                "title": "init<W, C1, C2, C3, C4, C5, C6, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-55y26",
                "title": "init<W, C1, C2, C3, C4, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-5blap",
                "title": "init<W, C1, C2, C3, C4, C5, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-5f28q",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-5qk0r",
                "title": "init<W, C1, C2, C3, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-631wm",
                "title": "init<W, C1, C2, C3, C4, C5, C6, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-7vgez",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-7w4kc",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-8d6xo",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-8kgfm",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-951zx",
                "title": "init<W, NewCapture>(() -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-9oonc",
                "title": "init<W, C1, C2, C3, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(_:transform:)-t0lx",
                "title": "init<W, C1, NewCapture>(some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(as:_:transform:)-2nfnn",
                "title": "init<W, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(as:_:transform:)-5tqfd",
                "title": "init<W, C1, C2, C3, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(as:_:transform:)-6vy4m",
                "title": "init<W, C1, C2, C3, C4, C5, C6, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(as:_:transform:)-7di2q",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(as:_:transform:)-7j2mj",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(as:_:transform:)-7pe1b",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(as:_:transform:)-85qkx",
                "title": "init<W, C1, C2, C3, C4, C5, C6, C7, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(as:_:transform:)-8byjf",
                "title": "init<W, C1, C2, C3, C4, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(as:_:transform:)-8xl17",
                "title": "init<W, C1, C2, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(as:_:transform:)-b8x0",
                "title": "init<W, C1, C2, C3, C4, C5, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/init(as:_:transform:)-p58t",
                "title": "init<W, C1, NewCapture>(as: Reference<NewCapture>, () -> some RegexComponent, transform: (W) throws -> NewCapture?)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/regex",
                "title": "var regex: Regex<Output>",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/trycapture/regexoutput",
                "title": "TryCapture.RegexOutput",
                "type": "typealias"
              }
            ],
            "path": "/documentation/regexbuilder/trycapture",
            "title": "TryCapture",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/reference/init(_:)",
                "title": "init(Capture.Type)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/reference/regex",
                "title": "var regex: Regex<Capture>",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/reference/regexoutput",
                "title": "Reference.RegexOutput",
                "type": "typealias"
              }
            ],
            "path": "/documentation/regexbuilder/reference",
            "title": "Reference",
            "type": "struct"
          },
          {
            "title": "Builders",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildblock()",
                "title": "static func buildBlock() -> Regex<Substring>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildexpression(_:)",
                "title": "static func buildExpression<R>(R) -> R",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildlimitedavailability(_:)-1l3rg",
                "title": "static func buildLimitedAvailability<W, C1, C2>(some RegexComponent) -> Regex<(Substring, C1?, C2?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildlimitedavailability(_:)-4at76",
                "title": "static func buildLimitedAvailability<W, C1, C2, C3, C4, C5, C6, C7, C8>(some RegexComponent) -> Regex<(Substring, C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildlimitedavailability(_:)-4hn5e",
                "title": "static func buildLimitedAvailability<W, C1, C2, C3, C4, C5, C6>(some RegexComponent) -> Regex<(Substring, C1?, C2?, C3?, C4?, C5?, C6?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildlimitedavailability(_:)-59bdi",
                "title": "static func buildLimitedAvailability<W, C1, C2, C3, C4, C5, C6, C7>(some RegexComponent) -> Regex<(Substring, C1?, C2?, C3?, C4?, C5?, C6?, C7?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildlimitedavailability(_:)-6pyeu",
                "title": "static func buildLimitedAvailability<W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(some RegexComponent) -> Regex<(Substring, C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildlimitedavailability(_:)-75sld",
                "title": "static func buildLimitedAvailability<W, C1, C2, C3>(some RegexComponent) -> Regex<(Substring, C1?, C2?, C3?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildlimitedavailability(_:)-79ri4",
                "title": "static func buildLimitedAvailability<W, C1, C2, C3, C4>(some RegexComponent) -> Regex<(Substring, C1?, C2?, C3?, C4?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildlimitedavailability(_:)-8v501",
                "title": "static func buildLimitedAvailability<W, C1>(some RegexComponent) -> Regex<(Substring, C1?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildlimitedavailability(_:)-9xvwl",
                "title": "static func buildLimitedAvailability<W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(some RegexComponent) -> Regex<(Substring, C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?, C10?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildlimitedavailability(_:)-c1mb",
                "title": "static func buildLimitedAvailability(some RegexComponent) -> Regex<Substring>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildlimitedavailability(_:)-d693",
                "title": "static func buildLimitedAvailability<W, C1, C2, C3, C4, C5>(some RegexComponent) -> Regex<(Substring, C1?, C2?, C3?, C4?, C5?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-14sjx",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-1kun5",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-1l56o",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-1mvah",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-1qjvk",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-2hd06",
                "title": "static func buildPartialBlock<W0>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<Substring>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-2nr1l",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-2p8bg",
                "title": "static func buildPartialBlock<W0, W1, C1, C2>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-2qewj",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-2r4ca",
                "title": "static func buildPartialBlock<W0, C0, C1, C2, C3, C4, C5>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C0, C1, C2, C3, C4, C5)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-2rw87",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-2v43k",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-302jc",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-31uif",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-34auc",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-3cwue",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-3d4xq",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-3fe4r",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-3iyin",
                "title": "static func buildPartialBlock<W0, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-3m9by",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-3qdzk",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-3r0w",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-3rw1u",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-3uzf8",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-3vbfl",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-439as",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-48ufn",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-49qyb",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-4ej74",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-4ev8q",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-4htjq",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-4qcho",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-4tecz",
                "title": "static func buildPartialBlock<W0, C0, C1>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C0, C1)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-4vll5",
                "title": "static func buildPartialBlock<W0, C0, C1, C2>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C0, C1, C2)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-4w1nu",
                "title": "static func buildPartialBlock<W0, W1, C1>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-560og",
                "title": "static func buildPartialBlock<W0, C0>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C0)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-5613o",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-5l4bx",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-6ayyo",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-6j8dc",
                "title": "static func buildPartialBlock<W0, C0, C1, C2, C3>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C0, C1, C2, C3)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-6jekf",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-6nfqh",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-6qrtp",
                "title": "static func buildPartialBlock<W0, C0, C1, C2, C3, C4>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C0, C1, C2, C3, C4)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-6u75f",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-6vgmh",
                "title": "static func buildPartialBlock<W0, C0, C1, C2, C3, C4, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C0, C1, C2, C3, C4, C5, C6)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-6wei8",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-78luz",
                "title": "static func buildPartialBlock<W0, W1, C1, C2>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-7oi4x",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-8nuq5",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-8o64q",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-8t85z",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-90brb",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-92aur",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-94cff",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-95d7s",
                "title": "static func buildPartialBlock<W0, C0, C1, C2, C3, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C0, C1, C2, C3, C4, C5, C6, C7)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-9d7nj",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-9dfaj",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-9fl4",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-9lklo",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-9ne33",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-9upqy",
                "title": "static func buildPartialBlock<W0, C0, C1, C2, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C0, C1, C2, C3, C4, C5, C6, C7, C8)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-dzro",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-fss2",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-k1e8",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-krsh",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7, C8)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(accumulated:next:)-oglj",
                "title": "static func buildPartialBlock<W0, W1, C1, C2, C3, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> Regex<(Substring, C1, C2, C3, C4, C5, C6, C7)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/regexcomponentbuilder/buildpartialblock(first:)",
                "title": "static func buildPartialBlock<R>(first: R) -> Regex<R.RegexOutput>",
                "type": "method"
              }
            ],
            "path": "/documentation/regexbuilder/regexcomponentbuilder",
            "title": "RegexComponentBuilder",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildexpression(_:)",
                "title": "static func buildExpression<R>(R) -> R",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-1jq94",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, W1, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5?, C6?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-1oadq",
                "title": "static func buildPartialBlock<W0, C1, W1, C2>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-1vk92",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, W1, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6?, C7?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-20ao",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7, C8)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-28nze",
                "title": "static func buildPartialBlock<W0, C1, C2, C3>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-2afed",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, C7, C8, C9, W1, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-2q3in",
                "title": "static func buildPartialBlock<W1, C1, C2, C3, C4, C5>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1?, C2?, C3?, C4?, C5?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-2yatq",
                "title": "static func buildPartialBlock<W0, C1, W1, C2, C3, C4, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2?, C3?, C4?, C5?, C6?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-30m9e",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, W1, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5?, C6?, C7?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-3571v",
                "title": "static func buildPartialBlock<W1, C1, C2, C3, C4>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1?, C2?, C3?, C4?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-38zc3",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-39yml",
                "title": "static func buildPartialBlock<W1, C1, C2, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-3a1qj",
                "title": "static func buildPartialBlock<W0, C1, C2, W1, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3?, C4?, C5?, C6?, C7?, C8?, C9?, C10?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-3ascd",
                "title": "static func buildPartialBlock<W0, C1, W1, C2, C3, C4>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2?, C3?, C4?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-3b47j",
                "title": "static func buildPartialBlock<W0, C1, C2, W1, C3, C4, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3?, C4?, C5?, C6?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-3eldc",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, W1, C5>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-3ibe4",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, W1, C4, C5>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4?, C5?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-3nzbh",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, C7, W1, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7, C8?, C9?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-3rkqj",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, W1, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4?, C5?, C6?, C7?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-3wkc9",
                "title": "static func buildPartialBlock<W0, C1, C2, W1, C3, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3?, C4?, C5?, C6?, C7?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-42jgz",
                "title": "static func buildPartialBlock<W0, C1>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-46i6m",
                "title": "static func buildPartialBlock(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<Substring>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-4jwp3",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, W1, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5?, C6?, C7?, C8?, C9?, C10?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-4nz0t",
                "title": "static func buildPartialBlock<W0, C1, C2, W1, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3?, C4?, C5?, C6?, C7?, C8?, C9?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-4q1xd",
                "title": "static func buildPartialBlock<W0, C1, W1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?, C10?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-53xav",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-576fa",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, W1, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6?, C7?, C8?, C9?, C10?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-57987",
                "title": "static func buildPartialBlock<W0, C1, C2, W1, C3, C4>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3?, C4?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-5afat",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, W1, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7?, C8?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-5fcrr",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, C7, W1, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7, C8?, C9?, C10?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-5me97",
                "title": "static func buildPartialBlock<W1, C1, C2, C3>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1?, C2?, C3?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-5qva",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, W1, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6?, C7?, C8?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-5wwt0",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-6074o",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, W1, C4>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-653ta",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, W1, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4?, C5?, C6?, C7?, C8?, C9?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-6842g",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, W1, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4?, C5?, C6?, C7?, C8?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-6anqe",
                "title": "static func buildPartialBlock<W0, C1, W1, C2, C3>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2?, C3?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-6hkv5",
                "title": "static func buildPartialBlock<W1, C1>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-6nfpu",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-6pfu4",
                "title": "static func buildPartialBlock<W0, C1, C2, W1, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3?, C4?, C5?, C6?, C7?, C8?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-6tz5g",
                "title": "static func buildPartialBlock<W1, C1, C2>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1?, C2?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-6vjm9",
                "title": "static func buildPartialBlock<W1, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?, C10?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-6vp0",
                "title": "static func buildPartialBlock<W0, C1, C2, W1, C3>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-6x6gg",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, W1, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5?, C6?, C7?, C8?, C9?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-6yu9n",
                "title": "static func buildPartialBlock<W1, C1, C2, C3, C4, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1?, C2?, C3?, C4?, C5?, C6?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-70usl",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, C7, C8, W1, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-71zj2",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, W1, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6?, C7?, C8?, C9?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-7ihw4",
                "title": "static func buildPartialBlock<W0, C1, W1, C2, C3, C4, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2?, C3?, C4?, C5?, C6?, C7?, C8?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-7jsg7",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, W1, C4, C5, C6, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4?, C5?, C6?, C7?, C8?, C9?, C10?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-815py",
                "title": "static func buildPartialBlock<W0, C1, C2>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-8a7vx",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, W1, C4, C5, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4?, C5?, C6?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-8dd0v",
                "title": "static func buildPartialBlock<W0, C1, W1, C2, C3, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2?, C3?, C4?, C5?, C6?, C7?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-8e0ap",
                "title": "static func buildPartialBlock<W0, C1, W1, C2, C3, C4, C5>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2?, C3?, C4?, C5?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-8pz3c",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-90yht",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, W1, C6>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-9f39x",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, W1, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-9g62e",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, W1, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7?, C8?, C9?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-9k7s0",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, W1, C5, C6, C7, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5?, C6?, C7?, C8?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-9op0h",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, C7, W1, C8>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7, C8?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-9s1co",
                "title": "static func buildPartialBlock<W0, C1, C2, W1, C3, C4, C5>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3?, C4?, C5?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-b6ks",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, W1, C7, C8, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7?, C8?, C9?, C10?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-klfl",
                "title": "static func buildPartialBlock<W1, C1, C2, C3, C4, C5, C6, C7>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1?, C2?, C3?, C4?, C5?, C6?, C7?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-o7ny",
                "title": "static func buildPartialBlock<W0, C1, C2, C3, C4, C5, C6, C7, C8, W1, C9, C10>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2, C3, C4, C5, C6, C7, C8, C9?, C10?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-q4oo",
                "title": "static func buildPartialBlock<W1, C1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(accumulated:next:)-toh7",
                "title": "static func buildPartialBlock<W0, C1, W1, C2, C3, C4, C5, C6, C7, C8, C9>(accumulated: some RegexComponent, next: some RegexComponent) -> ChoiceOf<(Substring, C1, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(first:)-1kh7h",
                "title": "static func buildPartialBlock<R, W, C1, C2>(first: R) -> ChoiceOf<(W, C1?, C2?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(first:)-271vl",
                "title": "static func buildPartialBlock<R, W, C1, C2, C3, C4, C5, C6>(first: R) -> ChoiceOf<(W, C1?, C2?, C3?, C4?, C5?, C6?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(first:)-3f6z3",
                "title": "static func buildPartialBlock<R, W, C1, C2, C3, C4, C5>(first: R) -> ChoiceOf<(W, C1?, C2?, C3?, C4?, C5?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(first:)-520tx",
                "title": "static func buildPartialBlock<R, W, C1>(first: R) -> ChoiceOf<(W, C1?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(first:)-5qbok",
                "title": "static func buildPartialBlock<R, W, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10>(first: R) -> ChoiceOf<(W, C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?, C10?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(first:)-63ah5",
                "title": "static func buildPartialBlock<R, W, C1, C2, C3, C4, C5, C6, C7>(first: R) -> ChoiceOf<(W, C1?, C2?, C3?, C4?, C5?, C6?, C7?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(first:)-6mjz0",
                "title": "static func buildPartialBlock<R, W, C1, C2, C3, C4>(first: R) -> ChoiceOf<(W, C1?, C2?, C3?, C4?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(first:)-6vt65",
                "title": "static func buildPartialBlock<R, W, C1, C2, C3, C4, C5, C6, C7, C8, C9>(first: R) -> ChoiceOf<(W, C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(first:)-7jdle",
                "title": "static func buildPartialBlock<R>(first: R) -> ChoiceOf<R.RegexOutput>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(first:)-c2a6",
                "title": "static func buildPartialBlock<R, W, C1, C2, C3>(first: R) -> ChoiceOf<(W, C1?, C2?, C3?)>",
                "type": "method"
              },
              {
                "path": "/documentation/regexbuilder/alternationbuilder/buildpartialblock(first:)-uy7q",
                "title": "static func buildPartialBlock<R, W, C1, C2, C3, C4, C5, C6, C7, C8>(first: R) -> ChoiceOf<(W, C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?)>",
                "type": "method"
              }
            ],
            "path": "/documentation/regexbuilder/alternationbuilder",
            "title": "AlternationBuilder",
            "type": "struct"
          },
          {
            "title": "Operators",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/regexbuilder/'...(_:_:)-16g2a",
            "title": "func ... (Character, Character) -> CharacterClass",
            "type": "op"
          },
          {
            "path": "/documentation/regexbuilder/'...(_:_:)-629xh",
            "title": "func ... (UnicodeScalar, UnicodeScalar) -> CharacterClass",
            "type": "op"
          }
        ],
        "path": "/documentation/regexbuilder",
        "title": "RegexBuilder",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
