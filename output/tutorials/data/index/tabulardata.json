{
  "interfaceLanguages": {
    "data": [
      {
        "children": [
          {
            "title": "Data Tables",
            "type": "groupMarker"
          },
          {
            "title": "Typed Columns",
            "type": "groupMarker"
          },
          {
            "title": "Type-Erased Columns",
            "type": "groupMarker"
          },
          {
            "title": "Statistical Summaries",
            "type": "groupMarker"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "title": "Supporting Types",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/tabulardata",
        "title": "TabularData",
        "type": "module"
      }
    ],
    "occ": [
      {
        "children": [
          {
            "title": "Data Tables",
            "type": "groupMarker"
          },
          {
            "title": "Typed Columns",
            "type": "groupMarker"
          },
          {
            "title": "Type-Erased Columns",
            "type": "groupMarker"
          },
          {
            "title": "Statistical Summaries",
            "type": "groupMarker"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "title": "Supporting Types",
            "type": "groupMarker"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          }
        ],
        "path": "/documentation/tabulardata",
        "title": "TabularData",
        "type": "module"
      }
    ],
    "swift": [
      {
        "children": [
          {
            "title": "Data Tables",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Data Frame",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/dataframe/init(columns:)",
                "title": "init<S>(columns: S)",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/dataframe/init(dictionaryliteral:)",
                "title": "init(dictionaryLiteral: (String, [Any?])...)",
                "type": "init"
              },
              {
                "title": "Creating a Data Frame from Other Data Frames",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/init(_:)",
                "title": "init(DataFrame.Slice)",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Inspecting a Slice",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/shape",
                    "title": "var shape: (rows: Int, columns: Int)",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/columns",
                    "title": "var columns: [AnyColumnSlice]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/rows",
                    "title": "var rows: DataFrame.Rows",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/base",
                    "title": "var base: DataFrame",
                    "type": "property"
                  },
                  {
                    "title": "Creating a Slice by Selecting a Column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/subscript(_:)-32h9z",
                    "title": "subscript<T>(ColumnID<T>) -> DiscontiguousColumnSlice<T>",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/subscript(column:_:)",
                    "title": "subscript<T>(column _: Int, T.Type) -> DiscontiguousColumnSlice<T>",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/subscript(_:_:)",
                    "title": "subscript<T>(String, T.Type) -> DiscontiguousColumnSlice<T>",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/subscript(_:)-18kdy",
                    "title": "subscript(String) -> AnyColumnSlice",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/subscript(dynamicmember:)",
                    "title": "subscript(dynamicMember _: String) -> AnyColumnSlice",
                    "type": "subscript"
                  },
                  {
                    "title": "Creating a Slice by Selecting Multiple Columns",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/subscript(_:)-5y42o",
                    "title": "subscript<S>(S) -> DataFrame.Slice",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/selecting(columnnames:)-9l8oe",
                    "title": "func selecting<S>(columnNames: S) -> DataFrame.Slice",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/selecting(columnnames:)-48kji",
                    "title": "func selecting(columnNames: String...) -> DataFrame.Slice",
                    "type": "method"
                  },
                  {
                    "title": "Creating a Slice by Selecting Rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/prefix(_:)",
                    "title": "func prefix(Int) -> DataFrame.Slice",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/prefix(upto:)",
                    "title": "func prefix(upTo: Int) -> DataFrame.Slice",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/prefix(through:)",
                    "title": "func prefix(through: Int) -> DataFrame.Slice",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/suffix(_:)",
                    "title": "func suffix(Int) -> DataFrame.Slice",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/suffix(from:)",
                    "title": "func suffix(from: Int) -> DataFrame.Slice",
                    "type": "method"
                  },
                  {
                    "title": "Creating a Slice by Filtering Rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/filter(on:_:)",
                    "title": "func filter<T>(on: ColumnID<T>, (T?) throws -> Bool) rethrows -> DataFrame.Slice",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/filter(on:_:_:)",
                    "title": "func filter<T>(on: String, T.Type, (T?) throws -> Bool) rethrows -> DataFrame.Slice",
                    "type": "method"
                  },
                  {
                    "title": "Creating Two Slices by Splitting Rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/randomsplit(by:seed:)",
                    "title": "func randomSplit(by: Double, seed: Int?) -> (DataFrame.Slice, DataFrame.Slice)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/randomsplit(by:using:)",
                    "title": "func randomSplit<G>(by: Double, using: inout G) -> (DataFrame.Slice, DataFrame.Slice)",
                    "type": "method"
                  },
                  {
                    "title": "Creating Two Data Frames by Splitting Rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/stratifiedsplit(on:by:randomseed:)",
                    "title": "func stratifiedSplit(on: String, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/stratifiedsplit(on:_:by:randomseed:)",
                    "title": "func stratifiedSplit<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/stratifiedsplit(on:_:_:by:randomseed:)",
                    "title": "func stratifiedSplit<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                    "type": "method"
                  },
                  {
                    "title": "Creating a Data Frame by Sorting a Column",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/sorted(on:order:)",
                    "title": "func sorted(on: String, order: Order) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/sorted(on:_:order:)-37i2f",
                    "title": "func sorted<T>(on: String, T.Type, order: Order) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/sorted(on:_:by:)",
                    "title": "func sorted<T>(on: String, T.Type, by: (T, T) throws -> Bool) rethrows -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/sorted(on:by:)",
                    "title": "func sorted<T>(on: ColumnID<T>, by: (T, T) throws -> Bool) rethrows -> DataFrame",
                    "type": "method"
                  },
                  {
                    "title": "Creating a Data Frame by Sorting Multiple Columns",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/sorted(on:_:order:)-xr0h",
                    "title": "func sorted<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, order: Order) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/sorted(on:_:_:order:)",
                    "title": "func sorted<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, order: Order) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "title": "Creating a Data Frame by Joining with Another Data Frame",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/joined(_:on:kind:)-2glok",
                    "title": "func joined<R>(R, on: String, kind: JoinKind) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/joined(_:on:kind:)-1misl",
                    "title": "func joined<R>(R, on: (left: String, right: String), kind: JoinKind) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/joined(_:on:kind:)-3zgye",
                    "title": "func joined<R, T>(R, on: (left: ColumnID<T>, right: ColumnID<T>), kind: JoinKind) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/joined(_:on:kind:)-1lz6j",
                    "title": "func joined<R, T>(R, on: ColumnID<T>, kind: JoinKind) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "title": "Grouping Rows",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/grouped(by:timeunit:)-13w3o",
                    "title": "func grouped(by: String, timeUnit: Calendar.Component) -> RowGrouping<Int>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/grouped(by:timeunit:)-696t5",
                    "title": "func grouped(by: ColumnID<Date>, timeUnit: Calendar.Component) -> RowGrouping<Int>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/grouped(by:transform:)-5eoog",
                    "title": "func grouped<InputKey, GroupingKey>(by: String, transform: (InputKey?) -> GroupingKey?) -> RowGrouping<GroupingKey>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/grouped(by:transform:)-7e9bm",
                    "title": "func grouped<InputKey, GroupingKey>(by: ColumnID<InputKey>, transform: (InputKey?) -> GroupingKey?) -> RowGrouping<GroupingKey>",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Creating a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/init(frame:columnname:timeunit:)",
                        "title": "init<D>(frame: D, columnName: String, timeUnit: Calendar.Component)",
                        "type": "init"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/init(groups:groupkeyscolumnname:)",
                        "title": "init<D>(groups: [(GroupingKey?, D)], groupKeysColumnName: String)",
                        "type": "init"
                      },
                      {
                        "title": "Inspecting a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/count",
                        "title": "var count: Int",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/subscript(_:)-5z2eg",
                        "title": "subscript(Int) -> (key: GroupingKey?, group: DataFrame.Slice)",
                        "type": "subscript"
                      },
                      {
                        "title": "Transforming a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/mapgroups(_:)",
                        "title": "func mapGroups((DataFrame.Slice) throws -> DataFrame) rethrows -> RowGrouping<GroupingKey>",
                        "type": "method"
                      },
                      {
                        "title": "Splitting a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/randomsplit(by:)",
                        "title": "func randomSplit(by: Double) -> (Self, Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/randomsplit(by:seed:)",
                        "title": "func randomSplit(by: Double, seed: Int?) -> (RowGrouping<GroupingKey>, RowGrouping<GroupingKey>)",
                        "type": "method"
                      },
                      {
                        "title": "Aggregating a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/counts()",
                        "title": "func counts() -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/counts(order:)",
                        "title": "func counts(order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/sums(_:_:order:)",
                        "title": "func sums<N>(String, N.Type, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/sums(_:order:)",
                        "title": "func sums<N>(ColumnID<N>, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/means(_:_:order:)",
                        "title": "func means<N>(String, N.Type, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/means(_:order:)",
                        "title": "func means<N>(ColumnID<N>, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/minimums(_:_:order:)",
                        "title": "func minimums<N>(String, N.Type, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/minimums(_:order:)",
                        "title": "func minimums<N>(ColumnID<N>, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/maximums(_:_:order:)",
                        "title": "func maximums<N>(String, N.Type, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/maximums(_:order:)",
                        "title": "func maximums<N>(ColumnID<N>, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/aggregated(on:into:transform:)",
                        "title": "func aggregated<Element, Result>(on: ColumnID<Element>, into: String?, transform: (DiscontiguousColumnSlice<Element>) throws -> Result) rethrows -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/aggregated(on:naming:transform:)",
                        "title": "func aggregated<Element, Result>(on: [String], naming: (String) -> String, transform: (DiscontiguousColumnSlice<Element>) throws -> Result?) rethrows -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/aggregated(on:naming:transform:)-6v6gq",
                        "title": "func aggregated<Element, Result>(on: String..., naming: (String) -> String, transform: (DiscontiguousColumnSlice<Element>) throws -> Result?) rethrows -> DataFrame",
                        "type": "method"
                      },
                      {
                        "title": "Flattening a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/ungrouped()",
                        "title": "func ungrouped() -> DataFrame",
                        "type": "method"
                      },
                      {
                        "title": "Summarizing a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/summary()",
                        "title": "func summary() -> any GroupSummaries",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/summary(of:)",
                        "title": "func summary(of: [String]) -> any GroupSummaries",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/groupsummaries/description",
                            "title": "var description: String",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/groupsummaries/description(options:)",
                            "title": "func description(options: FormattingOptions) -> String",
                            "type": "method"
                          },
                          {
                            "title": "Subscripts",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/groupsummaries/subscript(_:)",
                            "title": "subscript(Any?...) -> DataFrame?",
                            "type": "subscript"
                          }
                        ],
                        "path": "/documentation/tabulardata/groupsummaries",
                        "title": "GroupSummaries",
                        "type": "protocol"
                      },
                      {
                        "title": "Describing a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/description",
                        "title": "var description: String",
                        "type": "property"
                      },
                      {
                        "title": "Subscripts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgrouping/subscript(_:)-2xxs8",
                        "title": "subscript(Any?...) -> DataFrame.Slice?",
                        "type": "subscript"
                      },
                      {
                        "title": "Default Implementations",
                        "type": "groupMarker"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/last",
                            "title": "var last: Self.Element?",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/difference(from:by:)",
                            "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/droplast(_:)",
                            "title": "func dropLast(Int) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/formindex(before:)",
                            "title": "func formIndex(before: inout Self.Index)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/last(where:)",
                            "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/lastindex(where:)",
                            "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/reversed()",
                            "title": "func reversed() -> ReversedCollection<Self>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/suffix(_:)",
                            "title": "func suffix(Int) -> Self.SubSequence",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/tabulardata/rowgrouping/bidirectionalcollection-implementations",
                        "title": "BidirectionalCollection Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/count",
                            "title": "var count: Int",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/count-592o4",
                            "title": "var count: Int",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/first",
                            "title": "var first: Self.Element?",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/isempty",
                            "title": "var isEmpty: Bool",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/underestimatedcount",
                            "title": "var underestimatedCount: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/drop(while:)",
                            "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/dropfirst(_:)",
                            "title": "func dropFirst(Int) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/firstindex(where:)",
                            "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/formindex(_:offsetby:)",
                            "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/formindex(_:offsetby:limitedby:)",
                            "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/formindex(after:)",
                            "title": "func formIndex(after: inout Self.Index)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/indices(where:)",
                            "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/makeiterator()",
                            "title": "func makeIterator() -> IndexingIterator<Self>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/map(_:)-65oow",
                            "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/prefix(_:)",
                            "title": "func prefix(Int) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/prefix(through:)",
                            "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/prefix(upto:)",
                            "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/prefix(while:)",
                            "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/randomelement()",
                            "title": "func randomElement() -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/randomelement(using:)",
                            "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/removingsubranges(_:)",
                            "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                            "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/suffix(from:)",
                            "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/trimmingprefix(while:)",
                            "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type": "method"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/index",
                            "title": "RowGrouping.Index",
                            "type": "typealias"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/indices",
                            "title": "RowGrouping.Indices",
                            "type": "typealias"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/iterator",
                            "title": "RowGrouping.Iterator",
                            "type": "typealias"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/subsequence",
                            "title": "RowGrouping.SubSequence",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/tabulardata/rowgrouping/collection-implementations",
                        "title": "Collection Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/endindex",
                            "title": "var endIndex: Int",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/startindex",
                            "title": "var startIndex: Int",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/index(_:offsetby:limitedby:)",
                            "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/index(after:)",
                            "title": "func index(after: Int) -> Int",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/index(before:)",
                            "title": "func index(before: Int) -> Int",
                            "type": "method"
                          },
                          {
                            "title": "Subscripts",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/subscript(_:)-5z2eg",
                            "title": "subscript(Int) -> (key: GroupingKey?, group: DataFrame.Slice)",
                            "type": "subscript"
                          }
                        ],
                        "path": "/documentation/tabulardata/rowgrouping/randomaccesscollection-implementations",
                        "title": "RandomAccessCollection Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/aggregated(on:into:transform:)",
                            "title": "func aggregated<Element, Result>(on: ColumnID<Element>, into: String?, transform: (DiscontiguousColumnSlice<Element>) throws -> Result) rethrows -> DataFrame",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/aggregated(on:naming:transform:)-6v6gq",
                            "title": "func aggregated<Element, Result>(on: String..., naming: (String) -> String, transform: (DiscontiguousColumnSlice<Element>) throws -> Result?) rethrows -> DataFrame",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/counts()",
                            "title": "func counts() -> DataFrame",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/maximums(_:_:order:)",
                            "title": "func maximums<N>(String, N.Type, order: Order?) -> DataFrame",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/maximums(_:order:)",
                            "title": "func maximums<N>(ColumnID<N>, order: Order?) -> DataFrame",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/means(_:_:order:)",
                            "title": "func means<N>(String, N.Type, order: Order?) -> DataFrame",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/means(_:order:)",
                            "title": "func means<N>(ColumnID<N>, order: Order?) -> DataFrame",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/minimums(_:_:order:)",
                            "title": "func minimums<N>(String, N.Type, order: Order?) -> DataFrame",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/minimums(_:order:)",
                            "title": "func minimums<N>(ColumnID<N>, order: Order?) -> DataFrame",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/quantiles(_:_:quantile:order:)",
                            "title": "func quantiles<N>(String, N.Type, quantile: N, order: Order?) -> DataFrame",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/quantiles(_:quantile:order:)",
                            "title": "func quantiles<N>(ColumnID<N>, quantile: N, order: Order?) -> DataFrame",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/randomsplit(by:)",
                            "title": "func randomSplit(by: Double) -> (Self, Self)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/randomsplit(by:seed:)",
                            "title": "func randomSplit(by: Double, seed: Int?) -> (RowGrouping<GroupingKey>, RowGrouping<GroupingKey>)",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/summary()",
                            "title": "func summary() -> any GroupSummaries",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/summary(of:)",
                            "title": "func summary(of: [String]) -> any GroupSummaries",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/sums(_:_:order:)",
                            "title": "func sums<N>(String, N.Type, order: Order?) -> DataFrame",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/sums(_:order:)",
                            "title": "func sums<N>(ColumnID<N>, order: Order?) -> DataFrame",
                            "type": "method"
                          }
                        ],
                        "path": "/documentation/tabulardata/rowgrouping/rowgroupingprotocol-implementations",
                        "title": "RowGroupingProtocol Implementations",
                        "type": "collection"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/lazy",
                            "title": "var lazy: LazySequence<Self>",
                            "type": "property"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/publisher",
                            "title": "var publisher: Publishers.Sequence<Self, Never>",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/allsatisfy(_:)",
                            "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/compactmap(_:)",
                            "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/compare(_:_:)",
                            "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/contains(where:)",
                            "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/count(where:)",
                            "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/elementsequal(_:by:)",
                            "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/enumerated()",
                            "title": "func enumerated() -> EnumeratedSequence<Self>",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/filter(_:)-1jcc0",
                            "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/first(where:)",
                            "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/flatmap(_:)-2ovll",
                            "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/flatmap(_:)-4fkva",
                            "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/foreach(_:)",
                            "title": "func forEach((Self.Element) throws -> Void) rethrows",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/formatted(_:)",
                            "title": "func formatted<S>(S) -> S.FormatOutput",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/lexicographicallyprecedes(_:by:)",
                            "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/map(_:)-93fb4",
                            "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/max(by:)",
                            "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/min(by:)",
                            "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/reduce(_:_:)",
                            "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/reduce(into:_:)",
                            "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/shuffled()",
                            "title": "func shuffled() -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/shuffled(using:)",
                            "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/sorted(by:)",
                            "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/sorted(using:)-1hg7v",
                            "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/sorted(using:)-ygj6",
                            "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/starts(with:by:)",
                            "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                            "type": "method"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/withcontiguousstorageifavailable(_:)",
                            "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                            "type": "method"
                          },
                          {
                            "title": "Type Aliases",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/rowgrouping/element",
                            "title": "RowGrouping.Element",
                            "type": "typealias"
                          }
                        ],
                        "path": "/documentation/tabulardata/rowgrouping/sequence-implementations",
                        "title": "Sequence Implementations",
                        "type": "collection"
                      }
                    ],
                    "path": "/documentation/tabulardata/rowgrouping",
                    "title": "RowGrouping",
                    "type": "struct"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/grouped(by:)",
                    "title": "func grouped(by: String) -> any RowGroupingProtocol",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/grouped(by:_:)",
                    "title": "func grouped<T0, T1>(by: ColumnID<T0>, ColumnID<T1>) -> some RowGroupingProtocol",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/grouped(by:_:_:)",
                    "title": "func grouped<T0, T1, T2>(by: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>) -> some RowGroupingProtocol",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Inspecting a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/count",
                        "title": "var count: Int",
                        "type": "property"
                      },
                      {
                        "title": "Transforming a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/mapgroups(_:)",
                        "title": "func mapGroups((DataFrame.Slice) throws -> DataFrame) rethrows -> Self",
                        "type": "method"
                      },
                      {
                        "title": "Splitting a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/randomsplit(by:)",
                        "title": "func randomSplit(by: Double) -> (Self, Self)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/randomsplit(by:seed:)",
                        "title": "func randomSplit(by: Double, seed: Int?) -> (Self, Self)",
                        "type": "method"
                      },
                      {
                        "title": "Aggregating a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/counts()",
                        "title": "func counts() -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/counts(order:)",
                        "title": "func counts(order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/sums(_:_:order:)",
                        "title": "func sums<N>(String, N.Type, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/sums(_:order:)",
                        "title": "func sums<N>(ColumnID<N>, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/means(_:_:order:)",
                        "title": "func means<N>(String, N.Type, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/means(_:order:)",
                        "title": "func means<N>(ColumnID<N>, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/minimums(_:_:order:)",
                        "title": "func minimums<N>(String, N.Type, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/minimums(_:order:)",
                        "title": "func minimums<N>(ColumnID<N>, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/maximums(_:_:order:)",
                        "title": "func maximums<N>(String, N.Type, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/maximums(_:order:)",
                        "title": "func maximums<N>(ColumnID<N>, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/aggregated(on:into:transform:)",
                        "title": "func aggregated<Element, Result>(on: ColumnID<Element>, into: String?, transform: (DiscontiguousColumnSlice<Element>) throws -> Result) rethrows -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/aggregated(on:naming:transform:)",
                        "title": "func aggregated<Element, Result>(on: [String], naming: (String) -> String, transform: (DiscontiguousColumnSlice<Element>) throws -> Result?) rethrows -> DataFrame",
                        "type": "method"
                      },
                      {
                        "title": "Flattening a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/ungrouped()",
                        "title": "func ungrouped() -> DataFrame",
                        "type": "method"
                      },
                      {
                        "title": "Summarizing a Row Grouping",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/summary()",
                        "title": "func summary() -> any GroupSummaries",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/summary(of:)",
                        "title": "func summary(of: [String]) -> any GroupSummaries",
                        "type": "method"
                      },
                      {
                        "children": [
                          {
                            "title": "Instance Properties",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/groupsummaries/description",
                            "title": "var description: String",
                            "type": "property"
                          },
                          {
                            "title": "Instance Methods",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/groupsummaries/description(options:)",
                            "title": "func description(options: FormattingOptions) -> String",
                            "type": "method"
                          },
                          {
                            "title": "Subscripts",
                            "type": "groupMarker"
                          },
                          {
                            "path": "/documentation/tabulardata/groupsummaries/subscript(_:)",
                            "title": "subscript(Any?...) -> DataFrame?",
                            "type": "subscript"
                          }
                        ],
                        "path": "/documentation/tabulardata/groupsummaries",
                        "title": "GroupSummaries",
                        "type": "protocol"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/filter(_:)",
                        "title": "func filter((DataFrame.Slice) throws -> Bool) rethrows -> Self",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/quantiles(_:_:quantile:order:)",
                        "title": "func quantiles<N>(String, N.Type, quantile: N, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/quantiles(_:quantile:order:)",
                        "title": "func quantiles<N>(ColumnID<N>, quantile: N, order: Order?) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "title": "Subscripts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/rowgroupingprotocol/subscript(_:)",
                        "title": "subscript(Any?...) -> DataFrame.Slice?",
                        "type": "subscript"
                      }
                    ],
                    "path": "/documentation/tabulardata/rowgroupingprotocol",
                    "title": "RowGroupingProtocol",
                    "type": "protocol"
                  },
                  {
                    "title": "Summarizing a Slice",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/summary()",
                    "title": "func summary() -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/summary(of:)",
                    "title": "func summary(of: String...) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/summary(ofcolumns:)",
                    "title": "func summary(ofColumns: Int...) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/summarycolumnids/columnname",
                        "title": "static let columnName: ColumnID<String>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/summarycolumnids/firstquartile",
                        "title": "static let firstQuartile: ColumnID<Double>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/summarycolumnids/maximum",
                        "title": "static let maximum: ColumnID<Double>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/summarycolumnids/mean",
                        "title": "static let mean: ColumnID<Double>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/summarycolumnids/median",
                        "title": "static let median: ColumnID<Double>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/summarycolumnids/minimum",
                        "title": "static let minimum: ColumnID<Double>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/summarycolumnids/mode",
                        "title": "static let mode: ColumnID<[Any]>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/summarycolumnids/nonecount",
                        "title": "static let noneCount: ColumnID<Int>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/summarycolumnids/somecount",
                        "title": "static let someCount: ColumnID<Int>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/summarycolumnids/standarddeviation",
                        "title": "static let standardDeviation: ColumnID<Double>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/summarycolumnids/thirdquartile",
                        "title": "static let thirdQuartile: ColumnID<Double>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/summarycolumnids/uniquecount",
                        "title": "static let uniqueCount: ColumnID<Int>",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/tabulardata/summarycolumnids",
                    "title": "SummaryColumnIDs",
                    "type": "enum"
                  },
                  {
                    "title": "Saving a Slice to a CSV",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/writecsv(to:options:)",
                    "title": "func writeCSV(to: URL, options: CSVWritingOptions) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/csvrepresentation(options:)",
                    "title": "func csvRepresentation(options: CSVWritingOptions) throws -> Data",
                    "type": "method"
                  },
                  {
                    "title": "Comparing Slices",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/==(_:_:)",
                    "title": "static func == (DataFrame.Slice, DataFrame.Slice) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Describing a Slice",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/description(options:)",
                    "title": "func description(options: FormattingOptions) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/custommirror",
                    "title": "var customMirror: Mirror",
                    "type": "property"
                  },
                  {
                    "title": "Hashing a Slice",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/slice/columntype",
                    "title": "DataFrame.Slice.ColumnType",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/debugdescription",
                        "title": "var debugDescription: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/slice/customdebugstringconvertible-implementations",
                    "title": "CustomDebugStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/custommirror",
                        "title": "var customMirror: Mirror",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/slice/customreflectable-implementations",
                    "title": "CustomReflectable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/description",
                        "title": "var description: String",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/slice/customstringconvertible-implementations",
                    "title": "CustomStringConvertible Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/csvrepresentation(options:)",
                        "title": "func csvRepresentation(options: CSVWritingOptions) throws -> Data",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/description(options:)",
                        "title": "func description(options: FormattingOptions) -> String",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/grouped(by:_:)",
                        "title": "func grouped<T0, T1>(by: ColumnID<T0>, ColumnID<T1>) -> some RowGroupingProtocol",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/grouped(by:_:_:)",
                        "title": "func grouped<T0, T1, T2>(by: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>) -> some RowGroupingProtocol",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/grouped(by:timeunit:)-13w3o",
                        "title": "func grouped(by: String, timeUnit: Calendar.Component) -> RowGrouping<Int>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/grouped(by:timeunit:)-696t5",
                        "title": "func grouped(by: ColumnID<Date>, timeUnit: Calendar.Component) -> RowGrouping<Int>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/grouped(by:transform:)-5eoog",
                        "title": "func grouped<InputKey, GroupingKey>(by: String, transform: (InputKey?) -> GroupingKey?) -> RowGrouping<GroupingKey>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/grouped(by:transform:)-7e9bm",
                        "title": "func grouped<InputKey, GroupingKey>(by: ColumnID<InputKey>, transform: (InputKey?) -> GroupingKey?) -> RowGrouping<GroupingKey>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/joined(_:on:kind:)-1lz6j",
                        "title": "func joined<R, T>(R, on: ColumnID<T>, kind: JoinKind) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/joined(_:on:kind:)-1misl",
                        "title": "func joined<R>(R, on: (left: String, right: String), kind: JoinKind) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/joined(_:on:kind:)-2glok",
                        "title": "func joined<R>(R, on: String, kind: JoinKind) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/joined(_:on:kind:)-3zgye",
                        "title": "func joined<R, T>(R, on: (left: ColumnID<T>, right: ColumnID<T>), kind: JoinKind) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/jsonrepresentation(options:)",
                        "title": "func jsonRepresentation(options: JSONWritingOptions) throws -> Data",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/randomsplit(by:seed:)",
                        "title": "func randomSplit(by: Double, seed: Int?) -> (DataFrame.Slice, DataFrame.Slice)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/randomsplit(by:using:)",
                        "title": "func randomSplit<G>(by: Double, using: inout G) -> (DataFrame.Slice, DataFrame.Slice)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/sorted(on:_:_:order:)",
                        "title": "func sorted<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, order: Order) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/sorted(on:_:by:)",
                        "title": "func sorted<T>(on: String, T.Type, by: (T, T) throws -> Bool) rethrows -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/sorted(on:_:order:)-37i2f",
                        "title": "func sorted<T>(on: String, T.Type, order: Order) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/sorted(on:_:order:)-xr0h",
                        "title": "func sorted<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, order: Order) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/sorted(on:by:)",
                        "title": "func sorted<T>(on: ColumnID<T>, by: (T, T) throws -> Bool) rethrows -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/sorted(on:order:)",
                        "title": "func sorted(on: String, order: Order) -> DataFrame",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/stratifiedsplit(on:_:_:by:randomseed:)",
                        "title": "func stratifiedSplit<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/stratifiedsplit(on:_:by:randomseed:)",
                        "title": "func stratifiedSplit<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/stratifiedsplit(on:by:randomseed:)",
                        "title": "func stratifiedSplit(on: String, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/writecsv(to:options:)",
                        "title": "func writeCSV(to: URL, options: CSVWritingOptions) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/writejson(to:options:)",
                        "title": "func writeJSON(to: URL, options: JSONWritingOptions) throws",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/slice/dataframeprotocol-implementations",
                    "title": "DataFrameProtocol Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/==(_:_:)",
                        "title": "static func == (DataFrame.Slice, DataFrame.Slice) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/slice/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/slice/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/slice/hashable-implementations",
                    "title": "Hashable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/tabulardata/dataframe/slice",
                "title": "DataFrame.Slice",
                "type": "struct"
              },
              {
                "title": "Creating a Data Frame from a JSON File",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/init(contentsofjsonfile:columns:types:options:)",
                "title": "init(contentsOfJSONFile: URL, columns: [String]?, types: [String : JSONType], options: JSONReadingOptions) throws",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/dataframe/init(jsondata:columns:types:options:)",
                "title": "init(jsonData: Data, columns: [String]?, types: [String : JSONType], options: JSONReadingOptions) throws",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/jsontype/==(_:_:)",
                    "title": "static func == (JSONType, JSONType) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/jsontype/array",
                    "title": "case array",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/jsontype/boolean",
                    "title": "case boolean",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/jsontype/date",
                    "title": "case date",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/jsontype/double",
                    "title": "case double",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/jsontype/integer",
                    "title": "case integer",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/jsontype/object",
                    "title": "case object",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/jsontype/string",
                    "title": "case string",
                    "type": "case"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/jsontype/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/jsontype/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/jsontype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/tabulardata/jsontype/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/tabulardata/jsontype",
                "title": "JSONType",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/jsonreadingoptions/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/jsonreadingoptions/dateparsers",
                    "title": "var dateParsers: [(String) -> Date?]",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/jsonreadingoptions/adddateparsestrategy(_:)",
                    "title": "func addDateParseStrategy<T>(T)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/jsonreadingoptions",
                "title": "JSONReadingOptions",
                "type": "struct"
              },
              {
                "title": "Creating a Data Frame from a CSV",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/init(contentsofcsvfile:columns:rows:types:options:)",
                "title": "init(contentsOfCSVFile: URL, columns: [String]?, rows: Range<Int>?, types: [String : CSVType], options: CSVReadingOptions) throws",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/dataframe/init(csvdata:columns:rows:types:options:)",
                "title": "init(csvData: Data, columns: [String]?, rows: Range<Int>?, types: [String : CSVType], options: CSVReadingOptions) throws",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvtype/==(_:_:)",
                    "title": "static func == (CSVType, CSVType) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvtype/boolean",
                    "title": "case boolean",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/csvtype/data",
                    "title": "case data",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/csvtype/date",
                    "title": "case date",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/csvtype/double",
                    "title": "case double",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/csvtype/float",
                    "title": "case float",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/csvtype/integer",
                    "title": "case integer",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/csvtype/string",
                    "title": "case string",
                    "type": "case"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvtype/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvtype/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/csvtype/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/tabulardata/csvtype/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/tabulardata/csvtype",
                "title": "CSVType",
                "type": "enum"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/init(hasheaderrow:nilencodings:trueencodings:falseencodings:floatingpointtype:ignoresemptylines:usesquoting:usesescaping:delimiter:escapecharacter:)",
                    "title": "init(hasHeaderRow: Bool, nilEncodings: Set<String>, trueEncodings: Set<String>, falseEncodings: Set<String>, floatingPointType: CSVType, ignoresEmptyLines: Bool, usesQuoting: Bool, usesEscaping: Bool, delimiter: Character, escapeCharacter: Character)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/dateparsers",
                    "title": "var dateParsers: [(String) -> Date?]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/delimiter",
                    "title": "var delimiter: Character",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/escapecharacter",
                    "title": "var escapeCharacter: Character",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/falseencodings",
                    "title": "var falseEncodings: Set<String>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/floatingpointtype",
                    "title": "var floatingPointType: CSVType",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/hasheaderrow",
                    "title": "var hasHeaderRow: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/ignoresemptylines",
                    "title": "var ignoresEmptyLines: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/nilencodings",
                    "title": "var nilEncodings: Set<String>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/trueencodings",
                    "title": "var trueEncodings: Set<String>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/usesescaping",
                    "title": "var usesEscaping: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/usesquoting",
                    "title": "var usesQuoting: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingoptions/adddateparsestrategy(_:)",
                    "title": "func addDateParseStrategy<T>(T)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/csvreadingoptions",
                "title": "CSVReadingOptions",
                "type": "struct"
              },
              {
                "title": "Creating a Data Frame from Turi Create Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/init(contentsofsframedirectory:columns:rows:)",
                "title": "init(contentsOfSFrameDirectory: URL, columns: [String]?, rows: Range<Int>?) throws",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/shapeddata/init(shape:strides:contents:)",
                    "title": "init(shape: [Int], strides: [Int], contents: [Element])",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/shapeddata/contents",
                    "title": "let contents: [Element]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/shapeddata/shape",
                    "title": "let shape: [Int]",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/shapeddata/strides",
                    "title": "let strides: [Int]",
                    "type": "property"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/shapeddata/subscript(_:)",
                    "title": "subscript(Int...) -> Element",
                    "type": "subscript"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/shapeddata/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      },
                      {
                        "path": "/documentation/tabulardata/shapeddata/==(_:_:)",
                        "title": "static func == (ShapedData<Element>, ShapedData<Element>) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/tabulardata/shapeddata/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/shapeddata/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/shapeddata/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/tabulardata/shapeddata/hashable-implementations",
                    "title": "Hashable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/tabulardata/shapeddata",
                "title": "ShapedData",
                "type": "struct"
              },
              {
                "title": "Inspecting a Data Frame",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/isempty",
                "title": "var isEmpty: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/dataframe/shape",
                "title": "var shape: (rows: Int, columns: Int)",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/dataframe/columns",
                "title": "var columns: [AnyColumn]",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/dataframe/rows-swift.property",
                "title": "var rows: DataFrame.Rows",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Inspecting a Row Collection",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "title": "Accessing Elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-3f938",
                    "title": "subscript(Int) -> DataFrame.Row",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-2qzx7",
                    "title": "subscript(Range<Int>) -> DataFrame.Rows",
                    "type": "subscript"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/element",
                    "title": "DataFrame.Rows.Element",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/index",
                    "title": "DataFrame.Rows.Index",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/indices",
                    "title": "DataFrame.Rows.Indices",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/iterator",
                    "title": "DataFrame.Rows.Iterator",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subsequence",
                    "title": "DataFrame.Rows.SubSequence",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/last",
                        "title": "var last: Self.Element?",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/difference(from:)",
                        "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/difference(from:by:)",
                        "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/distance(from:to:)",
                        "title": "func distance(from: Self.Index, to: Self.Index) -> Int",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/droplast(_:)",
                        "title": "func dropLast(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/formindex(before:)",
                        "title": "func formIndex(before: inout Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/index(_:offsetby:)",
                        "title": "func index(Self.Index, offsetBy: Int) -> Self.Index",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/index(_:offsetby:limitedby:)",
                        "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/last(where:)",
                        "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/lastindex(of:)",
                        "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/lastindex(where:)",
                        "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/poplast()",
                        "title": "func popLast() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/removelast()",
                        "title": "func removeLast() -> Self.Element",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/removelast(_:)",
                        "title": "func removeLast(Int)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/reversed()",
                        "title": "func reversed() -> ReversedCollection<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/suffix(_:)",
                        "title": "func suffix(Int) -> Self.SubSequence",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/bidirectionalcollection-implementations",
                    "title": "BidirectionalCollection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/first",
                        "title": "var first: Self.Element?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/indices-swift.property",
                        "title": "var indices: DefaultIndices<Self>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/underestimatedcount",
                        "title": "var underestimatedCount: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/drop(while:)",
                        "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/firstindex(of:)",
                        "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/firstindex(where:)",
                        "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/firstrange(of:)",
                        "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/formindex(_:offsetby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/formindex(_:offsetby:limitedby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/formindex(after:)",
                        "title": "func formIndex(after: inout Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/index(of:)",
                        "title": "func index(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/indices(of:)",
                        "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/indices(where:)",
                        "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/makeiterator()",
                        "title": "func makeIterator() -> IndexingIterator<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/map(_:)-8bujw",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/popfirst()",
                        "title": "func popFirst() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/prefix(_:)",
                        "title": "func prefix(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/prefix(through:)",
                        "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/prefix(upto:)",
                        "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/randomelement()",
                        "title": "func randomElement() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/randomelement(using:)",
                        "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/ranges(of:)",
                        "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/removefirst()",
                        "title": "func removeFirst() -> Self.Element",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/removefirst(_:)",
                        "title": "func removeFirst(Int)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/removingsubranges(_:)",
                        "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/suffix(from:)",
                        "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/trimprefix(_:)",
                        "title": "func trimPrefix<Prefix>(Prefix)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/trimprefix(while:)",
                        "title": "func trimPrefix(while: (Self.Element) throws -> Bool) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/trimmingprefix(_:)",
                        "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/trimmingprefix(while:)",
                        "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "title": "Subscripts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-43snh",
                        "title": "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-5do8n",
                        "title": "subscript(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-9e4z3",
                        "title": "subscript<R>(R) -> Self.SubSequence",
                        "type": "subscript"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/collection-implementations",
                    "title": "Collection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/movesubranges(_:to:)",
                        "title": "func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/partition(by:)-jit0",
                        "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/partition(by:)-ni38",
                        "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/reverse()",
                        "title": "func reverse()",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/swapat(_:_:)",
                        "title": "func swapAt(Self.Index, Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/withcontiguousmutablestorageifavailable(_:)",
                        "title": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type": "method"
                      },
                      {
                        "title": "Subscripts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-3c8l4",
                        "title": "subscript(Range<Self.Index>) -> Slice<Self>",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-47kxi",
                        "title": "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-5beln",
                        "title": "subscript(Range<Self.Index>) -> Self.SubSequence",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-9yafe",
                        "title": "subscript<R>(R) -> Self.SubSequence",
                        "type": "subscript"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/mutablecollection-implementations",
                    "title": "MutableCollection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/lazy",
                        "title": "var lazy: LazySequence<Self>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/publisher",
                        "title": "var publisher: Publishers.Sequence<Self, Never>",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/compactmap(_:)",
                        "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/compare(_:_:)",
                        "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/contains(_:)",
                        "title": "func contains(Self.Element) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/contains(where:)",
                        "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/count(where:)",
                        "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/elementsequal(_:)",
                        "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/elementsequal(_:by:)",
                        "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/enumerated()",
                        "title": "func enumerated() -> EnumeratedSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/filter(_:)-2cbnn",
                        "title": "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/filter(_:)-us4e",
                        "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/first(where:)",
                        "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/flatmap(_:)-8fxdu",
                        "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/flatmap(_:)-979e8",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/foreach(_:)",
                        "title": "func forEach((Self.Element) throws -> Void) rethrows",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/formatted(_:)",
                        "title": "func formatted<S>(S) -> S.FormatOutput",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/joined()",
                        "title": "func joined() -> FlattenSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/joined(separator:)",
                        "title": "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/lexicographicallyprecedes(_:by:)",
                        "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/map(_:)-1xis4",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/shuffled()",
                        "title": "func shuffled() -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/shuffled(using:)",
                        "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/sorted(by:)",
                        "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/sorted(using:)-2xxhe",
                        "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/sorted(using:)-59vis",
                        "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/starts(with:)",
                        "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/starts(with:by:)",
                        "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/withcontiguousstorageifavailable(_:)",
                        "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/sequence-implementations",
                    "title": "Sequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/tabulardata/dataframe/rows-swift.struct",
                "title": "DataFrame.Rows",
                "type": "struct"
              },
              {
                "path": "/documentation/tabulardata/dataframe/base",
                "title": "var base: DataFrame",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/dataframe/containscolumn(_:_:)",
                "title": "func containsColumn<T>(String, T.Type) -> Bool",
                "type": "method"
              },
              {
                "title": "Sorting a Data Frame",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/sort(on:order:)-4vns7",
                "title": "func sort(on: String, order: Order)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/sort(on:_:order:)-78avw",
                "title": "func sort<T>(on: String, T.Type, order: Order)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/sort(on:_:by:)",
                "title": "func sort<T>(on: String, T.Type, by: (T, T) throws -> Bool) rethrows",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/sort(on:by:)",
                "title": "func sort<T>(on: ColumnID<T>, by: (T, T) throws -> Bool) rethrows",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/sort(on:order:)-5ep7w",
                "title": "func sort<T>(on: ColumnID<T>, order: Order)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/sort(on:_:order:)-8wrkl",
                "title": "func sort<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, order: Order)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/sort(on:_:_:order:)",
                "title": "func sort<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, order: Order)",
                "type": "method"
              },
              {
                "title": "Summarizing a Data Frame",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/summary()",
                "title": "func summary() -> DataFrame",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/summary(of:)",
                "title": "func summary(of: String...) -> DataFrame",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/summary(ofcolumns:)",
                "title": "func summary(ofColumns: Int...) -> DataFrame",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/summarycolumnids/columnname",
                    "title": "static let columnName: ColumnID<String>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/summarycolumnids/firstquartile",
                    "title": "static let firstQuartile: ColumnID<Double>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/summarycolumnids/maximum",
                    "title": "static let maximum: ColumnID<Double>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/summarycolumnids/mean",
                    "title": "static let mean: ColumnID<Double>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/summarycolumnids/median",
                    "title": "static let median: ColumnID<Double>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/summarycolumnids/minimum",
                    "title": "static let minimum: ColumnID<Double>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/summarycolumnids/mode",
                    "title": "static let mode: ColumnID<[Any]>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/summarycolumnids/nonecount",
                    "title": "static let noneCount: ColumnID<Int>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/summarycolumnids/somecount",
                    "title": "static let someCount: ColumnID<Int>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/summarycolumnids/standarddeviation",
                    "title": "static let standardDeviation: ColumnID<Double>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/summarycolumnids/thirdquartile",
                    "title": "static let thirdQuartile: ColumnID<Double>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/summarycolumnids/uniquecount",
                    "title": "static let uniqueCount: ColumnID<Int>",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/summarycolumnids",
                "title": "SummaryColumnIDs",
                "type": "enum"
              },
              {
                "title": "Saving a Data Frame to a CSV Format",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/writecsv(to:options:)",
                "title": "func writeCSV(to: URL, options: CSVWritingOptions) throws",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/csvrepresentation(options:)",
                "title": "func csvRepresentation(options: CSVWritingOptions) throws -> Data",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvwritingoptions/init()",
                    "title": "init()",
                    "type": "init"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/tabulardata/csvwritingoptions/init(includesheader:dateformat:nilencoding:trueencoding:falseencoding:newline:delimiter:)",
                    "title": "init(includesHeader: Bool, dateFormat: String?, nilEncoding: String, trueEncoding: String, falseEncoding: String, newline: String, delimiter: Character)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/tabulardata/csvwritingoptions/init(includesheader:nilencoding:trueencoding:falseencoding:newline:delimiter:)",
                    "title": "init(includesHeader: Bool, nilEncoding: String, trueEncoding: String, falseEncoding: String, newline: String, delimiter: Character)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/tabulardata/csvwritingoptions/dateformat",
                    "title": "var dateFormat: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvwritingoptions/dateformatter",
                    "title": "var dateFormatter: (Date) -> String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvwritingoptions/delimiter",
                    "title": "var delimiter: Character",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvwritingoptions/falseencoding",
                    "title": "var falseEncoding: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvwritingoptions/includesheader",
                    "title": "var includesHeader: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvwritingoptions/newline",
                    "title": "var newline: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvwritingoptions/nilencoding",
                    "title": "var nilEncoding: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvwritingoptions/trueencoding",
                    "title": "var trueEncoding: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/csvwritingoptions",
                "title": "CSVWritingOptions",
                "type": "struct"
              },
              {
                "title": "Describing a Data Frame",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/dataframe/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/dataframe/description(options:)",
                "title": "func description(options: FormattingOptions) -> String",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/custommirror",
                "title": "var customMirror: Mirror",
                "type": "property"
              },
              {
                "title": "Comparing Data Frames",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/==(_:_:)",
                "title": "static func == (DataFrame, DataFrame) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/dataframe/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Hashing a Data Frame",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/init(_:featurescolumnid:annotationscolumnid:)",
                "title": "init<S, Feature, Annotation>(S, featuresColumnID: ColumnID<Feature>, annotationsColumnID: ColumnID<Annotation>) throws",
                "type": "init"
              },
              {
                "beta": true,
                "path": "/documentation/tabulardata/dataframe/init(contentsofcsvfile:columns:rows:options:)",
                "title": "init<each T>(contentsOfCSVFile: URL, columns: repeat ColumnID<each T>, rows: Range<Int>?, options: CSVReadingOptions) throws",
                "type": "init"
              },
              {
                "beta": true,
                "path": "/documentation/tabulardata/dataframe/init(csvdata:columns:rows:options:)",
                "title": "init<each T>(csvData: Data, columns: repeat ColumnID<each T>, rows: Range<Int>?, options: CSVReadingOptions) throws",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/containscolumn(_:)-6nqfs",
                "title": "func containsColumn<T>(ColumnID<T>) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/containscolumn(_:)-8spst",
                "title": "func containsColumn(String) -> Bool",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/loadrangedannotations(parameters:continueonfailure:)",
                "title": "func loadRangedAnnotations<Annotation>(parameters: DataFrameTemporalAnnotationParameters<Annotation>, continueOnFailure: Bool) throws -> [AnnotatedFeature<TemporalFileSegment, Annotation>]",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframe/selecting(_:)",
                "title": "func selecting(ColumnSelection) -> DataFrame",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframe/columntype",
                "title": "DataFrame.ColumnType",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/dataframe/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/custommirror",
                    "title": "var customMirror: Mirror",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/dataframe/customreflectable-implementations",
                "title": "CustomReflectable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/dataframe/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/base",
                    "title": "var base: DataFrame",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/csvrepresentation(options:)",
                    "title": "func csvRepresentation(options: CSVWritingOptions) throws -> Data",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/description(options:)",
                    "title": "func description(options: FormattingOptions) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/grouped(by:)-2hm43",
                    "title": "func grouped<GroupingKey>(by: ColumnID<GroupingKey>) -> RowGrouping<GroupingKey>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/grouped(by:)-96zo8",
                    "title": "func grouped(by: String...) -> some RowGroupingProtocol",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/grouped(by:)-qniy",
                    "title": "func grouped<T>(by: ColumnID<T>...) -> some RowGroupingProtocol",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/grouped(by:_:)",
                    "title": "func grouped<T0, T1>(by: ColumnID<T0>, ColumnID<T1>) -> some RowGroupingProtocol",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/grouped(by:_:_:)",
                    "title": "func grouped<T0, T1, T2>(by: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>) -> some RowGroupingProtocol",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/grouped(by:timeunit:)-538ya",
                    "title": "func grouped(by: ColumnID<Date>, timeUnit: Calendar.Component) -> RowGrouping<Int>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/grouped(by:timeunit:)-huz4",
                    "title": "func grouped(by: String, timeUnit: Calendar.Component) -> RowGrouping<Int>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/grouped(by:transform:)-11u79",
                    "title": "func grouped<InputKey, GroupingKey>(by: ColumnID<InputKey>, transform: (InputKey?) -> GroupingKey?) -> RowGrouping<GroupingKey>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/grouped(by:transform:)-4jlj3",
                    "title": "func grouped<InputKey, GroupingKey>(by: String, transform: (InputKey?) -> GroupingKey?) -> RowGrouping<GroupingKey>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/joined(_:on:kind:)-5mpnt",
                    "title": "func joined<R>(R, on: (left: String, right: String), kind: JoinKind) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/joined(_:on:kind:)-6moa8",
                    "title": "func joined<R>(R, on: String, kind: JoinKind) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/joined(_:on:kind:)-8v4sp",
                    "title": "func joined<R, T>(R, on: (left: ColumnID<T>, right: ColumnID<T>), kind: JoinKind) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/joined(_:on:kind:)-969k1",
                    "title": "func joined<R, T>(R, on: ColumnID<T>, kind: JoinKind) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/jsonrepresentation(options:)",
                    "title": "func jsonRepresentation(options: JSONWritingOptions) throws -> Data",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/randomsplit(by:seed:)",
                    "title": "func randomSplit(by: Double, seed: Int?) -> (DataFrame.Slice, DataFrame.Slice)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/randomsplit(by:using:)",
                    "title": "func randomSplit<G>(by: Double, using: inout G) -> (DataFrame.Slice, DataFrame.Slice)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/sorted(on:_:_:order:)",
                    "title": "func sorted<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, order: Order) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/sorted(on:_:by:)",
                    "title": "func sorted<T>(on: String, T.Type, by: (T, T) throws -> Bool) rethrows -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/sorted(on:_:order:)-7gt7j",
                    "title": "func sorted<T>(on: String, T.Type, order: Order) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/sorted(on:_:order:)-90o0t",
                    "title": "func sorted<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, order: Order) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/sorted(on:by:)",
                    "title": "func sorted<T>(on: ColumnID<T>, by: (T, T) throws -> Bool) rethrows -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/sorted(on:order:)-6kn10",
                    "title": "func sorted<T>(on: ColumnID<T>, order: Order) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/sorted(on:order:)-6o09e",
                    "title": "func sorted(on: String, order: Order) -> DataFrame",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/stratifiedsplit(on:_:_:by:randomseed:)",
                    "title": "func stratifiedSplit<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/stratifiedsplit(on:_:by:randomseed:)",
                    "title": "func stratifiedSplit<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/stratifiedsplit(on:by:randomseed:)-1x8p6",
                    "title": "func stratifiedSplit(on: String..., by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/stratifiedsplit(on:by:randomseed:)-50zwv",
                    "title": "func stratifiedSplit(on: String, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/stratifiedsplit(on:by:randomseed:)-7e5pd",
                    "title": "func stratifiedSplit<T>(on: ColumnID<T>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/writecsv(to:options:)",
                    "title": "func writeCSV(to: URL, options: CSVWritingOptions) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/writejson(to:options:)",
                    "title": "func writeJSON(to: URL, options: JSONWritingOptions) throws",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/subscript(_:)-4rx4a",
                    "title": "subscript<R>(R) -> DataFrame.Slice",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/subscript(_:)-8wcl1",
                    "title": "subscript(Range<Int>) -> DataFrame.Slice",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/tabulardata/dataframe/dataframeprotocol-implementations",
                "title": "DataFrameProtocol Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/==(_:_:)",
                    "title": "static func == (DataFrame, DataFrame) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/dataframe/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/init(dictionaryliteral:)",
                    "title": "init(dictionaryLiteral: (String, [Any?])...)",
                    "type": "init"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/key",
                    "title": "DataFrame.Key",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/value",
                    "title": "DataFrame.Value",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/tabulardata/dataframe/expressiblebydictionaryliteral-implementations",
                "title": "ExpressibleByDictionaryLiteral Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/dataframe/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/dataframe",
            "title": "DataFrame",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Inspecting a Data Frame Type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/isempty",
                "title": "var isEmpty: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/shape",
                "title": "var shape: (rows: Int, columns: Int)",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/columns",
                "title": "var columns: [Self.ColumnType]",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/columntype",
                "title": "ColumnType",
                "type": "associatedtype"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/rows",
                "title": "var rows: DataFrame.Rows",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Inspecting a Row Collection",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "title": "Accessing Elements",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-3f938",
                    "title": "subscript(Int) -> DataFrame.Row",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-2qzx7",
                    "title": "subscript(Range<Int>) -> DataFrame.Rows",
                    "type": "subscript"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/element",
                    "title": "DataFrame.Rows.Element",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/index",
                    "title": "DataFrame.Rows.Index",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/indices",
                    "title": "DataFrame.Rows.Indices",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/iterator",
                    "title": "DataFrame.Rows.Iterator",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subsequence",
                    "title": "DataFrame.Rows.SubSequence",
                    "type": "typealias"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/last",
                        "title": "var last: Self.Element?",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/difference(from:)",
                        "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/difference(from:by:)",
                        "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/distance(from:to:)",
                        "title": "func distance(from: Self.Index, to: Self.Index) -> Int",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/droplast(_:)",
                        "title": "func dropLast(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/formindex(before:)",
                        "title": "func formIndex(before: inout Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/index(_:offsetby:)",
                        "title": "func index(Self.Index, offsetBy: Int) -> Self.Index",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/index(_:offsetby:limitedby:)",
                        "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/last(where:)",
                        "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/lastindex(of:)",
                        "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/lastindex(where:)",
                        "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/poplast()",
                        "title": "func popLast() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/removelast()",
                        "title": "func removeLast() -> Self.Element",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/removelast(_:)",
                        "title": "func removeLast(Int)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/reversed()",
                        "title": "func reversed() -> ReversedCollection<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/suffix(_:)",
                        "title": "func suffix(Int) -> Self.SubSequence",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/bidirectionalcollection-implementations",
                    "title": "BidirectionalCollection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/first",
                        "title": "var first: Self.Element?",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/indices-swift.property",
                        "title": "var indices: DefaultIndices<Self>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/isempty",
                        "title": "var isEmpty: Bool",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/underestimatedcount",
                        "title": "var underestimatedCount: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/drop(while:)",
                        "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/dropfirst(_:)",
                        "title": "func dropFirst(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/firstindex(of:)",
                        "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/firstindex(where:)",
                        "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/firstrange(of:)",
                        "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/formindex(_:offsetby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/formindex(_:offsetby:limitedby:)",
                        "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/formindex(after:)",
                        "title": "func formIndex(after: inout Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/index(of:)",
                        "title": "func index(of: Self.Element) -> Self.Index?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/indices(of:)",
                        "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/indices(where:)",
                        "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/makeiterator()",
                        "title": "func makeIterator() -> IndexingIterator<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/map(_:)-8bujw",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/popfirst()",
                        "title": "func popFirst() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/prefix(_:)",
                        "title": "func prefix(Int) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/prefix(through:)",
                        "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/prefix(upto:)",
                        "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/prefix(while:)",
                        "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/randomelement()",
                        "title": "func randomElement() -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/randomelement(using:)",
                        "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/ranges(of:)",
                        "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/removefirst()",
                        "title": "func removeFirst() -> Self.Element",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/removefirst(_:)",
                        "title": "func removeFirst(Int)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/removingsubranges(_:)",
                        "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/suffix(from:)",
                        "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/trimprefix(_:)",
                        "title": "func trimPrefix<Prefix>(Prefix)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/trimprefix(while:)",
                        "title": "func trimPrefix(while: (Self.Element) throws -> Bool) throws",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/trimmingprefix(_:)",
                        "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/trimmingprefix(while:)",
                        "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type": "method"
                      },
                      {
                        "title": "Subscripts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-43snh",
                        "title": "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-5do8n",
                        "title": "subscript(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-9e4z3",
                        "title": "subscript<R>(R) -> Self.SubSequence",
                        "type": "subscript"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/collection-implementations",
                    "title": "Collection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/movesubranges(_:to:)",
                        "title": "func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/partition(by:)-jit0",
                        "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/partition(by:)-ni38",
                        "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/reverse()",
                        "title": "func reverse()",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/swapat(_:_:)",
                        "title": "func swapAt(Self.Index, Self.Index)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/withcontiguousmutablestorageifavailable(_:)",
                        "title": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type": "method"
                      },
                      {
                        "title": "Subscripts",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-3c8l4",
                        "title": "subscript(Range<Self.Index>) -> Slice<Self>",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-47kxi",
                        "title": "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-5beln",
                        "title": "subscript(Range<Self.Index>) -> Self.SubSequence",
                        "type": "subscript"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/subscript(_:)-9yafe",
                        "title": "subscript<R>(R) -> Self.SubSequence",
                        "type": "subscript"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/mutablecollection-implementations",
                    "title": "MutableCollection Implementations",
                    "type": "collection"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/lazy",
                        "title": "var lazy: LazySequence<Self>",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/publisher",
                        "title": "var publisher: Publishers.Sequence<Self, Never>",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/allsatisfy(_:)",
                        "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/compactmap(_:)",
                        "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/compare(_:_:)",
                        "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/contains(_:)",
                        "title": "func contains(Self.Element) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/contains(where:)",
                        "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/count(where:)",
                        "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/elementsequal(_:)",
                        "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/elementsequal(_:by:)",
                        "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/enumerated()",
                        "title": "func enumerated() -> EnumeratedSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/filter(_:)-2cbnn",
                        "title": "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/filter(_:)-us4e",
                        "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/first(where:)",
                        "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/flatmap(_:)-8fxdu",
                        "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/flatmap(_:)-979e8",
                        "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/foreach(_:)",
                        "title": "func forEach((Self.Element) throws -> Void) rethrows",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/formatted(_:)",
                        "title": "func formatted<S>(S) -> S.FormatOutput",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/joined()",
                        "title": "func joined() -> FlattenSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/joined(separator:)",
                        "title": "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/lexicographicallyprecedes(_:by:)",
                        "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/map(_:)-1xis4",
                        "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/max(by:)",
                        "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/min(by:)",
                        "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/reduce(_:_:)",
                        "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/reduce(into:_:)",
                        "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/shuffled()",
                        "title": "func shuffled() -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/shuffled(using:)",
                        "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/sorted(by:)",
                        "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/sorted(using:)-2xxhe",
                        "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/sorted(using:)-59vis",
                        "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/starts(with:)",
                        "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/starts(with:by:)",
                        "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tabulardata/dataframe/rows-swift.struct/withcontiguousstorageifavailable(_:)",
                        "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/tabulardata/dataframe/rows-swift.struct/sequence-implementations",
                    "title": "Sequence Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/tabulardata/dataframe/rows-swift.struct",
                "title": "DataFrame.Rows",
                "type": "struct"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/base",
                "title": "var base: DataFrame",
                "type": "property"
              },
              {
                "title": "Accessing Rows",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/subscript(_:)",
                "title": "subscript(Range<Int>) -> DataFrame.Slice",
                "type": "subscript"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/subscript(_:)-8hly3",
                "title": "subscript<R>(R) -> DataFrame.Slice",
                "type": "subscript"
              },
              {
                "title": "Creating Two Slices by Splitting Rows",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/randomsplit(by:seed:)",
                "title": "func randomSplit(by: Double, seed: Int?) -> (DataFrame.Slice, DataFrame.Slice)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/randomsplit(by:using:)",
                "title": "func randomSplit<G>(by: Double, using: inout G) -> (DataFrame.Slice, DataFrame.Slice)",
                "type": "method"
              },
              {
                "title": "Creating Two Data Frames by Splitting Rows",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/stratifiedsplit(on:by:randomseed:)-9iauf",
                "title": "func stratifiedSplit(on: String, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/stratifiedsplit(on:by:randomseed:)-8szu1",
                "title": "func stratifiedSplit(on: String..., by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/stratifiedsplit(on:by:randomseed:)-714jk",
                "title": "func stratifiedSplit<T>(on: ColumnID<T>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/stratifiedsplit(on:_:by:randomseed:)",
                "title": "func stratifiedSplit<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/stratifiedsplit(on:_:_:by:randomseed:)",
                "title": "func stratifiedSplit<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, by: Double, randomSeed: Int?) -> (DataFrame, DataFrame)",
                "type": "method"
              },
              {
                "title": "Creating a Data Frame by Sorting a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/sorted(on:order:)-818u5",
                "title": "func sorted(on: String, order: Order) -> DataFrame",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/sorted(on:_:order:)-8d7rr",
                "title": "func sorted<T>(on: String, T.Type, order: Order) -> DataFrame",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/sorted(on:_:by:)",
                "title": "func sorted<T>(on: String, T.Type, by: (T, T) throws -> Bool) rethrows -> DataFrame",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/sorted(on:order:)-5nl5c",
                "title": "func sorted<T>(on: ColumnID<T>, order: Order) -> DataFrame",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/sorted(on:by:)",
                "title": "func sorted<T>(on: ColumnID<T>, by: (T, T) throws -> Bool) rethrows -> DataFrame",
                "type": "method"
              },
              {
                "title": "Creating a Data Frame by Sorting Multiple Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/sorted(on:_:order:)-79los",
                "title": "func sorted<T0, T1>(on: ColumnID<T0>, ColumnID<T1>, order: Order) -> DataFrame",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/sorted(on:_:_:order:)",
                "title": "func sorted<T0, T1, T2>(on: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>, order: Order) -> DataFrame",
                "type": "method"
              },
              {
                "title": "Creating a Data Frame by Joining Another Data Frame",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/joined(_:on:kind:)-1gp6k",
                "title": "func joined<R>(R, on: String, kind: JoinKind) -> DataFrame",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/joined(_:on:kind:)-7u2tw",
                "title": "func joined<R>(R, on: (left: String, right: String), kind: JoinKind) -> DataFrame",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/joined(_:on:kind:)-9629e",
                "title": "func joined<R, T>(R, on: (left: ColumnID<T>, right: ColumnID<T>), kind: JoinKind) -> DataFrame",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/joined(_:on:kind:)-mvic",
                "title": "func joined<R, T>(R, on: ColumnID<T>, kind: JoinKind) -> DataFrame",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/joinkind/==(_:_:)",
                    "title": "static func == (JoinKind, JoinKind) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/joinkind/full",
                    "title": "case full",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/joinkind/inner",
                    "title": "case inner",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/joinkind/left",
                    "title": "case left",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tabulardata/joinkind/right",
                    "title": "case right",
                    "type": "case"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/joinkind/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/joinkind/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tabulardata/joinkind/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/tabulardata/joinkind/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "collection"
                  }
                ],
                "path": "/documentation/tabulardata/joinkind",
                "title": "JoinKind",
                "type": "enum"
              },
              {
                "title": "Creating a Row Grouping by a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/grouped(by:)-77mq2",
                "title": "func grouped<GroupingKey>(by: ColumnID<GroupingKey>) -> RowGrouping<GroupingKey>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/grouped(by:timeunit:)-7s782",
                "title": "func grouped(by: String, timeUnit: Calendar.Component) -> RowGrouping<Int>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/grouped(by:timeunit:)-78cy",
                "title": "func grouped(by: ColumnID<Date>, timeUnit: Calendar.Component) -> RowGrouping<Int>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/grouped(by:transform:)-3cr4p",
                "title": "func grouped<InputKey, GroupingKey>(by: String, transform: (InputKey?) -> GroupingKey?) -> RowGrouping<GroupingKey>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/grouped(by:transform:)-3aade",
                "title": "func grouped<InputKey, GroupingKey>(by: ColumnID<InputKey>, transform: (InputKey?) -> GroupingKey?) -> RowGrouping<GroupingKey>",
                "type": "method"
              },
              {
                "title": "Creating a Row Grouping by Multiple Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/grouped(by:)-4wcw6",
                "title": "func grouped(by: String...) -> some RowGroupingProtocol",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/grouped(by:)-6m6to",
                "title": "func grouped<T>(by: ColumnID<T>...) -> some RowGroupingProtocol",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/grouped(by:_:)",
                "title": "func grouped<T0, T1>(by: ColumnID<T0>, ColumnID<T1>) -> some RowGroupingProtocol",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/grouped(by:_:_:)",
                "title": "func grouped<T0, T1, T2>(by: ColumnID<T0>, ColumnID<T1>, ColumnID<T2>) -> some RowGroupingProtocol",
                "type": "method"
              },
              {
                "title": "Saving a Data Frame Type to a CSV Format",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/writecsv(to:options:)",
                "title": "func writeCSV(to: URL, options: CSVWritingOptions) throws",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/csvrepresentation(options:)",
                "title": "func csvRepresentation(options: CSVWritingOptions) throws -> Data",
                "type": "method"
              },
              {
                "title": "Describing a Data Frame Type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/description(options:)",
                "title": "func description(options: FormattingOptions) -> String",
                "type": "method"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/jsonrepresentation(options:)",
                "title": "func jsonRepresentation(options: JSONWritingOptions) throws -> Data",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/dataframeprotocol/writejson(to:options:)",
                "title": "func writeJSON(to: URL, options: JSONWritingOptions) throws",
                "type": "method"
              }
            ],
            "path": "/documentation/tabulardata/dataframeprotocol",
            "title": "DataFrameProtocol",
            "type": "protocol"
          },
          {
            "title": "Typed Columns",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/init(name:capacity:)",
                "title": "init(name: String, capacity: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/column/init(_:capacity:)",
                "title": "init(ColumnID<WrappedElement>, capacity: Int)",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/column/init(name:contents:)-6okx3",
                "title": "init<S>(name: String, contents: S)",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/column/init(name:contents:)-8nxtj",
                "title": "init<S>(name: String, contents: S)",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/column/init(_:contents:)-1871a",
                "title": "init<S>(ColumnID<S.Element>, contents: S)",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/column/init(_:contents:)-7z5ji",
                "title": "init<S>(ColumnID<S.Element>, contents: S)",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/column/init(_:)",
                "title": "init(ColumnSlice<WrappedElement>)",
                "type": "init"
              },
              {
                "title": "Creating a Column of the Same Type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/prototype",
                "title": "var prototype: any AnyColumnPrototype",
                "type": "property"
              },
              {
                "title": "Creating a Type-Erased Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/erasetoanycolumn()",
                "title": "func eraseToAnyColumn() -> AnyColumn",
                "type": "method"
              },
              {
                "title": "Creating Transformed Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/map(_:)",
                "title": "func map<T>((Column<WrappedElement>.Element) throws -> T?) rethrows -> Column<T>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/mapnonnil(_:)",
                "title": "func mapNonNil<T>((WrappedElement) throws -> T?) rethrows -> Column<T>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/filled(with:)",
                "title": "func filled(with: Self.WrappedElement) -> FilledColumn<Self>",
                "type": "method"
              },
              {
                "title": "Inspecting a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/column/count",
                "title": "var count: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/column/missingcount",
                "title": "var missingCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/column/element",
                "title": "Column.Element",
                "type": "typealias"
              },
              {
                "path": "/documentation/tabulardata/column/wrappedelementtype",
                "title": "var wrappedElementType: any Any.Type",
                "type": "property"
              },
              {
                "title": "Transforming a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/transform(_:)-271dd",
                "title": "func transform((WrappedElement) throws -> WrappedElement) rethrows",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/transform(_:)-6mrwg",
                "title": "func transform((Column<WrappedElement>.Element) throws -> Column<WrappedElement>.Element) rethrows",
                "type": "method"
              },
              {
                "title": "Adding Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/append(_:)-qycj",
                "title": "func append(WrappedElement)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/append(_:)-4t2pt",
                "title": "func append(Column<WrappedElement>.Element)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/append(contentsof:)-qb4p",
                "title": "func append<S>(contentsOf: S)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/append(contentsof:)-42y1d",
                "title": "func append<S>(contentsOf: S)",
                "type": "method"
              },
              {
                "title": "Finding an Element Index",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/argmin()",
                "title": "func argmin() -> Int?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/argmax()",
                "title": "func argmax() -> Int?",
                "type": "method"
              },
              {
                "title": "Removing an Element",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/remove(at:)",
                "title": "func remove(at: Int)",
                "type": "method"
              },
              {
                "title": "Accessing Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/subscript(_:)-qm4d",
                "title": "subscript(Int) -> Column<WrappedElement>.Element",
                "type": "subscript"
              },
              {
                "path": "/documentation/tabulardata/column/subscript(_:)-52xy1",
                "title": "subscript<R>(R) -> ColumnSlice<WrappedElement>",
                "type": "subscript"
              },
              {
                "path": "/documentation/tabulardata/column/subscript(_:)-gne9",
                "title": "subscript(Range<Int>) -> ColumnSlice<WrappedElement>",
                "type": "subscript"
              },
              {
                "title": "Creating a Slice of Unique Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/distinct()",
                "title": "func distinct() -> DiscontiguousColumnSlice<WrappedElement>",
                "type": "method"
              },
              {
                "title": "Creating a Slice by Masking Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/subscript(_:)-56i2s",
                "title": "subscript<C>(C) -> DiscontiguousColumnSlice<WrappedElement>",
                "type": "subscript"
              },
              {
                "title": "Encoding a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/encoded(using:)",
                "title": "func encoded<Encoder>(using: Encoder) throws -> Column<Encoder.Output>",
                "type": "method"
              },
              {
                "title": "Decoding a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/decoded(_:using:)",
                "title": "func decoded<T, Decoder>(T.Type, using: Decoder) throws -> Column<T>",
                "type": "method"
              },
              {
                "title": "Summarizing a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/summary()",
                "title": "func summary() -> CategoricalSummary<WrappedElement>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/numericsummary()-2m0sr",
                "title": "func numericSummary() -> NumericSummary<Double>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/numericsummary()-8laeo",
                "title": "func numericSummary() -> NumericSummary<WrappedElement>",
                "type": "method"
              },
              {
                "title": "Getting Statistical Values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/sum()",
                "title": "func sum() -> WrappedElement",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/min()",
                "title": "func min() -> Column<WrappedElement>.Element",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/max()",
                "title": "func max() -> Column<WrappedElement>.Element",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/mean()-2si7j",
                "title": "func mean() -> Double?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/mean()-ic5z",
                "title": "func mean() -> Column<WrappedElement>.Element",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/standarddeviation(deltadegreesoffreedom:)-9ffqu",
                "title": "func standardDeviation(deltaDegreesOfFreedom: Int) -> Double?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/standarddeviation(deltadegreesoffreedom:)-4kc16",
                "title": "func standardDeviation(deltaDegreesOfFreedom: Int) -> Column<WrappedElement>.Element",
                "type": "method"
              },
              {
                "title": "Describing a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/column/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/column/description(options:)",
                "title": "func description(options: FormattingOptions) -> String",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/custommirror",
                "title": "var customMirror: Mirror",
                "type": "property"
              },
              {
                "title": "Comparing Two Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Modifying a Column with a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/+=(_:_:)-94q8g",
                "title": "static func += (inout Column<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/-=(_:_:)-8arlr",
                "title": "static func -= (inout Column<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/*=(_:_:)-4rraw",
                "title": "static func *= (inout Column<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/_=(_:_:)-8jmir",
                "title": "static func /= (inout Column<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/_=(_:_:)-3hfr5",
                "title": "static func /= (inout Column<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "title": "Modifying a Column with a Collection of Values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/+=(_:_:)-2w5o4",
                "title": "static func += <C>(inout Column<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/+=(_:_:)-2scuy",
                "title": "static func += <C>(inout Column<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/-=(_:_:)-8rgjq",
                "title": "static func -= <C>(inout Column<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/-=(_:_:)-3v0hh",
                "title": "static func -= <C>(inout Column<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/*=(_:_:)-8mmnn",
                "title": "static func *= <C>(inout Column<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/*=(_:_:)-6kp11",
                "title": "static func *= <C>(inout Column<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/_=(_:_:)-dnma",
                "title": "static func /= <C>(inout Column<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/_=(_:_:)-8xhzg",
                "title": "static func /= <C>(inout Column<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/_=(_:_:)-86t1j",
                "title": "static func /= <C>(inout Column<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/_=(_:_:)-3acz8",
                "title": "static func /= <C>(inout Column<WrappedElement>, C)",
                "type": "op"
              },
              {
                "title": "Generating a Column by Combining Two Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/+(_:_:)-3hy3o",
                "title": "static func + (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/-(_:_:)-9ltja",
                "title": "static func - (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/*(_:_:)-8n0od",
                "title": "static func * (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/_(_:_:)-2bk2d",
                "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/_(_:_:)-8jh9v",
                "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Adding a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/+(_:_:)-9v8t0",
                "title": "static func + (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/+(_:_:)-579cq",
                "title": "static func + (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/+(_:_:)-7jy9x",
                "title": "static func + (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/+(_:_:)-8uo1v",
                "title": "static func + (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Subtracting a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/-(_:_:)-6xjm8",
                "title": "static func - (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/-(_:_:)-9dgkf",
                "title": "static func - (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/-(_:_:)-5zgbu",
                "title": "static func - (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/-(_:_:)-326lu",
                "title": "static func - (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Multiplying a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/*(_:_:)-8ndcj",
                "title": "static func * (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/*(_:_:)-3dm6q",
                "title": "static func * (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Dividing a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/_(_:_:)-60cwp",
                "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/_(_:_:)-7or0v",
                "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/_(_:_:)-1rwra",
                "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/column/_(_:_:)-2p0ex",
                "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/withcontiguousmutablestorageifavailable(_:)-9j9p8",
                "title": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<WrappedElement>) throws -> R) rethrows -> R?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/column/withcontiguousstorageifavailable(_:)-6nbz3",
                "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<WrappedElement>) throws -> R) rethrows -> R?",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/column/index",
                "title": "Column.Index",
                "type": "typealias"
              },
              {
                "path": "/documentation/tabulardata/column/indices",
                "title": "Column.Indices",
                "type": "typealias"
              },
              {
                "path": "/documentation/tabulardata/column/iterator",
                "title": "Column.Iterator",
                "type": "typealias"
              },
              {
                "path": "/documentation/tabulardata/column/subsequence",
                "title": "Column.SubSequence",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/endindex",
                    "title": "var endIndex: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/column/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/column/startindex",
                    "title": "var startIndex: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/difference(from:)",
                    "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/distance(from:to:)",
                    "title": "func distance(from: Self.Index, to: Self.Index) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/index(_:offsetby:)",
                    "title": "func index(Self.Index, offsetBy: Int) -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/index(after:)",
                    "title": "func index(after: Int) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/index(before:)",
                    "title": "func index(before: Int) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/lastindex(of:)",
                    "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/subscript(_:)-gne9",
                    "title": "subscript(Range<Int>) -> ColumnSlice<WrappedElement>",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/column/subscript(_:)-qm4d",
                    "title": "subscript(Int) -> Column<WrappedElement>.Element",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/tabulardata/column/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/column/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/column/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/contains(_:)-8x9os",
                    "title": "func contains<C>(C) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/firstindex(of:)",
                    "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/firstrange(of:)",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/index(of:)",
                    "title": "func index(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/indices(of:)",
                    "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/map(_:)-17z9l",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/ranges(of:)",
                    "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/split(separator:maxsplits:omittingemptysubsequences:)-1ev39",
                    "title": "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/split(separator:maxsplits:omittingemptysubsequences:)-3x7gw",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/trimmingprefix(_:)",
                    "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/subscript(_:)-2eycv",
                    "title": "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/tabulardata/column/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/+(_:_:)-579cq",
                    "title": "static func + (Self.Element, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/+(_:_:)-9v8t0",
                    "title": "static func + (Self, Self.Element) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/-(_:_:)-6xjm8",
                    "title": "static func - (Self, Self.Element) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/-(_:_:)-9dgkf",
                    "title": "static func - (Self.Element, Self) -> Column<Self.Element>",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/column/columnprotocol-implementations",
                "title": "ColumnProtocol Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/column/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/custommirror",
                    "title": "var customMirror: Mirror",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/column/customreflectable-implementations",
                "title": "CustomReflectable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/column/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/init(from:)",
                    "title": "init(from: any Decoder) throws",
                    "type": "init"
                  }
                ],
                "path": "/documentation/tabulardata/column/decodable-implementations",
                "title": "Decodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/encode(to:)",
                    "title": "func encode(to: any Encoder) throws",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/column/encodable-implementations",
                "title": "Encodable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/==(_:_:)",
                    "title": "static func == (Column<WrappedElement>, Column<WrappedElement>) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/column/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/column/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/movesubranges(_:to:)",
                    "title": "func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/partition(by:)-7sneq",
                    "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/partition(by:)-li",
                    "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/reverse()",
                    "title": "func reverse()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/shuffle()",
                    "title": "func shuffle()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/shuffle(using:)",
                    "title": "func shuffle<T>(using: inout T)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/sort(by:)",
                    "title": "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/sort(using:)-22f7y",
                    "title": "func sort<S, Comparator>(using: S)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/sort(using:)-91ejq",
                    "title": "func sort<Comparator>(using: Comparator)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/swapat(_:_:)",
                    "title": "func swapAt(Self.Index, Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/withcontiguousmutablestorageifavailable(_:)-30xzy",
                    "title": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/withcontiguousmutablestorageifavailable(_:)-77itz",
                    "title": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<WrappedElement?>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/column/mutablecollection-implementations",
                "title": "MutableCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/*(_:_:)-3dm6q",
                    "title": "static func * (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/*(_:_:)-8n0od",
                    "title": "static func * (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/*(_:_:)-8ndcj",
                    "title": "static func * (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/+(_:_:)-3hy3o",
                    "title": "static func + (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/+(_:_:)-7jy9x",
                    "title": "static func + (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/+(_:_:)-8uo1v",
                    "title": "static func + (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/-(_:_:)-326lu",
                    "title": "static func - (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/-(_:_:)-5zgbu",
                    "title": "static func - (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/-(_:_:)-9ltja",
                    "title": "static func - (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/_(_:_:)-1rwra",
                    "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/_(_:_:)-2bk2d",
                    "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/_(_:_:)-2p0ex",
                    "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/_(_:_:)-60cwp",
                    "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/_(_:_:)-7or0v",
                    "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/column/_(_:_:)-8jh9v",
                    "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/description(options:)",
                    "title": "func description(options: FormattingOptions) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/filled(with:)",
                    "title": "func filled(with: Self.WrappedElement) -> FilledColumn<Self>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/column/optionalcolumnprotocol-implementations",
                "title": "OptionalColumnProtocol Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/column/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/column/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/contains(_:)-7lveu",
                    "title": "func contains(Self.Element) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/elementsequal(_:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/flatmap(_:)-6c3wd",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/flatmap(_:)-9y1gq",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/map(_:)-7twqc",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/sorted(using:)-2l911",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/sorted(using:)-n9gw",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/split(separator:maxsplits:omittingemptysubsequences:)-2v8kz",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/starts(with:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/withcontiguousstorageifavailable(_:)-539v3",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<WrappedElement?>) throws -> R) rethrows -> R?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/column/withcontiguousstorageifavailable(_:)-wj2z",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/column/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/column",
            "title": "Column",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/init(_:)",
                "title": "init(Column<WrappedElement>)",
                "type": "init"
              },
              {
                "title": "Creating a Slice of Unique Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/distinct()",
                "title": "func distinct() -> DiscontiguousColumnSlice<WrappedElement>",
                "type": "method"
              },
              {
                "title": "Creating a Type-Erased Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/erasetoanycolumn()",
                "title": "func eraseToAnyColumn() -> AnyColumnSlice",
                "type": "method"
              },
              {
                "title": "Creating a Column of the Same Type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/prototype",
                "title": "var prototype: any AnyColumnPrototype",
                "type": "property"
              },
              {
                "title": "Creating Transformed Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/map(_:)",
                "title": "func map<T>((ColumnSlice<WrappedElement>.Element) throws -> T?) rethrows -> Column<T>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/columnslice/filled(with:)",
                "title": "func filled(with: Self.WrappedElement) -> FilledColumn<Self>",
                "type": "method"
              },
              {
                "title": "Inspecting a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/columnslice/count",
                "title": "var count: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/columnslice/wrappedelementtype",
                "title": "var wrappedElementType: any Any.Type",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/columnslice/argmin()",
                "title": "func argmin() -> Int?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/columnslice/argmax()",
                "title": "func argmax() -> Int?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/columnslice/isnil(at:)",
                "title": "func isNil(at: Int) -> Bool",
                "type": "method"
              },
              {
                "title": "Accessing Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/subscript(_:)-38hn8",
                "title": "subscript(Int) -> ColumnSlice<WrappedElement>.Element",
                "type": "subscript"
              },
              {
                "path": "/documentation/tabulardata/columnslice/subscript(_:)-7lrhk",
                "title": "subscript(Range<Int>) -> ColumnSlice<WrappedElement>",
                "type": "subscript"
              },
              {
                "title": "Summarizing a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/summary()",
                "title": "func summary() -> CategoricalSummary<WrappedElement>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/columnslice/numericsummary()-68ohj",
                "title": "func numericSummary() -> NumericSummary<Double>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/columnslice/numericsummary()-5swa5",
                "title": "func numericSummary() -> NumericSummary<WrappedElement>",
                "type": "method"
              },
              {
                "title": "Getting Statistical Values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/sum()",
                "title": "func sum() -> WrappedElement",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/columnslice/min()",
                "title": "func min() -> ColumnSlice<WrappedElement>.Element",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/columnslice/max()",
                "title": "func max() -> ColumnSlice<WrappedElement>.Element",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/columnslice/mean()-3inzf",
                "title": "func mean() -> Double?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/columnslice/mean()-7u3i0",
                "title": "func mean() -> ColumnSlice<WrappedElement>.Element",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/columnslice/standarddeviation(deltadegreesoffreedom:)-1i05i",
                "title": "func standardDeviation(deltaDegreesOfFreedom: Int) -> Double?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/columnslice/standarddeviation(deltadegreesoffreedom:)-3d6vo",
                "title": "func standardDeviation(deltaDegreesOfFreedom: Int) -> ColumnSlice<WrappedElement>.Element",
                "type": "method"
              },
              {
                "title": "Describing a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/columnslice/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/columnslice/description(options:)",
                "title": "func description(options: FormattingOptions) -> String",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/columnslice/custommirror",
                "title": "var customMirror: Mirror",
                "type": "property"
              },
              {
                "title": "Comparing Two Column Slices",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/==(_:_:)",
                "title": "static func == (ColumnSlice<WrappedElement>, ColumnSlice<WrappedElement>) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Modifying a Column Slice with a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/+=(_:_:)-950qi",
                "title": "static func += (inout ColumnSlice<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/-=(_:_:)-1n1gh",
                "title": "static func -= (inout ColumnSlice<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/*=(_:_:)-i6qs",
                "title": "static func *= (inout ColumnSlice<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/_=(_:_:)-8oi36",
                "title": "static func /= (inout ColumnSlice<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/_=(_:_:)-8pl3f",
                "title": "static func /= (inout ColumnSlice<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "title": "Modifying a Column Slice with a Collection of Values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/+=(_:_:)-47cwm",
                "title": "static func += <C>(inout ColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/+=(_:_:)-4bgdt",
                "title": "static func += <C>(inout ColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/-=(_:_:)-3kauw",
                "title": "static func -= <C>(inout ColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/-=(_:_:)-1bqy4",
                "title": "static func -= <C>(inout ColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/*=(_:_:)-7lz8l",
                "title": "static func *= <C>(inout ColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/*=(_:_:)-3v2q0",
                "title": "static func *= <C>(inout ColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/_=(_:_:)-46jci",
                "title": "static func /= <C>(inout ColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/_=(_:_:)-8frqe",
                "title": "static func /= <C>(inout ColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/_=(_:_:)-1fciw",
                "title": "static func /= <C>(inout ColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/_=(_:_:)-6ujes",
                "title": "static func /= <C>(inout ColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "title": "Generating a Column by Combining Two Column Slices",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/+(_:_:)-3mep5",
                "title": "static func + (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/-(_:_:)-6dkqb",
                "title": "static func - (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/*(_:_:)-hl25",
                "title": "static func * (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/_(_:_:)-3so2z",
                "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/_(_:_:)-4125n",
                "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Adding a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/+(_:_:)-2l5ok",
                "title": "static func + (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/+(_:_:)-3xsx4",
                "title": "static func + (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/+(_:_:)-4bxn6",
                "title": "static func + (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/+(_:_:)-ooqt",
                "title": "static func + (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Subtracting a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/-(_:_:)-26wtz",
                "title": "static func - (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/-(_:_:)-nkha",
                "title": "static func - (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/-(_:_:)-8z15n",
                "title": "static func - (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/-(_:_:)-5mbpd",
                "title": "static func - (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Multiplying a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/*(_:_:)-4sw7w",
                "title": "static func * (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/*(_:_:)-86zas",
                "title": "static func * (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Dividing a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/_(_:_:)-8n9gx",
                "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/_(_:_:)-1oxxv",
                "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/_(_:_:)-992oe",
                "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnslice/_(_:_:)-esxm",
                "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Hashing a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Supporting Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/element",
                "title": "ColumnSlice.Element",
                "type": "typealias"
              },
              {
                "path": "/documentation/tabulardata/columnslice/index",
                "title": "ColumnSlice.Index",
                "type": "typealias"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/missingcount",
                "title": "var missingCount: Int",
                "type": "property"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnslice/indices",
                "title": "ColumnSlice.Indices",
                "type": "typealias"
              },
              {
                "path": "/documentation/tabulardata/columnslice/iterator",
                "title": "ColumnSlice.Iterator",
                "type": "typealias"
              },
              {
                "path": "/documentation/tabulardata/columnslice/subsequence",
                "title": "ColumnSlice.SubSequence",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/endindex",
                    "title": "var endIndex: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/startindex",
                    "title": "var startIndex: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/difference(from:)",
                    "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/distance(from:to:)",
                    "title": "func distance(from: Self.Index, to: Self.Index) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/index(_:offsetby:)",
                    "title": "func index(Self.Index, offsetBy: Int) -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/index(after:)",
                    "title": "func index(after: Int) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/index(before:)",
                    "title": "func index(before: Int) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/lastindex(of:)",
                    "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/poplast()",
                    "title": "func popLast() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/removelast()",
                    "title": "func removeLast() -> Self.Element",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/removelast(_:)",
                    "title": "func removeLast(Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/subscript(_:)-38hn8",
                    "title": "subscript(Int) -> ColumnSlice<WrappedElement>.Element",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/subscript(_:)-7lrhk",
                    "title": "subscript(Range<Int>) -> ColumnSlice<WrappedElement>",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/tabulardata/columnslice/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/count-89q2u",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/contains(_:)-7u7b2",
                    "title": "func contains<C>(C) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/firstindex(of:)",
                    "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/firstrange(of:)",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/index(of:)",
                    "title": "func index(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/indices(of:)",
                    "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/map(_:)-5qic9",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/popfirst()",
                    "title": "func popFirst() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/ranges(of:)",
                    "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/removefirst()",
                    "title": "func removeFirst() -> Self.Element",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/removefirst(_:)",
                    "title": "func removeFirst(Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/split(separator:maxsplits:omittingemptysubsequences:)-25tcz",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/split(separator:maxsplits:omittingemptysubsequences:)-8pp7i",
                    "title": "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/trimprefix(_:)",
                    "title": "func trimPrefix<Prefix>(Prefix)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/trimprefix(while:)",
                    "title": "func trimPrefix(while: (Self.Element) throws -> Bool) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/trimmingprefix(_:)",
                    "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/subscript(_:)-n8jc",
                    "title": "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/tabulardata/columnslice/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/+(_:_:)-2l5ok",
                    "title": "static func + (Self, Self.Element) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/+(_:_:)-4bxn6",
                    "title": "static func + (Self.Element, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/-(_:_:)-26wtz",
                    "title": "static func - (Self, Self.Element) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/-(_:_:)-8z15n",
                    "title": "static func - (Self.Element, Self) -> Column<Self.Element>",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/columnslice/columnprotocol-implementations",
                "title": "ColumnProtocol Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/columnslice/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/custommirror",
                    "title": "var customMirror: Mirror",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/columnslice/customreflectable-implementations",
                "title": "CustomReflectable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/columnslice/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/==(_:_:)",
                    "title": "static func == (ColumnSlice<WrappedElement>, ColumnSlice<WrappedElement>) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/columnslice/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/columnslice/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/movesubranges(_:to:)",
                    "title": "func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/partition(by:)-5cldl",
                    "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/partition(by:)-5nzbc",
                    "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/reverse()",
                    "title": "func reverse()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/shuffle()",
                    "title": "func shuffle()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/shuffle(using:)",
                    "title": "func shuffle<T>(using: inout T)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/sort(by:)",
                    "title": "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/sort(using:)-65eef",
                    "title": "func sort<S, Comparator>(using: S)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/sort(using:)-8zuii",
                    "title": "func sort<Comparator>(using: Comparator)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/swapat(_:_:)",
                    "title": "func swapAt(Self.Index, Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/withcontiguousmutablestorageifavailable(_:)",
                    "title": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/columnslice/mutablecollection-implementations",
                "title": "MutableCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/*(_:_:)-4sw7w",
                    "title": "static func * (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/*(_:_:)-86zas",
                    "title": "static func * (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/*(_:_:)-hl25",
                    "title": "static func * (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/+(_:_:)-3mep5",
                    "title": "static func + (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/+(_:_:)-3xsx4",
                    "title": "static func + (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/+(_:_:)-ooqt",
                    "title": "static func + (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/-(_:_:)-5mbpd",
                    "title": "static func - (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/-(_:_:)-6dkqb",
                    "title": "static func - (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/-(_:_:)-nkha",
                    "title": "static func - (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/_(_:_:)-1oxxv",
                    "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/_(_:_:)-3so2z",
                    "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/_(_:_:)-4125n",
                    "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/_(_:_:)-8n9gx",
                    "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/_(_:_:)-992oe",
                    "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/_(_:_:)-esxm",
                    "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/description(options:)",
                    "title": "func description(options: FormattingOptions) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/filled(with:)",
                    "title": "func filled(with: Self.WrappedElement) -> FilledColumn<Self>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/columnslice/optionalcolumnprotocol-implementations",
                "title": "OptionalColumnProtocol Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/contains(_:)-2l8hr",
                    "title": "func contains(Self.Element) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/elementsequal(_:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/flatmap(_:)-3irht",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/flatmap(_:)-5zrgc",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/map(_:)-3utho",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/sorted(using:)-9mqvj",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/sorted(using:)-9wu9u",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/split(separator:maxsplits:omittingemptysubsequences:)-9muyu",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/starts(with:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/columnslice/withcontiguousstorageifavailable(_:)",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/columnslice/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/columnslice",
            "title": "ColumnSlice",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Inspecting a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "title": "Finding an Element Index",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/argmin()",
                "title": "func argmin() -> Base.Index?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/argmax()",
                "title": "func argmax() -> FilledColumn<Base>.Index?",
                "type": "method"
              },
              {
                "title": "Accessing Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/subscript(_:)",
                "title": "subscript(Base.Index) -> Base.WrappedElement",
                "type": "subscript"
              },
              {
                "title": "Summarizing a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/summary()",
                "title": "func summary() -> CategoricalSummary<FilledColumn<Base>.WrappedElement>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/numericsummary()-3ao8s",
                "title": "func numericSummary() -> NumericSummary<Double>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/numericsummary()-86mgh",
                "title": "func numericSummary() -> NumericSummary<Base.WrappedElement>",
                "type": "method"
              },
              {
                "title": "Getting Statistical Values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/sum()-5836l",
                "title": "func sum() -> FilledColumn<Base>.Element",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/sum()-2805h",
                "title": "func sum() -> FilledColumn<Base>.Element",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/min()",
                "title": "func min() -> FilledColumn<Base>.Element?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/max()",
                "title": "func max() -> FilledColumn<Base>.Element?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/mean()-8xs60",
                "title": "func mean() -> Double?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/mean()-jd3v",
                "title": "func mean() -> FilledColumn<Base>.Element?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/standarddeviation(deltadegreesoffreedom:)-4cofd",
                "title": "func standardDeviation(deltaDegreesOfFreedom: Int) -> Double?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/standarddeviation(deltadegreesoffreedom:)-27xnl",
                "title": "func standardDeviation(deltaDegreesOfFreedom: Int) -> FilledColumn<Base>.Element?",
                "type": "method"
              },
              {
                "title": "Describing a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/description(options:)",
                "title": "func description(options: FormattingOptions) -> String",
                "type": "method"
              },
              {
                "title": "Generating a Column by Combining Two Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/+(_:_:)-8qqh",
                "title": "static func + (Self, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/-(_:_:)-bzdl",
                "title": "static func - (Self, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/*(_:_:)-6fyqv",
                "title": "static func * (Self, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-9h88r",
                "title": "static func / (Self, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-82d1w",
                "title": "static func / (Self, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Adding a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/+(_:_:)-9slnq",
                "title": "static func + (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/+(_:_:)-57z7f",
                "title": "static func + (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Subtracting a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/-(_:_:)-13zcw",
                "title": "static func - (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/-(_:_:)-2zphx",
                "title": "static func - (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Multiplying a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/*(_:_:)-42o3q",
                "title": "static func * (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/*(_:_:)-6hhwp",
                "title": "static func * (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Dividing a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-7ayat",
                "title": "static func / (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-4yo70",
                "title": "static func / (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-55imm",
                "title": "static func / (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-74b1",
                "title": "static func / (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "title": "Comparing a Column with a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/==(_:_:)-3bp46",
                "title": "static func == (Self, Self.Element) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/==(_:_:)-3qine",
                "title": "static func == (Self.Element, Self) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/!=(_:_:)-9l73c",
                "title": "static func != (Self, Self.Element) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/!=(_:_:)-twj1",
                "title": "static func != (Self.Element, Self) -> [Bool]",
                "type": "op"
              },
              {
                "title": "Supporting Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/element",
                "title": "FilledColumn.Element",
                "type": "typealias"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/wrappedelement",
                "title": "FilledColumn.WrappedElement",
                "type": "typealias"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/index",
                "title": "FilledColumn.Index",
                "type": "typealias"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/indices",
                "title": "FilledColumn.Indices",
                "type": "typealias"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/iterator",
                "title": "FilledColumn.Iterator",
                "type": "typealias"
              },
              {
                "path": "/documentation/tabulardata/filledcolumn/subsequence",
                "title": "FilledColumn.SubSequence",
                "type": "typealias"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/difference(from:)",
                    "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/distance(from:to:)",
                    "title": "func distance(from: Self.Index, to: Self.Index) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/firstrange(of:)-38013",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/index(_:offsetby:)",
                    "title": "func index(Self.Index, offsetBy: Int) -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/joined(separator:)-9l6bv",
                    "title": "func joined(separator: String) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/lastindex(of:)",
                    "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/filledcolumn/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/indices-swift.property",
                    "title": "var indices: DefaultIndices<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/contains(_:)-7w4rz",
                    "title": "func contains<C>(C) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/firstindex(of:)",
                    "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/firstrange(of:)-benx",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/index(of:)",
                    "title": "func index(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/indices(of:)",
                    "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/map(_:)-21ef8",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/ranges(of:)",
                    "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/split(separator:maxsplits:omittingemptysubsequences:)-1wxgg",
                    "title": "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/split(separator:maxsplits:omittingemptysubsequences:)-62cm4",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/trimmingprefix(_:)",
                    "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/filledcolumn/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/!=(_:_:)-9l73c",
                    "title": "static func != (Self, Self.Element) -> [Bool]",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/!=(_:_:)-twj1",
                    "title": "static func != (Self.Element, Self) -> [Bool]",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/*(_:_:)-42o3q",
                    "title": "static func * (Self, Self.Element) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/*(_:_:)-6fyqv",
                    "title": "static func * (Self, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/*(_:_:)-6hhwp",
                    "title": "static func * (Self.Element, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/+(_:_:)-57z7f",
                    "title": "static func + (Self.Element, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/+(_:_:)-8qqh",
                    "title": "static func + (Self, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/+(_:_:)-9slnq",
                    "title": "static func + (Self, Self.Element) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/-(_:_:)-13zcw",
                    "title": "static func - (Self, Self.Element) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/-(_:_:)-2zphx",
                    "title": "static func - (Self.Element, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/-(_:_:)-bzdl",
                    "title": "static func - (Self, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/==(_:_:)-3bp46",
                    "title": "static func == (Self, Self.Element) -> [Bool]",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/==(_:_:)-3qine",
                    "title": "static func == (Self.Element, Self) -> [Bool]",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-4yo70",
                    "title": "static func / (Self.Element, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-55imm",
                    "title": "static func / (Self, Self.Element) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-5ffst",
                    "title": "static func < (Self.Element, Self) -> [Bool]",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-5ibhk",
                    "title": "static func > (Self, Self.Element) -> [Bool]",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-6qyci",
                    "title": "static func > (Self.Element, Self) -> [Bool]",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-74b1",
                    "title": "static func / (Self.Element, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-7ayat",
                    "title": "static func / (Self, Self.Element) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-7dsly",
                    "title": "static func < (Self, Self.Element) -> [Bool]",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-82d1w",
                    "title": "static func / (Self, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_(_:_:)-9h88r",
                    "title": "static func / (Self, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_=(_:_:)-4f33d",
                    "title": "static func >= (Self, Self.Element) -> [Bool]",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_=(_:_:)-4jpgp",
                    "title": "static func <= (Self.Element, Self) -> [Bool]",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_=(_:_:)-5sl05",
                    "title": "static func <= (Self, Self.Element) -> [Bool]",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/_=(_:_:)-5u5vu",
                    "title": "static func >= (Self.Element, Self) -> [Bool]",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/filledcolumn/columnprotocol-implementations",
                "title": "ColumnProtocol Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/filledcolumn/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/contains(_:)-86znp",
                    "title": "func contains(Self.Element) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/elementsequal(_:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/filter(_:)",
                    "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/flatmap(_:)-28fxz",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/flatmap(_:)-4cljy",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/formatted()",
                    "title": "func formatted() -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/joined()",
                    "title": "func joined() -> FlattenSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/joined(separator:)-1fxji",
                    "title": "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/joined(separator:)-8wfe6",
                    "title": "func joined(separator: String) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/lexicographicallyprecedes(_:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/map(_:)-8hf4v",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/max()-4ilyr",
                    "title": "func max() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/min()-8lyjh",
                    "title": "func min() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/sorted()",
                    "title": "func sorted() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/sorted(using:)-3jd1",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/sorted(using:)-4la1g",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/split(separator:maxsplits:omittingemptysubsequences:)-9oylo",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/starts(with:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/filledcolumn/withcontiguousstorageifavailable(_:)",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/filledcolumn/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/filledcolumn",
            "title": "FilledColumn",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/init(_:)",
                "title": "init(Column<WrappedElement>)",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/init(column:ranges:)",
                "title": "init(column: Column<WrappedElement>, ranges: [Range<Int>])",
                "type": "init"
              },
              {
                "title": "Creating a Slice of Unique Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/distinct()",
                "title": "func distinct() -> DiscontiguousColumnSlice<WrappedElement>",
                "type": "method"
              },
              {
                "title": "Creating a Type-Erased Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/erasetoanycolumn()",
                "title": "func eraseToAnyColumn() -> AnyColumnSlice",
                "type": "method"
              },
              {
                "title": "Creating a Column of the Same Type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/prototype",
                "title": "var prototype: any AnyColumnPrototype",
                "type": "property"
              },
              {
                "title": "Creating Transformed Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/map(_:)",
                "title": "func map<T>((DiscontiguousColumnSlice<WrappedElement>.Element) throws -> T?) rethrows -> Column<T>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/filled(with:)",
                "title": "func filled(with: Self.WrappedElement) -> FilledColumn<Self>",
                "type": "method"
              },
              {
                "title": "Inspecting a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/count",
                "title": "var count: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/wrappedelementtype",
                "title": "var wrappedElementType: any Any.Type",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/argmin()",
                "title": "func argmin() -> Int?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/argmax()",
                "title": "func argmax() -> Int?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/isnil(at:)",
                "title": "func isNil(at: Int) -> Bool",
                "type": "method"
              },
              {
                "title": "Accessing Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/subscript(_:)-9y37v",
                "title": "subscript(Int) -> DiscontiguousColumnSlice<WrappedElement>.Element",
                "type": "subscript"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/subscript(_:)-8rd2f",
                "title": "subscript(Range<Int>) -> DiscontiguousColumnSlice<WrappedElement>",
                "type": "subscript"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/subscript(_:)-4k2lh",
                "title": "subscript<R>(R) -> DiscontiguousColumnSlice<WrappedElement>",
                "type": "subscript"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/subscript(_:)-5xvit",
                "title": "subscript((UnboundedRange_) -> ()) -> DiscontiguousColumnSlice<WrappedElement>",
                "type": "subscript"
              },
              {
                "title": "Summarizing a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/summary()",
                "title": "func summary() -> CategoricalSummary<WrappedElement>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/numericsummary()-3r7pn",
                "title": "func numericSummary() -> NumericSummary<Double>",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/numericsummary()-4b7m0",
                "title": "func numericSummary() -> NumericSummary<WrappedElement>",
                "type": "method"
              },
              {
                "title": "Getting Statistical Values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/sum()",
                "title": "func sum() -> WrappedElement",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/min()",
                "title": "func min() -> DiscontiguousColumnSlice<WrappedElement>.Element",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/max()",
                "title": "func max() -> DiscontiguousColumnSlice<WrappedElement>.Element",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/mean()-3y11c",
                "title": "func mean() -> DiscontiguousColumnSlice<WrappedElement>.Element",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/mean()-49u93",
                "title": "func mean() -> Double?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/standarddeviation(deltadegreesoffreedom:)-36nx2",
                "title": "func standardDeviation(deltaDegreesOfFreedom: Int) -> Double?",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/standarddeviation(deltadegreesoffreedom:)-5vd4r",
                "title": "func standardDeviation(deltaDegreesOfFreedom: Int) -> DiscontiguousColumnSlice<WrappedElement>.Element",
                "type": "method"
              },
              {
                "title": "Describing a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/description(options:)",
                "title": "func description(options: FormattingOptions) -> String",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/custommirror",
                "title": "var customMirror: Mirror",
                "type": "property"
              },
              {
                "title": "Comparing Two Column Slices",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/==(_:_:)",
                "title": "static func == (DiscontiguousColumnSlice<WrappedElement>, DiscontiguousColumnSlice<WrappedElement>) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Modifying a Column Slice with a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/+=(_:_:)-1mzz0",
                "title": "static func += (inout DiscontiguousColumnSlice<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/-=(_:_:)-2yrui",
                "title": "static func -= (inout DiscontiguousColumnSlice<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/*=(_:_:)-7gcqc",
                "title": "static func *= (inout DiscontiguousColumnSlice<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/_=(_:_:)-1g0yb",
                "title": "static func /= (inout DiscontiguousColumnSlice<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/_=(_:_:)-6i7hx",
                "title": "static func /= (inout DiscontiguousColumnSlice<WrappedElement>, WrappedElement)",
                "type": "op"
              },
              {
                "title": "Modifying a Column Slice with a Collection of Values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/+=(_:_:)-2jxz1",
                "title": "static func += <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/+=(_:_:)-lpai",
                "title": "static func += <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/-=(_:_:)-9nkq6",
                "title": "static func -= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/-=(_:_:)-8a20q",
                "title": "static func -= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/*=(_:_:)-9jg9h",
                "title": "static func *= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/*=(_:_:)-18nlr",
                "title": "static func *= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/_=(_:_:)-6xf9s",
                "title": "static func /= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/_=(_:_:)-1mzcg",
                "title": "static func /= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/_=(_:_:)-39wsi",
                "title": "static func /= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/_=(_:_:)-6lzj",
                "title": "static func /= <C>(inout DiscontiguousColumnSlice<WrappedElement>, C)",
                "type": "op"
              },
              {
                "title": "Generating a Column by Combining Two Column Slices",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/+(_:_:)-7swqp",
                "title": "static func + (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/-(_:_:)-2hf72",
                "title": "static func - (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/*(_:_:)-2tbo9",
                "title": "static func * (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/_(_:_:)-1e5kt",
                "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/_(_:_:)-6dcws",
                "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Adding a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/+(_:_:)-75xxw",
                "title": "static func + (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/+(_:_:)-2qwr7",
                "title": "static func + (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/+(_:_:)-2ba70",
                "title": "static func + (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/+(_:_:)-77c23",
                "title": "static func + (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Subtracting a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/-(_:_:)-2vlsk",
                "title": "static func - (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/-(_:_:)-1ynwr",
                "title": "static func - (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/-(_:_:)-hqv5",
                "title": "static func - (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/-(_:_:)-5nwcb",
                "title": "static func - (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Multiplying a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/*(_:_:)-8faxs",
                "title": "static func * (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/*(_:_:)-3dsxf",
                "title": "static func * (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Dividing a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/_(_:_:)-51brc",
                "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/_(_:_:)-3bul1",
                "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/_(_:_:)-29za6",
                "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/_(_:_:)-80g7i",
                "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Hashing a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Supporting Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/element",
                "title": "DiscontiguousColumnSlice.Element",
                "type": "typealias"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/index",
                "title": "DiscontiguousColumnSlice.Index",
                "type": "typealias"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/discontiguouscolumnslice/missingcount",
                "title": "var missingCount: Int",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/endindex",
                    "title": "var endIndex: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/startindex",
                    "title": "var startIndex: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/difference(from:)",
                    "title": "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/distance(from:to:)",
                    "title": "func distance(from: Self.Index, to: Self.Index) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/index(_:offsetby:)",
                    "title": "func index(Self.Index, offsetBy: Int) -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/index(after:)",
                    "title": "func index(after: Int) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/index(before:)",
                    "title": "func index(before: Int) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/lastindex(of:)",
                    "title": "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/poplast()",
                    "title": "func popLast() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/removelast()",
                    "title": "func removeLast() -> Self.Element",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/removelast(_:)",
                    "title": "func removeLast(Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/subscript(_:)-8rd2f",
                    "title": "subscript(Range<Int>) -> DiscontiguousColumnSlice<WrappedElement>",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/subscript(_:)-9y37v",
                    "title": "subscript(Int) -> DiscontiguousColumnSlice<WrappedElement>.Element",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/tabulardata/discontiguouscolumnslice/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/count",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/count-61id8",
                    "title": "var count: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/indices-swift.property",
                    "title": "var indices: DefaultIndices<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/contains(_:)-2xkjf",
                    "title": "func contains<C>(C) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/firstindex(of:)",
                    "title": "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/firstrange(of:)",
                    "title": "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/index(of:)",
                    "title": "func index(of: Self.Element) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/indices(of:)",
                    "title": "func indices(of: Self.Element) -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/map(_:)-5qgwq",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/popfirst()",
                    "title": "func popFirst() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/ranges(of:)",
                    "title": "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/removefirst()",
                    "title": "func removeFirst() -> Self.Element",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/removefirst(_:)",
                    "title": "func removeFirst(Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/split(separator:maxsplits:omittingemptysubsequences:)-45wlq",
                    "title": "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/split(separator:maxsplits:omittingemptysubsequences:)-6ojpa",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/trimprefix(_:)",
                    "title": "func trimPrefix<Prefix>(Prefix)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/trimprefix(while:)",
                    "title": "func trimPrefix(while: (Self.Element) throws -> Bool) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/trimmingprefix(_:)",
                    "title": "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/indices",
                    "title": "DiscontiguousColumnSlice.Indices",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/iterator",
                    "title": "DiscontiguousColumnSlice.Iterator",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/subsequence",
                    "title": "DiscontiguousColumnSlice.SubSequence",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/tabulardata/discontiguouscolumnslice/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/+(_:_:)-2qwr7",
                    "title": "static func + (Self.Element, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/+(_:_:)-75xxw",
                    "title": "static func + (Self, Self.Element) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/-(_:_:)-1ynwr",
                    "title": "static func - (Self.Element, Self) -> Column<Self.Element>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/-(_:_:)-2vlsk",
                    "title": "static func - (Self, Self.Element) -> Column<Self.Element>",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/discontiguouscolumnslice/columnprotocol-implementations",
                "title": "ColumnProtocol Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/discontiguouscolumnslice/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/custommirror",
                    "title": "var customMirror: Mirror",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/discontiguouscolumnslice/customreflectable-implementations",
                "title": "CustomReflectable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/discontiguouscolumnslice/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/==(_:_:)",
                    "title": "static func == (DiscontiguousColumnSlice<WrappedElement>, DiscontiguousColumnSlice<WrappedElement>) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/discontiguouscolumnslice/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/discontiguouscolumnslice/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/movesubranges(_:to:)",
                    "title": "func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/partition(by:)-3lx5r",
                    "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/partition(by:)-51ifb",
                    "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/reverse()",
                    "title": "func reverse()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/swapat(_:_:)",
                    "title": "func swapAt(Self.Index, Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/withcontiguousmutablestorageifavailable(_:)",
                    "title": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/subscript(_:)-7pxg6",
                    "title": "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/tabulardata/discontiguouscolumnslice/mutablecollection-implementations",
                "title": "MutableCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/*(_:_:)-2tbo9",
                    "title": "static func * (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/*(_:_:)-3dsxf",
                    "title": "static func * (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/*(_:_:)-8faxs",
                    "title": "static func * (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/+(_:_:)-2ba70",
                    "title": "static func + (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/+(_:_:)-77c23",
                    "title": "static func + (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/+(_:_:)-7swqp",
                    "title": "static func + (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/-(_:_:)-2hf72",
                    "title": "static func - (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/-(_:_:)-5nwcb",
                    "title": "static func - (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/-(_:_:)-hqv5",
                    "title": "static func - (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/_(_:_:)-1e5kt",
                    "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/_(_:_:)-29za6",
                    "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/_(_:_:)-3bul1",
                    "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/_(_:_:)-51brc",
                    "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/_(_:_:)-6dcws",
                    "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/_(_:_:)-80g7i",
                    "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                    "type": "op"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/description(options:)",
                    "title": "func description(options: FormattingOptions) -> String",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/filled(with:)",
                    "title": "func filled(with: Self.WrappedElement) -> FilledColumn<Self>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/discontiguouscolumnslice/optionalcolumnprotocol-implementations",
                "title": "OptionalColumnProtocol Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/contains(_:)-4b80f",
                    "title": "func contains(Self.Element) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/elementsequal(_:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/flatmap(_:)-5uq62",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/flatmap(_:)-85suh",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/map(_:)-5qu3q",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/sorted(using:)-8jin",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/sorted(using:)-9nz01",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/split(separator:maxsplits:omittingemptysubsequences:)-8v3y4",
                    "title": "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/starts(with:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/discontiguouscolumnslice/withcontiguousstorageifavailable(_:)",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/discontiguouscolumnslice/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/discontiguouscolumnslice",
            "title": "DiscontiguousColumnSlice",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Inspecting a Column Type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "title": "Generating a Column by Adding Two Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/+(_:_:)-yc11",
                "title": "static func + (Self, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/+(_:_:)-1i7oh",
                "title": "func + <L, R>(L, R) -> Column<L.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/+(_:_:)-3exmp",
                "title": "func + <L, R>(L, R) -> Column<R.Element>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Subtracting Two Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/-(_:_:)-36zol",
                "title": "static func - (Self, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/-(_:_:)-25cs6",
                "title": "func - <L, R>(L, R) -> Column<L.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/-(_:_:)-95yoe",
                "title": "func - <L, R>(L, R) -> Column<R.Element>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Multiplying Two Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/*(_:_:)-9db1q",
                "title": "static func * (Self, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/*(_:_:)-l9r3",
                "title": "func * <L, R>(L, R) -> Column<L.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/*(_:_:)-2toor",
                "title": "func * <L, R>(L, R) -> Column<R.Element>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Dividing Two Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_(_:_:)-922ku",
                "title": "static func / (Self, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/_(_:_:)-9v3nw",
                "title": "func / <L, R>(L, R) -> Column<L.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/_(_:_:)-4igyw",
                "title": "func / <L, R>(L, R) -> Column<R.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_(_:_:)-2urf0",
                "title": "static func / (Self, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/_(_:_:)-4pr65",
                "title": "func / <L, R>(L, R) -> Column<L.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/_(_:_:)-58kg6",
                "title": "func / <L, R>(L, R) -> Column<R.Element>",
                "type": "op"
              },
              {
                "title": "Generating a Column by Combining a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/+(_:_:)-39k8v",
                "title": "static func + (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/+(_:_:)-94kiv",
                "title": "static func + (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/-(_:_:)-4fynh",
                "title": "static func - (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/-(_:_:)-6up21",
                "title": "static func - (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/*(_:_:)-17vqd",
                "title": "static func * (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/*(_:_:)-3d6lu",
                "title": "static func * (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_(_:_:)-4a632",
                "title": "static func / (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_(_:_:)-7pe3t",
                "title": "static func / (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_(_:_:)-6zigz",
                "title": "static func / (Self, Self.Element) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_(_:_:)-4iv15",
                "title": "static func / (Self.Element, Self) -> Column<Self.Element>",
                "type": "op"
              },
              {
                "title": "Comparing a Column with a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/==(_:_:)-5jc0x",
                "title": "static func == (Self, Self.Element) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/==(_:_:)-4hx04",
                "title": "static func == (Self.Element, Self) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/!=(_:_:)-557vb",
                "title": "static func != (Self, Self.Element) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/!=(_:_:)-72ddh",
                "title": "static func != (Self.Element, Self) -> [Bool]",
                "type": "op"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_(_:_:)-68any",
                "title": "static func > (Self.Element, Self) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_(_:_:)-70vl1",
                "title": "static func < (Self.Element, Self) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_(_:_:)-7gy2j",
                "title": "static func < (Self, Self.Element) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_(_:_:)-9rct2",
                "title": "static func > (Self, Self.Element) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_=(_:_:)-17m6l",
                "title": "static func <= (Self.Element, Self) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_=(_:_:)-2w8gt",
                "title": "static func >= (Self, Self.Element) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_=(_:_:)-8jak4",
                "title": "static func >= (Self.Element, Self) -> [Bool]",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/columnprotocol/_=(_:_:)-9wr8s",
                "title": "static func <= (Self, Self.Element) -> [Bool]",
                "type": "op"
              }
            ],
            "path": "/documentation/tabulardata/columnprotocol",
            "title": "ColumnProtocol",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Filling an Optional Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/filled(with:)",
                "title": "func filled(with: Self.WrappedElement) -> FilledColumn<Self>",
                "type": "method"
              },
              {
                "title": "Generating an Optional Column by Adding Two Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/+(_:_:)-2qex0",
                "title": "static func + (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/+(_:_:)-1i7oh",
                "title": "func + <L, R>(L, R) -> Column<L.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/+(_:_:)-3exmp",
                "title": "func + <L, R>(L, R) -> Column<R.Element>",
                "type": "op"
              },
              {
                "title": "Generating an Optional Column by Subtracting Two Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/-(_:_:)-5xfkx",
                "title": "static func - (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/-(_:_:)-25cs6",
                "title": "func - <L, R>(L, R) -> Column<L.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/-(_:_:)-95yoe",
                "title": "func - <L, R>(L, R) -> Column<R.Element>",
                "type": "op"
              },
              {
                "title": "Generating an Optional Column by Multiplying Two Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/*(_:_:)-5f5kx",
                "title": "static func * (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/*(_:_:)-2toor",
                "title": "func * <L, R>(L, R) -> Column<R.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/*(_:_:)-l9r3",
                "title": "func * <L, R>(L, R) -> Column<L.Element>",
                "type": "op"
              },
              {
                "title": "Generating an Optional Column by Dividing Two Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/_(_:_:)-4nmnl",
                "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/_(_:_:)-9v3nw",
                "title": "func / <L, R>(L, R) -> Column<L.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/_(_:_:)-4igyw",
                "title": "func / <L, R>(L, R) -> Column<R.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/_(_:_:)-3rlo3",
                "title": "static func / (Self, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/_(_:_:)-4pr65",
                "title": "func / <L, R>(L, R) -> Column<L.Element>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/_(_:_:)-58kg6",
                "title": "func / <L, R>(L, R) -> Column<R.Element>",
                "type": "op"
              },
              {
                "title": "Generating an Optional Column by Combining a Value",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/+(_:_:)-501gg",
                "title": "static func + (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/+(_:_:)-6ko8x",
                "title": "static func + (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/-(_:_:)-9mejf",
                "title": "static func - (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/-(_:_:)-5vffa",
                "title": "static func - (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/*(_:_:)-orkq",
                "title": "static func * (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/*(_:_:)-5vorv",
                "title": "static func * (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/_(_:_:)-7tbmq",
                "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/_(_:_:)-56h1d",
                "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/_(_:_:)-5qhxr",
                "title": "static func / (Self, Self.WrappedElement) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/_(_:_:)-2xfqa",
                "title": "static func / (Self.WrappedElement, Self) -> Column<Self.WrappedElement>",
                "type": "op"
              },
              {
                "title": "Describing an Optional Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/description(options:)",
                "title": "func description(options: FormattingOptions) -> String",
                "type": "method"
              },
              {
                "title": "Supporting Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/optionalcolumnprotocol/wrappedelement",
                "title": "WrappedElement",
                "type": "associatedtype"
              }
            ],
            "path": "/documentation/tabulardata/optionalcolumnprotocol",
            "title": "OptionalColumnProtocol",
            "type": "protocol"
          },
          {
            "title": "Type-Erased Columns",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Inspecting a Type-Erased Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/count",
                "title": "var count: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/missingcount",
                "title": "var missingCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/wrappedelementtype",
                "title": "var wrappedElementType: any Any.Type",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/isnil(at:)",
                "title": "func isNil(at: Int) -> Bool",
                "type": "method"
              },
              {
                "title": "Creating a Column of the Same Type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/prototype",
                "title": "var prototype: any AnyColumnPrototype",
                "type": "property"
              },
              {
                "title": "Creating a Typed Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/assumingtype(_:)",
                "title": "func assumingType<T>(T.Type) -> Column<T>",
                "type": "method"
              },
              {
                "title": "Adding Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/append(_:)",
                "title": "func append(Any?)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/append(contentsof:)-2in58",
                "title": "func append(contentsOf: AnyColumn)",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/append(contentsof:)-az5b",
                "title": "func append(contentsOf: AnyColumnSlice)",
                "type": "method"
              },
              {
                "title": "Removing an Element",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/remove(at:)",
                "title": "func remove(at: Int)",
                "type": "method"
              },
              {
                "title": "Accessing Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/subscript(_:)-6z1b5",
                "title": "subscript(Int) -> Any?",
                "type": "subscript"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/subscript(_:)-1n9t9",
                "title": "subscript(Range<Int>) -> AnyColumnSlice",
                "type": "subscript"
              },
              {
                "title": "Creating a Slice of Unique Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/distinct()",
                "title": "func distinct() -> AnyColumnSlice",
                "type": "method"
              },
              {
                "title": "Creating a Slice by Masking Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/subscript(_:)-3658g",
                "title": "subscript<C>(C) -> AnyColumnSlice",
                "type": "subscript"
              },
              {
                "title": "Encoding a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/encode(_:using:)",
                "title": "func encode<T, Encoder>(T.Type, using: Encoder) throws",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/encoded(_:using:)",
                "title": "func encoded<T, Encoder>(T.Type, using: Encoder) throws -> AnyColumn",
                "type": "method"
              },
              {
                "title": "Decoding a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/decode(_:using:)",
                "title": "func decode<T, Decoder>(T.Type, using: Decoder) throws",
                "type": "method"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/decoded(_:using:)",
                "title": "func decoded<T, Decoder>(T.Type, using: Decoder) throws -> AnyColumn",
                "type": "method"
              },
              {
                "title": "Describing a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/custommirror",
                "title": "var customMirror: Mirror",
                "type": "property"
              },
              {
                "title": "Comparing Two Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/==(_:_:)",
                "title": "static func == (AnyColumn, AnyColumn) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Hashing a Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumn/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumn/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/map(_:)-3h8zg",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/index",
                    "title": "AnyColumn.Index",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/indices",
                    "title": "AnyColumn.Indices",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/iterator",
                    "title": "AnyColumn.Iterator",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/subsequence",
                    "title": "AnyColumn.SubSequence",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumn/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumn/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/custommirror",
                    "title": "var customMirror: Mirror",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumn/customreflectable-implementations",
                "title": "CustomReflectable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumn/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/==(_:_:)",
                    "title": "static func == (AnyColumn, AnyColumn) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumn/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumn/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/movesubranges(_:to:)",
                    "title": "func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/partition(by:)-6pyre",
                    "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/partition(by:)-7fpjw",
                    "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/reverse()",
                    "title": "func reverse()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/shuffle()",
                    "title": "func shuffle()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/shuffle(using:)",
                    "title": "func shuffle<T>(using: inout T)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/sort(by:)",
                    "title": "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/sort(using:)-68tuq",
                    "title": "func sort<Comparator>(using: Comparator)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/sort(using:)-d15r",
                    "title": "func sort<S, Comparator>(using: S)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/swapat(_:_:)",
                    "title": "func swapAt(Self.Index, Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/withcontiguousmutablestorageifavailable(_:)",
                    "title": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/subscript(_:)-6as9f",
                    "title": "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumn/mutablecollection-implementations",
                "title": "MutableCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/endindex",
                    "title": "var endIndex: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/startindex",
                    "title": "var startIndex: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/index(after:)",
                    "title": "func index(after: Int) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/index(before:)",
                    "title": "func index(before: Int) -> Int",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/subscript(_:)-1n9t9",
                    "title": "subscript(Range<Int>) -> AnyColumnSlice",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/subscript(_:)-6z1b5",
                    "title": "subscript(Int) -> Any?",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumn/randomaccesscollection-implementations",
                "title": "RandomAccessCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/filter(_:)",
                    "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/flatmap(_:)-315rw",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/flatmap(_:)-97sqm",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/map(_:)-49c73",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/sorted(using:)-59d65",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/sorted(using:)-h2xg",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/withcontiguousstorageifavailable(_:)",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumn/element",
                    "title": "AnyColumn.Element",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumn/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/anycolumn",
            "title": "AnyColumn",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Inspecting a Type-Erased Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/count",
                "title": "var count: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/missingcount",
                "title": "var missingCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/wrappedelementtype",
                "title": "var wrappedElementType: any Any.Type",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/isnil(at:)",
                "title": "func isNil(at: Int) -> Bool",
                "type": "method"
              },
              {
                "title": "Converting to a Typed Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/assumingtype(_:)",
                "title": "func assumingType<T>(T.Type) -> DiscontiguousColumnSlice<T>",
                "type": "method"
              },
              {
                "title": "Accessing Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/subscript(_:)-g0gb",
                "title": "subscript(Int) -> Any?",
                "type": "subscript"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/subscript(_:)-3qisq",
                "title": "subscript(Range<Int>) -> AnyColumnSlice",
                "type": "subscript"
              },
              {
                "title": "Creating a Slice of Unique Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/distinct()",
                "title": "func distinct() -> AnyColumnSlice",
                "type": "method"
              },
              {
                "title": "Summarizing a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/summary()",
                "title": "func summary() -> AnyCategoricalSummary",
                "type": "method"
              },
              {
                "title": "Describing a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/custommirror",
                "title": "var customMirror: Mirror",
                "type": "property"
              },
              {
                "title": "Comparing Two Column Slices",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/==(_:_:)",
                "title": "static func == (AnyColumnSlice, AnyColumnSlice) -> Bool",
                "type": "op"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Hashing a Column Slice",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnslice/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/last",
                    "title": "var last: Self.Element?",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/difference(from:by:)",
                    "title": "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/droplast(_:)",
                    "title": "func dropLast(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/formindex(before:)",
                    "title": "func formIndex(before: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/last(where:)",
                    "title": "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/lastindex(where:)",
                    "title": "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/poplast()",
                    "title": "func popLast() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/removelast()",
                    "title": "func removeLast() -> Self.Element",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/removelast(_:)",
                    "title": "func removeLast(Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/reversed()",
                    "title": "func reversed() -> ReversedCollection<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/suffix(_:)",
                    "title": "func suffix(Int) -> Self.SubSequence",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumnslice/bidirectionalcollection-implementations",
                "title": "BidirectionalCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/first",
                    "title": "var first: Self.Element?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/isempty",
                    "title": "var isEmpty: Bool",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/underestimatedcount",
                    "title": "var underestimatedCount: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/drop(while:)",
                    "title": "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/firstindex(where:)",
                    "title": "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/formindex(_:offsetby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/formindex(_:offsetby:limitedby:)",
                    "title": "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/formindex(after:)",
                    "title": "func formIndex(after: inout Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/indices(where:)",
                    "title": "func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/makeiterator()",
                    "title": "func makeIterator() -> IndexingIterator<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/map(_:)-2yg7f",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/popfirst()",
                    "title": "func popFirst() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/prefix(_:)",
                    "title": "func prefix(Int) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/prefix(through:)",
                    "title": "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/prefix(upto:)",
                    "title": "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/prefix(while:)",
                    "title": "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/randomelement()",
                    "title": "func randomElement() -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/randomelement(using:)",
                    "title": "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/removefirst()",
                    "title": "func removeFirst() -> Self.Element",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/removefirst(_:)",
                    "title": "func removeFirst(Int)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/removingsubranges(_:)",
                    "title": "func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title": "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/suffix(from:)",
                    "title": "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/trimprefix(while:)",
                    "title": "func trimPrefix(while: (Self.Element) throws -> Bool) throws",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/trimmingprefix(while:)",
                    "title": "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/index",
                    "title": "AnyColumnSlice.Index",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/indices",
                    "title": "AnyColumnSlice.Indices",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/iterator",
                    "title": "AnyColumnSlice.Iterator",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/subsequence",
                    "title": "AnyColumnSlice.SubSequence",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumnslice/collection-implementations",
                "title": "Collection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumnslice/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/custommirror",
                    "title": "var customMirror: Mirror",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumnslice/customreflectable-implementations",
                "title": "CustomReflectable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumnslice/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/==(_:_:)",
                    "title": "static func == (AnyColumnSlice, AnyColumnSlice) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumnslice/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumnslice/hashable-implementations",
                "title": "Hashable Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/movesubranges(_:to:)",
                    "title": "func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/partition(by:)-5h4eh",
                    "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/partition(by:)-90301",
                    "title": "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/reverse()",
                    "title": "func reverse()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/shuffle()",
                    "title": "func shuffle()",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/shuffle(using:)",
                    "title": "func shuffle<T>(using: inout T)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/sort(by:)",
                    "title": "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/sort(using:)-43qbc",
                    "title": "func sort<Comparator>(using: Comparator)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/sort(using:)-781u0",
                    "title": "func sort<S, Comparator>(using: S)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/swapat(_:_:)",
                    "title": "func swapAt(Self.Index, Self.Index)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/withcontiguousmutablestorageifavailable(_:)",
                    "title": "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/subscript(_:)-6uodd",
                    "title": "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumnslice/mutablecollection-implementations",
                "title": "MutableCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/endindex",
                    "title": "var endIndex: Int",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/startindex",
                    "title": "var startIndex: Int",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/index(_:offsetby:limitedby:)",
                    "title": "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/index(after:)",
                    "title": "func index(after: Int) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/index(before:)",
                    "title": "func index(before: Int) -> Int",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/subscript(_:)-3qisq",
                    "title": "subscript(Range<Int>) -> AnyColumnSlice",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/subscript(_:)-g0gb",
                    "title": "subscript(Int) -> Any?",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumnslice/randomaccesscollection-implementations",
                "title": "RandomAccessCollection Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/lazy",
                    "title": "var lazy: LazySequence<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/publisher",
                    "title": "var publisher: Publishers.Sequence<Self, Never>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/compactmap(_:)",
                    "title": "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/compare(_:_:)",
                    "title": "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/contains(where:)",
                    "title": "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/count(where:)",
                    "title": "func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/elementsequal(_:by:)",
                    "title": "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/enumerated()",
                    "title": "func enumerated() -> EnumeratedSequence<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/filter(_:)",
                    "title": "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/first(where:)",
                    "title": "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/flatmap(_:)-5y1nc",
                    "title": "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/flatmap(_:)-m7l1",
                    "title": "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/foreach(_:)",
                    "title": "func forEach((Self.Element) throws -> Void) rethrows",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/formatted(_:)",
                    "title": "func formatted<S>(S) -> S.FormatOutput",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/lexicographicallyprecedes(_:by:)",
                    "title": "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/map(_:)-2h537",
                    "title": "func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/max(by:)",
                    "title": "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/min(by:)",
                    "title": "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/reduce(_:_:)",
                    "title": "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/reduce(into:_:)",
                    "title": "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/shuffled()",
                    "title": "func shuffled() -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/shuffled(using:)",
                    "title": "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/sorted(by:)",
                    "title": "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/sorted(using:)-30g5r",
                    "title": "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/sorted(using:)-hs0e",
                    "title": "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/starts(with:by:)",
                    "title": "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/withcontiguousstorageifavailable(_:)",
                    "title": "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycolumnslice/element",
                    "title": "AnyColumnSlice.Element",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/tabulardata/anycolumnslice/sequence-implementations",
                "title": "Sequence Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/anycolumnslice",
            "title": "AnyColumnSlice",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Inspecting a Type-Erased Column Type",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnprotocol/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumnprotocol/count",
                "title": "var count: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycolumnprotocol/wrappedelementtype",
                "title": "var wrappedElementType: any Any.Type",
                "type": "property"
              },
              {
                "title": "Retrieving Elements",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnprotocol/subscript(_:)-1dl8y",
                "title": "subscript(Int) -> Any?",
                "type": "subscript"
              },
              {
                "path": "/documentation/tabulardata/anycolumnprotocol/subscript(_:)-81v4q",
                "title": "subscript(Range<Int>) -> AnyColumnSlice",
                "type": "subscript"
              }
            ],
            "path": "/documentation/tabulardata/anycolumnprotocol",
            "title": "AnyColumnProtocol",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Naming a Prototype Column",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnprototype/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "title": "Creating Columns",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycolumnprototype/makecolumn(capacity:)",
                "title": "func makeColumn(capacity: Int) -> AnyColumn",
                "type": "method"
              }
            ],
            "path": "/documentation/tabulardata/anycolumnprototype",
            "title": "AnyColumnPrototype",
            "type": "protocol"
          },
          {
            "title": "Statistical Summaries",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Summary",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/init(somecount:nonecount:mean:standarddeviation:min:max:median:firstquartile:thirdquartile:)",
                "title": "init(someCount: Int, noneCount: Int, mean: Element, standardDeviation: Element, min: Element, max: Element, median: Element, firstQuartile: Element, thirdQuartile: Element)",
                "type": "init"
              },
              {
                "title": "Comparing Summaries",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Inspecting a Summary",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/somecount",
                "title": "var someCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/nonecount",
                "title": "var noneCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/totalcount",
                "title": "var totalCount: Int",
                "type": "property"
              },
              {
                "title": "Getting Statistical Values",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/max",
                "title": "var max: Element",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/mean",
                "title": "var mean: Element",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/median",
                "title": "var median: Element",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/min",
                "title": "var min: Element",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/standarddeviation",
                "title": "var standardDeviation: Element",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/firstquartile",
                "title": "var firstQuartile: Element",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/thirdquartile",
                "title": "var thirdQuartile: Element",
                "type": "property"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/==(_:_:)",
                "title": "static func == (NumericSummary<Element>, NumericSummary<Element>) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/numericsummary/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/numericsummary/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/numericsummary/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/numericsummary",
            "title": "NumericSummary",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a Summary",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/categoricalsummary/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/categoricalsummary/init(somecount:nonecount:uniquecount:mode:)",
                "title": "init(someCount: Int, noneCount: Int, uniqueCount: Int, mode: [Element])",
                "type": "init"
              },
              {
                "title": "Comparing Summaries",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/categoricalsummary/!=(_:_:)",
                "title": "static func != (Self, Self) -> Bool",
                "type": "op"
              },
              {
                "title": "Inspecting a Summary",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/categoricalsummary/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/categoricalsummary/mode",
                "title": "var mode: [Element]",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/categoricalsummary/uniquecount",
                "title": "var uniqueCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/categoricalsummary/somecount",
                "title": "var someCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/categoricalsummary/nonecount",
                "title": "var noneCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/categoricalsummary/totalcount",
                "title": "var totalCount: Int",
                "type": "property"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/categoricalsummary/==(_:_:)",
                "title": "static func == (CategoricalSummary<Element>, CategoricalSummary<Element>) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/categoricalsummary/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/categoricalsummary/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/categoricalsummary/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/categoricalsummary/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/categoricalsummary",
            "title": "CategoricalSummary",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting Statistical Information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycategoricalsummary/nonecount",
                "title": "var noneCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycategoricalsummary/somecount",
                "title": "var someCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycategoricalsummary/totalcount",
                "title": "var totalCount: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycategoricalsummary/uniquecount",
                "title": "var uniqueCount: Int",
                "type": "property"
              },
              {
                "title": "Getting Mode Information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycategoricalsummary/mode",
                "title": "var mode: [Any]",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/anycategoricalsummary/modetype",
                "title": "var modeType: any Any.Type",
                "type": "property"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycategoricalsummary/==(_:_:)",
                "title": "static func == (AnyCategoricalSummary, AnyCategoricalSummary) -> Bool",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/anycategoricalsummary/init(_:)-7p9bv",
                "title": "init(CategoricalSummary<AnyHashable>)",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/anycategoricalsummary/init(_:)-8innt",
                "title": "init<T>(CategoricalSummary<T>)",
                "type": "init"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/anycategoricalsummary/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/anycategoricalsummary/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/anycategoricalsummary",
            "title": "AnyCategoricalSummary",
            "type": "struct"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting Error Information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/jsonreadingerror/failedtoparse(row:column:type:contents:)",
                "title": "case failedToParse(row: Int, column: String, type: JSONType, contents: String)",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/jsonreadingerror/incompatiblevalues(column:)",
                "title": "case incompatibleValues(column: String)",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/jsonreadingerror/unsupportedstructure",
                "title": "case unsupportedStructure",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/jsonreadingerror/wrongtype(row:column:expectedtype:value:)",
                "title": "case wrongType(row: Int, column: String, expectedType: JSONType, value: any Sendable)",
                "type": "case"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/jsonreadingerror/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/jsonreadingerror/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/jsonreadingerror/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/jsonreadingerror/error-implementations",
                "title": "Error Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/jsonreadingerror/errordescription",
                    "title": "var errorDescription: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/jsonreadingerror/errordescription-9jsj6",
                    "title": "var errorDescription: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/jsonreadingerror/failurereason",
                    "title": "var failureReason: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/jsonreadingerror/helpanchor",
                    "title": "var helpAnchor: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/jsonreadingerror/recoverysuggestion",
                    "title": "var recoverySuggestion: String?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/jsonreadingerror/localizederror-implementations",
                "title": "LocalizedError Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/jsonreadingerror",
            "title": "JSONReadingError",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Getting Error Information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/csvreadingerror/column",
                "title": "var column: Int?",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/csvreadingerror/row",
                "title": "var row: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/csvreadingerror/badencoding(row:column:cellcontents:)",
                "title": "case badEncoding(row: Int, column: Int, cellContents: Data)",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/csvreadingerror/failedtoparse(row:column:type:cellcontents:)",
                "title": "case failedToParse(row: Int, column: Int, type: CSVType, cellContents: Data)",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/csvreadingerror/misplacedquote(row:column:)",
                "title": "case misplacedQuote(row: Int, column: Int)",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/csvreadingerror/missingcolumn(columnname:)",
                "title": "case missingColumn(columnName: String)",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/csvreadingerror/unsupportedencoding(_:)",
                "title": "case unsupportedEncoding(String)",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/csvreadingerror/wrongnumberofcolumns(row:columns:expected:)",
                "title": "case wrongNumberOfColumns(row: Int, columns: Int, expected: Int)",
                "type": "case"
              },
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/csvreadingerror/outofbounds(requested:actual:)",
                "title": "case outOfBounds(requested: Int, actual: Int)",
                "type": "case"
              },
              {
                "beta": true,
                "path": "/documentation/tabulardata/csvreadingerror/unsupportedcolumntype(columnindex:columnname:type:)",
                "title": "case unsupportedColumnType(columnIndex: Int, columnName: String, type: String)",
                "type": "case"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingerror/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/csvreadingerror/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingerror/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/csvreadingerror/error-implementations",
                "title": "Error Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingerror/errordescription",
                    "title": "var errorDescription: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingerror/errordescription-85aw5",
                    "title": "var errorDescription: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingerror/failurereason",
                    "title": "var failureReason: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingerror/helpanchor",
                    "title": "var helpAnchor: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/csvreadingerror/recoverysuggestion",
                    "title": "var recoverySuggestion: String?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/csvreadingerror/localizederror-implementations",
                "title": "LocalizedError Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/csvreadingerror",
            "title": "CSVReadingError",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Getting Error Information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/csvwritingerror/column",
                "title": "var column: String?",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/csvwritingerror/row",
                "title": "var row: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/csvwritingerror/badencoding(row:column:_:)",
                "title": "case badEncoding(row: Int, column: String, Data)",
                "type": "case"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvwritingerror/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/csvwritingerror/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/csvwritingerror/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/csvwritingerror/error-implementations",
                "title": "Error Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/csvwritingerror",
            "title": "CSVWritingError",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Creating a Decoding Error",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columndecodingerror/init(columnname:rowindex:decodingerror:)",
                "title": "init(columnName: String, rowIndex: Int, decodingError: DecodingError)",
                "type": "init"
              },
              {
                "title": "Getting Error Information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columndecodingerror/columnname",
                "title": "var columnName: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/columndecodingerror/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/columndecodingerror/decodingerror",
                "title": "var decodingError: DecodingError",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/columndecodingerror/rowindex",
                "title": "var rowIndex: Int",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columndecodingerror/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/columndecodingerror/error-implementations",
                "title": "Error Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columndecodingerror/errordescription",
                    "title": "var errorDescription: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columndecodingerror/failurereason",
                    "title": "var failureReason: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columndecodingerror/helpanchor",
                    "title": "var helpAnchor: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columndecodingerror/recoverysuggestion",
                    "title": "var recoverySuggestion: String?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/columndecodingerror/localizederror-implementations",
                "title": "LocalizedError Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/columndecodingerror",
            "title": "ColumnDecodingError",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating an Encoding Error",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnencodingerror/init(columnname:rowindex:encodingerror:)",
                "title": "init(columnName: String, rowIndex: Int, encodingError: EncodingError)",
                "type": "init"
              },
              {
                "title": "Getting Error Information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnencodingerror/columnname",
                "title": "var columnName: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/columnencodingerror/debugdescription",
                "title": "var debugDescription: String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/columnencodingerror/encodingerror",
                "title": "var encodingError: EncodingError",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/columnencodingerror/rowindex",
                "title": "var rowIndex: Int",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnencodingerror/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/columnencodingerror/error-implementations",
                "title": "Error Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnencodingerror/errordescription",
                    "title": "var errorDescription: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columnencodingerror/failurereason",
                    "title": "var failureReason: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columnencodingerror/helpanchor",
                    "title": "var helpAnchor: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/columnencodingerror/recoverysuggestion",
                    "title": "var recoverySuggestion: String?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/columnencodingerror/localizederror-implementations",
                "title": "LocalizedError Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/columnencodingerror",
            "title": "ColumnEncodingError",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Getting Error Information",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/sframereadingerror/badarchive(_:)",
                "title": "case badArchive(String)",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/sframereadingerror/badencoding(_:)",
                "title": "case badEncoding(String)",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/sframereadingerror/missingarchive",
                "title": "case missingArchive",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/sframereadingerror/missingcolumn(_:)",
                "title": "case missingColumn(String)",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/sframereadingerror/unsupportedarchive(_:)",
                "title": "case unsupportedArchive(String)",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/sframereadingerror/unsupportedlayout(_:)",
                "title": "case unsupportedLayout(String)",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/sframereadingerror/unsupportedtype(_:)",
                "title": "case unsupportedType(Int)",
                "type": "case"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/sframereadingerror/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/sframereadingerror/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/sframereadingerror/localizeddescription",
                    "title": "var localizedDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/sframereadingerror/error-implementations",
                "title": "Error Implementations",
                "type": "collection"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/sframereadingerror/errordescription",
                    "title": "var errorDescription: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/sframereadingerror/errordescription-8feq7",
                    "title": "var errorDescription: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/sframereadingerror/failurereason",
                    "title": "var failureReason: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/sframereadingerror/helpanchor",
                    "title": "var helpAnchor: String?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tabulardata/sframereadingerror/recoverysuggestion",
                    "title": "var recoverySuggestion: String?",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/sframereadingerror/localizederror-implementations",
                "title": "LocalizedError Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/sframereadingerror",
            "title": "SFrameReadingError",
            "type": "enum"
          },
          {
            "title": "Supporting Types",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Getting the Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/order/ascending",
                "title": "case ascending",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/order/descending",
                "title": "case descending",
                "type": "case"
              },
              {
                "path": "/documentation/tabulardata/order/areordered(_:_:)",
                "title": "func areOrdered<T>(T, T) -> Bool",
                "type": "method"
              },
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/order/==(_:_:)",
                "title": "static func == (Order, Order) -> Bool",
                "type": "op"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/order/hashvalue",
                "title": "var hashValue: Int",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/order/hash(into:)",
                "title": "func hash(into: inout Hasher)",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/order/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/tabulardata/order/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/order",
            "title": "Order",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Creating a Column ID",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnid/init(_:_:)",
                "title": "init(String, T.Type)",
                "type": "init"
              },
              {
                "title": "Getting the Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/columnid/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "beta": true,
                "path": "/documentation/tabulardata/columnid/type",
                "title": "var type: any Any.Type",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tabulardata/columnid/description",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tabulardata/columnid/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "collection"
              }
            ],
            "path": "/documentation/tabulardata/columnid",
            "title": "ColumnID",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating the Options Object",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/init(locale:)",
                "title": "init(locale: Locale)",
                "type": "init"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/init(maximumlinewidth:maximumcellwidth:maximumrowcount:includescolumntypes:)",
                "title": "init(maximumLineWidth: Int, maximumCellWidth: Int, maximumRowCount: Int, includesColumnTypes: Bool)",
                "type": "init"
              },
              {
                "title": "Getting the Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/dateformatstyle",
                "title": "var dateFormatStyle: Date.FormatStyle",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/floatingpointformatstyle",
                "title": "var floatingPointFormatStyle: FloatingPointFormatStyle<Double>",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/includescolumntypes",
                "title": "var includesColumnTypes: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/integerformatstyle",
                "title": "var integerFormatStyle: IntegerFormatStyle<Int>",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/locale",
                "title": "var locale: Locale",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/maximumcellwidth",
                "title": "var maximumCellWidth: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/maximumlinewidth",
                "title": "var maximumLineWidth: Int",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/maximumrowcount",
                "title": "var maximumRowCount: Int",
                "type": "property"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/includesrowandcolumncounts",
                "title": "var includesRowAndColumnCounts: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/formattingoptions/includesrowindices",
                "title": "var includesRowIndices: Bool",
                "type": "property"
              }
            ],
            "path": "/documentation/tabulardata/formattingoptions",
            "title": "FormattingOptions",
            "type": "struct"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/jsonwritingoptions/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tabulardata/jsonwritingoptions/dateformatter",
                "title": "var dateFormatter: (Date) -> String",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/jsonwritingoptions/prettyprint",
                "title": "var prettyPrint: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/tabulardata/jsonwritingoptions/sortkeys",
                "title": "var sortKeys: Bool",
                "type": "property"
              }
            ],
            "path": "/documentation/tabulardata/jsonwritingoptions",
            "title": "JSONWritingOptions",
            "type": "struct"
          }
        ],
        "path": "/documentation/tabulardata",
        "title": "TabularData",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
