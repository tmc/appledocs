{
  "interfaceLanguages": {
    "swift": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/tipkit/highlightingappfeatureswithtipkit",
            "title": "Highlighting app features with TipKit",
            "type": "sampleCode"
          },
          {
            "title": "Content",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Setting tip content",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tip/title",
                "title": "var title: Text",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tip/message",
                "title": "var message: Text?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tip/image",
                "title": "var image: Image?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tip/id",
                "title": "var id: String",
                "type": "property"
              },
              {
                "title": "Controlling when tips appear",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tip/rules",
                "title": "var rules: [Self.Rule]",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tip/rule",
                "title": "Tip.Rule",
                "type": "typealias"
              },
              {
                "children": [
                  {
                    "title": "Initializer",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/event/init(id:)",
                    "title": "init(id: String)",
                    "type": "init"
                  },
                  {
                    "title": "Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/event/donations",
                    "title": "var donations: [Tips.Event<DonationInfo>.Donation]",
                    "type": "property"
                  },
                  {
                    "title": "Add Donations",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/event/donate()",
                    "title": "func donate() async",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/event/donate(_:)",
                    "title": "func donate(DonationInfo) async",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/event/senddonation(_:)",
                    "title": "func sendDonation((() -> Void)?)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/event/senddonation(_:_:)",
                    "title": "func sendDonation(DonationInfo, (() -> Void)?)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tipkit/tip/event",
                "title": "Tip.Event",
                "type": "typealias"
              },
              {
                "title": "Customizing tip behavior",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tip/options",
                "title": "var options: [any TipOption]",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Tip options",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tip/ignoresdisplayfrequency",
                    "title": "Tip.IgnoresDisplayFrequency",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tipkit/tip/maxdisplaycount",
                    "title": "Tip.MaxDisplayCount",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/tipkit/tip/maxdisplayduration",
                    "title": "Tip.MaxDisplayDuration",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/tipkit/tip/option",
                "title": "Tip.Option",
                "type": "typealias"
              },
              {
                "title": "Providing actions",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tip/actions",
                "title": "var actions: [Self.Action]",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/action/init(id:perform:_:)",
                    "title": "init(id: String?, perform: () -> Void, () -> Text)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/tipkit/tips/action/init(id:title:perform:)",
                    "title": "init(id: String?, title: some StringProtocol, perform: () -> Void)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/tipkit/tip/action",
                "title": "Tip.Action",
                "type": "typealias"
              },
              {
                "title": "Monitoring tip status",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tip/status-swift.property",
                "title": "var status: Self.Status",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tip/statusupdates",
                "title": "var statusUpdates: AsyncStream<Self.Status>",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tip/shoulddisplay",
                "title": "var shouldDisplay: Bool",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tip/shoulddisplayupdates",
                "title": "var shouldDisplayUpdates: AsyncMapSequence<AsyncStream<Self.Status>, Bool>",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tip/status-swift.typealias",
                "title": "Tip.Status",
                "type": "typealias"
              },
              {
                "path": "/documentation/tipkit/tip/invalidationreason",
                "title": "Tip.InvalidationReason",
                "type": "typealias"
              },
              {
                "title": "Invalidating a tip",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tip/invalidate(reason:)",
                "title": "func invalidate(reason: Self.InvalidationReason)",
                "type": "method"
              }
            ],
            "path": "/documentation/tipkit/tip",
            "title": "Tip",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a tip group",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipgroup/init(_:_:)",
                "title": "init(TipGroup.Priority, () -> [any Tip])",
                "type": "init"
              },
              {
                "title": "Controlling the display order of a TipGroupâ€™s tips",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tipgroup/priority/firstavailable",
                    "title": "case firstAvailable",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tipkit/tipgroup/priority/ordered",
                    "title": "case ordered",
                    "type": "case"
                  }
                ],
                "path": "/documentation/tipkit/tipgroup/priority",
                "title": "TipGroup.Priority",
                "type": "enum"
              },
              {
                "title": "Getting the currently available tip",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipgroup/currenttip",
                "title": "var currentTip: (any Tip)?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipgroup/currenttipupdates",
                "title": "var currentTipUpdates: some AsyncSequence<any Tip, Never>",
                "type": "property"
              }
            ],
            "path": "/documentation/tipkit/tipgroup",
            "title": "TipGroup",
            "type": "class"
          },
          {
            "title": "Views",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a tip view",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipview/init(_:arrowedge:action:)-ztv8",
                "title": "init((any Tip)?, arrowEdge: Edge?, action: (Tips.Action) -> Void)",
                "type": "init"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipview/init(_:arrowedge:action:)-5qrb4",
                "title": "init(Content, arrowEdge: Edge?, action: (Tips.Action) -> Void)",
                "type": "init"
              }
            ],
            "path": "/documentation/tipkit/tipview",
            "title": "TipView",
            "type": "struct"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/view/popovertip(_:arrowedge:action:)",
            "title": "func popoverTip((any Tip)?, arrowEdge: Edge, action: (Tips.Action) -> Void) -> some View",
            "type": "method"
          },
          {
            "title": "Configuration",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/tipkit/tips/configure(_:)",
            "title": "static func configure([Tips.ConfigurationOption]) throws",
            "type": "method"
          },
          {
            "path": "/documentation/tipkit/tips/configurationoption/cloudkitcontainer(_:)",
            "title": "static func cloudKitContainer(Tips.ConfigurationOption.CloudKitContainer?) -> Tips.ConfigurationOption",
            "type": "method"
          },
          {
            "path": "/documentation/tipkit/tips/configurationoption/datastorelocation(_:)",
            "title": "static func datastoreLocation(Tips.ConfigurationOption.DatastoreLocation) -> Tips.ConfigurationOption",
            "type": "method"
          },
          {
            "path": "/documentation/tipkit/tips/configurationoption/displayfrequency(_:)",
            "title": "static func displayFrequency(Tips.ConfigurationOption.DisplayFrequency) -> Tips.ConfigurationOption",
            "type": "method"
          },
          {
            "title": "Display rules",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/tipkit/tips/parameter",
            "title": "Tips.Parameter",
            "type": "struct"
          },
          {
            "path": "/documentation/tipkit/tips/rule",
            "title": "Tips.Rule",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializer",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tips/event/init(id:)",
                "title": "init(id: String)",
                "type": "init"
              },
              {
                "title": "Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tips/event/donations",
                "title": "var donations: [Tips.Event<DonationInfo>.Donation]",
                "type": "property"
              },
              {
                "title": "Add Donations",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tips/event/donate()",
                "title": "func donate() async",
                "type": "method"
              },
              {
                "path": "/documentation/tipkit/tips/event/donate(_:)",
                "title": "func donate(DonationInfo) async",
                "type": "method"
              },
              {
                "path": "/documentation/tipkit/tips/event/senddonation(_:)",
                "title": "func sendDonation((() -> Void)?)",
                "type": "method"
              },
              {
                "path": "/documentation/tipkit/tips/event/senddonation(_:_:)",
                "title": "func sendDonation(DonationInfo, (() -> Void)?)",
                "type": "method"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/event/donation/date",
                    "title": "let date: Date",
                    "type": "property"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/event/donation/subscript(dynamicmember:)",
                    "title": "subscript<Value>(dynamicMember _: KeyPath<DonationInfo, Value>) -> Value",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/tipkit/tips/event/donation",
                "title": "Tips.Event.Donation",
                "type": "struct"
              }
            ],
            "path": "/documentation/tipkit/tips/event",
            "title": "Tips.Event",
            "type": "struct"
          },
          {
            "title": "View Style",
            "type": "groupMarker"
          },
          {
            "external": true,
            "path": "/documentation/swiftui/view/tipviewstyle(_:)",
            "title": "func tipViewStyle(some TipViewStyle) -> some View",
            "type": "method"
          },
          {
            "children": [
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipviewstyle/body",
                "title": "Body",
                "type": "associatedtype"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipviewstyle/makebody(configuration:)",
                "title": "func makeBody(configuration: Self.Configuration) -> Self.Body",
                "type": "method"
              },
              {
                "title": "Type Aliases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipviewstyle/configuration",
                "title": "TipViewStyle.Configuration",
                "type": "typealias"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipviewstyle/minitip",
                "title": "static var miniTip: MiniTipViewStyle",
                "type": "property"
              }
            ],
            "path": "/documentation/tipkit/tipviewstyle",
            "title": "TipViewStyle",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipviewstyleconfiguration/actions",
                "title": "var actions: [Tips.Action]",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipviewstyleconfiguration/image",
                "title": "var image: Image?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipviewstyleconfiguration/message",
                "title": "var message: Text?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipviewstyleconfiguration/tip",
                "title": "let tip: any Tip",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipviewstyleconfiguration/title",
                "title": "var title: Text?",
                "type": "property"
              }
            ],
            "path": "/documentation/tipkit/tipviewstyleconfiguration",
            "title": "TipViewStyleConfiguration",
            "type": "struct"
          },
          {
            "path": "/documentation/tipkit/minitipviewstyle",
            "title": "MiniTipViewStyle",
            "type": "struct"
          },
          {
            "title": "UIKit hosting views",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipuiview/init(_:arrowedge:actionhandler:)",
                "title": "init(any Tip, arrowEdge: Edge?, actionHandler: (Tips.Action) -> Void)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipuiview/backgroundcolor",
                "title": "var backgroundColor: UIColor?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuiview/cornerradius",
                "title": "var cornerRadius: CGFloat",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuiview/imagesize",
                "title": "var imageSize: CGSize",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuiview/imagestyle",
                "title": "var imageStyle: (any ShapeStyle)?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuiview/viewstyle",
                "title": "var viewStyle: any TipViewStyle",
                "type": "property"
              }
            ],
            "path": "/documentation/tipkit/tipuiview",
            "title": "TipUIView",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipuipopoverviewcontroller/init(_:sourceitem:actionhandler:)",
                "title": "convenience init(any Tip, sourceItem: any UIPopoverPresentationControllerSourceItem, actionHandler: (Tips.Action) -> Void)",
                "type": "init"
              },
              {
                "path": "/documentation/tipkit/tipuipopoverviewcontroller/init(coder:)",
                "title": "init?(coder: NSCoder)",
                "type": "init"
              },
              {
                "path": "/documentation/tipkit/tipuipopoverviewcontroller/init(nibname:bundle:)",
                "title": "init(nibName: String?, bundle: Bundle?)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipuipopoverviewcontroller/backgroundcolor",
                "title": "var backgroundColor: UIColor?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuipopoverviewcontroller/imagesize",
                "title": "var imageSize: CGSize",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuipopoverviewcontroller/imagestyle",
                "title": "var imageStyle: (any ShapeStyle)?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuipopoverviewcontroller/presentationdelegate",
                "title": "var presentationDelegate: (any UIPopoverPresentationControllerDelegate)?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuipopoverviewcontroller/sourceitem",
                "title": "var sourceItem: (any UIPopoverPresentationControllerSourceItem)?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuipopoverviewcontroller/viewstyle",
                "title": "var viewStyle: any TipViewStyle",
                "type": "property"
              }
            ],
            "path": "/documentation/tipkit/tipuipopoverviewcontroller",
            "title": "TipUIPopoverViewController",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionviewcell/init(coder:)",
                "title": "init?(coder: NSCoder)",
                "type": "init"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionviewcell/init(frame:)",
                "title": "init(frame: CGRect)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionviewcell/backgroundcolor",
                "title": "var backgroundColor: UIColor?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionviewcell/cornerradius",
                "title": "var cornerRadius: CGFloat",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionviewcell/imagesize",
                "title": "var imageSize: CGSize",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionviewcell/imagestyle",
                "title": "var imageStyle: (any ShapeStyle)?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionviewcell/viewstyle",
                "title": "var viewStyle: any TipViewStyle",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionviewcell/configuretip(_:arrowedge:actionhandler:)",
                "title": "func configureTip(any Tip, arrowEdge: Edge?, actionHandler: (Tips.Action) -> Void) -> Self",
                "type": "method"
              }
            ],
            "path": "/documentation/tipkit/tipuicollectionviewcell",
            "title": "TipUICollectionViewCell",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionreusableview/init(coder:)",
                "title": "init?(coder: NSCoder)",
                "type": "init"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionreusableview/init(frame:)",
                "title": "init(frame: CGRect)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionreusableview/cornerradius",
                "title": "var cornerRadius: CGFloat",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionreusableview/imagesize",
                "title": "var imageSize: CGSize",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionreusableview/imagestyle",
                "title": "var imageStyle: (any ShapeStyle)?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionreusableview/viewstyle",
                "title": "var viewStyle: any TipViewStyle",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipuicollectionreusableview/configuretip(_:arrowedge:actionhandler:)",
                "title": "func configureTip(any Tip, arrowEdge: Edge?, actionHandler: (Tips.Action) -> Void) -> Self",
                "type": "method"
              }
            ],
            "path": "/documentation/tipkit/tipuicollectionreusableview",
            "title": "TipUICollectionReusableView",
            "type": "class"
          },
          {
            "title": "AppKit hosting views",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipnsview/init(_:arrowedge:actionhandler:)",
                "title": "convenience init(any Tip, arrowEdge: Edge?, actionHandler: (Tips.Action) -> Void)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipnsview/backgroundcolor",
                "title": "var backgroundColor: NSColor?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipnsview/cornerradius",
                "title": "var cornerRadius: CGFloat",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipnsview/imagesize",
                "title": "var imageSize: CGSize",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipnsview/imagestyle",
                "title": "var imageStyle: (any ShapeStyle)?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipnsview/viewstyle",
                "title": "var viewStyle: any TipViewStyle",
                "type": "property"
              }
            ],
            "path": "/documentation/tipkit/tipnsview",
            "title": "TipNSView",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipnspopover/init(_:delegate:actionhandler:)",
                "title": "init(any Tip, delegate: (any NSPopoverDelegate)?, actionHandler: (Tips.Action) -> Void)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipnspopover/backgroundcolor",
                "title": "var backgroundColor: NSColor?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipnspopover/cornerradius",
                "title": "var cornerRadius: CGFloat",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipnspopover/imagesize",
                "title": "var imageSize: CGSize",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipnspopover/imagestyle",
                "title": "var imageStyle: (any ShapeStyle)?",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipnspopover/viewstyle",
                "title": "var viewStyle: any TipViewStyle",
                "type": "property"
              }
            ],
            "path": "/documentation/tipkit/tipnspopover",
            "title": "TipNSPopover",
            "type": "class"
          },
          {
            "title": "Testing",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/tipkit/tips/showalltipsfortesting()",
            "title": "static func showAllTipsForTesting()",
            "type": "method"
          },
          {
            "path": "/documentation/tipkit/tips/showtipsfortesting(_:)",
            "title": "static func showTipsForTesting([any Tip.Type])",
            "type": "method"
          },
          {
            "path": "/documentation/tipkit/tips/hidealltipsfortesting()",
            "title": "static func hideAllTipsForTesting()",
            "type": "method"
          },
          {
            "path": "/documentation/tipkit/tips/hidetipsfortesting(_:)",
            "title": "static func hideTipsForTesting([any Tip.Type])",
            "type": "method"
          },
          {
            "path": "/documentation/tipkit/tips/resetdatastore()",
            "title": "static func resetDatastore() throws",
            "type": "method"
          },
          {
            "title": "Errors",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipkiterror/description",
                "title": "var description: String",
                "type": "property"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tipkiterror/invalidpredicatevaluetype",
                "title": "static let invalidPredicateValueType: TipKitError",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipkiterror/missinggroupcontainerentitlements",
                "title": "static let missingGroupContainerEntitlements: TipKitError",
                "type": "property"
              },
              {
                "path": "/documentation/tipkit/tipkiterror/tipsdatastorealreadyconfigured",
                "title": "static let tipsDatastoreAlreadyConfigured: TipKitError",
                "type": "property"
              }
            ],
            "path": "/documentation/tipkit/tipkiterror",
            "title": "TipKitError",
            "type": "struct"
          },
          {
            "title": "Common types",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/tipkit/anytip",
            "title": "AnyTip",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Tip options",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/tipkit/tip/ignoresdisplayfrequency",
                "title": "Tip.IgnoresDisplayFrequency",
                "type": "typealias"
              },
              {
                "path": "/documentation/tipkit/tip/maxdisplaycount",
                "title": "Tip.MaxDisplayCount",
                "type": "typealias"
              },
              {
                "path": "/documentation/tipkit/tip/maxdisplayduration",
                "title": "Tip.MaxDisplayDuration",
                "type": "typealias"
              }
            ],
            "path": "/documentation/tipkit/tipoption",
            "title": "TipOption",
            "type": "protocol"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Actions",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/action/init(id:perform:_:)",
                    "title": "init(id: String?, perform: () -> Void, () -> Text)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/tipkit/tips/action/init(id:title:perform:)",
                    "title": "init(id: String?, title: some StringProtocol, perform: () -> Void)",
                    "type": "init"
                  },
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/action/handler",
                    "title": "let handler: () -> Void",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tipkit/tips/action/id",
                    "title": "let id: String",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tipkit/tips/action/index",
                    "title": "let index: Int?",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tipkit/tips/action/label",
                    "title": "let label: () -> Text",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tipkit/tips/action",
                "title": "Tips.Action",
                "type": "struct"
              },
              {
                "title": "Events",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/donationtimerange/day",
                    "title": "static var day: Tips.DonationTimeRange",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tipkit/tips/donationtimerange/hour",
                    "title": "static var hour: Tips.DonationTimeRange",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tipkit/tips/donationtimerange/minute",
                    "title": "static var minute: Tips.DonationTimeRange",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/tipkit/tips/donationtimerange/week",
                    "title": "static var week: Tips.DonationTimeRange",
                    "type": "property"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/donationtimerange/days(_:)",
                    "title": "static func days(Int) -> Tips.DonationTimeRange",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/donationtimerange/hours(_:)",
                    "title": "static func hours(Int) -> Tips.DonationTimeRange",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/donationtimerange/minutes(_:)",
                    "title": "static func minutes(Int) -> Tips.DonationTimeRange",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/donationtimerange/weeks(_:)",
                    "title": "static func weeks(Int) -> Tips.DonationTimeRange",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tipkit/tips/donationtimerange",
                "title": "Tips.DonationTimeRange",
                "type": "struct"
              },
              {
                "path": "/documentation/tipkit/tips/emptydonation",
                "title": "Tips.EmptyDonation",
                "type": "struct"
              },
              {
                "title": "Options",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/ignoresdisplayfrequency/init(_:)",
                    "title": "init(Bool)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/tipkit/tips/ignoresdisplayfrequency",
                "title": "Tips.IgnoresDisplayFrequency",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/maxdisplaycount/init(_:)",
                    "title": "init(Int)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/tipkit/tips/maxdisplaycount",
                "title": "Tips.MaxDisplayCount",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Structures",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tipkit/tips/configurationoption/cloudkitcontainer/automatic",
                        "title": "static var automatic: Tips.ConfigurationOption.CloudKitContainer",
                        "type": "property"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tipkit/tips/configurationoption/cloudkitcontainer/named(_:)",
                        "title": "static func named(String) -> Tips.ConfigurationOption.CloudKitContainer",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/tipkit/tips/configurationoption/cloudkitcontainer",
                    "title": "Tips.ConfigurationOption.CloudKitContainer",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tipkit/tips/configurationoption/datastorelocation/applicationdefault",
                        "title": "static var applicationDefault: Tips.ConfigurationOption.DatastoreLocation",
                        "type": "property"
                      },
                      {
                        "title": "Type Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tipkit/tips/configurationoption/datastorelocation/groupcontainer(identifier:)",
                        "title": "static func groupContainer(identifier: String) throws -> Tips.ConfigurationOption.DatastoreLocation",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/tipkit/tips/configurationoption/datastorelocation/url(_:)",
                        "title": "static func url(URL) -> Tips.ConfigurationOption.DatastoreLocation",
                        "type": "method"
                      }
                    ],
                    "path": "/documentation/tipkit/tips/configurationoption/datastorelocation",
                    "title": "Tips.ConfigurationOption.DatastoreLocation",
                    "type": "struct"
                  },
                  {
                    "children": [
                      {
                        "title": "Type Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/tipkit/tips/configurationoption/displayfrequency/daily",
                        "title": "static var daily: Tips.ConfigurationOption.DisplayFrequency",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tipkit/tips/configurationoption/displayfrequency/hourly",
                        "title": "static var hourly: Tips.ConfigurationOption.DisplayFrequency",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tipkit/tips/configurationoption/displayfrequency/immediate",
                        "title": "static var immediate: Tips.ConfigurationOption.DisplayFrequency",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tipkit/tips/configurationoption/displayfrequency/monthly",
                        "title": "static var monthly: Tips.ConfigurationOption.DisplayFrequency",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/tipkit/tips/configurationoption/displayfrequency/weekly",
                        "title": "static var weekly: Tips.ConfigurationOption.DisplayFrequency",
                        "type": "property"
                      }
                    ],
                    "path": "/documentation/tipkit/tips/configurationoption/displayfrequency",
                    "title": "Tips.ConfigurationOption.DisplayFrequency",
                    "type": "struct"
                  }
                ],
                "path": "/documentation/tipkit/tips/configurationoption",
                "title": "Tips.ConfigurationOption",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/parameteroption/transient",
                    "title": "static var transient: Tips.ParameterOption",
                    "type": "property"
                  }
                ],
                "path": "/documentation/tipkit/tips/parameteroption",
                "title": "Tips.ParameterOption",
                "type": "struct"
              },
              {
                "title": "Builders",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/actionbuilder/buildarray(_:)",
                    "title": "static func buildArray([[Tips.Action]]) -> [Tips.Action]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/actionbuilder/buildeither(first:)",
                    "title": "static func buildEither(first: [Tips.Action]) -> [Tips.Action]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/actionbuilder/buildeither(second:)",
                    "title": "static func buildEither(second: [Tips.Action]) -> [Tips.Action]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/actionbuilder/buildexpression(_:)-1x9ev",
                    "title": "static func buildExpression([Tips.Action]) -> [Tips.Action]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/actionbuilder/buildexpression(_:)-21yaw",
                    "title": "static func buildExpression(Tips.Action) -> [Tips.Action]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/actionbuilder/buildfinalresult(_:)",
                    "title": "static func buildFinalResult([Tips.Action]) -> [Tips.Action]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/actionbuilder/buildlimitedavailability(_:)",
                    "title": "static func buildLimitedAvailability([Tips.Action]) -> [Tips.Action]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/actionbuilder/buildoptional(_:)",
                    "title": "static func buildOptional([Tips.Action]?) -> [Tips.Action]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/actionbuilder/buildpartialblock(accumulated:next:)",
                    "title": "static func buildPartialBlock(accumulated: [Tips.Action], next: [Tips.Action]) -> [Tips.Action]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/actionbuilder/buildpartialblock(first:)",
                    "title": "static func buildPartialBlock(first: [Tips.Action]) -> [Tips.Action]",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tipkit/tips/actionbuilder",
                "title": "Tips.ActionBuilder",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/optionsbuilder/buildblock()",
                    "title": "static func buildBlock() -> some TipOption",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/optionsbuilder/buildeither(first:)",
                    "title": "static func buildEither(first: some TipOption) -> some TipOption",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/optionsbuilder/buildeither(second:)",
                    "title": "static func buildEither(second: some TipOption) -> some TipOption",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/optionsbuilder/buildexpression(_:)-132ru",
                    "title": "static func buildExpression((any TipOption)?) -> some TipOption",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/optionsbuilder/buildexpression(_:)-6xexl",
                    "title": "static func buildExpression([some TipOption]) -> some TipOption",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/optionsbuilder/buildexpression(_:)-9px05",
                    "title": "static func buildExpression(some TipOption) -> some TipOption",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/optionsbuilder/buildexpression(_:)-r6fx",
                    "title": "static func buildExpression([(any TipOption)?]) -> some TipOption",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/optionsbuilder/buildfinalresult(_:)",
                    "title": "static func buildFinalResult(some TipOption) -> [any TipOption]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/optionsbuilder/buildoptional(_:)-4056p",
                    "title": "static func buildOptional([(any TipOption)?]) -> some TipOption",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/optionsbuilder/buildoptional(_:)-5sz66",
                    "title": "static func buildOptional((any TipOption)?) -> some TipOption",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/optionsbuilder/buildpartialblock(accumulated:next:)",
                    "title": "static func buildPartialBlock(accumulated: some TipOption, next: some TipOption) -> some TipOption",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/optionsbuilder/buildpartialblock(first:)",
                    "title": "static func buildPartialBlock(first: some TipOption) -> some TipOption",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tipkit/tips/optionsbuilder",
                "title": "Tips.OptionsBuilder",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/rulebuilder/buildblock()",
                    "title": "static func buildBlock() -> [Tips.Rule]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/rulebuilder/buildeither(first:)",
                    "title": "static func buildEither(first: [Tips.Rule]) -> [Tips.Rule]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/rulebuilder/buildeither(second:)",
                    "title": "static func buildEither(second: [Tips.Rule]) -> [Tips.Rule]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/rulebuilder/buildexpression(_:)-4fme4",
                    "title": "static func buildExpression(Tips.Rule?) -> [Tips.Rule]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/rulebuilder/buildexpression(_:)-51kbv",
                    "title": "static func buildExpression([Tips.Rule]) -> [Tips.Rule]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/rulebuilder/buildexpression(_:)-550io",
                    "title": "static func buildExpression(Tips.Rule) -> [Tips.Rule]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/rulebuilder/buildexpression(_:)-8sdof",
                    "title": "static func buildExpression([Tips.Rule?]) -> [Tips.Rule]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/rulebuilder/buildoptional(_:)-29ezt",
                    "title": "static func buildOptional(Tips.Rule?) -> [Tips.Rule]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/rulebuilder/buildoptional(_:)-62rsn",
                    "title": "static func buildOptional([Tips.Rule?]) -> [Tips.Rule]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/rulebuilder/buildpartialblock(accumulated:next:)",
                    "title": "static func buildPartialBlock(accumulated: [Tips.Rule], next: [Tips.Rule]) -> [Tips.Rule]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/rulebuilder/buildpartialblock(first:)",
                    "title": "static func buildPartialBlock(first: [Tips.Rule]) -> [Tips.Rule]",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tipkit/tips/rulebuilder",
                "title": "Tips.RuleBuilder",
                "type": "struct"
              },
              {
                "title": "Status",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/status/available",
                    "title": "case available",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tipkit/tips/status/invalidated(_:)",
                    "title": "case invalidated(Tips.InvalidationReason)",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tipkit/tips/status/pending",
                    "title": "case pending",
                    "type": "case"
                  }
                ],
                "path": "/documentation/tipkit/tips/status",
                "title": "Tips.Status",
                "type": "enum"
              },
              {
                "title": "Validation",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/invalidationreason/actionperformed",
                    "title": "case actionPerformed",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tipkit/tips/invalidationreason/displaycountexceeded",
                    "title": "case displayCountExceeded",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tipkit/tips/invalidationreason/displaydurationexceeded",
                    "title": "case displayDurationExceeded",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/tipkit/tips/invalidationreason/tipclosed",
                    "title": "case tipClosed",
                    "type": "case"
                  }
                ],
                "path": "/documentation/tipkit/tips/invalidationreason",
                "title": "Tips.InvalidationReason",
                "type": "enum"
              },
              {
                "title": "Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/groupbuilder/buildarray(_:)",
                    "title": "static func buildArray([[any Tip]]) -> [any Tip]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/groupbuilder/buildblock()",
                    "title": "static func buildBlock() -> [any Tip]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/groupbuilder/buildblock(_:)",
                    "title": "static func buildBlock(any Tip...) -> [any Tip]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/groupbuilder/buildeither(first:)",
                    "title": "static func buildEither(first: [any Tip]) -> [any Tip]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/groupbuilder/buildeither(second:)",
                    "title": "static func buildEither(second: [any Tip]) -> [any Tip]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/groupbuilder/buildif(_:)",
                    "title": "static func buildIf([any Tip]?) -> [any Tip]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/groupbuilder/buildpartialblock(accumulated:next:)-85zhp",
                    "title": "static func buildPartialBlock(accumulated: [any Tip], next: [any Tip]) -> [any Tip]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/groupbuilder/buildpartialblock(accumulated:next:)-9e7n3",
                    "title": "static func buildPartialBlock(accumulated: [any Tip], next: any Tip) -> [any Tip]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/groupbuilder/buildpartialblock(first:)-1p551",
                    "title": "static func buildPartialBlock(first: [any Tip]) -> [any Tip]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/groupbuilder/buildpartialblock(first:)-4la8i",
                    "title": "static func buildPartialBlock(first: Never) -> [any Tip]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/groupbuilder/buildpartialblock(first:)-5g4dx",
                    "title": "static func buildPartialBlock(first: any Tip) -> [any Tip]",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/tipkit/tips/groupbuilder/buildpartialblock(first:)-956dz",
                    "title": "static func buildPartialBlock(first: Void) -> [any Tip]",
                    "type": "method"
                  }
                ],
                "path": "/documentation/tipkit/tips/groupbuilder",
                "title": "Tips.GroupBuilder",
                "type": "struct"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/tipkit/tips/maxdisplayduration/init(_:)",
                    "title": "init(TimeInterval)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/tipkit/tips/maxdisplayduration",
                "title": "Tips.MaxDisplayDuration",
                "type": "struct"
              }
            ],
            "path": "/documentation/tipkit/tips",
            "title": "Tips",
            "type": "enum"
          }
        ],
        "path": "/documentation/tipkit",
        "title": "TipKit",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
